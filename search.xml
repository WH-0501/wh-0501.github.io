<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>NAT转发</title>
    <url>/2024/09/07/Linux/NAT%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PC2 通过 enx8e01055d1492 与 PC1 相连</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PC1 通过 wlp8s0 连接互联网</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> iptables -A FORWARD -o wlp8s0 -i enx8e01055d1492 -j ACCEPT</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> iptables -A FORWARD -o enx8e01055d1492 -i wlp8s0 -m state --state ESTABLISHED,RELATED -j ACCEPT</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> iptables -t nat -A POSTROUTING -o wlp8s0 -j MASQUERADE</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保 PC2 默认网关为 enx8e01055d1492 网卡网关</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看现有规则</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">iptables -L -v -n</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">iptables -t nat -L -v -n</span> </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/09/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>网络指令</title>
    <url>/2024/09/17/Linux/%E7%BD%91%E7%BB%9C%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Data 为 1Byte</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ping &lt;IP 地址&gt; -n1 -l1</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>-n count</code>：定义用来测试所发出测试包个数，缺省值为 4。例如：向测试发送 20 个数据包的平均返回时间是多少，最快时间是多少，最慢时间是多少，就可使用该选项</li>
<li><code>-l length</code>：发送缓冲区大小。定义发送数据包大小，默认情况下 windows ping 发送的数据包为 32Bytes，使用该参数可自定义大小，但最大只能 65500Bytes</li>
<li><code>-f</code>：不分段标志。一般数据包会分为几段发送，使用该选项后就不会分段发送了</li>
<li><code>-i ttl</code>：指定 TTL 只在对方系统中停留市场</li>
<li><code>-v tos</code>：将服务类型(type-of-server)设置为 tos 指定的值</li>
<li><code>-r count</code>：在记录路由字段中记录传出和返回的数据包的路由。通过该选项可设定想探测经过的路由个数。即：记录跃点数的路由</li>
<li><code>-s count</code>：计数跃点的时间戳 ms</li>
<li><code>-4/-6</code>：强制使用 IPv4&#x2F;6</li>
</ul>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加时间显示. -c: 表示发送 10 个包后结束。该方式，不能实时显示，而是执行完后统一展示</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ping &lt;IP 地址&gt; -c 10 | awk <span class="string">&#x27;&#123;print $0&quot;\t&quot; strftime(&quot;%Y-%m-%d %H:%M:%S&quot;,systime())&#125;&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ping.exe -t &lt;地址&gt;|Foreach&#123;<span class="string">&quot;&#123;0&#125; - &#123;1&#125;&quot;</span> -f (Get-Date),<span class="variable">$_</span>&#125; <span class="comment"># windows</span></span></span><br></pre></td></tr></table></figure>



<h1 id="ip-指令"><a href="#ip-指令" class="headerlink" title="ip 指令"></a>ip 指令</h1><p>ubuntu 17.04 开始用 <code>ip</code> 指令替代 <code>ifconfig</code></p>
<h2 id="查看网络信息"><a href="#查看网络信息" class="headerlink" title="查看网络信息"></a>查看网络信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 IP 地址</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip addr <span class="comment"># ip a</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -4 addr <span class="comment"># Only show TCP/IP IPv4</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -6 addr <span class="comment"># Only show TCP/IP IPv6</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只显示指定网卡</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip addr show &lt;interface&gt;</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip addr list &lt;interface&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip addr show dev &lt;interface&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只显示运行中的网卡</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> show up</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> /sys/class/net</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看网卡配置信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">networkctl status enp1s0</span></span><br></pre></td></tr></table></figure>



<h2 id="配置输出颜色"><a href="#配置输出颜色" class="headerlink" title="配置输出颜色"></a>配置输出颜色</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -c route</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -c <span class="built_in">link</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -c=always commad <span class="comment"># 默认</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -c=auto <span class="built_in">command</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -c=never <span class="built_in">command</span></span></span><br></pre></td></tr></table></figure>



<h2 id="使能-重启网卡"><a href="#使能-重启网卡" class="headerlink" title="使能&#x2F;重启网卡"></a>使能&#x2F;重启网卡</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">networkd 系统下重启网卡</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> dev &#123;interface&#125; &#123;up/down&#125;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> eth0 up</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> eth0 down</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">NetworkManager 系统下重启网卡</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> nmcli networking off</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> nmcli networking on</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">旧版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig eth0 up</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig eth0 down</span></span><br></pre></td></tr></table></figure>



<h2 id="分配地址"><a href="#分配地址" class="headerlink" title="分配地址"></a>分配地址</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分配 IP 地址</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip addr add &#123;ip_addr/mask&#125; dev &#123;interface&#125;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip addr add 192.168.1.2/24 dev eth0 <span class="comment"># 24 = 255.255.255.0</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip addr add 192.168.0.77/24 broadcast 192.168.0.255 dev eth0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为网卡添加广播地址</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip addr add brd &#123;ADDDRESS-HERE&#125; dev &#123;interface&#125; <span class="comment"># or</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip addr add broadcast &#123;ADDDRESS-HERE&#125; dev &#123;interface&#125;</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过设置/重置网卡前缀的主机位来使用特殊符号（例如 + 和 - ）代替广播地址。此示例中，将地址 192.168.1.50 与网络掩码 255.255.255.0 (/24) 以及标准广播和标签“eth0Home”添加到接口 eth0：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip addr add 192.168.1.50/24 brd + dev eth0 label eth0Home</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip addr add 127.0.0.1/8 dev lo brd + scope host <span class="comment"># 为回环设备添加广播</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">旧版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig eth0 192.168.0.77</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig eth0 192.168.0.77 netmask 255.255.255.0 broadcast 192.168.0.255</span></span><br></pre></td></tr></table></figure>



<h2 id="删除地址"><a href="#删除地址" class="headerlink" title="删除地址"></a>删除地址</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除 IP 地址</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip addr del &#123;ip addr&#125; dev &#123;interface&#125;</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip a del 192.168.1.200/24 dev eth0</span></span><br></pre></td></tr></table></figure>

<p>使用 flush</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：删除 192.168.2.0/24 网段的所有 IP 地址</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -s -s a f to 192.168.2.0/24</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁用 PPP 网卡上的 IP 地址</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -4 addr flush label <span class="string">&quot;ppp*&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁用所有 eth* 网卡 IP 地址</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -4 addr flush label <span class="string">&quot;eth*&quot;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="修改-MAC-地址"><a href="#修改-MAC-地址" class="headerlink" title="修改 MAC 地址"></a>修改 MAC 地址</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> show [NIC] <span class="comment"># NIC 即 Network Interface Card</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> dev [NIC] down <span class="comment"># 修改 MAC 地址需先禁用网卡</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> dev [NIC] address XX:YY:ZZ:AA:BB:CC</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> dev [NIC] up</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig eth0 hw ether 00:0c:29:33:4e:aa</span></span><br></pre></td></tr></table></figure>



<h2 id="ARP-表"><a href="#ARP-表" class="headerlink" title="ARP 表"></a>ARP 表</h2><p>查看 neighbour&#x2F;arp cache</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip n show</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip neigh show</span></span><br></pre></td></tr></table></figure>

<p>最后一个字段显示该条目的“邻居不可达检测”机器的状态：</p>
<ul>
<li><strong>STALE</strong> – The neighbour is valid, but is probably already unreachable, so the kernel will try to check it at the first transmission.</li>
<li><strong>DELAY</strong> – A packet has been sent to the stale neighbour and the kernel is waiting for confirmation.</li>
<li><strong>REACHABLE</strong> – The neighbour is valid and apparently reachable.</li>
</ul>
<p>添加 ARP </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip neigh add &#123;IP-HERE&#125; lladdr &#123;MAC/LLADDRESS&#125; dev &#123;interface&#125; nud &#123;STATE&#125;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip neigh add 192.168.1.5 lladdr 00:1a:30:38:a8:00 dev eth0 nud perm</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">arp -i eth0 -s 192.168.0.1 00:11:22:33:44:55</span></span><br></pre></td></tr></table></figure>

<p>其中，neighbour state(nud)：</p>
<ul>
<li>permanent：永久有效，只能通过管理方式删除</li>
<li>noarp：邻居条目有效。不会尝试验证此条目，但可以在其生命周期到期时将其删除</li>
<li>stale：邻居条目有效但可疑。如果 ip neigh 的此选项有效且该命令未更改地址，则该选项不会更改邻居状态</li>
<li>reachable：邻居条目在可达性超时到期之前一直有效</li>
</ul>
<p>删除 ARP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip neigh del &#123;IPAddress&#125; dev &#123;interface&#125;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip neigh del 192.168.1.5 dev eth1</span></span><br></pre></td></tr></table></figure>



<p>修改状态及刷新 ARP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将设备 eth1 上的邻居 192.168.1.100 的状态更改为可达</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip neigh chg 192.168.1.100 dev eth1 nud reachable</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刷新 ARP</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -s -s n f &#123;IPAddress&#125;</span></span><br></pre></td></tr></table></figure>



<p>Set ARP resolution off on one device</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁用 ARP</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 arp off</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig -arp eth0</span></span><br></pre></td></tr></table></figure>



<h2 id="子网卡"><a href="#子网卡" class="headerlink" title="子网卡"></a>子网卡</h2><p>即 alias</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip addr add 10.0.0.1/8 dev eth0 label eth0:1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig eth0:1 10.0.0.1/8</span></span><br></pre></td></tr></table></figure>



<h2 id="路由操作"><a href="#路由操作" class="headerlink" title="路由操作"></a>路由操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看路由表</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip r/route</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip r/route list</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip r/route list [options]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip r/route show</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">route</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加路由</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip route add &#123;NETWORK/MASK&#125; via &#123;GATEWAYIP&#125;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip route add &#123;NETWORK/MASK&#125; dev &#123;DEVICE&#125;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Add default route using ip ##</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip route add default &#123;NETWORK/MASK&#125; dev &#123;DEVICE&#125;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip route add default &#123;NETWORK/MASK&#125; via &#123;GATEWAYIP&#125;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">route add -net &#123;NETWORK/MASK&#125; dev &#123;DEVICE&#125;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除路由</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip route del &#123;route&#125;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip route del default <span class="comment"># 删除默认网关</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">route del --net &#123;NETWORK/MASK&#125; dev &#123;DEVICE&#125;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 Gateway</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip route add 192.168.4.0/24 via 192.168.4.1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">route add -net 192.168.4.0/24 gw 192.168.4.1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询到给定 IP 地址的数据包将路由到哪个接口</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip route get 192.168.88.77</span></span><br></pre></td></tr></table></figure>



<h2 id="修改-txqueuelen"><a href="#修改-txqueuelen" class="headerlink" title="修改 txqueuelen"></a>修改 txqueuelen</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> txqueuelen &#123;NUMBER&#125; dev &#123;interface&#125;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig eth0 txqueuelen 1200</span></span><br></pre></td></tr></table></figure>



<h2 id="修改-MTU"><a href="#修改-MTU" class="headerlink" title="修改 MTU"></a>修改 MTU</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> mtu &#123;NUMBER&#125; dev &#123;interface&#125;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig &#123;interface&#125; mtu &#123;NUMBER&#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig eth0 mtu 2000</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 mtu 2000</span></span><br></pre></td></tr></table></figure>



<h2 id="设置-multicast-标志"><a href="#设置-multicast-标志" class="headerlink" title="设置 multicast 标志"></a>设置 multicast 标志</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 使能或禁用 multicast 标志</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 multicast on</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig eth0 multicast</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置 all multicast 模式</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 allmulti on</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig eth0 allmulti</span></span><br></pre></td></tr></table></figure>



<h2 id="设置-promiscuous-模式"><a href="#设置-promiscuous-模式" class="headerlink" title="设置 promiscuous 模式"></a>设置 promiscuous 模式</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig eth0 promisc  <span class="comment"># 开启</span></span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig eth0 -promisc <span class="comment"># 禁用</span></span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 promisc on</span> </span><br></pre></td></tr></table></figure>



<h1 id="指令对比"><a href="#指令对比" class="headerlink" title="指令对比"></a>指令对比</h1><table>
<thead>
<tr>
<th><strong>Old command (Deprecated)</strong></th>
<th><strong>New command</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>ifconfig enp6s0 down</code></td>
<td><code>ip link set enp6s0 down</code></td>
</tr>
<tr>
<td><code>ifconfig enp6s0 up</code></td>
<td><code>ip link set enp6s0 up</code></td>
</tr>
<tr>
<td><code>ifconfig enp6s0 192.168.2.24</code></td>
<td><code>ip addr add 192.168.2.24/24 dev enp6s0</code></td>
</tr>
<tr>
<td><code>ifconfig enp6s0 netmask 255.255.255.0</code></td>
<td><code>ip addr add 192.168.1.1/24 dev enp6s0</code></td>
</tr>
<tr>
<td><code>ifconfig enp6s0 mtu 9000</code></td>
<td><code>ip link set enp6s0 mtu 9000</code></td>
</tr>
<tr>
<td><code>ifconfig enp6s0:0 192.168.2.25</code></td>
<td><code>ip addr add 192.168.2.25/24 dev enp6s0</code></td>
</tr>
<tr>
<td><code>netstat</code></td>
<td><code>ss</code></td>
</tr>
<tr>
<td><code>netstat -tulpn</code></td>
<td><code>ss -tulpn</code></td>
</tr>
<tr>
<td><code>netstat -neopa</code></td>
<td><code>ss -neopa</code></td>
</tr>
<tr>
<td><code>netstat -g</code></td>
<td><code>ip maddr</code></td>
</tr>
<tr>
<td><code>route</code></td>
<td><code>ip r </code></td>
</tr>
<tr>
<td><code>route add -net 192.168.2.0 netmask 255.255.255.0 dev enp6s0</code></td>
<td><code>ip route add 192.168.2.0/24 dev enp6s0</code></td>
</tr>
<tr>
<td><code>route add default gw 192.168.2.254</code></td>
<td><code>ip route add default via 192.168.2.254</code></td>
</tr>
<tr>
<td><code>arp -a</code></td>
<td><code>ip neigh</code></td>
</tr>
<tr>
<td><code>arp -v</code></td>
<td><code>ip -s neigh</code></td>
</tr>
<tr>
<td><code>arp -s 192.168.2.33 1:2:3:4:5:6</code></td>
<td><code>ip neigh add 192.168.3.33 lladdr 1:2:3:4:5:6 dev enp6s0</code></td>
</tr>
<tr>
<td><code>arp -i enp6s0 -d 192.168.2.254</code></td>
<td><code>ip neigh del 192.168.2.254 dev wlp7s0</code></td>
</tr>
</tbody></table>
<h1 id="ipcalc"><a href="#ipcalc" class="headerlink" title="ipcalc"></a>ipcalc</h1><p>指令安装： <code>sudo apt install ipcalc</code></p>
<ul>
<li><code>-c/–check</code>: 检查 IP 地址是否为非法地址</li>
<li><code>-4/–ipv4</code>: 验证 IPv4 地址</li>
<li><code>-6/–ipv6</code>: 验证 IPv6</li>
<li><code>-b/–broadcast</code>: 由给定的IP地址和网络掩码计算出广播地址</li>
<li><code>-h/–hostname</code>: 显示给定IP地址所对应的主机名</li>
<li><code>-m/–netmask</code>: 由给定的IP地址计算器网络掩码</li>
<li><code>-p/–prefix</code>: 显示给定的掩码或IP地址的前缀</li>
<li><code>-n/–network</code>: 由给定的IP地址和网络掩码计算网络地址</li>
<li><code>-s/–silent</code>: 安静模式</li>
</ul>
<img src="/2024/09/17/Linux/%E7%BD%91%E7%BB%9C%E6%8C%87%E4%BB%A4/ipcalc.png" class="" title="..&#x2F;_images&#x2F;ipcalc.png">



<h1 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h1><p>curl 是常用的命令行工具，用来请求 Web 服务器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl www.baidu.com -v <span class="comment"># 显示请求详细信息</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cur -X <span class="comment"># 指定请求方式</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cur -X GET http://localhost:8080/search?data=123  <span class="comment"># -X GET是可选的</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -X POST -d<span class="string">&quot;data=123&amp;key=456&quot;</span> http://localhost:8080/search -v</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 -H 指定头部信息，使用 JSON 形式的 POST 数据</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -H <span class="string">&quot;Content-Type:application/json&quot;</span> -d <span class="string">&#x27;&#123;&quot;data&quot;:&quot;123&quot;,&quot;key&quot;:&quot;456&quot;&#125;&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">    http://localhost:8080/search -v</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -xip:port www.baidu.com <span class="comment"># -x 指定 ip 及端</span></span></span><br></pre></td></tr></table></figure>



<h1 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h1><p>功能强大的网络工具，扫描端口。其作用包括：</p>
<ul>
<li>实现任意TCP&#x2F;UDP端口的侦听，nc可以作为server以TCP或UDP方式侦听指定端口</li>
<li>端口的扫描，nc可以作为client发起TCP或UDP连接</li>
<li>机器之间传输文件</li>
<li>机器之间网络测速</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查某 1 个域名/ip,某 1 个 TCP 端口的联通性</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nc -v -z eternalcenter.com 443</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查某 1 个域名某 1 个 UDP 端口的联通性</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nc -v -z -u eternalcenter.com 69</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">组播测试指令</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;测试数据&quot;</span>|nc -s 指定收发的IP地址 -4u 组播地址 组播端口号</span></span><br></pre></td></tr></table></figure>



<h1 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h1><p>nslookup - name server lookup。查询 DNS 的记录，查询域名解析是否正常。</p>
<p>指令格式： <code>nslookup domain [dns-server]</code></p>
<p>两种模式：</p>
<ul>
<li>交互：命令行直接输入 nslookup 回车</li>
<li>非交互：指令后跟要查询的域名&#x2F;IP地址</li>
</ul>
<h1 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h1><img src="/2024/09/17/Linux/%E7%BD%91%E7%BB%9C%E6%8C%87%E4%BB%A4/dig.png" class="" title="..&#x2F;_images&#x2F;dig.png">

<ul>
<li><code>-x</code>：反向查询。即：已知 DNS，查询该 DNS 域名</li>
<li><code>@&lt;DNS&gt;</code>：从指定的 DNS 服务器上查询</li>
<li><code>+trace</code>：跟踪整个查询过程</li>
</ul>
<h2 id="常见-DNS-记录的类型"><a href="#常见-DNS-记录的类型" class="headerlink" title="常见 DNS 记录的类型"></a>常见 DNS 记录的类型</h2><table>
<thead>
<tr>
<th>类型</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>地址记录，用来指定域名的 IPv4 地址，如果需要将域名指向一个 IP 地址，就需要添加 A 记录</td>
</tr>
<tr>
<td>AAAA</td>
<td>用来指定主机名(或域名)对应的 IPv6 地址记录</td>
</tr>
<tr>
<td>CNAME</td>
<td>如果需要将域名指向另一个域名，再由另一个域名提供 ip 地址，就需要添加 CNAME 记录</td>
</tr>
<tr>
<td>MX</td>
<td>如果需要设置邮箱，让邮箱能够收到邮件，需要添加 MX 记录</td>
</tr>
<tr>
<td>NS</td>
<td>域名服务器记录，如果需要把子域名交给其他 DNS 服务器解析，就需要添加 NS 记录</td>
</tr>
<tr>
<td>SOA</td>
<td>这种记录是所有区域性文件中的强制性记录。它必须是一个文件中的第一个记录</td>
</tr>
<tr>
<td>TXT</td>
<td>可以写任何东西，长度限制为 255。绝大多数的 TXT记录是用来做 SPF 记录(反垃圾邮件)</td>
</tr>
</tbody></table>
<h1 id="traceroute-tracepath"><a href="#traceroute-tracepath" class="headerlink" title="traceroute&amp;tracepath"></a>traceroute&amp;tracepath</h1><p><code>traceroute</code> 和 <code>tracepath</code> 均用于 <strong>确定数据包从源主机到目标主机所采取的路径</strong>。</p>
<p>两者的区别：</p>
<ul>
<li>工作原理：Traceroute 在数据包中加入一个 TTL（Time to Live）值，每次经过一个路由器时此值减一。当 TTL 的值减为零时，路由器应该丢弃数据包，然后向源主机发送一条 ICMP echo 消息。通过检测这些回显消息，Traceroute 工具就可以确定从源主机到目标主机所经过的所有路由器；Tracepath 使用 MTU 探测技术，自动检测通过每个路由器的最大传输单位（MTU），以便有效地确定路径</li>
<li>使用方式：Traceroute 使用命令 traceroute 或 tracert，默认使用 ICMP 数据包，并且 <strong>需要管理员权限</strong>；Tracepath 使用命令 tracepath，它默认使用 UDP 数据包，并且不需要管理员权限</li>
<li>结果显示：Traceroute 显示 <strong>每个路由器的 IP 地址、域名、RTT（Round Trip Time）和 TTL 值</strong>；Tracepath显示 <strong>每个路由器的 IP 地址、域名、RTT（Round Trip Time）和 MTU 值</strong></li>
<li>功能：Traceroute 可以使用 -n 选项来阻止 DNS 解析，以加快操作速度；Tracepath 可以使用 -p 选项来指定要使用的端口号</li>
</ul>
<blockquote>
<p>显示 <a href="#id9">*</a>，可能防火墙封掉了 ICMP 的返回信息；或者添加 -I 选项。其它解决方法：</p>
<ul>
<li>配置 ICMP 超时报文功能：<code>ip ttl-expires enable</code></li>
<li>关闭 tracert 报文共计防范功能：<code>undo firewall defend tracert enable</code> 谨慎使用</li>
</ul>
</blockquote>
<h2 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h2><p>参数：</p>
<ul>
<li>-d: 使用Socket层级的排错功能</li>
<li>-f: 设置第一个检测数据包的存活数值TTL的大小</li>
<li>-F: 设置勿离断位</li>
<li>-g: 设置来源路由网关，最多可设置8个</li>
<li>-i: 使用指定的网络界面送出数据包</li>
<li>-I: 使用ICMP回应取代UDP资料信息</li>
<li>-m: 设置检测数据包的最大存活数值TTL的大小</li>
<li>-n: 直接使用IP地址而非主机名称</li>
<li>-p: 设置UDP传输协议的通信端口</li>
<li>-r: 忽略普通的Routing Table，直接将数据包送到远端主机上</li>
<li>-s: 设置本地主机送出数据包的IP地址</li>
<li>-t: 设置检测数据包的TOS数值</li>
<li>-v: 详细显示指令的执行过程</li>
<li>-w: 设置等待远端主机回报的时间</li>
<li>-x: 开启或关闭数据包的正确性检验</li>
</ul>
<blockquote>
<p>注意，每次检测都同时发送 3 个数据包，因此打印出来三个时间。此外，如果某一个数据报超时没有返回，则时间显示为 *</p>
</blockquote>
<h1 id="mtr"><a href="#mtr" class="headerlink" title="mtr"></a>mtr</h1><p>mtr 来源于 Matt’s TraceRoute。是一个网络诊断工具，将 <code>ping</code> 和 <code>traceroute</code> 命令的功能合二为一。例如： <code>mtr -n www.baidu.com</code></p>
<p>结果中的 * 表示：可能是防火墙封掉了ICMP的返回信息，或者未在预期的超时时间内确认数据包。</p>
<h1 id="nmcli"><a href="#nmcli" class="headerlink" title="nmcli"></a>nmcli</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示设备列表</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli device status</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示主机名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli general hostnam</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置主机名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli general hostname new-hostname.example.com</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 也可使用 hostnamectl 设置主机名</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hostnamectl status --static <span class="comment"># 显示当前主机名</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hostnamectl set-hostname new-hostname.example.com <span class="comment"># 设置主机名</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认网关</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 例如：将 example 连接上的默认网关的 IPv4 地址设为 192.0.2.1</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli connection modify example ipv4.gateway <span class="string">&quot;192.0.2.1&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 例如：将 example 连接上的默认网关的 IPv6 地址设为 2001:db8:1::1</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli connection modify example ipv4.gateway <span class="string">&quot;2001:db8:1::1&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">临时设置为 unmanaged。永久设置需在 NetworkManager 配置文件中指定</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli device <span class="built_in">set</span> enp1s0 managed no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出 NetworkManager 连接配置文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli connection show [connection名字]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建额外的连接配置文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli connection add con-name &lt;connection-name&gt; ifname &lt;device-name&gt; <span class="built_in">type</span> ethernet</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重命名连接配置文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli connection modify <span class="string">&quot;Wired connection 1&quot;</span> connection.id <span class="string">&quot;&lt;connection名字&gt;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使能 DHCP, IPv4</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli connection modify &lt;connection名字&gt; ipv4.method auto</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 IPv4 地址、掩码、默认网关、DNS 服务器和搜索域</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli connection modify &lt;connection名字&gt;N ipv4.method manual ipv4.addresses 192.0.2.1/24 ipv4.gateway 192.0.2.254 ipv4.dns 192.0.2.200 ipv4.dns-search example.com</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 IPv6 使能 DHCP(SLAAC)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli connection modify &lt;connection名字&gt; ipv6.method auto</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 IPv4 地址、掩码、默认网关、DNS 服务器和搜索域</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli connection modify &lt;connection名字&gt; ipv6.method manual ipv6.addresses 2001:db8:1::fffe/64 ipv6.gateway 2001:db8:1::fffe ipv6.dns 2001:db8:1::ffbb ipv6.dns-search example.com</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">激活配置</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli connection up &lt;connection名字&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>nmcli</code> 支持交互式配置。</p>
<h2 id="nmcli-连接-WIFI"><a href="#nmcli-连接-WIFI" class="headerlink" title="nmcli 连接 WIFI"></a>nmcli 连接 WIFI</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 启用 wifi radio</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> nmcli radio wifi on</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 查看可用 WIFI 网络</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> nmcli device wifi list</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 连接 WIFI</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli device wifi connect &lt;SSID&gt; --ask</span></span><br><span class="line">password: &lt;输入密码&gt;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 或者不使用交互模式，直接输入密码</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli device wifi connect &lt;SSID&gt; &lt;password&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 若需要静态 IP</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># IPv4</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli connection modify &lt;SSID&gt; ipv4.method manual ipv4.addresses 192.0.2.1/24 ipv4.gateway 192.0.2.254 ipv4.dns 192.0.2.200 ipv4.dns-search example.com</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># IPv6</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli connection modify &lt;SSID&gt; ipv6.method manual ipv6.addresses 2001:db8:1::1/64 ipv6.gateway 2001:db8:1::fffe ipv6.dns 2001:db8:1::ffbb ipv6.dns-search example.com</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5. 重新激活连接</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli connection up &lt;SSID&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6. 显示活跃连接</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmcli connect show --active</span></span><br></pre></td></tr></table></figure>



<h1 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">**************************</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存文件同时显示出来</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># -v 是显示详细情况，但在 -w 的参数影响下，只显示 got N</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-U 文件及时写入，而不是缓存一些后再写</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-w 写入文件，后跟文件名，此例中后跟 - 表示标准输入/输出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用 <span class="built_in">tee</span> 把标准输出保存成文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用 tcpdump -r 把标准输入解析显示出来</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">**************************</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tcpdump -v -U -w - | <span class="built_in">tee</span> test.pcap | tcpdump -r -</span></span><br></pre></td></tr></table></figure>



<h1 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h1><p>netstat的输出结果可以分为两个部分:</p>
<blockquote>
<ul>
<li><strong>Active Internet connections</strong> 有源TCP连接，其中”Recv-Q”和”Send-Q”指接收队列和发送队列。这些数字一般都应该是0。如果不是则表示软件包正在队列中堆积。这种情况只能在非常少的情况见到。</li>
<li><strong>Active UNIX domain sockets</strong> 有源Unix域套接口(和网络套接字一样，但是只能用于本机通信，性能可以提高一倍)。</li>
</ul>
</blockquote>
<p>列名解释：</p>
<blockquote>
<ul>
<li>Proto：显示连接使用的协议。</li>
<li>RefCnt：表示连接到本套接口上的进程号。</li>
<li>Types：显示套接口的类型。</li>
<li>State：显示套接口当前的状态。</li>
<li>Path：表示连接到套接口的其它进程使用的路径名。</li>
</ul>
</blockquote>
<p>常用选项：</p>
<blockquote>
<ul>
<li>-t : 指明显示TCP端口，t 是 TCP 的首字母</li>
<li>-u : 指明显示UDP端口，u 是 UDP 的首字母</li>
<li>-l : 仅显示监听套接字，l 是 listening 的首字母</li>
<li>-p : 显示进程标识符和程序名称，每一个套接字&#x2F;端口都属于一个程序，p是program的首字母</li>
<li>-n : 不进行DNS轮询，显示IP(可以加速操作)，n是numeric的首字母，以数字形式显示地址和端口号。否则显示主机名等信息</li>
<li>-a : 显示所有连接和侦听端口，a是all的首字母</li>
<li>-o : 显示拥有的每个连接关联的进程id，o是own的首字母</li>
<li>-c : 持续输出</li>
<li>-x : Unix 套接字</li>
</ul>
</blockquote>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看套接字状态。state[key]: 同类状态个数统计。各状态说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   CLOSED：无连接是活动的或正在进行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   LISTEN：服务器在等待进入呼叫</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   SYN_RECV：一个连接请求已经到达，等待确认</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   SYN_SENT：应用已经开始，打开一个连接</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   ESTABLISHED：正常数据传输状态</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   FIN_WAIT1：应用说它已经完成</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   FIN_WAIT2：另一边已同意释放</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   ITMED_WAIT：等待所有分组死掉</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   CLOSING：两边同时尝试关闭</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   TIME_WAIT：另一边已初始化一个释放</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   LAST_ACK：等待所有分组死掉</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">netstat -n | awk <span class="string">&#x27;/^tcp/ &#123;++state[$NF]&#125; END &#123;for(key in state) print key,&quot;\t&quot; state[key]&#125;&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat -n | awk <span class="string">&#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a,&quot;\t&quot; S[a]&#125;&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有 TCP 连接</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat -n | awk <span class="string">&#x27;/^tcp/&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分别只显示主机、端口和用户名 (host, port or user)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netsat -a --numeric-ports</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netsat -a --numeric-hosts</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netsat -a --numeric-users</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 TCP 各状态列表</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat -nat |awk <span class="string">&#x27;&#123;print $6&#125;&#x27;</span>  <span class="comment"># 注意，不能是双引号</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat -nat |awk <span class="string">&#x27;&#123;print $6&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c <span class="comment"># 统计数量</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat -nat |awk <span class="string">&#x27;&#123;print $6&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -rn <span class="comment"># 排序。从多到少</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计 TCP 连接数量</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat -ant | <span class="built_in">wc</span> -l</span></span><br></pre></td></tr></table></figure>

<p>参考： <a href="https://blog.csdn.net/qq_44691484/article/details/123950403">netstat 查看实时网络情况</a></p>
<h1 id="vnstat"><a href="#vnstat" class="headerlink" title="vnstat"></a>vnstat</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前实时流量情况. == iftop</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vnstat -l</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询指定网卡流量使用情况</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vnstat -i eth0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当天流浪使用情况。 -m：按月；-h：按小时</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vnstat -d</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看前10天的流量</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vnstat --top10</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按月显示，并生成图片。需安装 vnstati</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vnstati -m -i eth0 -o monthly.png</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成概要图</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vnstati -vs -i eth0 -o summary.png</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 vnstat 后台进程监测网络情况</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vnstatd -d</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存 文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vnstat --xml -i wlo1 &gt;output.xml</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vnstat --json -i wlo1 &gt;output.xml</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vnstat --oneline -i wlo1 &gt;output.txt</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vnstat 结果保存到文件，同时显示在终端</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> vnstat -l 2&gt;&amp;1 | <span class="built_in">tee</span> vnstat-20230809-1400.log</span></span><br></pre></td></tr></table></figure>

<p>参考：</p>
<ul>
<li><a href="https://www.baeldung.com/linux/bandwidth-usage-monitoring">Monitor Internet Bandwidth Usage on Linux</a></li>
<li><a href="https://phoenixnap.com/kb/linux-network-bandwidth-monitor-traffic">Best Tools to Monitor Network Bandwidth on a Linux Server</a></li>
</ul>
<h1 id="iftop"><a href="#iftop" class="headerlink" title="iftop"></a>iftop</h1><p>监测网络流量。</p>
<img src="/2024/09/17/Linux/%E7%BD%91%E7%BB%9C%E6%8C%87%E4%BB%A4/iftop.png" class="" title="..&#x2F;_images&#x2F;iftop.png">



<h1 id="proc-net-tcp"><a href="#proc-net-tcp" class="headerlink" title="&#x2F;proc&#x2F;net&#x2F;tcp"></a>&#x2F;proc&#x2F;net&#x2F;tcp</h1><img src="/2024/09/17/Linux/%E7%BD%91%E7%BB%9C%E6%8C%87%E4%BB%A4/tcp%E8%BF%9E%E6%8E%A5%E6%96%87%E4%BB%B6.png" class="" title="..&#x2F;_images&#x2F;tcp连接文件.png">



<h1 id="ss-查看-socket-使用"><a href="#ss-查看-socket-使用" class="headerlink" title="ss 查看 socket 使用"></a>ss 查看 socket 使用</h1><p><code>ss</code> 指令：(或 <code>cat /proc/net/sockstat</code>)</p>
<ul>
<li>-a, –all: 显示监听和未监听(即:已创建的连接)的socket</li>
<li>-l, –listening只显示监听的套接字(这些套接字默认省略)</li>
<li>-m, –memory查看socket使用的内存</li>
<li>-n, –numeric不解析服务名称</li>
<li>-r, –resolve尝试解析数字地址&#x2F;端口</li>
<li>-p, –processes显示socket对应的进程</li>
<li>-i, –info显示内部 TCP 信息</li>
<li>-s, –summary打印统计摘要. This option does not parse socket lists obtaining summary from various sources. It is useful when amount of sockets is so huge that parsing &#x2F;proc&#x2F;net&#x2F;tcp is painful.</li>
<li>-o, –options显示 timer 信息</li>
<li>-e, –extended显示详细信息</li>
<li>-t, –tcp只显示 TCP 套接字</li>
<li>-u, –udp只显示 UDP 套接字</li>
<li>-d, –dccp显示 DCCP 套接字</li>
<li>-w, –raw显示 RAW 套接字</li>
<li>-x, –unix显示 Unix domain 套接字</li>
<li>-f FAMILY, –family&#x3D;FAMILY显示指定协议族(例如: AF_INET 等)套接字</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>网络指令</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-compose</title>
    <url>/2024/09/22/Docker/Docker-compose/</url>
    <content><![CDATA[<p>compose、machine 和 swarm 是 docker 原生提供的三大编排工具。</p>
<h1 id="Compose"><a href="#Compose" class="headerlink" title="Compose"></a>Compose</h1><p>Compose 是一个使用 Docker 定义和运行复杂应用程序的工具。<strong>使用 Compose，可以在单个文件中定义一个多容器应用程序</strong>，然后在单个命令中启动应用程序，该命令会执行运行所需的所有操作。所以基本上，这将有助于缩短需要在 Docker CLI 中键入的内容。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PIP 安装</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> pip install docker-compose</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">手动安装</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">rm</span> /usr/local/bin/docker-compose</span></span><br></pre></td></tr></table></figure>



<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>Docker Compose 默认配置文件名为 <code>docker_compose.yaml</code>。也可以使用 <code>-f</code> 参数指定具体文件。</p>
<p>Docker Compose 的 YAML 包含 4 个一级 key：</p>
<ul>
<li><strong>version</strong>：必须指定，且总是位于文件第一行。指定 Compose 文件格式的版本（注意：不是 Compose 或 docker engine 的版本）。 Compose 文件格式有3个版本,分别为1, 2.x 和 3.x。目前主流的为 3.x 其支持 docker 1.13.0 及其以上的版本。参考：<a href="https://docs.docker.com/compose/compose-file/compose-versioning/">compose-version</a></li>
<li><strong>services</strong>：用于定义不同的应用服务。Docker Compose 会将每个服务部署在各自的容器中。services 下面的第一级别的 key 即为 service 的名称</li>
<li><strong>networks</strong>：定义网络信息。<strong>默认情况下，Docker Compose 会创建 bridge 网络。这是一种单主机网络，只能够实现同一主机上容器的连接</strong>。当然，也可以使用 driver 属性来指定不同的网络类型</li>
<li><strong>volumes</strong>：定义卷信息</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">volumes:</span><br><span class="line">  <span class="comment"># 绝对路径</span></span><br><span class="line">  - <span class="string">&quot;/mydata/docker_mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">  <span class="comment"># 相对路径，相对当前 docker-compose.yml 文件所在目录</span></span><br><span class="line">  - “./conf:/etc/mysql/conf.d“</span><br><span class="line">  <span class="comment"># 匿名挂载，匿名挂载只需要写容器目录即可，容器外对应的目录会在 /var/lib/docker/volume 中生成</span></span><br><span class="line">  - <span class="string">&quot;/var/lib/mysql&quot;</span></span><br><span class="line">  <span class="comment"># 具名挂载，就是给数据卷起了个名字，容器外对应的目录会在 /var/lib/docker/volume 中生成</span></span><br><span class="line">  - <span class="string">&quot;mysql-data-volume:/var/lib/mysql&quot;</span></span><br></pre></td></tr></table></figure>



<p>其它 key：</p>
<ul>
<li><p><strong>build</strong>：配置构建时，Compose 会利用它自动构建镜像，该值可以是一个路径，也可以是一个对象，用于指定 Dockerfile 参数</p>
</li>
<li><ul>
<li>context：指定 Dockerfile 文件路径</li>
<li>dockerfile：指定 context 目录下的 Dockerfile 名称</li>
<li>args：该 Dockerfile 在 build 过程中需要的参数。(等同于 docker container build –build-arg)</li>
<li>cache_from：v3.2 新增参数。指定缓存镜像列表。 (等同于 docker container build –cache_from)</li>
<li>labels：v3.3 新增参数。设置镜像元数据。(等同于 docker container build –labels)</li>
<li>shm_size：v3.5 新增。设置容器 &#x2F;dev&#x2F;shm 分区大小(等同于 docker container build –shm-size)</li>
</ul>
</li>
<li><pre><code class="docker">build: ./dir
---------------
build:
    context: ./dir
    dockerfile: Dockerfile
    args:
        buildno: 1
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ​            </span><br><span class="line"></span><br><span class="line">- **command**：覆盖容器启动后默认执行的命令</span><br><span class="line"></span><br><span class="line">```docker</span><br><span class="line">command: bundle exec thin -p 3000</span><br><span class="line">----------------------------------</span><br><span class="line">command: [bundle,exec,thin,-p,3000]</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<p>​    </p>
<ul>
<li>entrypoint：覆盖容器的默认 entrypoint 指令(等同于 docker run –entrypoint)</li>
<li><strong>dns</strong>：配置 dns 服务器。可以是一个值或列表</li>
<li><strong>dns_search</strong>：配置 DNS 搜索域。可以是一个值或列表</li>
</ul>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">dns: <span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line">------------</span><br><span class="line">dns:</span><br><span class="line">    - <span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line">    - <span class="number">9.9</span>.<span class="number">9.9</span></span><br><span class="line">    </span><br><span class="line">dns_search: example.com</span><br><span class="line">------------------------</span><br><span class="line">dns_search:</span><br><span class="line">    - dc1.example.com</span><br><span class="line">    - dc2.example.com    </span><br></pre></td></tr></table></figure>

<p>​              </p>
<ul>
<li><strong>environment</strong>：环境变量配置。可以用数组或字典两种方式</li>
<li><strong>env_file</strong>：从文件中获取环境变量，可以指定一个文件路径或路径列表，其<strong>优先级低于 environment</strong> 指定的环境变量</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">environment:</span><br><span class="line">    RACK_ENV: development</span><br><span class="line">    SHOW: <span class="string">&#x27;ture&#x27;</span></span><br><span class="line">-------------------------</span><br><span class="line">environment:</span><br><span class="line">    - RACK_ENV=development</span><br><span class="line">    - SHOW=ture</span><br><span class="line">    </span><br><span class="line">env_file: .<span class="keyword">env</span></span><br><span class="line">---------------</span><br><span class="line">env_file:</span><br><span class="line">    - ./common.<span class="keyword">env</span>    </span><br></pre></td></tr></table></figure>



<ul>
<li><strong>expose</strong>：暴露端口，只将端口暴露给连接的服务，而不暴露给主机</li>
<li><strong>image</strong>：指定服务所使用的镜像</li>
<li><strong>network_mode</strong>：设置网络模式</li>
</ul>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">network_mode: <span class="string">&quot;bridge&quot;</span></span><br><span class="line">network_mode: <span class="string">&quot;host&quot;</span></span><br><span class="line">network_mode: <span class="string">&quot;none&quot;</span></span><br><span class="line">network_mode: <span class="string">&quot;service:[service name]&quot;</span></span><br><span class="line">network_mode: <span class="string">&quot;container:[container name/id]&quot;</span></span><br></pre></td></tr></table></figure>

<p>​         </p>
<ul>
<li><strong>ports</strong>：对外暴露的端口定义，和 expose 对应</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">ports:   <span class="comment"># 暴露端口信息  - &quot;宿主机端口:容器暴露端口&quot;</span></span><br><span class="line">  - <span class="string">&quot;8763:8763&quot;</span></span><br><span class="line">  - <span class="string">&quot;8763:8763&quot;</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p><strong>links</strong>：将指定容器连接到当前连接，可以设置别名，避免ip方式导致的容器重启动态改变的无法连接情况</p>
</li>
<li><p><strong>logs</strong>：日志输出信息</p>
</li>
<li><p><strong>deploy</strong>：v3.x 版本，指定与部署和运行服务相关的配置。deploy 部分是 docker stack 使用的, docker stack 依赖 docker swarm</p>
</li>
<li><ul>
<li><p>endpoint_mode：v3.3 新增，指定服务暴露方式</p>
</li>
<li><ul>
<li><p>vip：Docker 为该服务分配一个虚拟 IP(VIP)，作为客户端的访问服务的地址</p>
</li>
<li><p>dnsrr：DNS 轮询，Docker 为该服务设置 DNS 条目，使得服务名称的 DNS 查询返回一个 IP 地址列表，客户端直接访问其中的一个地址</p>
</li>
<li><p>labels：指定服务的标签</p>
</li>
<li><p>mode：指定 delopy 的模式</p>
</li>
<li><ul>
<li>global：每个集群节点都只有一个容器</li>
<li>replicated：用户可指定集群中容器的数量</li>
</ul>
</li>
<li><p>placement：</p>
</li>
<li><p>replicate：mode 为 replicated 时，指定容器副本数量</p>
</li>
<li><p>resources：资源限制</p>
</li>
<li><ul>
<li><p>limits：设置容器资源限制</p>
</li>
<li><ul>
<li>cpus：”0.5” 表示最多只能使用 50% CPU</li>
<li>memory：50M 表示最多智能使用 50M 内存空间</li>
</ul>
</li>
<li><p>reservations：设置为容器预留的系统资源</p>
</li>
<li><ul>
<li>cpus：”0.2” 保留 20% 的 CPU</li>
<li>memory：20M 保留 20M 内存</li>
</ul>
</li>
</ul>
</li>
<li><p>restart_policy：定义容器重启策略, <strong>用于代替 restart 参数</strong></p>
</li>
<li><ul>
<li><p>condition：定义容器重启策略(接受三个参数)</p>
</li>
<li><ul>
<li>none：不尝试重启</li>
<li>on-failure：只有当容器内部应用程序出现问题才会重启</li>
<li>any：无论如何都会尝试重启(默认)</li>
</ul>
</li>
<li><p>delay：尝试重启的间隔时间(默认为 0s)</p>
</li>
<li><p>max_attempts：尝试重启次数(默认一直尝试重启)</p>
</li>
<li><p>window：检查重启是否成功之前的等待时间(即如果容器启动了, 隔多少秒之后去检测容器是否正常, 默认 0s)</p>
</li>
</ul>
</li>
<li><p>update_config：用于配置更新配置</p>
</li>
<li><ul>
<li><p>parallelism：一次性更新的容器数量</p>
</li>
<li><p>delay：更新一组容器之间的间隔时间</p>
</li>
<li><p>failure_action：定义更新失败的策略</p>
</li>
<li><ul>
<li>continue：继续更新</li>
<li>rollback：回滚更新</li>
<li>pause：暂停更新(默认)</li>
</ul>
</li>
<li><p>monitor：每次更新后的持续时间以监视更新是否失败(单位: ns|us|ms|s|m|h) (默认为0)</p>
</li>
<li><p>max_failure_ratio：回滚期间容忍的失败率(默认值为0)</p>
</li>
<li><p>order：v3.4 版本中新增的参数, 回滚期间的操作顺序</p>
</li>
<li><ul>
<li>stop-first：旧任务在启动新任务之前停止(默认)</li>
<li>start-first：首先启动新任务, 并且正在运行的任务暂时重叠</li>
</ul>
</li>
</ul>
</li>
<li><p>rollback_config：v3.7 版本中新增的参数, 用于定义在 update_config 更新失败的回滚策略</p>
</li>
<li><ul>
<li><p>parallelism：一次回滚的容器数, 如果设置为0, 则所有容器同时回滚</p>
</li>
<li><p>delay：每个组回滚之间的时间间隔(默认为0)</p>
</li>
<li><p>failure_action：定义回滚失败的策略</p>
</li>
<li><ul>
<li>continue：继续回滚</li>
<li>pause：暂停回滚</li>
</ul>
</li>
<li><p>monitor：每次回滚任务后的持续时间以监视失败(单位: ns|us|ms|s|m|h) (默认为0)</p>
</li>
<li><p>max_failure_ratio：回滚期间容忍的失败率(默认值0)</p>
</li>
<li><p>order：回滚期间的操作顺序</p>
</li>
<li><ul>
<li>stop-first：旧任务在启动新任务之前停止(默认)</li>
<li>start-first：首先启动新任务, 并且正在运行的任务暂时重叠</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>devices：指定设备映射列表(等同于 docker run –device)</p>
</li>
<li><p>depends_on：定义容器启动顺序</p>
</li>
</ul>
<h1 id="锚点操作符"><a href="#锚点操作符" class="headerlink" title="锚点操作符 &lt;&lt;"></a>锚点操作符 &lt;&lt;</h1><p>该描述符用于替代和引用 YAML 中已定义的块。即：将已定义好的模板(可以定义在文件顶部，也可以单独定义)插入到多个不同 service 中，减少荣誉和代码重复。</p>
<p>包含三个符号：</p>
<ul>
<li>&amp;：定义锚点，供以后使用</li>
<li>*：引用锚点</li>
<li>&lt;&lt;：用于将引用的块内容插入当前位置</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.4&#x27;</span> <span class="comment"># 定义一个公共配置块，在其他地方可以引用 </span></span><br><span class="line"></span><br><span class="line">common-config: &amp;common </span><br><span class="line">	environment: </span><br><span class="line">		APP_ENV: production </span><br><span class="line">		LOG_LEVEL: info </span><br><span class="line">	volumes: - /data/appdata:/app/data </span><br><span class="line">	</span><br><span class="line">    services: </span><br><span class="line">    	app-service: &lt;&lt;: *common <span class="comment"># 引用并插入 common-config 的内容</span></span><br><span class="line">        image: myapp:latest </span><br><span class="line">        ports: </span><br><span class="line">        	- <span class="string">&quot;8080:80&quot;</span> </span><br><span class="line">        	</span><br><span class="line">        another-service: &lt;&lt;: *common <span class="comment"># 再次引用并插入 common-config 的内容 </span></span><br><span class="line">        image: anotherapp:latest </span><br><span class="line">        ports: </span><br><span class="line">        	- <span class="string">&quot;9090:90&quot;</span></span><br></pre></td></tr></table></figure>





<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 描述 Compose 文件的版本信息</span></span><br><span class="line">version: <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="comment"># 定义服务，可以多个</span></span><br><span class="line">services:</span><br><span class="line">  nginx: <span class="comment"># 服务名称</span></span><br><span class="line">    image: nginx <span class="comment"># 创建容器时所需的镜像</span></span><br><span class="line">    container_name: mynginx <span class="comment"># 容器名称，默认为&quot;工程名称_服务条目名称_序号&quot;</span></span><br><span class="line">    ports: <span class="comment"># 宿主机与容器的端口映射关系</span></span><br><span class="line">      - <span class="string">&quot;80:80&quot;</span> <span class="comment"># 左边宿主机端口:右边容器端口</span></span><br><span class="line">    restart: always <span class="comment"># 自动重启  </span></span><br><span class="line">    environment: <span class="comment"># 创建容器时所需的环境变量</span></span><br><span class="line">      NINX_PASSWORD: <span class="number">1234</span>   </span><br><span class="line">    networks: <span class="comment"># 配置容器连接的网络，引用顶级 networks 下的条目</span></span><br><span class="line">      - nginx-net</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义网络，可以多个。如果不声明，默认会创建一个网络名称为&quot;工程名称_default&quot;的 bridge 网络</span></span><br><span class="line">networks:</span><br><span class="line">  nginx-net: <span class="comment"># 一个具体网络的条目名称</span></span><br><span class="line">    name: nginx-net <span class="comment"># 网络名称，默认为&quot;工程名称_网络条目名称&quot;</span></span><br><span class="line">    driver: bridge <span class="comment"># 网络模式，默认为 bridge</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2024/09/07/Docker/Docker/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>BUILD, SHIP, RUN</p>
<p>即：build – Docker 可以轻易构建用户的应用</p>
<p>SHIP – Docker 可以将应用快速分发</p>
<p>RUN – Docker 有能力秒级启动应用</p>
<p>基于GO开发，遵循Apache2.0。</p>
<p>Docker是一个基于LXC（即:linux container）技术之上构建的Container容器引擎。</p>
<p>Docker 使用客户端-服务器 (C&#x2F;S) 架构模式，使用远程API来管理和创建Docker容器。</p>
<h2 id="Docker特性"><a href="#Docker特性" class="headerlink" title="Docker特性"></a><strong>Docker特性</strong></h2><ul>
<li>速度飞快以及优雅的隔离框架</li>
<li>物美价廉</li>
<li>CPU&#x2F;内存的低消耗</li>
<li>快速开&#x2F;关机</li>
<li>跨云计算基础构架</li>
</ul>
<h2 id="Docker组件与元素"><a href="#Docker组件与元素" class="headerlink" title="Docker组件与元素"></a><strong>Docker组件与元素</strong></h2><p>Docker有三个组件和三个基本元素。</p>
<p>三个组件分别是：</p>
<ul>
<li><strong>Docker Client</strong> 是用户界面，它支持用户与Docker Daemon之间通信。</li>
<li><strong>Docker Daemon</strong> 运行于主机上，处理服务请求。</li>
<li><strong>Docker Index</strong> 是中央registry，支持拥有公有与私有访问权限的Docker容器镜像的备份。</li>
</ul>
<p>三个基本要素分别是：</p>
<ul>
<li><strong>Docker Containers</strong> 负责应用程序的运行，包括操作系统、用户添加的文件以及元数据。</li>
<li><strong>Docker Images</strong> 是一个只读模板，用来运行Docker容器。</li>
<li><strong>DockerFile</strong> 是文件指令集，用来说明如何自动创建Docker镜像。</li>
</ul>
<h2 id="Docker的优势"><a href="#Docker的优势" class="headerlink" title="Docker的优势"></a><strong>Docker的优势</strong></h2><ul>
<li>Docker层是基于容器技术的轻量级虚拟化，没有Hypervisor层，省去了Hypervisor的开销</li>
<li>对层级的创新应用，通过写入自己特有的内容后添加新的镜像层，新增的镜像层和下层的镜像一起又可以作为基础镜像被更上层的镜像使用。这种特性可以极大地提高磁盘利用率。同时，多个容器使用同一个基础镜像时，可极大地减少内存占用等方面，因为不同的容器访问同一个文件时，只会占用一份内存。</li>
</ul>
<h2 id="Docker-可视化工具"><a href="#Docker-可视化工具" class="headerlink" title="Docker 可视化工具"></a><strong>Docker 可视化工具</strong></h2><ul>
<li>Portainer</li>
<li>LazyDocker</li>
</ul>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a><strong>目标</strong></h1><p><strong>实现轻量级的操作系统虚拟化解决方案。</strong></p>
<p>Docker产生的目的主要是为了解决如下问题。</p>
<h2 id="环境管理复杂"><a href="#环境管理复杂" class="headerlink" title="环境管理复杂"></a><strong>环境管理复杂</strong></h2><p>从各种OS到各种中间件再到各种App，一款产品能够成功发布，作为开发者需要关心的东西太多，且难于管理，这个问题在软件行业中普遍存在并需要直接面对。<strong>Docker可以简化部署多种应用实例的工作</strong>，比如Web应用、后台应用、数据库应用、大数据应用比如Hadoop集群、消息队列等等都可以打包成一个Image部署。</p>
<h2 id="云计算时代的到来"><a href="#云计算时代的到来" class="headerlink" title="云计算时代的到来"></a><strong>云计算时代的到来</strong></h2><p>AWS的成功, 引导开发者将应用转移到云上, 解决了硬件管理的问题，然而软件配置和管理相关的问题依然存在 (AWS cloudformation是这个方向的业界标准)。Docker的出现正好能帮助软件开发者开阔思路，尝试新的软件管理方法来解决这个问题。</p>
<h2 id="虚拟化手段的变化"><a href="#虚拟化手段的变化" class="headerlink" title="虚拟化手段的变化"></a><strong>虚拟化手段的变化</strong></h2><p>云时代采用标配硬件来降低成本，采用虚拟化手段来满足用户按需分配的资源需求以及保证可用性和隔离性。然而无论是KVM还是Xen，在 Docker 看来都在浪费资源，因为用户需要的是高效运行环境而非OS, GuestOS既浪费资源又难于管理, 更加轻量级的LXC更加灵活和快速。</p>
<img src="/2024/09/07/Docker/Docker/image-20240916212807488.png" class="" title="image-20240916212807488">

<p><strong>与虚拟机的区别：</strong></p>
<ul>
<li>虚拟机是用来进行硬件资源划分的完美解决方案，它利用了硬件虚拟化技术。通过一个 Hypervisor 层来实现对资源的彻底隔离；而容器则是操作系统级别的虚拟化，利用的是内核的 Cgroup 和 Namespace 特性，完全是通过软件来实现，仅仅是进程本身就可以与其它进程隔离开，不需要任何辅助</li>
<li>Docker 容器与主机共享操作系统内核，不同的容器之间可以共享部分系统资源，因此容器更加轻量级，消耗的资源也更少。而虚拟机会独占分配给自己的资源，几乎不存在资源共享，各个虚拟机实例之间近乎完全隔离，因此虚拟机更加重量级，也会消耗更多的资源</li>
<li>容器被用来设计运行单进程。但 docker exec 命令已解决了该问题</li>
</ul>
<h2 id="LXC的便携性"><a href="#LXC的便携性" class="headerlink" title="LXC的便携性"></a><strong>LXC的便携性</strong></h2><p>LXC在 Linux 2.6 的 Kernel 里就已经存在了，但是其设计之初并非为云计算考虑的，缺少标准化的描述手段和容器的可便携性，决定其构建出的环境难于分发和标准化管理(相对于KVM之类image和snapshot的概念)。Docker就在这个问题上做出了实质性的创新方法。</p>
<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a><strong>架构</strong></h1><img src="/2024/09/07/Docker/Docker/docker%E6%9E%B6%E6%9E%84.png" class="" title="docker架构">

<p>(来自&lt;Docker进阶与实战&gt;)</p>
<p>基于内核的Cgroup和Namespace技术。</p>
<p>Docker并不会直接与内核交互，而是通过Libcontainer与内核交互。</p>
<p>Libccontainer通过clone接口直接创建容器，通过pivot_root接口进入容器，并通过直接操作cgroupfs文件实现对资源的管理。</p>
<img src="/2024/09/07/Docker/Docker/image-20240916213120282.png" class="" title="image-20240916213120282">



<table>
<thead>
<tr>
<th>Docker 镜像(Images)</th>
<th>Docker 镜像是用于创建 Docker 容器的模板。</th>
</tr>
</thead>
<tbody><tr>
<td>Docker 容器(Container)</td>
<td>容器是独立运行的一个或一组应用。</td>
</tr>
<tr>
<td>Docker 客户端(Client)</td>
<td>Docker 客户端通过命令行或者其他工具使用 Docker API (<a href="https://docs.docker.com/reference/api/docker_remote_api">https://docs.docker.com/reference/api/docker_remote_api</a>) 与 Docker 的守护进程通信。</td>
</tr>
<tr>
<td>Docker 主机(Host)</td>
<td>一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</td>
</tr>
<tr>
<td>Docker 仓库(Registry)</td>
<td>Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(<a href="https://hub.docker.com/">https://hub.docker.com</a>) 提供了庞大的镜像集<a href="https://hub.docker.com/">合供使用。</a></td>
</tr>
<tr>
<td>Docker Machine</td>
<td>Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | <span class="built_in">sudo</span> gpg --</span></span><br><span class="line">dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signedby=/usr/share/keyrings/docker-archive-keyring.gpg]</span></span> </span><br><span class="line">https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | </span><br><span class="line">sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">sudo apt update</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">安装最新版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">sudo apt install docker-ce docker-ce-cli containerd.io docker-composeplugin</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">sudo systemctl start docker</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">sudo systemctl enable docker # 使能自启动</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">无需 sudo 运行</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">sudo usermod -aG docker <span class="variable">$USER</span></span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">newgrp docker # 无需重启，立即生效</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">安装 docker-compose. 需自行选择版本. 或使用 pip 安装：pip install dockercompose</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">sudo curl -L</span></span> </span><br><span class="line">&quot;https://github.com/docker/compose/releases/download/v2.29.2/dockercompose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">sudo chmod +x /usr/local/bin/docker-compose</span></span></span><br></pre></td></tr></table></figure>



<p>Docker daemon 绑定到 Unix socket，而不是 TCP 端口。默认情况下，Unix Socket 只能被 root 用户使用，其它用户需使用 sudo 来访问Unix socket。Docker daemon 总是以 root 用户运行。</p>
<p>因此，需使用 sudo 来执行 Docker 指令，或者将需要使用 Dockerclient 的用户加入 docker 用户组。<a href="https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface">Docker用户组等价于root用户</a>。</p>
<p>创建 docker 组：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> groupadd docker</span></span><br></pre></td></tr></table></figure>

<p>将用户加入docket组：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span></span><br></pre></td></tr></table></figure>

<p>注销并重新登录即可。</p>
<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a><strong>容器</strong></h1><p>Docker通过 Libcontainer 来实现对容器生命周期的管理、信息的设置和查询，以及监控和通信等功能。容器以镜像为基础，同时又为镜像提供了一个标准的和隔离的执行环境。</p>
<p>容器首先必须是一个相对独立的运行环境，且在一个容器环境内，应该最小化其对外界的影响。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">容器=cgroup+namespace+rootfs+容器引擎（用户态工具）</span><br></pre></td></tr></table></figure>

<p>Namespace（主要做访问隔离）</p>
<p>Cgroup（主要做资源控制）</p>
<p>Rootfs（文件系统隔离）</p>
<p>容器引擎（生命周期控制）</p>
<p>Docker 容器是 Docker 镜像的运行态体现。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker使用</title>
    <url>/2024/09/22/Docker/Docker%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="运行参数"><a href="#运行参数" class="headerlink" title="运行参数"></a>运行参数</h1><table>
<thead>
<tr>
<th>option</th>
<th>默认参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>–add-host</td>
<td></td>
<td>将自定义主机添加到IP映射（host：ip）</td>
</tr>
<tr>
<td>–attach , -a</td>
<td></td>
<td>附加到STDIN，STDOUT或STDERR</td>
</tr>
<tr>
<td>–blkio-weight</td>
<td></td>
<td>IO（相对权重），介于10到1000之间，或者为0禁用（默认为0）</td>
</tr>
<tr>
<td>–blkio-weight-device</td>
<td></td>
<td>块IO重量（相对设备重量）</td>
</tr>
<tr>
<td>–cap-add</td>
<td></td>
<td>添加Linux功能</td>
</tr>
<tr>
<td>–cap-drop</td>
<td></td>
<td>放弃Linux功能</td>
</tr>
<tr>
<td>–cgroup-parent</td>
<td></td>
<td>容器的可选父cgroup</td>
</tr>
<tr>
<td>–cidfile</td>
<td></td>
<td>将容器ID写入文件</td>
</tr>
<tr>
<td>–cpu-count</td>
<td></td>
<td>CPU数量（仅Windows）</td>
</tr>
<tr>
<td>–cpu-percent</td>
<td></td>
<td>CPU百分比（仅Windows）</td>
</tr>
<tr>
<td>–cpu-period</td>
<td></td>
<td>限制CPU CFS（完全公平的调度程序）期限</td>
</tr>
<tr>
<td>–cpu-quota</td>
<td></td>
<td>限制CPU CFS（完全公平的调度程序）配额</td>
</tr>
<tr>
<td>–cpu-rt-period</td>
<td></td>
<td>限制CPU实时时间（以微秒为单位）</td>
</tr>
<tr>
<td>–cpu-rt-runtime</td>
<td></td>
<td>限制CPU实时运行时间（以微秒为单位）</td>
</tr>
<tr>
<td>-c, –cpu-shares</td>
<td></td>
<td>CPU份额（相对重量）</td>
</tr>
<tr>
<td>–cpus</td>
<td></td>
<td>CPU数量</td>
</tr>
<tr>
<td>–cpuset-cpus</td>
<td></td>
<td>允许执行的CPU（0-3，0,1）</td>
</tr>
<tr>
<td>–cpuset-mems</td>
<td></td>
<td>允许执行的MEM（0-3，0,1）</td>
</tr>
<tr>
<td>-d, –detach</td>
<td></td>
<td>在后台运行容器并打印容器ID</td>
</tr>
<tr>
<td>–detach-keys</td>
<td></td>
<td>覆盖分离容器的键序列</td>
</tr>
<tr>
<td>–device</td>
<td></td>
<td>将主机设备添加到容器</td>
</tr>
<tr>
<td>–device-cgroup-rule</td>
<td></td>
<td>在容器的 cgroup 中设置设备访问规则</td>
</tr>
<tr>
<td>–device-read-bps</td>
<td></td>
<td>限制从设备读取的速率（每秒字节数）</td>
</tr>
<tr>
<td>–device-read-iops</td>
<td></td>
<td>限制从设备读取的速率（每秒IO）</td>
</tr>
<tr>
<td>–device-write-bps</td>
<td></td>
<td>限制对设备的写入速率（每秒字节数）</td>
</tr>
<tr>
<td>–device-write-iops</td>
<td></td>
<td>限制对设备的写入速率（每秒IO）</td>
</tr>
<tr>
<td>–disable-content-trust</td>
<td>true</td>
<td>跳过图像验证</td>
</tr>
<tr>
<td>–dns</td>
<td></td>
<td>设置自定义DNS服务器(例如: 8.8.8.8)</td>
</tr>
<tr>
<td>–dns-opt</td>
<td></td>
<td>设定DNS选项</td>
</tr>
<tr>
<td>–dns-option</td>
<td></td>
<td>设定DNS选项</td>
</tr>
<tr>
<td>–dns-search</td>
<td></td>
<td>设置自定义DNS搜索域</td>
</tr>
<tr>
<td>–domainname</td>
<td></td>
<td>容器NIS域名</td>
</tr>
<tr>
<td>–entrypoint</td>
<td></td>
<td>覆盖图像的默认ENTRYPOINT</td>
</tr>
<tr>
<td>-e, –env</td>
<td></td>
<td>设置环境变量</td>
</tr>
<tr>
<td>–env-file</td>
<td></td>
<td>读入环境变量文件</td>
</tr>
<tr>
<td>–expose</td>
<td></td>
<td>公开一个或多个端口(8080,8081)</td>
</tr>
<tr>
<td>–gpus</td>
<td></td>
<td>API 1.40+GPU设备添加到容器中（“全部”传递所有GPU）</td>
</tr>
<tr>
<td>–group-add</td>
<td></td>
<td>添加其他群组即可加入</td>
</tr>
<tr>
<td>–health-cmd</td>
<td></td>
<td>运行命令以检查运行状况</td>
</tr>
<tr>
<td>–health-interval</td>
<td></td>
<td>运行检查之间的时间（ms</td>
</tr>
<tr>
<td>–health-retries</td>
<td></td>
<td>需要连续报告不健康状况</td>
</tr>
<tr>
<td>–health-start-period</td>
<td></td>
<td>API 1.29+ 容器在开始运行状况重试倒计时（ms</td>
</tr>
<tr>
<td>–health-timeout</td>
<td></td>
<td>允许执行一次检查的最长时间（ms</td>
</tr>
<tr>
<td>–help</td>
<td></td>
<td>打印用量</td>
</tr>
<tr>
<td>-h, –hostname</td>
<td></td>
<td>容器主机名(例如:例如:localhost)</td>
</tr>
<tr>
<td>–init</td>
<td></td>
<td>API 1.25+ 在容器内运行一个初始化程序，以转发信号并获取进程</td>
</tr>
<tr>
<td>-i, –interactive</td>
<td></td>
<td>即使未连接STDIN也保持打开状态</td>
</tr>
<tr>
<td>–io-maxbandwidth</td>
<td></td>
<td>系统驱动器的最大IO带宽限制（仅Windows）</td>
</tr>
<tr>
<td>–io-maxiops</td>
<td></td>
<td>系统驱动器的最大IOps限制（仅Windows）</td>
</tr>
<tr>
<td>–ip</td>
<td></td>
<td>IPv4地址（例如172.30.100.104）</td>
</tr>
<tr>
<td>–ip6</td>
<td></td>
<td>IPv6地址（例如2001：db8 :: 33）</td>
</tr>
<tr>
<td>–ipc</td>
<td></td>
<td>使用的IPC模式</td>
</tr>
<tr>
<td>–isolation</td>
<td></td>
<td>集装箱隔离技术</td>
</tr>
<tr>
<td>–kernel-memory</td>
<td></td>
<td>内核内存限制</td>
</tr>
<tr>
<td>-l, –label</td>
<td></td>
<td>在容器上设置元数据</td>
</tr>
<tr>
<td>–label-file</td>
<td></td>
<td>读入行分隔的标签文件</td>
</tr>
<tr>
<td>–link</td>
<td></td>
<td>将链接添加到另一个容器</td>
</tr>
<tr>
<td>–link-local-ip</td>
<td></td>
<td>容器IPv4 &#x2F; IPv6链接本地地址</td>
</tr>
<tr>
<td>–log-driver</td>
<td></td>
<td>容器的日志记录驱动程序</td>
</tr>
<tr>
<td>–log-opt</td>
<td></td>
<td>日志驱动程序选项</td>
</tr>
<tr>
<td>–mac-address</td>
<td></td>
<td>容器MAC地址（例如92：d0：c6：0a：29：33）</td>
</tr>
<tr>
<td>-m,–memory</td>
<td></td>
<td>内存限制</td>
</tr>
<tr>
<td>–memory-reservation</td>
<td></td>
<td>内存软限制</td>
</tr>
<tr>
<td>–memory-swap</td>
<td></td>
<td>交换限制等于内存加交换：“-1”以启用无限交换</td>
</tr>
<tr>
<td>–memory-swappiness</td>
<td>-1</td>
<td>调整容器内存交换（0到100）</td>
</tr>
<tr>
<td>–mount</td>
<td></td>
<td>将文件系统挂载附加到容器</td>
</tr>
<tr>
<td>–name</td>
<td></td>
<td>为容器分配一个名称</td>
</tr>
<tr>
<td>–net</td>
<td></td>
<td>网络模式(host, bridge)</td>
</tr>
<tr>
<td>–net-alias</td>
<td></td>
<td>为容器添加网络范围的别名</td>
</tr>
<tr>
<td>–network</td>
<td></td>
<td>网络名(可以多个容器公用一个网络名,这样多容器会在同一个网络环境下)</td>
</tr>
<tr>
<td>–network-alias</td>
<td></td>
<td>网络别名(未知)</td>
</tr>
<tr>
<td>–no-healthcheck</td>
<td></td>
<td>禁用任何容器指定的健康检查</td>
</tr>
<tr>
<td>–oom-kill-disable</td>
<td></td>
<td>禁用OOM杀手</td>
</tr>
<tr>
<td>–oom-score-adj</td>
<td></td>
<td>调台主持人的OOM首选项（-1000至1000）</td>
</tr>
<tr>
<td>–pid</td>
<td></td>
<td>使用的PID名称空间</td>
</tr>
<tr>
<td>–pids-limit</td>
<td></td>
<td>调整容器pids限制（将-1设置为无限制）</td>
</tr>
<tr>
<td>–platform</td>
<td></td>
<td>实验（守护程序）API 1.32+ 如果服务器具有多平台功能，请设置平台</td>
</tr>
<tr>
<td>–privileged</td>
<td></td>
<td>赋予此容器扩展的特权</td>
</tr>
<tr>
<td>-p, –publish</td>
<td></td>
<td>将容器的端口发布到主机</td>
</tr>
<tr>
<td>-P, –publish-all</td>
<td></td>
<td>将所有公开的端口发布到随机端口</td>
</tr>
<tr>
<td>–read-only</td>
<td></td>
<td>将容器的根文件系统挂载为只读</td>
</tr>
<tr>
<td>–restart</td>
<td>no</td>
<td>容器退出时重新启动策略以应用(no</td>
</tr>
<tr>
<td>–rm</td>
<td></td>
<td>退出时自动删除容器</td>
</tr>
<tr>
<td>–runtime</td>
<td></td>
<td>用于此容器的运行时</td>
</tr>
<tr>
<td>–security-opt</td>
<td></td>
<td>安全选项</td>
</tr>
<tr>
<td>–shm-size</td>
<td></td>
<td>&#x2F; dev &#x2F; shm的大小</td>
</tr>
<tr>
<td>–sig-proxy</td>
<td>true</td>
<td>代理接收到该过程的信号</td>
</tr>
<tr>
<td>–stop-signal</td>
<td>SIGTERM</td>
<td>停止容器的信号</td>
</tr>
<tr>
<td>–stop-timeout</td>
<td></td>
<td>API 1.25+ 超时（以秒为单位）以停止容器</td>
</tr>
<tr>
<td>–storage-opt</td>
<td></td>
<td>容器的存储驱动程序选项</td>
</tr>
<tr>
<td>–sysctl</td>
<td></td>
<td>Sysctl选项</td>
</tr>
<tr>
<td>–tmpfs</td>
<td></td>
<td>挂载tmpfs目录</td>
</tr>
<tr>
<td>-t, –tty</td>
<td></td>
<td>分配伪TTY</td>
</tr>
<tr>
<td>–ulimit</td>
<td></td>
<td>Ulimit选项</td>
</tr>
<tr>
<td>-u, –user</td>
<td></td>
<td>用户名或UID（格式：&lt;名称</td>
</tr>
<tr>
<td>–userns</td>
<td></td>
<td>要使用的用户名称空间</td>
</tr>
<tr>
<td>–uts</td>
<td></td>
<td>使用的UTS名称空间</td>
</tr>
<tr>
<td>-v,–volume</td>
<td></td>
<td>绑定挂载卷</td>
</tr>
<tr>
<td>–volume-driver</td>
<td></td>
<td>容器的可选音量驱动器</td>
</tr>
<tr>
<td>–volumes-from</td>
<td></td>
<td>从指定的容器挂载卷</td>
</tr>
<tr>
<td>-w,–workdir</td>
<td></td>
<td>容器内的工作目录</td>
</tr>
</tbody></table>
<h2 id="privileged"><a href="#privileged" class="headerlink" title="--privileged"></a><code>--privileged</code></h2><p>该选项允许容器以 root 权限运行，获得几乎与主机相同的权限。意味着容器可以访问和控制主机的所有硬件设备、操作系统内核和其他系统资源。</p>
<blockquote>
<hr>
<p>使用 <code>--privileged=true</code> 后，容器内的 root 才真正拥有 root 权限，否则容器内 root 只是一个普通用户</p>
<hr>
</blockquote>
<p>使能该选项存在巨大安全风险。允许容器以超级用户权限运行，意味着容器内的任何恶意代码都可以获得主机上的完全访问权限。攻击者可以利用这种权限执行任意操作，包括但不限于数据窃取、系统破坏和网络]攻击。</p>
<h2 id="device-cgroup-rule"><a href="#device-cgroup-rule" class="headerlink" title="--device-cgroup-rule"></a><code>--device-cgroup-rule</code></h2><p><code>--device-cgroup-rule</code> 可指定一系列 cgroup 规则，以允许或禁止容器对特定设备的访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--device-cgroup-rule=&quot;type major:minor mode&quot;</span><br><span class="line">  Add a rule to the cgroup allowed devices list. The rule is expected to be in the format specified in the Linux kernel documentation (Documentation/cgroup-v1/devices.txt):</span><br><span class="line">    - type: a (all), c (char), or b (block);</span><br><span class="line">    - major and minor: either a number, or * for all;</span><br><span class="line">    - mode: a composition of r (read), w (write), and m (mknod(2)).</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Docker CE17.04 引入</p>
</blockquote>
<blockquote>
<p>major</p>
<ul>
<li>81: USB</li>
<li>189: UVC</li>
</ul>
</blockquote>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker version</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索可用镜像</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker search &lt;image name&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除镜像</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker rmi &lt;image name&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">rm</span> &lt;container&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">$ docker <span class="built_in">rm</span> $(docker ps -aq) <span class="comment"># 删除所有容器</span></span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker stop &lt;container name&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker stop $(docker ps -aq) <span class="comment"># 停止所有容器</span></span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建镜像</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -t &lt;镜像名 name:tag&gt; [-f &lt;dockerfile 路径&gt;]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -t &#123;镜像名&#125; &#123;路径&#125;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -t &#123;镜像名&#125; - &lt; Dockerfile路径</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从容器构建镜像</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker commit [-a/c/m/p] &lt;container&gt; &lt;image&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">cp</span> host_path containerID:container_path</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">cp</span> containerID:container_path host_path</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器端口映射</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker port CONTAINER [PRIVATE_PORT[/PROTO]]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">history</span> &lt;image&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 tag. 第一个参数为原始镜像标签</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker tag IMAGE[:TAG] IMAGE[:TAG]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某个容器详细信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker inspect</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker diff</span></span><br></pre></td></tr></table></figure>



<h1 id="访问主机设备"><a href="#访问主机设备" class="headerlink" title="访问主机设备"></a>访问主机设备</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 --privileged（允许访问主机所有设备）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --privileged --<span class="built_in">tty</span> --interactive debian /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 -volume</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --<span class="built_in">tty</span> --interactive --volume=/dev/bus/usb:/dev/bus/usb --volume=/dev/sdb:/dev/sdb debian /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 -device</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --<span class="built_in">tty</span> --interactive --device=/dev/bus/usb --device=/dev/sdb debian /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 cgroup rule</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --device-cgroup-rule=<span class="string">&#x27;c 81:* rwm&#x27;</span> --<span class="built_in">tty</span> --interactive debian /bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用该方式，为了确保 plug 事件触发重分配，还需要添加 udev 规则，参考 realsense docker</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="热插拔"><a href="#热插拔" class="headerlink" title="热插拔"></a>热插拔</h2><blockquote>
<p><code>-v/volume</code> 及 <code>-device</code> 无法解决热插拔问题。在容器已经运行时插入或重新插入设备，在这种场景中，设备可能获得不同的总线 ID，从而使原始共享失效。（<strong>需要注意的是，当共享整个 &#x2F;dev 目录时，这不是问题</strong>）</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 映射此类设备整个总线，例如 针对 USB 设备，可映射整个 USB 总线</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --device=/dev/bus/usb -it --name ros_container &lt;image&gt; /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 使用 --device-cgroup-rule 映射此类别所有设备</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --device-cgroup-rule=<span class="string">&#x27;c 81:* rwm&#x27;</span> --<span class="built_in">tty</span> --interactive debian /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 使用 --privileged 模式</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --privileged -it --name ros_container &lt;image&gt; /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 重新映射。例如，USB 设备</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -ti &lt;container&gt; bash -c <span class="string">&quot;mount --bind /dev/bus/usb /dev/bus/usb&quot;</span></span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5. 动态添加到容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker update --device-add /dev/bus/usb/001/026 &lt;container_name&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6. 使用 udev 固定设备路径，容器启动时映射这些路径</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>容器内 <code>systemd-udevd</code> 不启动。因为容器中 &#x2F;sys 默认时 ro 只读模式，避免容器环境与主机对于 &#x2F;sys 同时写入导致的资源冲突问题。</p>
<p><code>systemd-udevd.service</code> 服务文件会检查该权限</p>
</blockquote>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>CUDA</title>
    <url>/2024/09/20/NVIDIA/CUDA/</url>
    <content><![CDATA[

<p>CUDA 与 CUDA Driver 并非一一对应，一台电脑上只有一个版本的 CUDA Driver，但可以有多个 CUDA 版本。</p>
<p>CUDA API 包括 CUDA Runtime API 和 CUDA Driver API。</p>
<img src="/2024/09/20/NVIDIA/CUDA/8718fcbd057ce429c15030472ca322c3.png" class="" title="CUDA layer">

<ul>
<li><p>Runtime API 与 Driver 最大区别是懒加载</p>
<ul>
<li><p>第一个 runtime API 调用时，进行 <code>cudaInit</code> 初始化</p>
</li>
<li><p>第一个需要 context 的 API 调用时，会调用 <code>cudaDevicePrimaryCtxRetain</code> 创建 context</p>
</li>
</ul>
</li>
<li><p><code>cuda</code> 开头的都是 Runtime API</p>
</li>
<li><p>Runtime API 对应 <code>cuda_runtime.h</code> 和 <code>libcudart.so</code></p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nvidia-smi</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nvcc -V</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>CUDA 支持多种语言，无论哪种语言或接口，指令最终都会被 driver 转换为 PTX(Parallel Thread Execution) 代码。</p>
<p>CUDA 架构组件包括：</p>
<ul>
<li>NVIDIA GPU 并行计算引擎</li>
<li>对硬件初始化、配置的OS内核级支持</li>
<li>硬件初始化、配置的OS内核级支持</li>
<li>用于并行计算kernel和函数的PTX 指令集架构(ISA，Instruction set architecture)</li>
</ul>
<img src="/2024/09/20/NVIDIA/CUDA/format,webp-1726897215619-30.webp" class="" title="img">



<h1 id="CUDA-Toolkit-与-conda-cudatoolkit"><a href="#CUDA-Toolkit-与-conda-cudatoolkit" class="headerlink" title="CUDA Toolkit 与 conda cudatoolkit"></a>CUDA Toolkit 与 conda cudatoolkit</h1><p>CUDA Toolkit 是 NVIDIA 官方提供的安装包，包含了 NVIDIA Driver、CUDA 编译器、开发工具等，参考：<a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#major-components">CUDA Toolkit major components</a>。</p>
<p>CUDA Toolkit 包含了 CUDA 开发调试相关的所有组件。但对 Pytorch 等深度学习框架，其大多只需要使用 CUDA 的动态链接库。</p>
<p>Anaconda 在安装 pytorch 等需要用到 CUDA 的框架时，会自动安装 cudatoolkit，其主要包含应用程序在使用 CUDA 时所依赖的动态库（不包括 runtime 层和以下的层，包括 nvcc 和 CUDA driver）。安装好之后，只需要 cudatoolkit 与 NVIDIA driver 兼容即可。Anaconda 安装的 cudatoolkit 位于 <code>~/anaconda3/pkgs/</code> 目录中。</p>
<blockquote>
<p>pytorch 检测 CUDA 版本的代码位于 <code>torch/utils/cpp_extension.py</code> 中的 <code>find_cuda_home</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例如 v2.3.1 </span></span><br><span class="line">CUDA_HOME = _find_cuda_home() <span class="keyword">if</span> torch.cuda._is_compiled() <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如 v2.0.0</span></span><br><span class="line">CUDA_HOME = _find_cuda_home()</span><br></pre></td></tr></table></figure>

</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从 nvidia 和 conda-forge channels 安装 cudatoolkit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda install cudatoolkit=11.1 -c nvidia/label/cuda-11.1.1 -c conda-forge</span></span><br></pre></td></tr></table></figure>





<p>实际调用哪个 CUDA 库，需根据 tf&#x2F;pytorch 生成时设置的链接库路径确定。如 pytorch setup.py 中指定了链接库的搜索路径，其中 <strong><code>CUDA_HOME</code></strong>  获取逻辑为：</p>
<ul>
<li>默认 cuda 安装路径 <code>/usr/local/cuda</code></li>
<li>若默认路径不存在，则搜索 <code>nvcc</code> 所在目录</li>
<li>若 <code>nvcc</code> 也不存在，则直接寻找 <code>cudart</code> 库文件目录（此时通常使用 conda 安装的 cudatoolkit），将其上级目录作为 <code>CUDA_HOME</code></li>
<li>若未找到 <code>CUDA_HOME</code> ，则生成 CPU 版 pytorch</li>
</ul>
<h1 id="CUDA-W2L"><a href="#CUDA-W2L" class="headerlink" title="CUDA W2L"></a>CUDA W2L</h1><img src="/2024/09/20/NVIDIA/CUDA/777a274604017c74ddeb254b54d8bed65fbca309_2_500x500.jpeg" class="" title="wsl-launch-upt-0625-rz_editted">



<h1 id="编程环境"><a href="#编程环境" class="headerlink" title="编程环境"></a>编程环境</h1><p>开发人员需关注两个版本信息：</p>
<ul>
<li>Compute capability</li>
<li>CUDA Runtime 和 CUDA Driver APIs</li>
</ul>
<h2 id="Compute-Capability"><a href="#Compute-Capability" class="headerlink" title="Compute Capability"></a>Compute Capability</h2><p><strong>描述了硬件的特性，反映了设备支持的指令集以及其他规范，也称 SM Version</strong>，例如每个 block 的最大线程数和每个多处理器的寄存器数。Compute Capability 向后兼容。</p>
<blockquote>
<p>GPU Compute Capability 不等于 计算性能</p>
</blockquote>
<p>CUDA 版本需与算力匹配：<a href="https://en.wikipedia.org/wiki/CUDA">https://en.wikipedia.org/wiki/CUDA</a></p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">架构</td>
<td align="center">计算能力Compute Capability</td>
<td align="center">发布时间</td>
<td align="center">Tesla系列</td>
<td align="center">Quadro系列</td>
<td align="center">GeForce系列</td>
<td align="center">Jetson系列</td>
</tr>
<tr>
<td align="center">Tesla</td>
<td align="center">X &#x3D; 1</td>
<td align="center">2006</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Fermi</td>
<td align="center">X &#x3D; 2</td>
<td align="center">2010</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Kepler</td>
<td align="center">X &#x3D; 3</td>
<td align="center">2012</td>
<td align="center">Kepler K系列</td>
<td align="center">Quadro K系列</td>
<td align="center">GeForce 600&#x2F;700系列</td>
<td align="center">Tegra K1</td>
</tr>
<tr>
<td align="center">Maxwell</td>
<td align="center">X &#x3D; 5</td>
<td align="center">2014</td>
<td align="center">Maxwell M系列</td>
<td align="center">Quadro M系列</td>
<td align="center">GeForce 900系列</td>
<td align="center">Tegra X1</td>
</tr>
<tr>
<td align="center">Pascal</td>
<td align="center">X &#x3D; 6</td>
<td align="center">2016</td>
<td align="center">Pascal P系列</td>
<td align="center">Quadro P系列</td>
<td align="center">GeForce 10系列</td>
<td align="center">Tegra X2</td>
</tr>
<tr>
<td align="center">Volta</td>
<td align="center">X &#x3D; 7</td>
<td align="center">2017</td>
<td align="center">Tesla V系列</td>
<td align="center">-</td>
<td align="center">TITAN V</td>
<td align="center">AGX Xavier</td>
</tr>
<tr>
<td align="center">Turing</td>
<td align="center">X.Y &#x3D; 7.5</td>
<td align="center">2018</td>
<td align="center">Tesla T系列</td>
<td align="center">Quadro RTX系列</td>
<td align="center">GeForce 16系列，GeForce 20系列</td>
<td align="center">AGX Xavier</td>
</tr>
<tr>
<td align="center">Ampere</td>
<td align="center">X &#x3D; 8</td>
<td align="center">2020</td>
<td align="center">Tesla A系列</td>
<td align="center">RTX A系列</td>
<td align="center">GeForce 30系列</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Ada Lovelace</td>
<td align="center">X.Y &#x3D; 8.9</td>
<td align="center">2022</td>
<td align="center">L4、L40</td>
<td align="center">RTX Ada系列</td>
<td align="center">GeForce 40系列</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Hopper</td>
<td align="center">X &#x3D; 9</td>
<td align="center">2022</td>
<td align="center">H100</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>（来源：<a href="https://qinganzhang.github.io/posts/cuda-learning-notes/gpu%E6%9E%B6%E6%9E%84%E5%8F%91%E5%B1%95%E5%85%BC%E5%AE%B9%E6%80%A7%E5%92%8C%E7%BC%96%E8%AF%91/">GPU架构发展、兼容性和编译</a>）</p>
<p>参考：<a href="https://docs.nvidia.com/datacenter/tesla/drivers/index.html#cuda-arch-matrix">https://docs.nvidia.com/datacenter/tesla/drivers/index.html#cuda-arch-matrix</a></p>
<p>不同 Compute Capability 支持的功能，参考 <a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#features-and-technical-specifications">Features and Technical Specifications</a></p>
<p>设备中 GPU 的计算能力可以通过编程方式查询，如 <code>deviceQuery</code> CUDA Sample 所示。该程序的输出如下。此信息是通过调用 <em><code>cudaGetDeviceProperties()</code></em>  获得。</p>
<img src="/2024/09/20/NVIDIA/CUDA/sample-cuda-configuration-data.png" class="" title="deviceQuery">

<p>如图中，CUDA Capability 版本为 7.0</p>
<p>附录K – <a href="https://developer.nvidia.com/zh-cn/blog/cuda-computing-power-cn/">CUDA 计算能力</a></p>
<h2 id="额外的硬件信息"><a href="#额外的硬件信息" class="headerlink" title="额外的硬件信息"></a>额外的硬件信息</h2><p>计算能力没有描述某些硬件特性。例如，无论计算能力如何，大多数 GPU(但不是所有 gpu) 都可以将内核执行与主机和设备之间的异步数据传输重叠。在这种情况下，调用 <code>cudaGetDeviceProperties()</code> 来确定设备是否具有特定功能。例如，<code>asyncEngineCount</code> 字段指示是否可能重叠内核执行和数据传输(如果是，可能有多少并发传输)，<code>canMapHostMemory</code> 字段表示是否可以执行零拷贝数据传输。</p>
<h2 id="Compute-Capability-Target"><a href="#Compute-Capability-Target" class="headerlink" title="Compute Capability Target"></a>Compute Capability Target</h2><p>要针对特定版本的 NVIDIA 硬件和 CUDA 软件，请使用 nvcc 的 <code>-arch</code>， <code>-code</code> 和 <code>-gencode</code>选项。例如，使用 warp shuffle 操作的代码必须使用 <code>-arch=sm_30</code>(或更高的计算能力)进行编译。</p>
<p>参考： <a href="https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#building-for-maximum-compatibility">Building for maximum compatibility</a></p>
<h2 id="CUDA-Runtime"><a href="#CUDA-Runtime" class="headerlink" title="CUDA Runtime"></a>CUDA Runtime</h2><p>提供以下功能</p>
<ul>
<li>Device management</li>
<li>Context management</li>
<li>Memory management</li>
<li>Code module management</li>
<li>Execution control</li>
<li>Texture reference management</li>
<li>Interoperability with OpenGL and Direct3D</li>
</ul>
<p>与底层 CUDA Driver API 相比，CUDA Runtime 通过提供隐式初始化、上下文管理和设备代码模块管理，极大地简化了设备管理。nvcc 生成的 c++ 主机代码利用 CUDA Runtime，因此链接到此代码的应用程序将依赖于 CUDA Runtime；类似地，任何使用 cuBLAS, cuFFT 和其他 CUDA toolkit 库的代码也将依赖于 CUDA Runtime。</p>
<p>CUDA Runtime 在内核启动之前处理内核加载和设置内核参数和启动配置。隐式驱动版本检查、代码初始化、CUDA 上下文管理、CUDA 模块管理(从库到函数映射)、内核配置和参数传递都是由CUDA Runtime 执行的。</p>
<p>它包括两个主要部分:</p>
<ul>
<li>C 风格的函数接口(<code>cuda_runtime_api.h</code>)</li>
<li>C++ 风格的封装(<code>cuda_runtime.h</code>)</li>
</ul>
<h1 id="CUDA-Compatibility"><a href="#CUDA-Compatibility" class="headerlink" title="CUDA Compatibility"></a>CUDA Compatibility</h1><p>CUDA 软件环境由三部分组成:</p>
<ul>
<li>CUDA Toolkit（库、CUDA Runtime 及开发工具）：用于开发者构建 CUDA 程序</li>
<li>CUDA Driver：用户态驱动，如 linux 下的<code>libcuda.so</code></li>
<li>NVIDIA GPU device driver：内核态驱动组件</li>
</ul>
<img src="/2024/09/20/NVIDIA/CUDA/CUDA-components.png" class="" title="Components of CUDA">

<p>（来源：<a href="https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#cuda-compatibility-developer-s-guide%EF%BC%89">https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#cuda-compatibility-developer-s-guide）</a></p>
<p>在 Linux 系统上，CUDA Driver 和内核态组件在 NVIDIA display driver 中一起提供。</p>
<p>为了方便起见，每个 CUDA Toolkit 附带了一个 NVIDIA display driver。该驱动程序支持该版本 CUDA Toolkit 中引入的所有功能。</p>
<p>通常，升级 CUDA Toolkit 包括升级 Toolkit 和 Driver，以获得最先进的工具包和驱动程序功能。</p>
<img src="/2024/09/20/NVIDIA/CUDA/forward-compatibility.png" class="" title="CUDA Upgrade Path">

<p>但这并不总是必需的。CUDA 兼容性允许只升级某些组件，并不总是需要一个完整的系统升级。</p>
<h2 id="CUDA-Toolkit-版本"><a href="#CUDA-Toolkit-版本" class="headerlink" title="CUDA Toolkit 版本"></a>CUDA Toolkit 版本</h2><p>从CUDA 11开始，Toolkit 版本基于行业标准的版本控制方案: <code>.x.y.z</code>:</p>
<ul>
<li><code>x</code> 代表主版本 - API 已经改变，二进制兼容性被打破</li>
<li><code>y</code> 代表次要版本 - 引入新 API，弃用旧 API，源代码兼容性可能会被破坏，但保持二进制兼容性</li>
<li><code>z</code> 代表发布&#x2F;补丁版本</li>
</ul>
<p>Toolkit 中各组件版本信息，可查看 <a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#cuda-major-component-versions">CUDA Toolkit Major Component Versions</a></p>
<p>CUDA 支持几种兼容性选择：</p>
<ul>
<li>CUDA 向前兼容升级最初是在 CUDA 10 中引入的，旨在让用户能够访问新的 CUDA 功能，并在安装了较旧的 NVIDIA datacenter driver 的系统上运行使用新 CUDA 版本构建的应用程序</li>
<li>CUDA 增强兼容性在 CUDA 11.1 中首次引入，提供了两个好处：<ul>
<li>通过利用 CUDA Toolkit 中组件语义版本控制，可以为一个 CUDA 小版本(例如11.1)构建应用程序，并在主要家族(即11.x)中的所有未来小版本中工作</li>
<li>CUDA Runtime 放宽了最低 driver 版本检查，因此在移动到新的次要版本时不再需要升级 driver</li>
</ul>
</li>
<li>CUDA Driver 确保编译后的 CUDA 应用程序保持向后二进制兼容性。使用 CUDA Toolkit 3.2 编译的应用程序可以运行在较新的 Driver 上</li>
</ul>
<h2 id="源码兼容性"><a href="#源码兼容性" class="headerlink" title="源码兼容性"></a>源码兼容性</h2><p>源代码兼容性定义为库提供的一组保证，其中针对特定版本的库(使用SDK)构建的格式良好的应用程序将在安装新版本的SDK时继续构建和运行而不会出现错误。</p>
<h2 id="二进制兼容性"><a href="#二进制兼容性" class="headerlink" title="二进制兼容性"></a>二进制兼容性</h2><p>二进制兼容性定义为库提供的一组保证，其中针对所述库的应用程序在与库的不同版本动态链接时将继续工作。</p>
<p>CUDA Driver API 有一个 C-style ABI，它保证在旧驱动程序(例如CUDA 3.2)上运行的应用程序仍然可以在现代驱动程序(例如CUDA 11.0附带的驱动程序)上正常运行。</p>
<p>因此，CUDA Driver API 是二进制兼容的，但不兼容源代码(根据较新的 SDK 重新构建应用程序可能需要更改源代码)。</p>
<img src="/2024/09/20/NVIDIA/CUDA/CTK-and-min-driver-versions.png" class="" title="CUDA Toolkit and Minimum Driver Versions">





<h2 id="Minor-Version-Compatibility"><a href="#Minor-Version-Compatibility" class="headerlink" title="Minor Version Compatibility"></a>Minor Version Compatibility</h2><h3 id="CUDA-11-开始支持-Minor-Version-Compatibility"><a href="#CUDA-11-开始支持-Minor-Version-Compatibility" class="headerlink" title="CUDA 11 开始支持 Minor Version Compatibility"></a>CUDA 11 开始支持 Minor Version Compatibility</h3><p>CUDA 11及后续版本默认为 Minor Version 兼容性。</p>
<p>从CUDA 11开始，使用 CUDA major 发行系列中的 CUDA Toolkit 编译的应用程序可以在具有至少最低要求的 driver 版本的系统上运行，功能集有限。这个最低要求的 driver 可以不同于 CUDA  Toolkit 中打包的驱动程序，但应该<strong>属于同一个 major 版本</strong>。</p>
<p>由于二进制向后兼容，基于任何旧的 CUDA Toolkit 构建的应用程序总是能在新 driver 上运行，在 CUDA 11 之前，基于新 CUDA  Toolkit 构建的应用程序在没有向前兼容包的旧 driver 上不受支持。</p>
<p>如果使用的是新的 CUDA 10。则所需的最小驱动程序版本与打包为该工具包版本一部分的驱动程序版本相同。因此，在CUDA 11.1之前，每个新的 CUDA Toolkit 小版本都更改了所需的最低 driver 版本。因此，系统管理员总是必须升级 driver ，以支持基于CUDA Toolkit 构建的应用程序。</p>
<h3 id="Minor-Compatibility-部署注意"><a href="#Minor-Compatibility-部署注意" class="headerlink" title="Minor Compatibility 部署注意"></a>Minor Compatibility 部署注意</h3><p>如上，直接依赖于 CUDA Runtime 的应用程序可以部署在以下两种场景中:</p>
<ul>
<li>系统上安装的 CUDA driver 比 Runtime 更新</li>
<li>CUDA  Runtime 比系统上的 CUDA  driver 更新，但它们来自相同的 CUDA Toolkit 的 major 版本</li>
</ul>
<p>在场景 2 中，系统管理员应该意识到上述限制，并且应该能够在遇到任何问题时指出应用程序失败的原因。</p>
<p>Minor 版本兼容性为库的使用和部署提供了灵活性。使用支持次要版本兼容性的库的应用程序可以部署在具有不同版本的 Toolkit 和库的系统上，而无需针对库版本的差异重新编译应用程序。这对库的旧版本和新版本都适用，前提是它们都来自同一个 major 发行系列。请注意，应该考虑库本身具有相互依赖性。例如，每个 cuDNN 版本都需要一个特定版本的 cuBLAS。</p>
<h2 id="Forward-Compatibility"><a href="#Forward-Compatibility" class="headerlink" title="Forward Compatibility"></a>Forward Compatibility</h2><h3 id="支持跨-Toolkit-Major-版本"><a href="#支持跨-Toolkit-Major-版本" class="headerlink" title="支持跨 Toolkit Major 版本"></a>支持跨 Toolkit Major 版本</h3><img src="/2024/09/20/NVIDIA/CUDA/forward-compatibility-upgrade-path.png" class="" title="Forward Compatibility Upgrade Path">



<p>Forward Compatibility 升级方式参考：<a href="https://docs.nvidia.com/deploy/cuda-compatibility/index.html#installing-the-forward-compatibility-package">Installing the Forward Compatibility Package</a></p>
<h3 id="Deployment-Considerations-for-Forward-Compatibility"><a href="#Deployment-Considerations-for-Forward-Compatibility" class="headerlink" title="Deployment Considerations for Forward Compatibility"></a>Deployment Considerations for Forward Compatibility</h3><p>参考：<a href="https://docs.nvidia.com/deploy/cuda-compatibility/index.html#installing-the-forward-compatibility-package">https://docs.nvidia.com/deploy/cuda-compatibility/index.html#installing-the-forward-compatibility-package</a></p>
<h1 id="CUDA-编程模型"><a href="#CUDA-编程模型" class="headerlink" title="CUDA 编程模型"></a>CUDA 编程模型</h1><img src="/2024/09/20/NVIDIA/CUDA/memory-hierarchy-in-gpus-1-625x381.png" class="" title="img">

<p>（来源：<a href="https://developer.nvidia.com/blog/cuda-refresher-cuda-programming-model/%EF%BC%89">https://developer.nvidia.com/blog/cuda-refresher-cuda-programming-model/）</a></p>
]]></content>
      <categories>
        <category>NVIDIA</category>
        <category>CUDA</category>
      </categories>
      <tags>
        <tag>NVIDIA</tag>
      </tags>
  </entry>
  <entry>
    <title>NVIDIA</title>
    <url>/2024/09/17/NVIDIA/NVIDIA/</url>
    <content><![CDATA[<h1 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h1><p>查看显卡型号：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看显卡信号</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ubuntu-drivers devices</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lshw -numeric -C display</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lspci | grep -i vga</span></span><br></pre></td></tr></table></figure>



<h2 id="nouveau"><a href="#nouveau" class="headerlink" title="nouveau"></a><strong>nouveau</strong></h2><p>Xorg 项目下的支持 Nvidia 显卡的开源驱动。该项目的目标是利用逆向工程Nvidia的专有Linux 驱动创造一个开源驱动程序。nouveau 性能较低。</p>
<p>NVK 是为 NVIDIA 图形硬件开发的新的开源 Vulkan 驱动程序，旨在成为新的图形驱动程序。</p>
<p>Ubuntu 默认使用 X.Org X server - Nouveau 驱动。</p>
<p>安装 NVIDIA GPU 驱动前，需禁用 nouveau。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否禁用</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"> lsmod | grep nouveau <span class="comment"># 若出现 nouveau 表示未禁用</span></span></span><br><span class="line">nouveau              2842624  0</span><br><span class="line">mxm_wmi                12288  1 nouveau</span><br><span class="line">drm_ttm_helper         12288  1 nouveau</span><br><span class="line">ttm                   110592  3 drm_ttm_helper,i915,nouveau</span><br><span class="line">drm_display_helper    241664  2 i915,nouveau</span><br><span class="line">drm_kms_helper        270336  4 drm_display_helper,nvidia_drm,i915,nouveau</span><br><span class="line">i2c_algo_bit           16384  3 nvidiafb,i915,nouveau</span><br><span class="line">drm                   761856  30 drm_kms_helper,drm_display_helper,nvidia,drm_buddy,drm_ttm_helper,nvidia_drm,i915,ttm,nouveau</span><br><span class="line">video                  73728  5 nvidia_wmi_ec_backlight,ideapad_laptop,i915,nouveau,nvidia_modeset</span><br><span class="line">wmi                    40960  6 video,nvidia_wmi_ec_backlight,wmi_bmof,ideapad_laptop,mxm_wmi,nouveau</span><br></pre></td></tr></table></figure>

<p>注意：在 Intel Core i7-1465HX + RTX4060Ti 平台，ubuntu2204 测试，未屏蔽 nouveau，也能正常安装和使用 NVIDIA driver</p>
<h2 id="NVIDIA-driver"><a href="#NVIDIA-driver" class="headerlink" title="NVIDIA driver"></a><strong>NVIDIA driver</strong></h2><p>方式一：通过系统自带软件中心，选择 NVIDIA 驱动(如 <em>NVIDIA  driver metapackage from nvidia-driver-xxx</em> 下图是已手动安装 NVIDIA 驱动后的截图)安装，会自动禁用 nouveau。</p>
<img src="/2024/09/17/NVIDIA/NVIDIA/image-20240917112604604.png" class="" title="image-20240917112604604">



<p>方式二：</p>
<p>下载官方驱动 <a href="https://www.nvidia.cn/drivers/lookup/">https://www.nvidia.cn/drivers/lookup/</a> OR <a href="https://www.nvidia.com/en-us/geforce/drivers/">https://www.nvidia.com/en-us/geforce/drivers/</a></p>
<img src="/2024/09/17/NVIDIA/NVIDIA/image-20240917112655871.png" class="" title="image-20240917112655871">

<p>卸载原有驱动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt remove --purge nvidia*</span></span><br></pre></td></tr></table></figure>

<p>更新依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt update</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install g++</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install gcc</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install make</span></span><br></pre></td></tr></table></figure>

<p>禁用 nouveau</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改 /etc/modprobe.d/blacklist.conf 或 blacklist-nouveau.conf</span><br><span class="line"># 或 /etc/modprobe.d/blacklist-nvidia-nouveau.conf</span><br><span class="line"># 在末尾添加以下语句</span><br><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br><span class="line"></span><br><span class="line"># 然后在终端输入更新指令</span><br><span class="line">$ sudo update-initramfs -u</span><br></pre></td></tr></table></figure>

<p>关闭当前显示服务，进入 tty</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ctrl + Alt + F1~F6 进入 TTY</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> systemctl gdm3 stop  <span class="comment"># 关闭显示服务</span></span></span><br></pre></td></tr></table></figure>

<p>安装驱动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> ./NVIDIA-Linux-x86_64-xxxx.run</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装完，重启显示服务</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> systemctl restart gdm3</span></span><br></pre></td></tr></table></figure>

<p>注意：NVIDI CUDA 库中自带有 driver，因此，可直接安装 CUDA 即可。</p>
<h1 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h1><p>cuda 安装参考：</p>
<p>安装完成，需配置环境变量，例如：在  中添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export CUDA_HOME=/usr/local/cuda-12.5</span><br><span class="line">export PATH=$CUDA_HOME/bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$&#123;LD_LIBRARY_PATH&#125;</span><br></pre></td></tr></table></figure>



<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="GCC-版本不匹配"><a href="#GCC-版本不匹配" class="headerlink" title="GCC 版本不匹配"></a>GCC 版本不匹配</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The kernel was built by： x86_64-linux-gnu-gcc-12(xxxx) 12.3.0</span><br><span class="line">You are using: CC(XXX) 11.3</span><br></pre></td></tr></table></figure>

<p>解决方法：更新 gcc 版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install gcc-12 g++-12</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 20</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc --version <span class="comment"># 验证版本信息</span></span></span><br></pre></td></tr></table></figure>



<h3 id="无法加载-nvidia-drm"><a href="#无法加载-nvidia-drm" class="headerlink" title="无法加载 nvidia-drm"></a><strong>无法加载 nvidia-drm</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Unable to load the &quot;nvidia-drm&quot; kernel module</span><br></pre></td></tr></table></figure>

<p>尝试切换到终端命名模式，无效：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到终端命令模式，不启动图形界面</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> systemctl set-default multi-user.target</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> reboot 0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt purge nvidia*</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt autoremmove</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> reboot 0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次安装 CUDA</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> ./cuda-xxx.run</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换会图形界面模式</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> systemctl set-default graphical.target</span></span><br></pre></td></tr></table></figure>

<p><strong>最终解决方法</strong> : NVIDIA 驱动被列入黑名单(blacklisted)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 注意：prime-select 会生成 /lib/modprobe.d/nvidia-kms.conf 文件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> prime-select nvidia <span class="comment"># 需安装 nvidia-prime</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否加入黑名单</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep nvidia /etc/modprobe.d/* /lib/modprobe.d/*</span></span><br><span class="line">/etc/modprobe.d/blacklist-framebuffer.conf:blacklist nvidiafb</span><br><span class="line">/lib/modprobe.d/nvidia-kms.conf:#This file was generated by nvidia-prime</span><br><span class="line">/lib/modprobe.d/nvidia-kms.conf:options nvidia-drm modeset=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此处找到 /etc/modprobe.d/blacklist-framembuffer.conf 中有 nvidia，删除该文件中的 nvidia 相关行，然后执行</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span>  update-initramfs -u</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> reboot 0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后重装即可</span></span><br></pre></td></tr></table></figure>

<p>若 nvidia 驱动已安装，但在 settings 中看不到显卡信息，或者 nvidia-smi 无法查看信息，也可先检查是否有黑名单</p>
<h3 id="prime-select-切换-nvidia-后无法进入图形界面"><a href="#prime-select-切换-nvidia-后无法进入图形界面" class="headerlink" title="prime-select 切换 nvidia 后无法进入图形界面"></a><strong>prime-select 切换 nvidia 后无法进入图形界面</strong></h3><p><code>prime-select</code> 会生成 <code>/lib/modprobe.d/nvidia-kms.conf</code> 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This file was generated by nvidia-prime</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set value to 0 to <span class="built_in">disable</span> modesetting</span></span><br><span class="line">options nvidia-drm modeset=1</span><br></pre></td></tr></table></figure>

<p>解决方法：删除该文件</p>
<h1 id="cuDNN"><a href="#cuDNN" class="headerlink" title="cuDNN"></a>cuDNN</h1><p>下载 <a href="https://developer.nvidia.com/rdp/cudnn-archive">cuDNN</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install zlib1g</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dpkg -i cudnn-local-repo-ubuntu2204-8.9.7.29_1.0-1_amd64.deb</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">cp</span> /var/cudnn-local-repo-ubuntu2204-8.9.7.29/cudnn-local-08A7D361-keyring.gpg /usr/share/keyrings/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt update</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装其他库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install libcudnn8 libcudnn8-dev libcudnn8-samples</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install libfreeimage3 libfreeimage-dev</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> -r /usr/src/cudnn_samples_v8/ ~/workspaces/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span>  ~/workspaces/cudnn_samples_v8/mnistCUDNN</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make clean &amp;&amp; make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./mnistCUDNN</span></span><br></pre></td></tr></table></figure>



<h1 id="切换显卡"><a href="#切换显卡" class="headerlink" title="切换显卡"></a>切换显卡</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt-get install nvidia-prime</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> prime-select nvidia <span class="comment"># 支持 intel/nvidia/on-demand/query</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> reboot</span></span><br></pre></td></tr></table></figure>



<h2 id="动态显示切换"><a href="#动态显示切换" class="headerlink" title="动态显示切换"></a>动态显示切换</h2><p>NVIDIA Advanced Optimus 动态显示切换，能自动选择由 GeForce GPU 还是集成显卡来驱动内部显示器，并根据正在运行的应用、根据需要进行切换，从而降低整体功耗，延长笔记本续航。</p>
<p>NVIDIA Advanced Optimus 引入了基于硬件的动态显示开关，使 GPU 能够直接控制显示器，而不通过 IGP 进行路由。</p>
<p><code>prime-select on-demand</code> 即动态选择显卡。</p>
<p>指定使用独显启动程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">env</span> __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia rviz2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">~/.bashrc 中添加以下语句，然后使用 nvrun &lt;<span class="built_in">command</span>&gt; 方式运行</span></span><br><span class="line">alias nvrun=&#x27;env __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia __VK_LAYER_NV_optimus=NVIDIA_only VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.x86_64.json &#x27;</span><br></pre></td></tr></table></figure>

<p>或创建 <code>/bin/optirun</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">export __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia</span><br><span class="line">for i in &quot;$@&quot;</span><br><span class="line">do      </span><br><span class="line">        cmd=$cmd&#x27; &#x27;&#x27;&quot;&#x27;$i&#x27;&quot;&#x27;</span><br><span class="line">done    </span><br><span class="line">echo $cmd | exec sh</span><br></pre></td></tr></table></figure>

<p>然后使用 <code>optirun &lt;command&gt;</code>  运行指令。</p>
<p>参考：<a href="https://askubuntu.com/questions/1188458/how-to-use-prime-select-on-demand-in-latest-kubuntu-19-10/1226557#1226557">https://askubuntu.com/questions/1188458/how-to-use-prime-select-on-demand-in-latest-kubuntu-19-10/1226557#1226557</a> 可知，ubuntu20.04 对 Xorg 进行了更新才支持该特性。</p>
<p>或右键要启动的程序，选择 “Launch using Discrete Graphics Card”</p>
<h1 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h1><h2 id="查看显卡使用情况"><a href="#查看显卡使用情况" class="headerlink" title="查看显卡使用情况"></a>查看显卡使用情况</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nvidia-smi</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> fuser -v /dev/nvidia*</span></span><br></pre></td></tr></table></figure>



<h2 id="查看当前显卡"><a href="#查看当前显卡" class="headerlink" title="查看当前显卡"></a>查看当前显卡</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有 <span class="keyword">in</span> use 状态的 VGA 设备</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lspci -nnk | grep -i vga -A3 | grep <span class="string">&#x27;in use&#x27;</span></span></span><br><span class="line">Kernel driver in use: i915</span><br><span class="line">Kernel driver in use: nvidia</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lspci -vnn | grep -A12 <span class="string">&#x27;\&#x27;</span><span class="string">&#x27;[030[02]\]&#x27;</span> | grep -Ei <span class="string">&quot;vga|3d|display|kernel&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> lshw -c display</span></span><br><span class="line">  *-display                 </span><br><span class="line">       description: VGA compatible controller</span><br><span class="line">       product: NVIDIA Corporation</span><br><span class="line">       vendor: NVIDIA Corporation</span><br><span class="line">       physical id: 0</span><br><span class="line">       bus info: pci@0000:01:00.0</span><br><span class="line">       logical name: /dev/fb0</span><br><span class="line">       version: a1</span><br><span class="line">       width: 64 bits</span><br><span class="line">       clock: 33MHz</span><br><span class="line">       capabilities: pm msi pciexpress vga_controller bus_master cap_list rom fb</span><br><span class="line">       configuration: depth=32 driver=nvidia latency=0 mode=2560x1600 visual=truecolor xres=2560 yres=1600</span><br><span class="line">       resources: iomemory:600-5ff iomemory:620-61f irq:152 memory:81000000-81ffffff memory:6000000000-61ffffffff memory:6200000000-6201ffffff ioport:5000(size=128) memory:82000000-8207ffff</span><br><span class="line">  *-display</span><br><span class="line">       description: VGA compatible controller</span><br><span class="line">       product: Intel Corporation</span><br><span class="line">       vendor: Intel Corporation</span><br><span class="line">       physical id: 2</span><br><span class="line">       bus info: pci@0000:00:02.0</span><br><span class="line">       logical name: /dev/fb0</span><br><span class="line">       version: 04</span><br><span class="line">       width: 64 bits</span><br><span class="line">       clock: 33MHz</span><br><span class="line">       capabilities: pciexpress msi pm vga_controller bus_master cap_list rom fb</span><br><span class="line">       configuration: depth=32 driver=i915 latency=0 resolution=2560,1600</span><br><span class="line">       resources: iomemory:620-61f iomemory:400-3ff irq:150 memory:6202000000-6202ffffff memory:4000000000-400fffffff ioport:6000(size=64) memory:c0000-dffff memory:4010000000-4016ffffff memory:4020000000-40ffffffff</span><br></pre></td></tr></table></figure>

<p>此例中，系统有两个显卡设备，Intel 集成显卡(i915) 和 NVIDIA 独立显卡，且都在使用中。</p>
<h2 id="查看显卡信息"><a href="#查看显卡信息" class="headerlink" title="查看显卡信息"></a>查看显卡信息</h2><h3 id="deviceQuery"><a href="#deviceQuery" class="headerlink" title="deviceQuery"></a>deviceQuery</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需安装好 CUDA</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /usr/local/cuda-10.2/samples/1_Utilities/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> make -j4</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行 ./deviceQuery</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若为桌面显卡，可直接运行</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">. /usr/local/cuda-11.7/extras/demo_suite/deviceQuery</span></span><br></pre></td></tr></table></figure>

<p>输出信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./deviceQuery Starting...</span><br><span class="line"></span><br><span class="line"> CUDA Device Query (Runtime API) version (CUDART static linking)</span><br><span class="line"></span><br><span class="line">Detected 1 CUDA Capable device(s)</span><br><span class="line"></span><br><span class="line">Device 0: &quot;NVIDIA Tegra X2&quot;</span><br><span class="line">  CUDA Driver Version / Runtime Version          10.2 / 10.2</span><br><span class="line">  CUDA Capability Major/Minor version number:    6.2</span><br><span class="line">  Total amount of global memory:                 3825 MBytes (4011302912 bytes)</span><br><span class="line">  ( 2) Multiprocessors, (128) CUDA Cores/MP:     256 CUDA Cores</span><br><span class="line">  GPU Max Clock rate:                            1300 MHz (1.30 GHz)</span><br><span class="line">  Memory Clock rate:                             1300 Mhz</span><br><span class="line">  Memory Bus Width:                              128-bit</span><br><span class="line">  L2 Cache Size:                                 524288 bytes</span><br><span class="line">  Maximum Texture Dimension Size (x,y,z)         1D=(131072), 2D=(131072, 65536), 3D=(16384, 16384, 16384)</span><br><span class="line">  Maximum Layered 1D Texture Size, (num) layers  1D=(32768), 2048 layers</span><br><span class="line">  Maximum Layered 2D Texture Size, (num) layers  2D=(32768, 32768), 2048 layers</span><br><span class="line">  Total amount of constant memory:               65536 bytes</span><br><span class="line">  Total amount of shared memory per block:       49152 bytes</span><br><span class="line">  Total number of registers available per block: 32768</span><br><span class="line">  Warp size:                                     32</span><br><span class="line">  Maximum number of threads per multiprocessor:  2048</span><br><span class="line">  Maximum number of threads per block:           1024</span><br><span class="line">  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)</span><br><span class="line">  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)</span><br><span class="line">  Maximum memory pitch:                          2147483647 bytes</span><br><span class="line">  Texture alignment:                             512 bytes</span><br><span class="line">  Concurrent copy and kernel execution:          Yes with 1 copy engine(s)</span><br><span class="line">  Run time limit on kernels:                     No</span><br><span class="line">  Integrated GPU sharing Host Memory:            Yes</span><br><span class="line">  Support host page-locked memory mapping:       Yes</span><br><span class="line">  Alignment requirement for Surfaces:            Yes</span><br><span class="line">  Device has ECC support:                        Disabled</span><br><span class="line">  Device supports Unified Addressing (UVA):      Yes</span><br><span class="line">  Device supports Compute Preemption:            Yes</span><br><span class="line">  Supports Cooperative Kernel Launch:            Yes</span><br><span class="line">  Supports MultiDevice Co-op Kernel Launch:      Yes</span><br><span class="line">  Device PCI Domain ID / Bus ID / location ID:   0 / 0 / 0</span><br><span class="line">  Compute Mode:</span><br><span class="line">     &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;</span><br><span class="line"></span><br><span class="line">deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 10.2, CUDA Runtime Version = 10.2, NumDevs = 1</span><br><span class="line">Result = PASS</span><br></pre></td></tr></table></figure>



<h2 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 CUDA 版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nvcc -V</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /usr/local/cuda/version.txt</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="prime-select"><a href="#prime-select" class="headerlink" title="prime-select"></a>prime-select</h2><p>需安装 <code>nvidia-prime</code> 包。</p>
<p>用法：<code>prime-select nvidia/intel/on-demand/query</code></p>
<ul>
<li><p>on-demand：表示需要手动选择</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> prime-select query <span class="comment"># 查看当前显卡驱动</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> prime-select intel <span class="comment"># 切换 intel 显卡</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> prime-select nvidia <span class="comment"># 切换 NVIDIA 显卡</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>prime-select</code> 切换 Intel 显卡禁用 NVIDIA 显卡时：</p>
<ul>
<li><p>在 grub 的 <code>GRUB_LINUX_DEFAULT</code>  参数添加了 ，禁用 nouveau 进行电源管理</p>
</li>
<li><p><code>/lib/modprobe.d</code> 中创建 <code>blacklist-nvidia.conf</code> 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Do not modify</span><br><span class="line"># This file was generated by nvidia-prime</span><br><span class="line">blacklist nvidia</span><br><span class="line">blacklist nvidia-drm</span><br><span class="line">blacklist nvidia-modeset</span><br><span class="line">alias nvidia off</span><br><span class="line">alias nvidia-drm off</span><br><span class="line">alias nvidia-modeset off</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用 <code>update-initramfs -u</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> prime-select intel</span></span><br><span class="line">Info: selecting the intel profile</span><br><span class="line">Updating the initramfs. Please wait for the operation to complete:</span><br><span class="line">Done</span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>prime-select</code> 切换 NVIDIA 显卡时：</p>
<ul>
<li><p>删除 grub 的 <code>GRUB_CMDLINE_LINUX_DEFAULT</code> 参数里面的 <code>noveau.runpm=0</code> </p>
</li>
<li><p>删除在 <code>/lib/modprobe.d</code> 目录下的 <code>blacklist-nvidia.conf</code></p>
</li>
<li><p>使用 <code>update-initramfs -u</code>  更新</p>
</li>
<li><p><code>systemctl disable nvidia-prime-boot.service</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> prime-select nvidia</span></span><br><span class="line">Info: selecting the nvidia profile</span><br><span class="line">Deleting /lib/modprobe.d/nvidia-runtimepm.conf</span><br><span class="line">Updating the initramfs. Please wait for the operation to complete:</span><br><span class="line">Done</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="bumblebee"><a href="#bumblebee" class="headerlink" title="bumblebee"></a>bumblebee</h1><p>主要应用场景是 Intel + Nvidia 双显卡笔记本，默认关闭 N 卡，降低功耗，当需要更强图形渲染功能时开启 Nvidia 显卡。</p>
<p>安装 bumblebee 后，默认使用集显。当使用 optirun 或 primusrun 时，会使用独显。</p>
<p>bumblebee 安装的是 NVIDIA 闭源驱动。</p>
<p>bumblebee 安装时会默认安装 bbswitch，没有bbswitch（也没启用nouveau）的话，独显处于常开状态，不仅费电，而且起不到任何作用。bbswitch 的作用是控制 optimus 独显的电源。（注：optimus 是 NVIDIA 针对笔记本电脑的显示切换技术，可以实现独显与集显之间无缝、自动、实时的切换（使用者无需重启或手动调整），从而实现降低功耗）</p>
<p>同时，bumblebee 可以在用户层直接手动调用独显来运行程序，程序关闭后独显也自动关闭。</p>
<p>bumblebee vs Prime</p>
<p>prime 同时只能用一种显卡，要么独显要么集显；而 bumblebee 实现了两种显卡同时交互使用，互不影响。</p>
]]></content>
      <categories>
        <category>NVIDIA</category>
      </categories>
      <tags>
        <tag>NVIDIA</tag>
      </tags>
  </entry>
  <entry>
    <title>nvidia-docker</title>
    <url>/2024/09/21/NVIDIA/nvidia-docker/</url>
    <content><![CDATA[<h1 id="Docker-NVIDIA"><a href="#Docker-NVIDIA" class="headerlink" title="Docker NVIDIA"></a>Docker NVIDIA</h1><p>使⽤ NVIDIA 显卡，有 nvidia-docker、nvidia-docker2、nvidia-container-toolkits 选项</p>
<ul>
<li><strong>nvidia-docker</strong> 是 NVIDIA 第⼀代⽀持 docker 容器内使⽤ GPU 的项⽬，需配套使⽤ nvidia-docker 命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This project has been superseded by the NVIDIA Container Toolkit.</span><br><span class="line">The tooling provided by this repository has been deprecated and the </span><br><span class="line">repository archived.</span><br><span class="line">The nvidia-docker wrapper is no longer supported, and the NVIDIA </span><br><span class="line">Container Toolkit has been extended to allow users to configure Docker </span><br><span class="line">to use the NVIDIA Container Runtime.</span><br><span class="line">For further instructions, see the NVIDIA Container Toolkit </span><br><span class="line">documentation and specifically the install guide.</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>nvidia-docker2</strong> 是 NVIDIA 第⼆代⽀持 docker 容器使⽤ GPU 资源的项⽬，仍需配套使⽤ nvidia-docker 命令，并需要指定参数 <code>--runtime=nvidia</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">既可以使用 nvidia docker 指令，会自动引入 --runtime=nvidia 参数;</span><br><span class="line">也可使用 docker 指令，并手动指定 --runtime=nvidia 参数</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>nvidia-container-toolkits</strong>：最新的⽅案。nvidia-docker2 已被 nvidia-container-toolkits 取代，使⽤ <code>--gpus</code> 参数，⽆需再指定 <code>--runtime</code></p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">使⽤ nvidia docker 指令，或在指令中引⼊了 --runtime=nvidia 的⽅式均已弃⽤，当前使⽤ nvidia-container-toolkits ⼯具，使⽤ --gpus 参数即可。</span><br></pre></td></tr></table></figure>



<img src="/2024/09/21/NVIDIA/nvidia-docker/nvidia-container-docker.png" class="" title="nvidia-container-stack">

<p>nvidia-container-toolkits 包含一个 container runtime library（<a href="https://github.com/NVIDIA/libnvidia-container">libnvidia-container</a>） 和用于自动配置容器以利用NVIDIA gpu 的工具。</p>
<p>参考：<a href="https://developer.nvidia.com/zh-cn/blog/gpu-containers-runtime/">https://developer.nvidia.com/zh-cn/blog/gpu-containers-runtime/</a></p>
<h2 id="安装-nvidia-container-toolkits"><a href="#安装-nvidia-container-toolkits" class="headerlink" title="安装 nvidia-container-toolkits"></a>安装 <strong>nvidia-container-toolkits</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | <span class="built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkitkeyring.gpg \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; curl -s -L https://nvidia.github.io/libnvidiacontainer/stable/deb/nvidia-container-toolkit.list | \</span></span><br><span class="line"><span class="language-bash"> sed <span class="string">&#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidiacontainer-toolkit-keyring.gpg] https://#g&#x27;</span> | \</span></span><br><span class="line"><span class="language-bash"> <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/nvidia-container-toolkit.list</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt-get update</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt-get install -y nvidia-container-toolkit</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置. nvidia-ctk 修改 /etc/docker/daemon.json 文件</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 1. 该方式需要 root 用户运行 docker</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> nvidia-ctk runtime configure --runtime=docker</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> systemctl restart docker</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2. 该方式可使用非root运行docker</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nvidia-ctk runtime configure --runtime=docker --config=<span class="variable">$HOME</span>/.config/docker/daemon.json</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">非root用户可运行</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl restart docker</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> nvidia-ctk config --<span class="built_in">set</span> nvidia-container-cli.no-cgroups --inplace</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -it --<span class="built_in">rm</span> --gpus all --<span class="built_in">env</span>=<span class="string">&quot;DISPLAY&quot;</span> --volume=<span class="string">&quot;/etc/group:/etc/group:ro&quot;</span> --volume=<span class="string">&quot;/etc/passwd:/etc/passwd:ro&quot;</span> --volume=<span class="string">&quot;/etc/shadow:/etc/shadow:ro&quot;</span> --volume=<span class="string">&quot;/etc/sudoers.d:/etc/sudoers.d:ro&quot;</span> --net host -v ~/workspaces/mycobot_ws:/home/user/mycobot_ws mynoetic</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">必须指定 -e NVIDIA_DRIVER_CAPABILITIES=all</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需先执行 xhost +<span class="built_in">local</span>:docker</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -ti --privileged --<span class="built_in">env</span>=<span class="string">&quot;DISPLAY&quot;</span> --<span class="built_in">env</span>=<span class="string">&quot;QT_X11_NO_MITSHM=1&quot;</span> --volume=<span class="string">&quot;/tmp/.X11-unix:/tmp/.X11-unix:rw&quot;</span> --gpus all -e NVIDIA_DRIVER_CAPABILITIES=all --net host -v ~/workspaces/mycobot_ws:/home/user/mycobot_ws mynoetic</span></span><br></pre></td></tr></table></figure>

<p>指定 <code>--gpus all</code> 参数，容器中程序如 RViz 等⽆法正常使⽤ NVIDIA GPU。解决⽅法，容器内部执⾏指令时，指定环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker 启动时使用 --<span class="built_in">env</span> 指定这两个参数时无效</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">env</span> __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia rviz2</span></span><br></pre></td></tr></table></figure>

<p>尝试以下⽅法，均⽆效。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">xhost +<span class="built_in">local</span>:docker</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> xhost + <span class="comment"># 允许所有主机访问当前 X 服务器</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -it --<span class="built_in">rm</span> --gpus all --<span class="built_in">env</span>=<span class="string">&quot;DISPLAY&quot;</span> -e</span> </span><br><span class="line">__NV_PRIME_RENDER_OFFLOAD=1 -e __GLX_VENDOR_LIBRARY_NAME=nvidia -v </span><br><span class="line">/dev/dri:/dev/dri --env=&quot;QT_X11_NO_MITSHM=1&quot; --volume=&quot;/tmp/.X11-</span><br><span class="line">unix:/tmp/.X11-unix:rw&quot; --volume=&quot;/etc/group:/etc/group:ro&quot; --</span><br><span class="line">volume=&quot;/etc/passwd:/etc/passwd:ro&quot; --</span><br><span class="line">volume=&quot;/etc/shadow:/etc/shadow:ro&quot; --</span><br><span class="line">volume=&quot;/etc/sudoers.d:/etc/sudoers.d:ro&quot; --net host -v </span><br><span class="line">~/workspaces/mycobot_ws:/home/user/mycobot_ws mynoetic</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> xhost -</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -it \</span></span><br><span class="line"><span class="language-bash"> -e <span class="string">&quot;DISPLAY=<span class="variable">$DISPLAY</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash"> -<span class="built_in">env</span>=<span class="string">&quot;QT_X11_NO_MITSHM=1&quot;</span> \</span></span><br><span class="line"><span class="language-bash"> -v /tmp/.X11-unix:/tmp/.X11-unix \</span></span><br><span class="line"><span class="language-bash"> --device=/dev/dri:/dev/dri \</span></span><br><span class="line"><span class="language-bash"> --net host -v ~/workspaces/mycobot_ws:/home/user/mycobot_ws mynoetic</span></span><br><span class="line"> </span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -it --gpus all \</span></span><br><span class="line"><span class="language-bash"> -e NVIDIA_DRIVER_CAPABILITIES=all \</span></span><br><span class="line"><span class="language-bash"> -v /tmp/.X11-unix:/tmp/.X11-unix \</span></span><br><span class="line"><span class="language-bash"> -v /dev/dri:/dev/dri \</span></span><br><span class="line"><span class="language-bash"> --device=/dev/snd \</span></span><br><span class="line"><span class="language-bash"> --device=/dev/dri/renderD128\</span></span><br><span class="line"><span class="language-bash"> -e DISPLAY=unix<span class="variable">$DISPLAY</span> \</span></span><br><span class="line"><span class="language-bash"> &lt;image name&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -ti --privileged --<span class="built_in">env</span>=<span class="string">&quot;DISPLAY&quot;</span> --<span class="built_in">env</span>=<span class="string">&quot;QT_X11_NO_MITSHM=1&quot;</span> --volume=<span class="string">&quot;/tmp/.X11-unix:/tmp/.X11-unix:rw&quot;</span> --runtime=nvidia --gpus all -e NVIDIA_DRIVER_CAPABILITIES=all --net host -v ~/workspaces/mycobot_ws:/home/user/mycobot_ws mynoetic</span></span><br></pre></td></tr></table></figure>



<h1 id="Jetson-docker"><a href="#Jetson-docker" class="headerlink" title="Jetson docker"></a>Jetson docker</h1><p><a href="https://www.patzer0.com/archives/nvidia-jetson-xaiver-nx-install-latest-version-of-ros2-by-docker">https://www.patzer0.com/archives/nvidia-jetson-xaiver-nx-install-latest-version-of-ros2-by-docker</a></p>
<h2 id="NGC-l4t"><a href="#NGC-l4t" class="headerlink" title="NGC l4t"></a>NGC l4t</h2><p>参考：</p>
<ul>
<li><p><a href="https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-base">https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-base</a></p>
</li>
<li><p><a href="https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-pytorch">https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-pytorch</a></p>
</li>
<li><p><a href="https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-tensorrt">https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-tensorrt</a></p>
</li>
<li><p><a href="https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-ml">https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-ml</a></p>
</li>
<li><p><a href="https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-jetpack">https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-jetpack</a></p>
</li>
<li><p><a href="https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-cuda">https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-cuda</a></p>
</li>
<li><p><a href="https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-tensorflow">https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-tensorflow</a></p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> docker pull nvcr.io/nvidia/l4t-pytorch:r35.2.1-pth2.0-py3</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>注: l4t -  Linux for tegra</p>
</blockquote>
<h2 id="jetson-containers"><a href="#jetson-containers" class="headerlink" title="jetson-containers"></a>jetson-containers</h2><p>在Jetson上不推荐直接使用公共 Docker Image，NVIDIA为一些常用的镜像编译了适合Jetson的版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/dusty-nv/jetson-containers.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">bash jetson-containers/install.sh</span></span><br></pre></td></tr></table></figure>

<p>更改 runtime 为 nvidia，这样 NVCC 编译器和 GPU 才可用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 /etc/docker/daemon.json，添加以下内容</span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;runtimes&quot;: &#123;</span><br><span class="line">        &quot;nvidia&quot;: &#123;</span><br><span class="line">            &quot;path&quot;: &quot;nvidia-container-runtime&quot;,</span><br><span class="line">            &quot;runtimeArgs&quot;: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &quot;default-runtime&quot;: &quot;nvidia&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 docker</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span>  systemctl  daemon-reload</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span>  systemctl  restart  docker.service</span></span><br></pre></td></tr></table></figure>

<p>拉取镜像，参考：<a href="https://hub.docker.com/r/dustynv/ros/tags%E3%80%82%E6%B3%A8%E6%84%8F%EF%BC%8CL4T">https://hub.docker.com/r/dustynv/ros/tags。注意，L4T</a> 版本需高于镜像中版本(可通过 jtop 查看)</p>
<blockquote>
<p><code>注：L4T - Linux for Tegra</code></p>
</blockquote>
<p>jetson-container 默认带 <code>--rm</code> 参数，因此 exit 退出时会自动删除容器。</p>
<p>若出现 <code>/tmp/.docker.xauth</code> 不存在问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /tmp/.docker.xauth</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> /tmp/.docker.xauth</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> xhost +si:localuser:root</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">XAUTH=/tmp/.docker.xauth</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">xauth nlist <span class="variable">$DISPLAY</span> | sed -e <span class="string">&#x27;s/^..../ffff/&#x27;</span> | xauth -f <span class="variable">$XAUTH</span> nmerge -</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> 777 <span class="variable">$XAUTH</span></span></span><br></pre></td></tr></table></figure>



<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参考 https://github.com/dusty-nv/jetson-containers</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">jetson-containers run dustynv/pytorch:2.1-r35.4.1</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>Jetson 中，需确保 docker 镜像中的 OS 版本与 Jetson 环境一致。</strong></p>
<p>例如：JetPack6.0 需使用 <code>dustynv/ros:xxx-l4t-r36.2.0</code> 镜像</p>
</blockquote>
<blockquote>
<p>在JetPack 5上，CUDA&#x2F;cuDNN&#x2F;TensorRT 等被安装在容器内(不像 JetPack 4，它们通过NVIDIA runtime 从主机设备安装到容器中)。</p>
</blockquote>
<blockquote>
<p>Jetson AGX Orin 32GB，容器镜像 <code>ros:noetic-pytorch-l4t-r34.1.1</code> ，容器内 CUDA 版本为 11.4。需将容器内 CUDA 升级到 11.8。</p>
<p>方法：手动提取容器内的cuda-compat deb，然后安装cuda-toolkit或cuda-libraries包(只有cuda和cuda-runtime依赖于cuda-compat&#x2F;nvidia-l4t-core)。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sudo docker build --network=host --tag cuda:12.2 .</span></span><br><span class="line"><span class="comment"># sudo docker run --runtime nvidia -it --rm --network host cuda:12.2 cuda-samples/bin/aarch64/linux/release/deviceQuery</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">20.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -y --no-install-recommends \</span></span><br><span class="line"><span class="language-bash">            wget \</span></span><br><span class="line"><span class="language-bash">            git \</span></span><br><span class="line"><span class="language-bash">            binutils \</span></span><br><span class="line"><span class="language-bash">            xz-utils \</span></span><br><span class="line"><span class="language-bash">            ca-certificates \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/* \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get clean</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># download the CUDA Toolkit local installer</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/arm64/cuda-ubuntu2004.pin -O /etc/apt/preferences.d/cuda-repository-pin-600 &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    wget https://developer.download.nvidia.com/compute/cuda/12.2.2/local_installers/cuda-tegra-repo-ubuntu2004-12-2-local_12.2.2-1_arm64.deb &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    dpkg -i cuda-tegra-repo-*.deb &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> cuda-tegra-repo-*.deb </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add the signed keys</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cp</span> /var/cuda-tegra-repo-*/cuda-tegra-*-keyring.gpg /usr/share/keyrings/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># manually extract cuda-compat</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /var/cuda-compat &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cd</span> /var/cuda-compat &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    ar x ../cuda-tegra-repo-*/cuda-compat-*.deb &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    tar xvf data.tar.xz -C / &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf /var/cuda-compat</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># install cuda-toolkit (doesn&#x27;t depend on cuda-compat/nvidia-l4t-core)</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -y --no-install-recommends \</span></span><br><span class="line"><span class="language-bash">            cuda-toolkit-* \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/* \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get clean</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># environment variables </span></span><br><span class="line"><span class="keyword">ENV</span> NVIDIA_VISIBLE_DEVICES=all</span><br><span class="line"><span class="keyword">ENV</span> NVIDIA_DRIVER_CAPABILITIES=all</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> CUDA_HOME=<span class="string">&quot;/usr/local/cuda&quot;</span></span><br><span class="line"><span class="keyword">ENV</span> PATH=<span class="string">&quot;/usr/local/cuda/bin:$&#123;PATH&#125;&quot;</span></span><br><span class="line"><span class="keyword">ENV</span> LD_LIBRARY_PATH=<span class="string">&quot;/usr/local/cuda/compat:/usr/local/cuda/lib64:$&#123;LD_LIBRARY_PATH&#125;&quot;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># build cuda samples</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> git <span class="built_in">clone</span> --branch=v12.2 https://github.com/NVIDIA/cuda-samples &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cd</span> cuda-samples/Samples/1_Utilities/deviceQuery &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    make</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /</span></span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://github.com/dusty-nv/jetson-containers/issues/258">https://github.com/dusty-nv/jetson-containers/issues/258</a></p>
</blockquote>
]]></content>
      <categories>
        <category>NVIDIA</category>
      </categories>
      <tags>
        <tag>NVIDIA</tag>
      </tags>
  </entry>
  <entry>
    <title>python调用C++</title>
    <url>/2024/09/07/%E4%BB%A3%E7%A0%81%E7%BC%96%E7%A8%8B/python%E8%B0%83%E7%94%A8CPP/</url>
    <content><![CDATA[<h1 id="python-调用-C"><a href="#python-调用-C" class="headerlink" title="python 调用 C++"></a><strong>python 调用 C++</strong></h1><p>Boost.Python 用于在 C++ 和 Python 之间进行无缝集成，使得可以在 Python 中使用 C++ 编写的代码。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/python.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> bp = boost::python;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">MyClass</span>(<span class="type">int</span> value) : <span class="built_in">value_</span>(value) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123; value_ = value; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getValue</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> value_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;No arguments&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; std::endl; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BOOST_PYTHON_MODULE 宏定义 python 模块 my_module </span></span><br><span class="line"><span class="built_in">BOOST_PYTHON_MODULE</span>(my_module) &#123;</span><br><span class="line">  <span class="comment">// 使用 bp::class_ 将上面定义的 MyClass 类暴露给 python</span></span><br><span class="line">  <span class="function">bp::class_&lt;MyClass&gt; <span class="title">my_class_interface</span><span class="params">(<span class="string">&quot;MyClass&quot;</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">// bp::init 用于暴露构造函数</span></span></span></span><br><span class="line"><span class="params"><span class="function">    bp::init&lt;<span class="type">int</span>&gt;())</span></span>;</span><br><span class="line">    <span class="comment">// .def 将 C++ 类的成员函数暴露给 Python</span></span><br><span class="line">    my_class_interface.<span class="built_in">def</span>(<span class="string">&quot;setValue&quot;</span>, &amp;MyClass::setValue)</span><br><span class="line">    my_class_interface.<span class="built_in">def</span>(<span class="string">&quot;getValue&quot;</span>, &amp;MyClass::getValue)</span><br><span class="line">    <span class="comment">// 重载函数</span></span><br><span class="line">    my_class_interface.<span class="built_in">def</span>(<span class="string">&quot;show&quot;</span>, <span class="built_in">static_cast</span>&lt;<span class="built_in">void</span> (MyClass::*)()&gt;(&amp;MyClass::show))</span><br><span class="line">    my_class_interface.<span class="built_in">def</span>(<span class="string">&quot;show&quot;</span>, <span class="built_in">static_cast</span>&lt;<span class="built_in">void</span> (MyClass::*)(<span class="type">int</span>)&gt;(&amp;MyClass::show))</span><br><span class="line">    <span class="comment">// .def_readwrite 和 .def_readonly 用于将类成员变量暴露给 Python</span></span><br><span class="line">    my_class_interface.<span class="built_in">def_readonly</span>(<span class="string">&quot;value&quot;</span>, &amp;MyClass::value_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>cmake 文件</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最低版本要求</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目名称</span></span><br><span class="line"><span class="keyword">project</span>(MyPythonModule)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 C++ 标准</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找 Python 和 Boost Python</span></span><br><span class="line"><span class="keyword">find_package</span>(PythonInterp REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(PythonLibs REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(Boost REQUIRED COMPONENTS python)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PYTHON_INCLUDE_DIRS&#125;</span> <span class="variable">$&#123;Boost_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 源文件</span></span><br><span class="line"><span class="keyword">set</span>(SOURCES my_class.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成共享库</span></span><br><span class="line"><span class="keyword">add_library</span>(my_module SHARED <span class="variable">$&#123;SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(my_module <span class="variable">$&#123;PYTHON_LIBRARIES&#125;</span> <span class="variable">$&#123;Boost_LIBRARIES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 PREFIX 为空，生成 my_class.so 库，否则默认生成 libmy_class.so 库</span></span><br><span class="line"><span class="keyword">set_target_properties</span>(my_module PROPERTIES PREFIX <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>





<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用别名</span></span><br><span class="line">moveit::core::<span class="built_in">MoveItErrorCode</span> (MoveGroupInterfaceWrapper::*pick_1)(<span class="type">const</span> std::string&amp;, <span class="type">bool</span>) =</span><br><span class="line">      &amp;MoveGroupInterfaceWrapper::pick;</span><br><span class="line">move_group_interface_class.<span class="built_in">def</span>(<span class="string">&quot;pick&quot;</span>, pick_1);</span><br></pre></td></tr></table></figure>



<p>bp::tuple 用于将 C++ 数据转换为 Python 元组的工具。例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/python.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> bp = boost::python;</span><br><span class="line"></span><br><span class="line"><span class="function">bp::tuple <span class="title">createComplexTuple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个复杂的元组，包含整数、字符串和向量</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    bp::list pyList;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v : vec) &#123;</span><br><span class="line">        pyList.<span class="built_in">append</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bp::<span class="built_in">make_tuple</span>(<span class="number">42</span>, <span class="string">&quot;Hello, World&quot;</span>, pyList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BOOST_PYTHON_MODULE</span>(my_module) &#123;</span><br><span class="line">    bp::<span class="built_in">def</span>(<span class="string">&quot;createComplexTuple&quot;</span>, createComplexTuple);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="C-调用-python"><a href="#C-调用-python" class="headerlink" title="C++ 调用 python"></a><strong>C++ 调用 python</strong></h1><p>假设有 python 方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># example.py</span></span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">greet</span><span class="params">(name)</span>:</span></span><br><span class="line"><span class="function">  return f<span class="string">&quot;Hello, &#123;name&#125;!&quot;</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">def add(a, b):</span></span><br><span class="line"><span class="function">  return a + b</span></span><br></pre></td></tr></table></figure>

<p>C++ 中通过 boost.python 调用以上 python 方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/python.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> bp = boost::python;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">callPythonFunctions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化Python解释器</span></span><br><span class="line">  <span class="built_in">Py_Initialize</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 导入 Python 模块</span></span><br><span class="line">    bp::object example_module = bp::<span class="built_in">import</span>(<span class="string">&quot;example&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取函数对象</span></span><br><span class="line">    bp::object greet_function = example_module.<span class="built_in">attr</span>(<span class="string">&quot;greet&quot;</span>);</span><br><span class="line">    bp::object add_function = example_module.<span class="built_in">attr</span>(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">    <span class="comment">// 调用 greet 函数</span></span><br><span class="line">    bp::object result = <span class="built_in">greet_function</span>(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">    std::string greet_result = bp::<span class="built_in">extract</span>&lt;std::string&gt;(result);</span><br><span class="line">    std::cout &lt;&lt; greet_result &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用 add 函数</span></span><br><span class="line">    bp::object sum_result = <span class="built_in">add_function</span>(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="type">int</span> sum = bp::<span class="built_in">extract</span>&lt;<span class="type">int</span>&gt;(sum_result);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Sum: &quot;</span> &lt;&lt; sum &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="built_in">catch</span> (bp::error_already_set <span class="type">const</span> &amp;) &#123;</span><br><span class="line">    <span class="built_in">PyErr_Print</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭Python解释器</span></span><br><span class="line">  <span class="built_in">Py_Finalize</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">callPythonFunctions</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>对应的 CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.12</span>)</span><br><span class="line"><span class="keyword">project</span>(CppCallPython)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(PythonInterp REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(PythonLibs REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(Boost REQUIRED COMPONENTS python)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PYTHON_INCLUDE_DIRS&#125;</span> <span class="variable">$&#123;Boost_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(SOURCES main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(CppCallPython <span class="variable">$&#123;SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(CppCallPython <span class="variable">$&#123;PYTHON_LIBRARIES&#125;</span> <span class="variable">$&#123;Boost_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>代码编程</category>
      </categories>
      <tags>
        <tag>代码编程</tag>
      </tags>
  </entry>
  <entry>
    <title>三维旋转</title>
    <url>/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/</url>
    <content><![CDATA[<p>工具及网站：</p>
<ul>
<li><a href="https://danceswithcode.net/engineeringnotes/rotations_in_3d/demo3D/rotations_in_3d_tool.html">Euler Angler Visualization Tool</a></li>
<li><a href="https://www.andre-gaschler.com/rotationconverter/">3D Rotation Converter</a></li>
<li><a href="http://www.sygreer.com/projects/matrix/">2x2 Matrix Visualization</a></li>
<li><a href="https://www.khanacademy.org/math/linear-algebra/matrix-transformations/linear-transformations/a/visualizing-linear-transformations">matrix-transformations</a></li>
<li><a href="https://www.meccanismocomplesso.org/en/3d-rotations-and-euler-angles-in-python/">3d-rotations-and-euler-angles-in-python</a></li>
</ul>
<p>三维旋转的表示方法：</p>
<ul>
<li>欧拉角 Euler Angle：本文参考旋转顺序为 ZXY</li>
<li>四元数 Quaternion</li>
<li>旋转矩阵 Rotation Matrix</li>
<li>轴角 Axis-Angle</li>
</ul>
<img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC.png" class="" title="三维旋转">



<p>**内旋(Intrinsic rotation)**：其每个 elemental 绕的是 object space basis 的轴</p>
<p>**外旋(Extrinsic rotation)**：其每个 elemental rotation 绕的是world space basis 的轴</p>
<p>欧拉角旋转序列(Euler Angle Rotational Sequence)共有 12 种顺序：</p>
<ul>
<li><p>6 种绕三个轴的旋转，即 Tait-Bryan Angle：</p>
</li>
<li><ul>
<li>XYZ、XZY、YXZ、YZX、ZXY、ZYX</li>
</ul>
</li>
<li><p>6 种只绕两个轴的旋转，即 Proper Euler Angle：</p>
</li>
<li><ul>
<li>XYX、YXY、XZX、ZXZ、YZY、ZYZ</li>
</ul>
</li>
</ul>
<p>如果相邻两次旋转是绕同一轴，如 XXY，则可以坍缩为 XY。也就是说，一共有 12 种基础旋转的组合顺序，它们可以旋转出三维的所有旋转状态。</p>
<img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/%E6%AC%A7%E6%8B%89%E8%A7%92%E6%97%8B%E8%BD%AC%E5%BA%8F%E5%88%97.png" class="" title="欧拉角旋转序列">



<h1 id="欧拉角与四元数"><a href="#欧拉角与四元数" class="headerlink" title="欧拉角与四元数"></a>欧拉角与四元数</h1><p>使用四元数是因为没有万向节死锁问题。</p>
<p>万向节锁是指物体的两个旋转轴指向同一个方向。实际上,当两个旋转轴平行时，即万向节锁现象发生了，换句话说，绕一个轴旋转可能会覆盖住另一个轴的旋转，从而失去一维自由度。</p>
<p>通常说来，万向节锁发生在使用 <strong>Eular Angles</strong>（欧拉角）的旋转操作中,原因是 Eular Angles 按照一定的顺序依次独立地绕轴旋转。想象一个具体的旋转场景，首先物体先绕转 X 轴旋转，然后再绕 Y 轴，最后绕 Z 轴旋转，从而完成一个旋转操作（实际是想绕某一个轴旋转,然而 Eular Angle 将这个旋转分成三个独立的步骤进行）,当你绕 Y 轴旋转 90 度之后万向节锁的问题就出现了，因为 X 轴已经被求值了，它不再随同其他两个轴旋转，这样 X 轴与 Z 轴就指向同一个方向（它们相当于同一个轴了）。</p>
<p>定义：</p>
<img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/%E6%AC%A7%E6%8B%89%E8%A7%92.png" class="" title="欧拉角">

<p><strong>分别为绕 Z 轴、Y 轴、X 轴的旋转角度(即:Yaw、Pitch、Roll)</strong></p>
<h2 id="欧拉角转四元数"><a href="#欧拉角转四元数" class="headerlink" title="欧拉角转四元数"></a>欧拉角转四元数</h2><p>欧拉角构造四元数，跟欧拉角构造旋转矩阵一样，就是把三个基础旋转Elemental Rotation 组合在一起。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q = ((x，y，z)，w)</span><br></pre></td></tr></table></figure>

<img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/%E5%9B%9B%E5%85%83%E6%95%B0.png" class="" title="四元数">

<p>即：</p>
<img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/image-20240922141359897.png" class="" title="image-20240922141359897">



<h2 id="四元数转欧拉角"><a href="#四元数转欧拉角" class="headerlink" title="四元数转欧拉角"></a>四元数转欧拉角</h2><img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/%E5%9B%9B%E5%85%83%E6%95%B0%E8%BD%AC%E6%AC%A7%E6%8B%89%E8%A7%92.png" class="" title="四元数转欧拉角">

<p>四元数转 Eular Angle 最直接的方法是用四元数的元素运算和反三角函数凑出公式来。但这样计算展开后的每一项都是六次多项式，计算复杂。因此可借助 <strong>四元数 -&gt; 旋转矩阵 -&gt; 欧拉角</strong> 方式进行转换。</p>
<h1 id="欧拉角与旋转矩阵"><a href="#欧拉角与旋转矩阵" class="headerlink" title="欧拉角与旋转矩阵"></a>欧拉角与旋转矩阵</h1><h2 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a><strong>旋转矩阵</strong></h2><h3 id="绕x轴旋转"><a href="#绕x轴旋转" class="headerlink" title="绕x轴旋转"></a>绕x轴旋转</h3><img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5-%E7%BB%95X%E6%97%8B%E8%BD%AC.png" class="" title="旋转矩阵-绕X旋转.png">

<h3 id="绕Y轴旋转"><a href="#绕Y轴旋转" class="headerlink" title="绕Y轴旋转"></a>绕Y轴旋转</h3><img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5-%E7%BB%95Y%E6%97%8B%E8%BD%AC.png" class="" title="旋转矩阵-绕Y旋转">



<h3 id="绕Z轴旋转"><a href="#绕Z轴旋转" class="headerlink" title="绕Z轴旋转"></a>绕Z轴旋转</h3><img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5-%E7%BB%95Z%E6%97%8B%E8%BD%AC.png" class="" title="旋转矩阵-绕Z旋转">

<h2 id="欧拉角"><a href="#欧拉角" class="headerlink" title="欧拉角"></a>欧拉角</h2><p>静态：即绕世界坐标系三个轴的旋转，由于物体旋转过程中坐标轴保持静止，所以称为静态。 </p>
<p>动态：即绕物体坐标系三个轴的旋转，由于物体旋转过程中坐标轴随着物体做相同的转动，所以称为动态。</p>
<p> （<strong>动态欧拉角会出现万向锁现象；静态欧拉角不存在万向锁的问题</strong>）</p>
<h2 id="欧拉角转旋转矩阵"><a href="#欧拉角转旋转矩阵" class="headerlink" title="欧拉角转旋转矩阵"></a><strong>欧拉角转旋转矩阵</strong></h2><p>欧拉角构造旋转矩阵就直接把三个 Elemental Rotation Matrix 相乘即可：</p>
<img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/%E6%AC%A7%E6%8B%89%E8%A7%92%E8%BD%AC%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5.png" class="" title="欧拉角转旋转矩阵">

<p>其中：</p>
<img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/%E6%AC%A7%E6%8B%89%E8%A7%92%E8%BD%AC%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5-1.png" class="" title="欧拉角转旋转矩阵-1">



<h2 id="旋转矩阵转欧拉角"><a href="#旋转矩阵转欧拉角" class="headerlink" title="旋转矩阵转欧拉角"></a>旋转矩阵转欧拉角</h2><img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5%E8%BD%AC%E6%AC%A7%E6%8B%89%E8%A7%92.png" class="" title="旋转矩阵转欧拉角">

<p>即：</p>
<img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5%E8%BD%AC%E6%AC%A7%E6%8B%89%E8%A7%92-1.png" class="" title="旋转矩阵转欧拉角-1">

<h1 id="四元数与旋转矩阵"><a href="#四元数与旋转矩阵" class="headerlink" title="四元数与旋转矩阵"></a>四元数与旋转矩阵</h1><h2 id="四元数转旋转矩阵"><a href="#四元数转旋转矩阵" class="headerlink" title="四元数转旋转矩阵"></a><strong>四元数转旋转矩阵</strong></h2><p>方法一：</p>
<p>假设四元数为</p>
<img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/image-20240922142132369.png" class="" title="image-20240922142132369">

<p>其中 </p>
<img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/image-20240922142139494.png" class="" title="image-20240922142139494">

<p>根据 <a href="http://mathworld.wolfram.com/RodriguesRotationFormula.html">RodriguesRotation</a> 公式，可知旋转矩阵(Column major)为：</p>
<img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/image-20240922142147439.png" class="" title="image-20240922142147439">



<p>方法二：</p>
<p>先将四元数转换为轴角 θ 与向量 (x,y,z)，再计算旋转矩阵：</p>
<img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/image-20240922142159106.png" class="" title="image-20240922142159106">

<img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/image-20240922142201522.png" class="" title="image-20240922142201522">



<h2 id="旋转矩阵转四元数"><a href="#旋转矩阵转四元数" class="headerlink" title="旋转矩阵转四元数"></a><strong>旋转矩阵转四元数</strong></h2><img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/image-20240922142222288.png" class="" title="image-20240922142222288">

<p>如果 q0 趋近于 0，tr(R) 趋近于 -1,则求解四元数的过程为：</p>
<p>(**tr(M)**：表示矩阵 M 的迹 - trace，也就是矩阵对角元素的和)</p>
<img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/image-20240922142232591.png" class="" title="image-20240922142232591">

<img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/image-20240922142236057.png" class="" title="image-20240922142236057">



<h1 id="轴角"><a href="#轴角" class="headerlink" title="轴角"></a>轴角</h1><p>轴-角(Axis-Angle)：绕某条单位轴旋转一定角度。也称：旋转向量。由一个旋转轴和旋转角组成。</p>
<h2 id="轴角到四元数"><a href="#轴角到四元数" class="headerlink" title="轴角到四元数"></a><strong>轴角到四元数</strong></h2><p>给定一个单位长度的旋转轴 (x, y, z) 和一个角度 θ。对应的四元数为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q(x,y,z,w) = ( (x,y,z)\*(sinθ/2), cos(θ/2) )</span><br></pre></td></tr></table></figure>

<p><a href="https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles">https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles</a></p>
<h2 id="轴角转旋转矩阵"><a href="#轴角转旋转矩阵" class="headerlink" title="轴角转旋转矩阵"></a><strong>轴角转旋转矩阵</strong></h2><p>Axis Angle 转 Rotation Matrix 可以从罗德里格斯旋转公式 <a href="https://link.zhihu.com/?target=https://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula">Rodrigues Rotation Formula</a> 开始推导。</p>
<img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/image-20240922142323002.png" class="" title="image-20240922142323002">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># Scientific computing library </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 轴角转旋转矩阵  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">axis_angle_rot_matrix</span>(<span class="params">k,q</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Creates a 3x3 rotation matrix in 3D space from an axis and an angle.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    Input</span></span><br><span class="line"><span class="string">    :param k: A 3 element array containing the unit axis to rotate around (kx,ky,kz) </span></span><br><span class="line"><span class="string">    :param q: The angle (in radians) to rotate by</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    Output</span></span><br><span class="line"><span class="string">    :return: A 3x3 element matix containing the rotation matrix</span></span><br><span class="line"><span class="string">     </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">#15 pts </span></span><br><span class="line">    c_theta = np.cos(q)</span><br><span class="line">    s_theta = np.sin(q)</span><br><span class="line">    v_theta = <span class="number">1</span> - np.cos(q)</span><br><span class="line">    kx = k[<span class="number">0</span>]</span><br><span class="line">    ky = k[<span class="number">1</span>]</span><br><span class="line">    kz = k[<span class="number">2</span>]   </span><br><span class="line">     </span><br><span class="line">    <span class="comment"># First row of the rotation matrix</span></span><br><span class="line">    r00 = kx * kx * v_theta + c_theta</span><br><span class="line">    r01 = kx * ky * v_theta - kz * s_theta</span><br><span class="line">    r02 = kx * kz * v_theta + ky * s_theta</span><br><span class="line">     </span><br><span class="line">    <span class="comment"># Second row of the rotation matrix</span></span><br><span class="line">    r10 = kx * ky * v_theta + kz * s_theta</span><br><span class="line">    r11 = ky * ky * v_theta + c_theta</span><br><span class="line">    r12 = ky * kz * v_theta - kx * s_theta</span><br><span class="line">     </span><br><span class="line">    <span class="comment"># Third row of the rotation matrix</span></span><br><span class="line">    r20 = kx * kz * v_theta - ky * s_theta</span><br><span class="line">    r21 = ky * kz * v_theta + kx * s_theta</span><br><span class="line">    r22 = kz * kz * v_theta + c_theta</span><br><span class="line">     </span><br><span class="line">    <span class="comment"># 3x3 rotation matrix</span></span><br><span class="line">    rot_matrix = np.array([[r00, r01, r02],</span><br><span class="line">                           [r10, r11, r12],</span><br><span class="line">                           [r20, r21, r22]])</span><br><span class="line">                            </span><br><span class="line">    <span class="keyword">return</span> rot_matrix</span><br></pre></td></tr></table></figure>



<h2 id="旋转矩阵转轴角"><a href="#旋转矩阵转轴角" class="headerlink" title="旋转矩阵转轴角"></a>旋转矩阵转轴角</h2><img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/image-20240922142344829.png" class="" title="image-20240922142344829">



<h1 id="Eigen-示例"><a href="#Eigen-示例" class="headerlink" title="Eigen 示例"></a><strong>Eigen 示例</strong></h1><p>此例依赖 eigen 库（<code>sudo apt-get install libeigen3-dev</code>）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> yaw = PI/<span class="number">3</span>;</span><br><span class="line"><span class="type">double</span> pitch = PI/<span class="number">4</span>;</span><br><span class="line"><span class="type">double</span> roll = PI/<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 欧拉角转旋转矩阵</span></span><br><span class="line">::<span class="function">Eigen::Vector3d <span class="title">ea0</span><span class="params">(yaw, pitch, roll)</span></span>;</span><br><span class="line">::Eigen::Matrix3d R;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Eigen::AngleAxisd - 旋转向量(3x1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">R = ::Eigen::<span class="built_in">AngleAxisd</span>(ea0[<span class="number">0</span>], ::Eigen::Vector3d::<span class="built_in">UintZ</span>())</span><br><span class="line">   * ::Eigen::<span class="built_in">AngleAxisd</span>(ea0[<span class="number">1</span>], ::Eigen::Vector3d::<span class="built_in">UintY</span>())</span><br><span class="line">   * ::Eigen::<span class="built_in">AngleAxisd</span>(ea0[<span class="number">2</span>], ::Eigen::Vector3d::<span class="built_in">UintX</span>());</span><br><span class="line">cout &lt;&lt; R &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转矩阵转四元数</span></span><br><span class="line">::Eigen::Quaterniond q;</span><br><span class="line">q = R;</span><br><span class="line">cout &lt;&lt; q.<span class="built_in">x</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; q.<span class="built_in">y</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; q.<span class="built_in">z</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; q.<span class="built_in">w</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 四元数转旋转矩阵</span></span><br><span class="line">::Eigen::Matrix3d Rx = q.<span class="built_in">toRotationMatrix</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转矩阵转欧拉角</span></span><br><span class="line">::Eigen::Vector3d ea1 = Rx.<span class="built_in">eulerAngles</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">cout &lt;&lt; ea1 / PI * <span class="number">180</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure>



<h1 id="欧拉角与四元数转换示例"><a href="#欧拉角与四元数转换示例" class="headerlink" title="欧拉角与四元数转换示例"></a>欧拉角与四元数转换示例</h1><h2 id="欧拉角转四元数-1"><a href="#欧拉角转四元数-1" class="headerlink" title="欧拉角转四元数"></a>欧拉角转四元数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">geometry_msgs::Quaternion </span><br><span class="line">tf::createQuaternionMsgFromRollPitchYaw</span><br></pre></td></tr></table></figure>



<h3 id="例-1：使用-tf"><a href="#例-1：使用-tf" class="headerlink" title="例 1：使用 tf"></a>例 1：使用 tf</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tf/tf.h&gt;</span></span></span><br><span class="line">tf::Quaternion q;</span><br><span class="line">q.<span class="built_in">setRPY</span>(roll, pitch, yaw);</span><br><span class="line"><span class="meta">#create ros msg</span></span><br><span class="line"><span class="function">tf::Quaternion <span class="title">createQuaternionFromRPY</span><span class="params">(<span class="type">double</span> roll,<span class="type">double</span> pitch,<span class="type">double</span> yaw)</span></span></span><br></pre></td></tr></table></figure>



<h3 id="例-2：python"><a href="#例-2：python" class="headerlink" title="例 2：python"></a>例 2：python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rpy2quaternion</span>(<span class="params">roll, pitch, yaw</span>):</span><br><span class="line">    x=sin(pitch/<span class="number">2</span>)sin(yaw/<span class="number">2</span>)cos(roll/<span class="number">2</span>)+cos(pitch/<span class="number">2</span>)cos(yaw/<span class="number">2</span>)sin(roll/<span class="number">2</span>)</span><br><span class="line">    y=sin(pitch/<span class="number">2</span>)cos(yaw/<span class="number">2</span>)cos(roll/<span class="number">2</span>)+cos(pitch/<span class="number">2</span>)sin(yaw/<span class="number">2</span>)sin(roll/<span class="number">2</span>)</span><br><span class="line">    z=cos(pitch/<span class="number">2</span>)sin(yaw/<span class="number">2</span>)cos(roll/<span class="number">2</span>)-sin(pitch/<span class="number">2</span>)cos(yaw/<span class="number">2</span>)sin(roll/<span class="number">2</span>)</span><br><span class="line">    w=cos(pitch/<span class="number">2</span>)cos(yaw/<span class="number">2</span>)cos(roll/<span class="number">2</span>)-sin(pitch/<span class="number">2</span>)sin(yaw/<span class="number">2</span>)sin(roll/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> x, y, z, w</span><br></pre></td></tr></table></figure>



<h2 id="四元数转欧拉角-1"><a href="#四元数转欧拉角-1" class="headerlink" title="四元数转欧拉角"></a>四元数转欧拉角</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">double th = tf::getYaw(transform.getRotation())</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">tf::<span class="built_in">Matrix3x3</span>(transform.<span class="built_in">getRotation</span>()).<span class="built_in">getRPY</span>(roll, pitch, yaw);</span><br></pre></td></tr></table></figure>



<h3 id="例-1：使用-tf-1"><a href="#例-1：使用-tf-1" class="headerlink" title="例 1：使用 tf"></a>例 1：使用 tf</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> roll, pitch, yaw;</span><br><span class="line">tf::Quaternion orientation;</span><br><span class="line"></span><br><span class="line"><span class="comment">// geometry_msgs/Quaternion 转 tf::Quaternion</span></span><br><span class="line">tf::<span class="built_in">quaternionMsgToTF</span>(imuIn-&gt;orientation, orientation);</span><br><span class="line"><span class="comment">// tf::Quaternion 转欧拉角</span></span><br><span class="line">tf::<span class="built_in">Matrix3x3</span>(orientation).<span class="built_in">getRPY</span>(roll, pitch, yaw);</span><br></pre></td></tr></table></figure>



<h3 id="例-2：使用-tf2"><a href="#例-2：使用-tf2" class="headerlink" title="例 2：使用 tf2"></a>例 2：使用 tf2</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tf2_geometry_msgs/tf2_geometry_msgs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">tf2::Quaternion quat_tf;</span><br><span class="line">geometry_msgs::Quaternion quat_msg = ...;</span><br><span class="line"></span><br><span class="line">tf2::<span class="built_in">convert</span>(quat_msg , quat_tf);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">tf2::<span class="built_in">fromMsg</span>(quat_msg, quat_tf);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> roll, pitch, yaw;</span><br><span class="line">tf2::<span class="built_in">Matrix3x3</span>(quat).<span class="built_in">getRPY</span>(roll, pitch, yaw); <span class="comment">// 四元数转欧拉角</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// or for the other conversion direction</span></span><br><span class="line">quat_msg = tf2::<span class="built_in">toMsg</span>(quat_tf); <span class="comment">// ros 消息格式转换</span></span><br></pre></td></tr></table></figure>



<h3 id="例-3：python-tf"><a href="#例-3：python-tf" class="headerlink" title="例 3：python tf"></a>例 3：python tf</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 四元数转欧拉角</span></span><br><span class="line"><span class="keyword">from</span> tf.transformations <span class="keyword">import</span> quaternion_multiply, quaternion_from_euler，</span><br><span class="line">                                euler_from_quaternion</span><br><span class="line"></span><br><span class="line">pos = Pose()</span><br><span class="line">q = quaternion_from_euler(<span class="number">0</span>, <span class="number">0</span>, point.z) <span class="comment"># 欧拉角转四元数</span></span><br><span class="line">pos.orientation.x = q[<span class="number">0</span>]</span><br><span class="line">pos.orientation.y = q[<span class="number">1</span>]</span><br><span class="line">pos.orientation.z = q[<span class="number">2</span>]</span><br><span class="line">pos.orientation.w = q[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 四元数转欧拉角</span></span><br><span class="line">(r, p, y) = tf.transformations.euler_from_quaternion([</span><br><span class="line">        msg.orientation.x, msg.orientation.y, </span><br><span class="line">        msg.orientation.z, msg.orientation.w])</span><br><span class="line"><span class="variable language_">self</span>.fill_euler_msg(msg, r, p, y)</span><br></pre></td></tr></table></figure>



<h3 id="例-4：python-math"><a href="#例-4：python-math" class="headerlink" title="例 4：python math"></a>例 4：python math</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 四元数转欧拉角  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">euler_from_quaternion</span>(<span class="params">x, y, z, w</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Convert a quaternion into euler angles (roll, pitch, yaw)</span></span><br><span class="line"><span class="string">    roll is rotation around x in radians (counterclockwise)</span></span><br><span class="line"><span class="string">    pitch is rotation around y in radians (counterclockwise)</span></span><br><span class="line"><span class="string">    yaw is rotation around z in radians (counterclockwise)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    t0 = +<span class="number">2.0</span> * (w * x + y * z)</span><br><span class="line">    t1 = +<span class="number">1.0</span> - <span class="number">2.0</span> * (x * x + y * y)</span><br><span class="line">    roll_x = math.atan2(t0, t1)</span><br><span class="line"> </span><br><span class="line">    t2 = +<span class="number">2.0</span> * (w * y - z * x)</span><br><span class="line">    t2 = +<span class="number">1.0</span> <span class="keyword">if</span> t2 &gt; +<span class="number">1.0</span> <span class="keyword">else</span> t2</span><br><span class="line">    t2 = -<span class="number">1.0</span> <span class="keyword">if</span> t2 &lt; -<span class="number">1.0</span> <span class="keyword">else</span> t2</span><br><span class="line">    pitch_y = math.asin(t2)</span><br><span class="line"> </span><br><span class="line">    t3 = +<span class="number">2.0</span> * (w * z + x * y)</span><br><span class="line">    t4 = +<span class="number">1.0</span> - <span class="number">2.0</span> * (y * y + z * z)</span><br><span class="line">    yaw_z = math.atan2(t3, t4)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> roll_x, pitch_y, yaw_z <span class="comment"># in radians</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简化版本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quart_to_rpy</span>(<span class="params">x, y, z, w</span>):</span><br><span class="line">    roll = math.atan2(<span class="number">2</span> * (w * x + y * z), <span class="number">1</span> - <span class="number">2</span> * (x * x + y * y))</span><br><span class="line">    pitch = math.asin(<span class="number">2</span> * (w * y - x * z))</span><br><span class="line">    yaw = math.atan2(<span class="number">2</span> * (w * z + x * y), <span class="number">1</span> - <span class="number">2</span> * (z * z + y * y))</span><br><span class="line">    <span class="keyword">return</span> roll, pitch, yaw</span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(euler_from_quaternion(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.7072</span>, <span class="number">0.7072</span>))   </span><br></pre></td></tr></table></figure>

<p>输出结果为：0.0, 0.0, 1.5710599</p>
<p>以 Axis-Angle 方式表示为：</p>
<blockquote>
<p><strong>{[x, y, z], angle} &#x3D; { [ 0, 0, 1 ], 1.571 }</strong></p>
</blockquote>
<h1 id="欧拉角与旋转矩阵转换示例"><a href="#欧拉角与旋转矩阵转换示例" class="headerlink" title="欧拉角与旋转矩阵转换示例"></a>欧拉角与旋转矩阵转换示例</h1><h2 id="欧拉角转旋转矩阵-1"><a href="#欧拉角转旋转矩阵-1" class="headerlink" title="欧拉角转旋转矩阵"></a><strong>欧拉角转旋转矩阵</strong></h2><img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/image-20240922143418150.png" class="" title="image-20240922143418150">



<h3 id="例-1：C-Eigen"><a href="#例-1：C-Eigen" class="headerlink" title="例 1：C++ Eigen"></a><strong>例 1：C++ Eigen</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输入角度顺序：ZYX - yaw、pitch、roll</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">static</span> Eigen::Matrix&lt;<span class="keyword">typename</span> Derived::Scalar, 3, 3&gt; <span class="title">ypr2R</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="type">const</span> Eigen::MatrixBase&lt;Derived&gt; &amp;ypr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> Derived::Scalar Scalar_t;</span><br><span class="line"></span><br><span class="line">    Scalar_t y = <span class="built_in">ypr</span>(<span class="number">0</span>) / <span class="number">180.0</span> * M_PI;</span><br><span class="line">    Scalar_t p = <span class="built_in">ypr</span>(<span class="number">1</span>) / <span class="number">180.0</span> * M_PI;</span><br><span class="line">    Scalar_t r = <span class="built_in">ypr</span>(<span class="number">2</span>) / <span class="number">180.0</span> * M_PI;</span><br><span class="line"></span><br><span class="line">    Eigen::Matrix&lt;Scalar_t, <span class="number">3</span>, <span class="number">3</span>&gt; Rz;</span><br><span class="line">    Rz &lt;&lt; <span class="built_in">cos</span>(y), -<span class="built_in">sin</span>(y), <span class="number">0</span>,</span><br><span class="line">        <span class="built_in">sin</span>(y), <span class="built_in">cos</span>(y), <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    Eigen::Matrix&lt;Scalar_t, <span class="number">3</span>, <span class="number">3</span>&gt; Ry;</span><br><span class="line">    Ry &lt;&lt; <span class="built_in">cos</span>(p), <span class="number">0.</span>, <span class="built_in">sin</span>(p),</span><br><span class="line">        <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>,</span><br><span class="line">        -<span class="built_in">sin</span>(p), <span class="number">0.</span>, <span class="built_in">cos</span>(p);</span><br><span class="line"></span><br><span class="line">    Eigen::Matrix&lt;Scalar_t, <span class="number">3</span>, <span class="number">3</span>&gt; Rx;</span><br><span class="line">    Rx &lt;&lt; <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>,</span><br><span class="line">        <span class="number">0.</span>, <span class="built_in">cos</span>(r), -<span class="built_in">sin</span>(r),</span><br><span class="line">        <span class="number">0.</span>, <span class="built_in">sin</span>(r), <span class="built_in">cos</span>(r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Rz * Ry * Rx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="例-2：python-1"><a href="#例-2：python-1" class="headerlink" title="例 2：python"></a><strong>例 2：python</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">eulerAnglesToRotationMatrix</span>(<span class="params">theta</span>) :</span><br><span class="line">    </span><br><span class="line">    R_x = np.array([[<span class="number">1</span>,         <span class="number">0</span>,                  <span class="number">0</span>                   ],</span><br><span class="line">                    [<span class="number">0</span>,         math.cos(theta[<span class="number">0</span>]), -math.sin(theta[<span class="number">0</span>]) ],</span><br><span class="line">                    [<span class="number">0</span>,         math.sin(theta[<span class="number">0</span>]), math.cos(theta[<span class="number">0</span>])  ]</span><br><span class="line">                    ])</span><br><span class="line">                  </span><br><span class="line">    R_y = np.array([[math.cos(theta[<span class="number">1</span>]),    <span class="number">0</span>,      math.sin(theta[<span class="number">1</span>])  ],</span><br><span class="line">                    [<span class="number">0</span>,                     <span class="number">1</span>,      <span class="number">0</span>                   ],</span><br><span class="line">                    [-math.sin(theta[<span class="number">1</span>]),   <span class="number">0</span>,      math.cos(theta[<span class="number">1</span>])  ]</span><br><span class="line">                    ])</span><br><span class="line">                </span><br><span class="line">    R_z = np.array([[math.cos(theta[<span class="number">2</span>]),    -math.sin(theta[<span class="number">2</span>]),    <span class="number">0</span>],</span><br><span class="line">                    [math.sin(theta[<span class="number">2</span>]),    math.cos(theta[<span class="number">2</span>]),     <span class="number">0</span>],</span><br><span class="line">                    [<span class="number">0</span>,                     <span class="number">0</span>,                      <span class="number">1</span>]</span><br><span class="line">                    ])</span><br><span class="line">                    </span><br><span class="line">    <span class="comment"># np.dot()：向量点积和矩阵乘法  </span></span><br><span class="line">    <span class="comment"># 向量点积：(x1, y1) 与 (x2, y2) 点积为 x1*x2 + y1*y2</span></span><br><span class="line">    <span class="comment"># 矩阵乘法： M1(mxn) 与 M2(nxm) 乘法结果为 mxm 矩阵             </span></span><br><span class="line">    R = np.dot(R_z, np.dot( R_y, R_x ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R</span><br></pre></td></tr></table></figure>



<h2 id="旋转矩阵转欧拉角-1"><a href="#旋转矩阵转欧拉角-1" class="headerlink" title="旋转矩阵转欧拉角"></a><strong>旋转矩阵转欧拉角</strong></h2><img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/image-20240922143513081.png" class="" title="image-20240922143513081">




<h3 id="例-1：C-eigen"><a href="#例-1：C-eigen" class="headerlink" title="例 1：C++ eigen"></a><strong>例 1：C++ eigen</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> Eigen::Vector3d <span class="title">R2ypr</span><span class="params">(<span class="type">const</span> Eigen::Matrix3d &amp;R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::Vector3d n = R.<span class="built_in">col</span>(<span class="number">0</span>);</span><br><span class="line">    Eigen::Vector3d o = R.<span class="built_in">col</span>(<span class="number">1</span>);</span><br><span class="line">    Eigen::Vector3d a = R.<span class="built_in">col</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">Eigen::Vector3d <span class="title">ypr</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    <span class="type">double</span> y = <span class="built_in">atan2</span>(<span class="built_in">n</span>(<span class="number">1</span>), <span class="built_in">n</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="type">double</span> p = <span class="built_in">atan2</span>(-<span class="built_in">n</span>(<span class="number">2</span>), <span class="built_in">n</span>(<span class="number">0</span>) * <span class="built_in">cos</span>(y) + <span class="built_in">n</span>(<span class="number">1</span>) * <span class="built_in">sin</span>(y));</span><br><span class="line">    <span class="type">double</span> r = <span class="built_in">atan2</span>(<span class="built_in">a</span>(<span class="number">0</span>) * <span class="built_in">sin</span>(y) - <span class="built_in">a</span>(<span class="number">1</span>) * <span class="built_in">cos</span>(y), -<span class="built_in">o</span>(<span class="number">0</span>) * <span class="built_in">sin</span>(y) + <span class="built_in">o</span>(<span class="number">1</span>) * <span class="built_in">cos</span>(y));</span><br><span class="line">    <span class="built_in">ypr</span>(<span class="number">0</span>) = y;</span><br><span class="line">    <span class="built_in">ypr</span>(<span class="number">1</span>) = p;</span><br><span class="line">    <span class="built_in">ypr</span>(<span class="number">2</span>) = r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ypr / M_PI * <span class="number">180.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="例-2：python-2"><a href="#例-2：python-2" class="headerlink" title="例 2：python"></a><strong>例 2：python</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isRotationMatrix</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="comment"># square matrix test</span></span><br><span class="line">    <span class="keyword">if</span> R.ndim != <span class="number">2</span> <span class="keyword">or</span> R.shape[<span class="number">0</span>] != R.shape[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    should_be_identity = np.allclose(R.dot(R.T), np.identity(R.shape[<span class="number">0</span>], np.<span class="built_in">float</span>))</span><br><span class="line">    should_be_one = np.allclose(np.linalg.det(R), <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> should_be_identity <span class="keyword">and</span> should_be_one</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotationMatrixToEulerAngles</span>(<span class="params">R</span>) :</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span>(isRotationMatrix(R))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#sy = math.sqrt(R[0,0] * R[0,0] +  R[1,0] * R[1,0]) # 错误</span></span><br><span class="line">    sy = math.sqrt(R[<span class="number">2</span>,<span class="number">1</span>] * R[<span class="number">2</span>,<span class="number">1</span>] + R[<span class="number">2</span>,<span class="number">2</span>] * R[<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line">    </span><br><span class="line">    singular = sy &lt; <span class="number">1e-6</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>  <span class="keyword">not</span> singular :</span><br><span class="line">        x = math.atan2(R[<span class="number">2</span>,<span class="number">1</span>] , R[<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line">        y = math.atan2(-R[<span class="number">2</span>,<span class="number">0</span>], sy)</span><br><span class="line">        z = math.atan2(R[<span class="number">1</span>,<span class="number">0</span>], R[<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        x = math.atan2(-R[<span class="number">1</span>,<span class="number">2</span>], R[<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">        y = math.atan2(-R[<span class="number">2</span>,<span class="number">0</span>], sy)</span><br><span class="line">        z = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> np.array([x, y, z])</span><br></pre></td></tr></table></figure>



<h1 id="旋转矩阵与四元数示例"><a href="#旋转矩阵与四元数示例" class="headerlink" title="旋转矩阵与四元数示例"></a><strong>旋转矩阵与四元数示例</strong></h1><h2 id="旋转矩阵转四元数-1"><a href="#旋转矩阵转四元数-1" class="headerlink" title="旋转矩阵转四元数"></a><strong>旋转矩阵转四元数</strong></h2><img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/image-20240922143603479.png" class="" title="image-20240922143603479">

<h3 id="例-1：C-Eigen-1"><a href="#例-1：C-Eigen-1" class="headerlink" title="例 1：C++ Eigen"></a><strong>例 1：C++ Eigen</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Eigen::Quaterniond <span class="title">rotationMatrix2Quaterniond</span><span class="params">(Eigen::Matrix3d R)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Eigen::Quaterniond q = Eigen::<span class="built_in">Quaterniond</span>(R);  </span><br><span class="line">    q.<span class="built_in">normalize</span>();  </span><br><span class="line">    cout &lt;&lt; “RotationMatrix2Quaterniond result is:” &lt;&lt;endl;  </span><br><span class="line">    cout &lt;&lt; ”x = ” &lt;&lt; q.<span class="built_in">x</span>() &lt;&lt;endl;  </span><br><span class="line">    cout &lt;&lt; ”y = ” &lt;&lt; q.<span class="built_in">y</span>() &lt;&lt;endl;  </span><br><span class="line">    cout &lt;&lt; ”z = ” &lt;&lt; q.<span class="built_in">z</span>() &lt;&lt;endl;  </span><br><span class="line">    cout &lt;&lt; ”w = ” &lt;&lt; q.<span class="built_in">w</span>() &lt;&lt;endl&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">return</span> q;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h3 id="例-2：python-3"><a href="#例-2：python-3" class="headerlink" title="例 2：python"></a>例 2：python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function q = vgg_quat_from_rotation_matrix( R )</span><br><span class="line">% vgg_quat_from_rotation_matrix Generates quaternion <span class="keyword">from</span> rotation matrix </span><br><span class="line">%            q = vgg_quat_from_rotation_matrix(R)</span><br><span class="line"></span><br><span class="line">q = [   (<span class="number">1</span> + R(<span class="number">1</span>,<span class="number">1</span>) + R(<span class="number">2</span>,<span class="number">2</span>) + R(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">    (<span class="number">1</span> + R(<span class="number">1</span>,<span class="number">1</span>) - R(<span class="number">2</span>,<span class="number">2</span>) - R(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">    (<span class="number">1</span> - R(<span class="number">1</span>,<span class="number">1</span>) + R(<span class="number">2</span>,<span class="number">2</span>) - R(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">    (<span class="number">1</span> - R(<span class="number">1</span>,<span class="number">1</span>) - R(<span class="number">2</span>,<span class="number">2</span>) + R(<span class="number">3</span>,<span class="number">3</span>)) ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ~issym(q)</span><br><span class="line">  % Pivot to avoid division by small numbers</span><br><span class="line">  [b I] = <span class="built_in">max</span>(<span class="built_in">abs</span>(q));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  % For symbolic quats, just make sure we<span class="string">&#x27;re nonzero</span></span><br><span class="line"><span class="string">  for k=1:4</span></span><br><span class="line"><span class="string">    if q(k) ~= 0</span></span><br><span class="line"><span class="string">      I = k;</span></span><br><span class="line"><span class="string">      break</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">  end</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">q(I) = sqrt(q(I)) / 2 ;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if I == 1 </span></span><br><span class="line"><span class="string">    q(2) = (R(3,2) - R(2,3)) / (4*q(I));</span></span><br><span class="line"><span class="string">    q(3) = (R(1,3) - R(3,1)) / (4*q(I));</span></span><br><span class="line"><span class="string">    q(4) = (R(2,1) - R(1,2)) / (4*q(I));</span></span><br><span class="line"><span class="string">elseif I==2</span></span><br><span class="line"><span class="string">    q(1) = (R(3,2) - R(2,3)) / (4*q(I));</span></span><br><span class="line"><span class="string">    q(3) = (R(2,1) + R(1,2)) / (4*q(I));</span></span><br><span class="line"><span class="string">    q(4) = (R(1,3) + R(3,1)) / (4*q(I));</span></span><br><span class="line"><span class="string">elseif I==3</span></span><br><span class="line"><span class="string">    q(1) = (R(1,3) - R(3,1)) / (4*q(I));</span></span><br><span class="line"><span class="string">    q(2) = (R(2,1) + R(1,2)) / (4*q(I));</span></span><br><span class="line"><span class="string">    q(4) = (R(3,2) + R(2,3)) / (4*q(I));</span></span><br><span class="line"><span class="string">elseif I==4</span></span><br><span class="line"><span class="string">    q(1) = (R(2,1) - R(1,2)) / (4*q(I));</span></span><br><span class="line"><span class="string">    q(2) = (R(1,3) + R(3,1)) / (4*q(I));</span></span><br><span class="line"><span class="string">    q(3) = (R(3,2) + R(2,3)) / (4*q(I));</span></span><br><span class="line"><span class="string">end</span></span><br></pre></td></tr></table></figure>



<h2 id="四元数转旋转矩阵-1"><a href="#四元数转旋转矩阵-1" class="headerlink" title="四元数转旋转矩阵"></a><strong>四元数转旋转矩阵</strong></h2><img src="/2024/09/22/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC/image-20240922143652557.png" class="" title="image-20240922143652557">

<h3 id="例-1：C-Eigen-2"><a href="#例-1：C-Eigen-2" class="headerlink" title="例 1：C++ Eigen"></a><strong>例 1：C++ Eigen</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Eigen::Matrix3d <span class="title">Quaternion2RotationMatrix</span><span class="params">(<span class="type">const</span> <span class="type">double</span> x,<span class="type">const</span> <span class="type">double</span> y,<span class="type">const</span> <span class="type">double</span> z,<span class="type">const</span> <span class="type">double</span> w)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Eigen::Quaterniond q;  </span><br><span class="line">    q.<span class="built_in">x</span>() = x;  </span><br><span class="line">    q.<span class="built_in">y</span>() = y;  </span><br><span class="line">    q.<span class="built_in">z</span>() = z;  </span><br><span class="line">    q.<span class="built_in">w</span>() = w;  </span><br><span class="line">  </span><br><span class="line">    Eigen::Matrix3d R = q.<span class="built_in">normalized</span>().<span class="built_in">toRotationMatrix</span>();  </span><br><span class="line">    cout &lt;&lt; “Quaternion2RotationMatrix result is:” &lt;&lt;endl;  </span><br><span class="line">    cout &lt;&lt; ”R = ” &lt;&lt; endl &lt;&lt; R &lt;&lt; endl&lt;&lt; endl;  </span><br><span class="line">    <span class="keyword">return</span> R;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>



<h3 id="例-2：python-4"><a href="#例-2：python-4" class="headerlink" title="例 2：python"></a><strong>例 2：python</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quaternion_to_rotation_matrix</span>(<span class="params">q</span>):  <span class="comment"># x, y ,z ,w</span></span><br><span class="line">    rot_matrix = np.array(</span><br><span class="line">        [[<span class="number">1.0</span> - <span class="number">2</span> * (q[<span class="number">1</span>] * q[<span class="number">1</span>] + q[<span class="number">2</span>] * q[<span class="number">2</span>]), <span class="number">2</span> * (q[<span class="number">0</span>] * q[<span class="number">1</span>] - q[<span class="number">3</span>] * q[<span class="number">2</span>]), <span class="number">2</span> * (q[<span class="number">3</span>] * q[<span class="number">1</span>] + q[<span class="number">0</span>] * q[<span class="number">2</span>])],</span><br><span class="line">         [<span class="number">2</span> * (q[<span class="number">0</span>] * q[<span class="number">1</span>] + q[<span class="number">3</span>] * q[<span class="number">2</span>]), <span class="number">1.0</span> - <span class="number">2</span> * (q[<span class="number">0</span>] * q[<span class="number">0</span>] + q[<span class="number">2</span>] * q[<span class="number">2</span>]), <span class="number">2</span> * (q[<span class="number">1</span>] * q[<span class="number">2</span>] - q[<span class="number">3</span>] * q[<span class="number">0</span>])],</span><br><span class="line">         [<span class="number">2</span> * (q[<span class="number">0</span>] * q[<span class="number">2</span>] - q[<span class="number">3</span>] * q[<span class="number">1</span>]), <span class="number">2</span> * (q[<span class="number">1</span>] * q[<span class="number">2</span>] + q[<span class="number">3</span>] * q[<span class="number">0</span>]), <span class="number">1.0</span> - <span class="number">2</span> * (q[<span class="number">0</span>] * q[<span class="number">0</span>] + q[<span class="number">1</span>] * q[<span class="number">1</span>])]],</span><br><span class="line">        dtype=q.dtype)</span><br><span class="line">    <span class="keyword">return</span> rot_matrix</span><br></pre></td></tr></table></figure>



<h3 id="例-3：tf"><a href="#例-3：tf" class="headerlink" title="例 3：tf"></a>例 3：tf</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tf</span></span><br><span class="line"><span class="keyword">from</span> tf.listener <span class="keyword">import</span> xyzw_to_mat44</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">oritation</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.x = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.y = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.z = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.w = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">ori = oritation()</span><br><span class="line">ori.x = rot[<span class="number">0</span>]</span><br><span class="line">ori.y = rot[<span class="number">1</span>]</span><br><span class="line">ori.z = rot[<span class="number">2</span>]</span><br><span class="line">ori.w = rot[<span class="number">3</span>]</span><br><span class="line">mat44 = xyzw_to_mat44(ori) <span class="comment"># 转换的结果为4 × 4 矩阵</span></span><br></pre></td></tr></table></figure>



<h3 id="例-4：scipy"><a href="#例-4：scipy" class="headerlink" title="例 4：scipy"></a>例 4：scipy</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.spatial.transform <span class="keyword">import</span> Rotation <span class="keyword">as</span> R</span><br><span class="line"></span><br><span class="line"><span class="comment"># (x, y, z, w) format</span></span><br><span class="line">r = R.from_quat([-<span class="number">0.716556549511624</span>,-<span class="number">0.6971278819736084</span>, -<span class="number">0.010016582945017661</span>,  <span class="number">0.02142651612120239</span>])</span><br><span class="line">r.as_matrix()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;rotation:\n&#x27;</span>,r.as_matrix())</span><br><span class="line">rotation_matrix = r.as_matrix()</span><br><span class="line"><span class="built_in">print</span>(rotation_matrix)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数学基础</category>
      </categories>
      <tags>
        <tag>数学基础</tag>
      </tags>
  </entry>
  <entry>
    <title>行为树与状态机</title>
    <url>/2024/09/07/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/</url>
    <content><![CDATA[<p>参考：</p>
<ul>
<li><a href="https://robohub.org/introduction-to-behavior-trees/">introduction-to-behavior-trees</a></li>
<li>The Behavior Trees in Robotics and AI</li>
<li><a href="https://gitee.com/ncnynl/turtlebot3_behavior_demos.git">turtlebot3_behavior_demos</a></li>
<li><a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/behavior-tree-in-unreal-engine---quick-start-guide?application_version=5.4">Behavior Tree in Unreal Engine - Quick Start Guide | Unreal Engine 5.4 Documentation | Epic Developer Community (epicgames.com)</a></li>
<li><a href="https://roboticseabass.com/2020/12/30/2020-review-service-robotics-mit-csail/">https://roboticseabass.com/2020/12/30/2020-review-service-robotics-mit-csail/</a></li>
</ul>
<p>BT vs FSM</p>
<ul>
<li>理论上，可以将任何东西表述为行为树、有限状态机、其它抽象之一。但不同模型在进行大规模设计时有气优劣</li>
<li>行为树与状态机，在模块化(modularity)和反应性(reactivity)之间存在一种权衡。通常，行为树更容易组合和修改，而有限状态机在设计反应性行为方面更有优势</li>
</ul>
<p>假设有一个移动抓取任务，机器人需要移动到物体旁，抓取物体，然后返回起始位置，其行为树和有限状态机设计分别如下</p>
<img src="/2024/09/07/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/image-20240907203758231.png" class="" title="image-20240907203758231">

<p>若要修改这种行为。例如，先检查抓取前的位置是否有效，必要时先纠正位姿。针对行为树，可以插入一个子树，而 FSM 则需要重新连接多个转换</p>
<img src="/2024/09/07/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/image-20240907203830026.png" class="" title="image-20240907203830026">

<p>此外，针对响应性问题。若机器人电池电量低，必须先返回充电再继续任务。此时使用 FSM 更容易，虽然会导致状态转换看似混乱。而为了使行为树在这类场景更具响应性，增加了 Reactive Sequence 概念，即使返回 SUCCEEDED，仍可对序列中的前面的子节点进行处理</p>
<img src="/2024/09/07/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/image-20240907203852775.png" class="" title="image-20240907203852775">



<p>（注意：此例中，只会在开始时检查电量，并非 reactive 的。可参考 reactive sequence 进行调整）</p>
<img src="/2024/09/07/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/image-20240907203915759.png" class="" title="image-20240907203915759">

<p>FSM 可通过允许在任意两个状态之间定义转换来实现这种 reactive。</p>
<img src="/2024/09/07/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/image-20240907203936469.png" class="" title="image-20240907203936469">

<p>分层有限状态机(HFSM)可以让结构更加清晰。上例中定义了一个 Nominal 超级状态，从而定义了正常操作与充电之间的工作模式。</p>
<p>由于这种模块化和反应性的权衡，FSM 在管理更高层级的操作模式(如正常操作与充电)方面表现优秀；而行为树则擅长构建复杂的行为序列，非常擅长处理故障恢复。因此，可考虑混合模式：</p>
<img src="/2024/09/07/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/image-20240907203957318.png" class="" title="image-20240907203957318">
]]></content>
      <categories>
        <category>行为树</category>
      </categories>
      <tags>
        <tag>行为树</tag>
        <tag>状态机</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack</title>
    <url>/2024/09/20/NVIDIA/Jetson/Jetpack/</url>
    <content><![CDATA[<p>NVIDIA JetPack SDK 是构建 AI 应用程序的最全面解决方案。JetPack SDK 提供了一个完整的开发环境。JetPack SDK 包括 Jetson Linux 驱动程序包（包含 Bootloader）、Linux内核、Ubuntu桌面环境，以及一套完整的加速GPU计算、多媒体、图形和计算机视觉的库。还包括用于主机和开发工具包的示例，文档和开发人员工具，并支持更高级别的sdk，如用于流媒体视频分析的 DeepStream，用于机器人的 Isaac 和用于会话 AI 的 Riva。</p>
<img src="/2024/09/20/NVIDIA/Jetson/Jetpack/jetpack-metapackage.png" class="" title="jetpack-metapackage.png">

<p>（来源：<a href="https://docs.nvidia.com/jetson/jetpack/install-setup/index.html#list-of-debian-packages%EF%BC%89">https://docs.nvidia.com/jetson/jetpack/install-setup/index.html#list-of-debian-packages）</a></p>
<p>安装 JetPack SDK 时，默认情况下会安装 Jetson Linux BSP 和 CUDA Toolkit</p>
<img src="/2024/09/20/NVIDIA/Jetson/Jetpack/cuda-packaging-jetson.png" class="" title="Block diagram shows the compatibility of software modules between the Jetson Linux BSP and the CUDA Toolkit.">

<p>CUDA Driver ：CUDA 驱动</p>
<p>CUDA Toolkit 独立于 BSP，不包含 CUDA 驱动程序</p>
<p>桌面级 CUDA 包</p>
<img src="/2024/09/20/NVIDIA/Jetson/Jetpack/cuda-packaging-desktop.png" class="" title="Block diagram shows the interdependency of software modules between a standard Linux OS distribution, the NVIDIA UDA package, and the CUDA Toolkit as managed with the CUDA Installer.">



<h1 id="Jetson-的可升级包"><a href="#Jetson-的可升级包" class="headerlink" title="Jetson 的可升级包"></a>Jetson 的可升级包</h1><p>参考：<a href="https://developer.nvidia.com/blog/simplifying-cuda-upgrades-for-nvidia-jetson-users/">https://developer.nvidia.com/blog/simplifying-cuda-upgrades-for-nvidia-jetson-users/</a></p>
<p>Jetson 两种系统：</p>
<ul>
<li>NVIDIA 打包好的 Jetpack</li>
<li>基于 NVIDIA 提供的 BSP，第三方厂商自行构建的系统</li>
</ul>
<p>这两类系统中，都自带固定版本的 CUDA 开发包、运行时库、驱动程序。</p>
<p>NVIDIA 从 CUDA 11.8 版本开始，才为 Jetson 提供 CUDA 升级包功能。</p>
<p>以前不提供，是因为基本系统里已经包含经过检验的稳定的 CUDA 驱动和系统，若用户随意调整，将对整个 Jetpack 系统及 BSP 二次开发的稳定性造成影响，厂商需要重新测试，重新校验稳定性。</p>
<p>但同时又存在需与频繁更新的 CUDA 开发包新功能同步的需求。因此，NVIDIA 从 Jetpack 5.0 和 CUDA 11.8 开始，对基本系统进行调整：从 CUDA 11.8 开始，引入升级路径，为 Jetson 提供了升级 CUDA 驱动和 CUDA Toolkit 的选项。</p>
<img src="/2024/09/20/NVIDIA/Jetson/Jetpack/cuda-upgrade-path-jetson.png" class="" title="Flow diagram of the steps needed to upgrade CUDA software from previous releases.">

<p>蓝色方框描述了 NVIDIA JetPack 5.0 SDK 中默认存在的组件。虚线将 Jetson Linux BSP 与 NVIDIA JetPack SDK 的其他组件分开。绿色框表示可以通过此功能升级到的 CUDA 组件。</p>
<p>通过引入 CUDA 驱动程序（包括 <code>libcuda.so</code> 及其依赖项）升级，无需在像以前一样只能使用 Jetson Linux BSP 中打包的默认 CUDA 驱动提供的功能。</p>
<img src="/2024/09/20/NVIDIA/Jetson/Jetpack/new-cuda-upgrade-path.png" class="" title="Figure shows which Jetson software modules are affected and how the new flexible upgrade path works to install the latest CUDA software release.">

<p>升级操作参考：<a href="https://developer.nvidia.com/zh-cn/blog/simplifying-cuda-upgrades-for-nvidia-jetson-users/">https://developer.nvidia.com/zh-cn/blog/simplifying-cuda-upgrades-for-nvidia-jetson-users/</a></p>
<p>引入了中间兼容层 （cuCompart)。以前追求稳定的内置驱动，是直接和 NVMAP&#x2F;NVHOST&#x2F;EGL&#x2F;NVGPU 等更底层的组件直接交互的，所以不能轻易动，现在从 JP 5.0 起，驱动变成和 cuCompat 交互了，而 cuCompat 再和底层的 NVMAP&#x2F;NVHOST&#x2F;EGL&#x2F;NVGPU 交互，这样就多了一个中间层次了。可以简单理解成，多了一个抽象层，从原本的驱动中抽离，这个抽象层本身可以得到测试，可以稳定。而新版本的驱动变成了它上面的一个更高一层的软件了。</p>
<h1 id="JetPack-SDK-安装配置"><a href="#JetPack-SDK-安装配置" class="headerlink" title="JetPack SDK 安装配置"></a>JetPack SDK 安装配置</h1><p>支持多种方式安装 JetPack。参考：<a href="https://docs.nvidia.com/jetson/jetpack/install-setup/index.html">install-setup</a></p>
<h2 id="SD卡镜像"><a href="#SD卡镜像" class="headerlink" title="SD卡镜像"></a>SD卡镜像</h2><h2 id="NVIDIA-SDK-Manager"><a href="#NVIDIA-SDK-Manager" class="headerlink" title="NVIDIA SDK Manager"></a>NVIDIA SDK Manager</h2><p>支持以下平台：</p>
<ul>
<li>NVIDIA Jetson AGX Orin Developer Kit</li>
<li>NVIDIA Jetson Orin Nano Developer Kit</li>
<li>NVIDIA Jetson AGX Orin 32GB module on a Jetson AGX Orin Developer Kit carrier board</li>
<li>NVIDIA Jetson AGX Xavier series modules on a Jetson AGX Xavier Developer Kit carrier board</li>
<li>NVIDIA Jetson Xavier NX modules on a Jetson Xavier NX Developer Kit carrier board</li>
</ul>
<p>参考：<a href="https://docs.nvidia.com/sdk-manager/index.html">https://docs.nvidia.com/sdk-manager/index.html</a></p>
<h2 id="Package-Management-Tool"><a href="#Package-Management-Tool" class="headerlink" title="Package Management Tool"></a>Package Management Tool</h2>]]></content>
      <categories>
        <category>NVIDIA</category>
        <category>Jetson</category>
      </categories>
      <tags>
        <tag>NVIDIA</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetson-pytorch</title>
    <url>/2024/09/21/NVIDIA/Jetson/Jetson-pytorch/</url>
    <content><![CDATA[<p>Jetson orin nano 8GB</p>
<img src="/2024/09/21/NVIDIA/Jetson/Jetson-pytorch/image-20240921153500642.png" class="" title="image-20240921153500642">



<p>L4T-r34.1.1</p>
<ul>
<li>JetPack5.0.1</li>
</ul>
<p>L4T-r35.2.1</p>
<ul>
<li>JetPack5.1<ul>
<li>ubuntu20.04</li>
<li>kernel 5.10 LTS</li>
<li><a href="https://docs.nvidia.com/cuda/archive/11.4.4/cuda-toolkit-release-notes/index.html">CUDA 11.4.19</a>（driver 470.82.01）</li>
<li>cuDNN 8.6.0</li>
<li>TensorRT 8.5.2</li>
</ul>
</li>
</ul>
<p>L4T-r35.3.1</p>
<ul>
<li>JetPack5.1.1</li>
</ul>
<p>L4T-r35.4.1</p>
<ul>
<li>JetPack5.1.2</li>
</ul>
<p>L4T-r36.3.0</p>
<ul>
<li>JetPack6.0<ul>
<li>ubuntu2204</li>
<li>kernel 5.15LTS</li>
<li>python3.8</li>
<li><a href="https://docs.nvidia.com/cuda/archive/12.2.1/cuda-toolkit-release-notes/index.html#">CUDA 12.2</a>（driver 535.86.10）</li>
<li>cuDNN 8.9.4</li>
<li>TensorRT 8.6.2</li>
</ul>
</li>
</ul>
<p>内部 docker 容器 （基于 dustynv&#x2F;ros：noetic-desktop-l4t-r35.4.1）</p>
<h1 id="安装-pytorch"><a href="#安装-pytorch" class="headerlink" title="安装 pytorch"></a>安装 pytorch</h1><p>参考：<a href="https://docs.nvidia.com/deeplearning/frameworks/install-pytorch-jetson-platform/index.html">https://docs.nvidia.com/deeplearning/frameworks/install-pytorch-jetson-platform/index.html</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget https://developer.download.nvidia.cn/compute/redist/jp/v512/pytorch/torch-2.1.0a0+41361538.nv23.06-cp38-cp38-linux_aarch64.whl -O torch-2.1.0a0+41361538.nv23.06-cp38-cp38-linux_aarch64.whl</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pip3 install <span class="string">&#x27;Cython&lt;3&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此处其他库依赖 numpy 1.23.5 版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pip3 install numpy==1.23.5 torch-2.1.0a0+41361538.nv23.06-cp38-cp38-linux_aarch64.whl</span></span><br></pre></td></tr></table></figure>



<p>注：JetPack6 提供了 2.3.0 版本 pytorch 即相应版本的 torchvision</p>
<img src="/2024/09/21/NVIDIA/Jetson/Jetson-pytorch/image-20240921162713885.png" class="" title="image-20240921162713885">



<h1 id="安装-torchvision"><a href="#安装-torchvision" class="headerlink" title="安装 torchvision"></a>安装 torchvision</h1><p>参考<a href="https://forums.developer.nvidia.com/t/pytorch-for-jetson/72048">https://forums.developer.nvidia.com/t/pytorch-for-jetson/72048</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt-get install libjpeg-dev zlib1g-dev libpython3-dev libopenblas-dev libavcodec-dev libavformat-dev libswscale-dev</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> --branch &lt;version&gt; https://github.com/pytorch/vision torchvision   <span class="comment"># see below for version of torchvision to download</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> torchvision</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> BUILD_VERSION=0.x.0  <span class="comment"># where 0.x.0 is the torchvision version</span></span>  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 setup.py install --user</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ../  <span class="comment"># attempting to load torchvision from build dir will result in import error</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pip install <span class="string">&#x27;pillow&lt;7&#x27;</span> <span class="comment"># always needed for Python 2.7, not needed torchvision v0.5.0+ with Python 3.6</span></span></span><br></pre></td></tr></table></figure>

<p>版本对应关系</p>
<p>● PyTorch v1.0 - torchvision v0.2.2</p>
<p>● PyTorch v1.1 - torchvision v0.3.0</p>
<p>● PyTorch v1.2 - torchvision v0.4.0</p>
<p>● PyTorch v1.3 - torchvision v0.4.2</p>
<p>● PyTorch v1.4 - torchvision v0.5.0</p>
<p>● PyTorch v1.5 - torchvision v0.6.0</p>
<p>● PyTorch v1.6 - torchvision v0.7.0</p>
<p>● PyTorch v1.7 - torchvision v0.8.1</p>
<p>● PyTorch v1.8 - torchvision v0.9.0</p>
<p>● PyTorch v1.9 - torchvision v0.10.0</p>
<p>● PyTorch v1.10 - torchvision v0.11.1</p>
<p>● PyTorch v1.11 - torchvision v0.12.0</p>
<p>● PyTorch v1.12 - torchvision v0.13.0</p>
<p>● PyTorch v1.13 - torchvision v0.13.0</p>
<p>● PyTorch v1.14 - torchvision v0.14.1</p>
<p>● PyTorch v2.0 - torchvision v0.15.1</p>
<p>● PyTorch v2.1 - torchvision v0.16.1</p>
<p>● PyTorch v2.2 - torchvision v0.17.1</p>
<p>● PyTorch v2.3 - torchvision v0.18.0</p>
<h1 id="验证-pytorch"><a href="#验证-pytorch" class="headerlink" title="验证 pytorch"></a>验证 pytorch</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import torch</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">print</span>(torch.__version__)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Pytorch 接口输出的 cuda 的版本并不一定是 Pytorch 在实际系统上运行时使用的 cuda 版本，而是编译该 Pytorch release 版本时使用的 cuda 版本</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">print</span>(torch.version.cuda)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">print</span>(torch.cuda.is_available())</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">print</span>(torch.cuda.device_count()) <span class="comment"># GPU 数量</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">print</span>(torch.cuda.get_device_name(0))</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">print</span>(torch.cuda.current_device())</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或 python3 -c <span class="string">&quot;import torch; print(torch.cuda.is_available())&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pip list | grep torch</span></span><br><span class="line">knn_pytorch               0.1</span><br><span class="line">torch                     2.1.0a0+41361538.nv23.6</span><br><span class="line">torchvision               0.16.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nvcc -V</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pip show torch</span></span><br><span class="line">Name: torch</span><br><span class="line">Version: 2.1.0a0+41361538.nv23.6</span><br><span class="line">Summary: Tensors and Dynamic neural networks in Python with strong GPU acceleration</span><br><span class="line">Home-page: https://pytorch.org/</span><br><span class="line">Author: PyTorch Team</span><br><span class="line">Author-email: packages@pytorch.org</span><br><span class="line">License: BSD-3</span><br><span class="line">Location: /usr/local/miniconda/envs/test/lib/python3.8/site-packages</span><br><span class="line">Requires: filelock, fsspec, jinja2, networkx, sympy, typing-extensions</span><br><span class="line">Required-by: torchvision</span><br></pre></td></tr></table></figure>





<h1 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a>安装问题</h1><h2 id="未编译"><a href="#未编译" class="headerlink" title="未编译"></a><strong>未编译</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 setup.py install --user</span></span><br><span class="line">setup.py:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html</span><br><span class="line">  from pkg_resources import DistributionNotFound, get_distribution, parse_version</span><br><span class="line">No CUDA runtime is found, using CUDA_HOME=&#x27;/usr/local/cuda&#x27;</span><br><span class="line">Building wheel torchvision-0.16.1</span><br><span class="line">Compiling extensions with following flags:</span><br></pre></td></tr></table></figure>

<p>降低 setuptools 版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前 setuptools 版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pip list | grep setuptools</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若版本 &gt; 60, 则降低版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pip install setuptools==58</span></span><br></pre></td></tr></table></figure>



<h2 id="ffmpeg-版本"><a href="#ffmpeg-版本" class="headerlink" title="ffmpeg 版本"></a>ffmpeg 版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error: ‘AV_CODEC_CAP_INTRA_ONLY’ was not declared in this scope; did you mean ‘AV_CODEC_PROP_INTRA_ONLY’?</span><br></pre></td></tr></table></figure>

<p>解决方法：降低 ffmpeg 版本。例如：<code>conda install ffmpeg==4.2</code></p>
<h2 id="未找到-CUDA-Runtime"><a href="#未找到-CUDA-Runtime" class="headerlink" title="未找到 CUDA Runtime"></a>未找到 CUDA Runtime</h2><p><code>libcudart.so</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 setup.py install --user</span><br><span class="line">setup.py:10: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html</span><br><span class="line">  from pkg_resources import DistributionNotFound, get_distribution, parse_version</span><br><span class="line">No CUDA runtime is found, using CUDA_HOME=&#x27;/usr/local/cuda&#x27;</span><br><span class="line">Building wheel torchvision-0.16.1</span><br><span class="line">Compiling extensions with following flags:</span><br><span class="line">  FORCE_CUDA: False</span><br><span class="line">  FORCE_MPS: False</span><br><span class="line">  DEBUG: False</span><br><span class="line">  TORCHVISION_USE_PNG: True</span><br><span class="line">  TORCHVISION_USE_JPEG: True</span><br><span class="line">  TORCHVISION_USE_NVJPEG: True</span><br><span class="line">  TORCHVISION_USE_FFMPEG: True</span><br><span class="line">  TORCHVISION_USE_VIDEO_CODEC: True</span><br><span class="line">  NVCC_FLAGS: </span><br><span class="line">Compiling with debug mode OFF</span><br><span class="line">Building torchvision without PNG image support</span><br><span class="line">Running build on conda-build: False</span><br><span class="line">Running build on conda: True</span><br><span class="line">Building torchvision with JPEG image support</span><br><span class="line">  libjpeg include path: /usr/local/miniconda/envs/test/include</span><br><span class="line">  libjpeg lib path: /usr/local/miniconda/envs/test/lib</span><br><span class="line">Building torchvision without NVJPEG image support</span><br><span class="line">Building torchvision without ffmpeg support</span><br><span class="line">Building torchvision without video codec support</span><br><span class="line">running install</span><br><span class="line">/usr/local/miniconda/envs/test/lib/python3.8/site-packages/setuptools/_distutils/cmd.py:66: SetuptoolsDeprecationWarning: setup.py install is deprecated.</span><br><span class="line">!!</span><br></pre></td></tr></table></figure>



<p><code>export FORCE_CUDA=&quot;1&quot;</code></p>
<h2 id="IndexError-list-index-out-of-range"><a href="#IndexError-list-index-out-of-range" class="headerlink" title="IndexError: list index out of range"></a>IndexError: list index out of range</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cuda_flags = common_cflags + COMMON_NVCC_FLAGS + _get_cuda_arch_flags()</span><br><span class="line">  File &quot;/user/x/libs/anaconda3/envs/test1/lib/python3.7/site-packages/torch/utils/cpp_extension.py&quot;, line 1561, in _get_cuda_arch_flags</span><br><span class="line">    arch_list[-1] += &#x27;+PTX&#x27;</span><br><span class="line"></span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure>

<p>解决方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CUDA_VERSION=$(/usr/local/cuda/bin/nvcc --version | sed -n &#x27;s/^.*release \([0-9]\+\.[0-9]\+\).*$/\1/p&#x27;)</span><br><span class="line">if [[ $&#123;CUDA_VERSION&#125; == 9.0* ]]; then</span><br><span class="line">    export TORCH_CUDA_ARCH_LIST=&quot;3.5;5.0;6.0;7.0+PTX&quot;</span><br><span class="line">elif [[ $&#123;CUDA_VERSION&#125; == 9.2* ]]; then</span><br><span class="line">    export TORCH_CUDA_ARCH_LIST=&quot;3.5;5.0;6.0;6.1;7.0+PTX&quot;</span><br><span class="line">elif [[ $&#123;CUDA_VERSION&#125; == 10.* ]]; then</span><br><span class="line">    export TORCH_CUDA_ARCH_LIST=&quot;3.5;5.0;6.0;6.1;7.0;7.5+PTX&quot;</span><br><span class="line">elif [[ $&#123;CUDA_VERSION&#125; == 11.0* ]]; then</span><br><span class="line">    export TORCH_CUDA_ARCH_LIST=&quot;3.5;5.0;6.0;6.1;7.0;7.5;8.0+PTX&quot;</span><br><span class="line">elif [[ $&#123;CUDA_VERSION&#125; == 11.* ]]; then</span><br><span class="line">    export TORCH_CUDA_ARCH_LIST=&quot;3.5;5.0;6.0;6.1;7.0;7.5;8.0;8.6+PTX&quot;</span><br><span class="line">elif [[ $&#123;CUDA_VERSION&#125; == 12.* ]]; then</span><br><span class="line">    export TORCH_CUDA_ARCH_LIST=&quot;5.0;5.2;5.3;6.0;6.1;6.2;7.0;7.2;7.5;8.0;8.6;8.7;8.9;9.0+PTX&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;unsupported cuda version.&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>即：设置 <code>TORCH_CUDA_ARCH_LIST=&quot;YOUR_GPUs_CC + PTX&quot;</code> 或在 Dockerfile 中设置 <code>ARG TORCH_CUDA_ARCH_LIST=&quot;YOUR_GPUs_CC + PTX&quot;</code></p>
<blockquote>
<p>以下方式可获取 <code>TORCH_CUDA_ARCH_LIST</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.cuda.get_device_capability(<span class="number">0</span>)</span><br><span class="line">torch.cuda.get_arch_list()</span><br></pre></td></tr></table></figure>


</blockquote>
<p>docker 需访 cuda 库，因此需注意  <code>/etc/docker/daemon.json</code> 中设置 <code>default-runtime</code>，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改完成后需重启 docker：sudo systemctl restart docker</span><br><span class="line">&#123;</span><br><span class="line">    &quot;runtimes&quot;: &#123;</span><br><span class="line">        &quot;nvidia&quot;: &#123;</span><br><span class="line">            &quot;path&quot;: &quot;nvidia-container-runtime&quot;,</span><br><span class="line">            &quot;runtimeArgs&quot;: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;default-runtime&quot;: &quot;nvidia&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>NVIDIA</category>
        <category>Jetson</category>
      </categories>
      <tags>
        <tag>NVIDIA</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetson</title>
    <url>/2024/09/20/NVIDIA/Jetson/Jetson/</url>
    <content><![CDATA[<img src="/2024/09/20/NVIDIA/Jetson/Jetson/metropolis-jetson-platform-service-diagrams-3280429-jetson-software-r2.png" class="" title="Jetson software stack">

<p>（来源：<a href="https://developer.nvidia.com/embedded/develop/software%EF%BC%89">https://developer.nvidia.com/embedded/develop/software）</a></p>
<h1 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 jetpack 版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt show nvidia-jetpack</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt list --installed | grep nvidia-jetpack</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 CUDA 版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt list --installed | grep cuda-toolkit</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 cuDNN 版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt list --installed | grep cudnn</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">jetson_release <span class="comment"># 需安装 jetson-stats</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 tensorRT 版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">dpkg -l | grep TensorRT</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /proc/driver/nvidia/verion</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 L4T 版本及 CUDA 版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/nv_tegra_release</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /usr/local/cuda/version.txt</span></span><br></pre></td></tr></table></figure>





<h1 id="Jetson-软件架构"><a href="#Jetson-软件架构" class="headerlink" title="Jetson 软件架构"></a>Jetson 软件架构</h1><img src="/2024/09/20/NVIDIA/Jetson/Jetson/Architecture1.svg" class="" title="Jetson Linux system components">

<p>（来源：<a href="https://docs.nvidia.com/jetson/archives/r35.1/DeveloperGuide/text/AR/JetsonSoftwareArchitecture.html%EF%BC%89">https://docs.nvidia.com/jetson/archives/r35.1/DeveloperGuide/text/AR/JetsonSoftwareArchitecture.html）</a></p>
<p>NVIDIA CUDA 是一个并行计算平台，可以轻松使用 GPU 进行通用计算。它对于实现图形化应用程序特别有用。它可以与任何几种编程语言一起使用。</p>
<p>CUDA‑X 是一个软件包，其中包含几种常见的面向图形的任务的 CUDA 和基于 CUDA 的实现。</p>
<h1 id="Boot-Flow"><a href="#Boot-Flow" class="headerlink" title="Boot Flow"></a>Boot Flow</h1><p>Boot Flow 是引导加载程序执行初始化 SoC 和启动 NVIDIA®Jetson™Linux的操作序列。</p>
<p>BR-BCT：BootROM Boot Configuration Table </p>
<p>MB1：Microboot1</p>
<p>PSC：Platform Security Controller</p>
<p>参考：<a href="https://docs.nvidia.com/jetson/archives/r35.1/DeveloperGuide/text/AR/BootArchitecture.html">https://docs.nvidia.com/jetson/archives/r35.1/DeveloperGuide/text/AR/BootArchitecture.html</a></p>
<h1 id="Cantroller-Area-Network-CAN"><a href="#Cantroller-Area-Network-CAN" class="headerlink" title="Cantroller Area Network(CAN)"></a>Cantroller Area Network(CAN)</h1><p>适用于:Jetson AGX Orin, Jetson Xavier NX系列和Jetson AGX Xavier系列</p>
<p>参考：<a href="https://docs.nvidia.com/jetson/archives/r35.1/DeveloperGuide/text/HR/ControllerAreaNetworkCan.html">https://docs.nvidia.com/jetson/archives/r35.1/DeveloperGuide/text/HR/ControllerAreaNetworkCan.html</a></p>
<p>Time Triggered CAN controller</p>
<ul>
<li>支持标准帧和扩展帧</li>
<li>CAN 总线速率 10kbps ~ 1Mbps</li>
<li>支持 CAN FD 模式，最大速率为 15Mbps。所有类型的收发器都可以达到 5Mbps</li>
<li>如果通过它的用户空间sysfs节点配置TDCR(传输延迟补偿寄存器)，它可以提供更高的数据比特率</li>
</ul>
]]></content>
      <categories>
        <category>NVIDIA</category>
        <category>Jetson</category>
      </categories>
      <tags>
        <tag>NVIDIA</tag>
      </tags>
  </entry>
  <entry>
    <title>jetson内核编译</title>
    <url>/2024/09/17/NVIDIA/Jetson/jetson%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<p>注：不同版本编译不一样，参考：<a href="https://docs.nvidia.com/jetson/archives/">https://docs.nvidia.com/jetson/archives/</a></p>
<h1 id="确认-L4T-版本"><a href="#确认-L4T-版本" class="headerlink" title="确认 L4T 版本"></a>确认 L4T 版本</h1><p>以 r36.3 为例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">head</span> -n 1 /etc/nv_tegra_release</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">R36 (release), REVISION: 3.0, GCID: 36191598, BOARD: generic, EABI: aarch64, DATE: Mon May  6 17:34:21 UTC 2024</span></span><br></pre></td></tr></table></figure>



<img src="/2024/09/17/NVIDIA/Jetson/jetson%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/image-20240917115757754.png" class="" title="image-20240917115757754">



<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install bison flex libssl-dev zip libncurses-dev make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install build-essential bc</span></span><br></pre></td></tr></table></figure>



<h1 id="源码及交叉编译环境"><a href="#源码及交叉编译环境" class="headerlink" title="源码及交叉编译环境"></a>源码及交叉编译环境</h1><p>参考：</p>
<ul>
<li><a href="https://docs.nvidia.com/jetson/archives/r35.4.1/DeveloperGuide/text/AT/JetsonLinuxToolchain.html#at-jetsonlinuxtoolchain">Jetson Linux Toolchain</a></li>
<li><a href="https://docs.nvidia.com/jetson/archives/r35.4.1/DeveloperGuide/text/SD/Kernel/KernelCustomization.html#building-the-kernel">Building the Kernel</a></li>
</ul>
<img src="/2024/09/17/NVIDIA/Jetson/jetson%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/image-20240917120004288.png" class="" title="image-20240917120004288">



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压内核源码</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar xf public_sources.tbz2 -C &lt;install-path&gt;/Linux_for_Tegra/..</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> &lt;install-path&gt;/Linux_for_Tegra/source</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar xf kernel_src.tbz2  <span class="comment"># 会将内核源码解压到 source/kernel 目录</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar xf kernel_oot_modules_src.tbz2</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar xf nvidia_kernel_display_driver_source.tbz2</span></span><br></pre></td></tr></table></figure>



<h2 id="配置交叉编译链"><a href="#配置交叉编译链" class="headerlink" title="配置交叉编译链"></a><strong>配置交叉编译链</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">假设交叉编译工具解压路径为：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$HOME</span>/aarch64--glibc--stable-2022.08-1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> CROSS_COMPILE=<span class="variable">$HOME</span>/aarch64--glibc--stable-2022.08-1/bin/aarch64-buildroot-linux-gnu-</span></span><br></pre></td></tr></table></figure>



<h1 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若编译 real-time 内核，则需使能相关配置</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./generic_rt_build.sh <span class="string">&quot;enable&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译内核</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make -C kernel</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install kernel 和 modules</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 注意：需手动创建该目录 和 rootfs/boot 目录</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> INSTALL_MOD_PATH=&lt;install-path&gt;/Linux_for_Tegra/rootfs/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> -E make install -C kernel</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rootfs/boot/ 目录下已有 Image，是否必要？</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> kernel/kernel-jammy-src/arch/arm64/boot/Image \</span></span><br><span class="line"><span class="language-bash">  &lt;install-path&gt;/Linux_for_Tegra/kernel/Image</span> </span><br></pre></td></tr></table></figure>



<h1 id="编译-Out-of-Tree-Modules"><a href="#编译-Out-of-Tree-Modules" class="headerlink" title="编译 Out-of-Tree Modules"></a><strong>编译 Out-of-Tree Modules</strong></h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> xx/Linux_for_Tegra/source</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若针对实时内核</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> IGNORE_PREEMPT_RT_PRESENCE=1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> KERNEL_HEADERS=<span class="variable">$PWD</span>/kernel/kernel-jammy-src</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make modules</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> INSTALL_MOD_PATH=&lt;install-path&gt;/Linux_for_Tegra/rootfs/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> -E make modules_install</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新 initranfs</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> &lt;install-path&gt;/Linux_for_Tegra</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> ./tools/l4t_update_initrd.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 若在目标板直接编译，则执行 sudo nv-update-initrd</span></span></span><br></pre></td></tr></table></figure>



<h1 id="编译-DTBs"><a href="#编译-DTBs" class="headerlink" title="编译 DTBs"></a><strong>编译 DTBs</strong></h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> &lt;install-path&gt;/Linux_for_Tegra/source</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> KERNEL_HEADERS=<span class="variable">$PWD</span>/kernel/kernel-jammy-src</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make dtbs</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> nvidia-oot/device-tree/platform/generic-dts/dtbs/* \</span></span><br><span class="line"><span class="language-bash">     &lt;install-path&gt;/Linux_for_Tegra/kernel/dtb/</span></span><br></pre></td></tr></table></figure>

<p>如果 <code>KERNEL_HEADERS</code> 指向源目录而不是导出的标头目录，则需要运行 <code>make ARCH=arm64 defconfig</code> 脚本或等效脚本才能构建 dtc</p>
<h1 id="签名及加密"><a href="#签名及加密" class="headerlink" title="签名及加密"></a>签名及加密</h1><p>参考：<a href="https://docs.nvidia.com/jetson/archives/r36.3/DeveloperGuide/SD/Security/SecureBoot.html#sd-security-secureboot">https://docs.nvidia.com/jetson/archives/r36.3/DeveloperGuide/SD/Security/SecureBoot.html#sd-security-secureboot</a></p>
<h2 id="Kernel-Module-Signing"><a href="#Kernel-Module-Signing" class="headerlink" title="Kernel Module Signing"></a><strong>Kernel Module Signing</strong></h2><p><a href="https://docs.nvidia.com/jetson/archives/r36.3/DeveloperGuide/SD/Security/SecureBoot.html#kernel-module-signing">https://docs.nvidia.com/jetson/archives/r36.3/DeveloperGuide/SD/Security/SecureBoot.html#kernel-module-signing</a></p>
<p>内核模块签名工具在 install 期间对模块进行签名，然后在加载模块时检查签名。这可以通过禁止加载未签名的模块或使用无效密钥签名的模块来提高内核安全性。</p>
<p>以下是内核模块签名的内核配置选项：</p>
<ul>
<li><p>要启用内核模块签名验证，需启用 <code>CONFIG_MODULE_SIG</code></p>
</li>
<li><p>要选择内核模块签名验证模式，请将 <code>CONFIG_MODULE_SIG_FORCE</code> 设置为以下选项之一：</p>
<ul>
<li><code>off</code>：宽容模式<ul>
<li>如果模块已签名，则必须具有受信任的签名</li>
<li>如果模块未签名，则可以加载，并且内核被标记为受污染</li>
</ul>
</li>
<li><code>on</code>：限制模式<ul>
<li>模块只有在使用受信任的签名签名后才能加载</li>
<li>其他模块将生成错误</li>
</ul>
</li>
</ul>
</li>
<li><p>要在构建时启用自动内核模块签名，要设置 <code>CONFIG_MODULE_SIG_ALL</code></p>
</li>
</ul>
<p>默认情况下，即使启用了内核模块签名验证，内核模块在构建时也不会签名。</p>
<ul>
<li>要指定签名密钥，需使用自己的 PEM 格式私钥设置 <code>CONFIG_MODULE_SIG_KEY</code><ul>
<li>默认情况下，如果 <code>CONFIG_MODULE_SIG_KEY=&quot;certs/signing_key.pem&quot;</code> 未更改，则内核会自动生成用于内核模块签名的 PEM 格式签名密钥</li>
<li>将 <code>CONFIG_MODULE_SIG_KEY</code> 设置为除 <code>certs/signing_key.pem</code> 默认值以外的值会禁用签名密钥的自动生成，并允许使用选择的密钥对内核模块进行签名。</li>
</ul>
</li>
</ul>
<p><code>CONFIG_SYSTEM_TRUSTED_KEYS</code> 内核选项也可以设置为包含其他证书的 PEM 编码文件的文件名。它是编译到内核中的 X.509 证书，用于对内核构建时未签名的模块进行内核模块验证。</p>
<h1 id="内核使用"><a href="#内核使用" class="headerlink" title="内核使用"></a>内核使用</h1><h1 id="内核配置"><a href="#内核配置" class="headerlink" title="内核配置"></a>内核配置</h1><p>在 Linux_for_Tegra&#x2F;source&#x2F; 目录下执行 make 时，会调用 Linux_for_Tegra&#x2F;source&#x2F;kernel&#x2F;Makefile。</p>
<img src="/2024/09/17/NVIDIA/Jetson/jetson%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/image-20240917120647966.png" class="" title="image-20240917120647966">

<p>通过在 <code>KERNEL_DEF_CONFIG</code> 中指定 <code>defconfig</code> 名称来自定义。</p>
<p>按如下方式编译内核时，每次都会重新生成 <code>.config</code> 配置，因此在 kernel-jammy-src 目录下执行 <code>make menuconfig &amp; make savedefconfig</code> 后，再按如下方式编译是不生效的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> xxx/public_sources/Linux_for_Tegra/source</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make -C kernel</span></span><br></pre></td></tr></table></figure>

<p>因此，可修改 <code>xxx/public_sources/Linux_for_Tegra/source/kernel/kernel-jammy-src/arch/arm64/configs/defconfig</code> 来配置内核。</p>
<p>例如，使能编译 rndis_host 及 rndis_wlan 驱动（需留意依赖关系）</p>
<img src="/2024/09/17/NVIDIA/Jetson/jetson%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/image-20240917120751784.png" class="" title="image-20240917120751784">

]]></content>
      <categories>
        <category>NVIDIA</category>
        <category>Jetson</category>
      </categories>
      <tags>
        <tag>NVIDIA</tag>
      </tags>
  </entry>
  <entry>
    <title>AMCL</title>
    <url>/2024/09/21/Robot/Localization/AMCL/</url>
    <content><![CDATA[<h2 id="AMCL（Adaptive-Monte-Carlo-Localization）"><a href="#AMCL（Adaptive-Monte-Carlo-Localization）" class="headerlink" title="AMCL（Adaptive Monte Carlo Localization）"></a>AMCL（Adaptive Monte Carlo Localization）</h2><p>（AMCL中A指代 adaptive or Augmented？）<br>MCL不能从机器人绑架中或全局定位失效中恢复。在某个时候，只有单一位姿的粒子能够“幸存”，如果这个位姿碰巧是错误的，算法不能恢复。这个问题是有意义的。实际上，任何随机算法，如蒙特卡罗定位算法，在重采样步骤中可能意外地丢弃所有正确位姿附近的粒子。当粒子数很小（如M&#x3D;50) 。并且，当粒子扩散到整个比较大的体积（如全局定位过程）时，这个问题就显得特别重要。  </p>
<p>AMCL算法在机器人遭到绑架的时候，会随机的注入粒子（injection of random particles）。  </p>
<p>AMCL是MCL的升级版，结合Augmented_MCL 和 KDL_Sampling_MCL，使用自适应的 KLD 方法来更新粒子。<br><img src="/images/augmented_mcl.png" alt="amcl"></p>
<p>许多算法机器参数在 <Probabilistic Robotics> 有详细描述，尤其是此处用到的算法： <strong>sample_motion_model_odometry、beam_range_finder_model、likehood_field_range_finder_model、Augmented_MCL及KDL_Sampling_MCL</strong>。</p>
<h2 id="Navigation-AMCL-transforms"><a href="#Navigation-AMCL-transforms" class="headerlink" title="Navigation AMCL transforms"></a>Navigation AMCL transforms</h2><p>amcl将输入的激光扫描器数据转换到odometry坐标系(<del>odom_frame_id)。所以，tf树中必须存在从激光扫描器所在的坐标系发布消息到odometry坐标系的路径。<br>实现细节：在收到第一个激光扫描时。amcl在激光器坐标系和基础坐标系(</del>base_frame_id)中查找，并永久锁存。因此amcl不能处理激光器相对于基础坐标系(base)的移动。<br>下图展示使用odometry及amcl定位的不同处。在操作过程中，AMCL预测base frame(<del>base_frame_id)相对于global frame(</del>global_frame_id)的transform(转换)，但它只在global frame和odometry frame(~odom_frame_id)之间发布该转换。Essentially, this transform accounts for the drift that occurs using Dead Reckoning(从本质上讲，这种变换在使用Dead Reckoning(航位推算)时会发生偏移(drift)。)<br><img src="/images/amcl_transforms.png" alt="amcl transforms"></p>
<p>Odometry Location – 只是通过里程计的数据来处理&#x2F;base_frame和&#x2F;odom_frame之间的TF转换；<br>AMCL  Map Location – 查找&#x2F;base_frame和激光的TF。&#x2F;base_frame通过&#x2F;odom在&#x2F;map中行走，机器人根据已知激光数据，估计&#x2F;base_frame相对于相对于&#x2F;global的TF，那么我们可以知道&#x2F;map和&#x2F;base之间的TF，从而估计位置。  </p>
<h2 id="map、odom与base-link之间的关系"><a href="#map、odom与base-link之间的关系" class="headerlink" title="map、odom与base_link之间的关系"></a>map、odom与base_link之间的关系</h2><p>Odom-&gt;base_link 由底盘驱动发布，数据内容即为里程计数据，其意义是：以odom坐标系作为参考坐标系，base_link（即机器人）相对于odom坐标系的位置，反应了机器人相对于odom坐标系的移动状态。<br><strong>AMCL中会根据odom-&gt;base_link数据（即:里程计数据）结合粒子滤波算法，确定base_link(即机器人)在map坐标系上的位姿，即map -&gt; base_link数据。然后根据map-&gt;base_link及odom-&gt;base_link得出map-&gt;odom。（odom-&gt;base_link可理解为实际测量得到的量，map-&gt;base_link可理解为算法算出的计算值。因AMCL定位的偏差，会体现出odom坐标系也在相对map坐标系变动）</strong>。   </p>
<p>amcl发布odom到map 坐标系tf的流程如下：(已知amcl_pose(base_link坐标系原点在map坐标系位姿)，odom到base_link tf关系)<br>①. 调用tf接口将amcl_pose取反，即将base_link坐标系原点在map坐标系的位姿转化为map坐标系原点在base_link坐标系的位姿。<br>②. 已知base_link与odom tf 关系，调用transformPose接口，将步骤1的结果map坐标系原点在base_link坐标系的位姿转化为map坐标系原点在odom坐标系的位姿。<br>③. 调用tf接口取反，即将步骤2的结果map坐标系原点在odom坐标系的位姿转化为odom坐标系原点在map坐标系的位姿，调用sendTransform发送odom到map tf关系。  </p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>AMCL 订阅scan、tf、initialpose(定位数据)及map等数据，发布amcl_pose、particle cloud及tf(odom –&gt; map)。<strong>amcl与move_base通过tf关联。move_base不会订阅amcl发布的amcl_pose及particlecloud主题，只会监听amcl发布的odom –&gt; map的转换</strong>。  </p>
<p>AMCL需要 initialpose 主题上的消息来初始化filter。  </p>
<p>在移动过程中AMCL需要通过订阅TF(base_frame–&gt;odom)来更新filter。在每个filter过程，AMCL执行两步操作：<br>①、Prediction(预测 – 在AMCL源码中为UpdateAction)<br>②、Measure incorporation(在AMCL中称为UpdateSensor，Likelihood Field模式或Beam模式)<br>Prediciton过程使用TF来完成，因此需提供运动估计，然后通过通过读取的sensor数据来纠正&#x2F;提高预先估计的精度。  </p>
<p>仅当粒子聚集(converged)时才会更新机器人的位姿。<br>AMCL发布的PoseWithCovarianceStamped消息中的convariance，表明了估算的位姿的可信度，但并未直接表明估算的位姿有多精确。若想知道精确度，需在该位姿上使用sensor model。也可修改amcl_laser.cpp文件，在位姿上调用pf_get_cluster_stats来查看权重。该权重值基于map指明位姿与当前激光扫描到的环境的接近程度。</p>
]]></content>
  </entry>
  <entry>
    <title>AMCL调试记录</title>
    <url>/2024/09/21/Robot/Localization/AMCL%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="AMCL-问题调试记录"><a href="#AMCL-问题调试记录" class="headerlink" title="AMCL 问题调试记录"></a>AMCL 问题调试记录</h2><p>1、转圈时 AMCL 定位漂移<br>因为转圈时机器人的X,Y偏差比kobuki大，因此需修改amcl_odom.cpp中的：<img src="/images/amcl_drift_while_rotate.png" alt="amcl_drift"><br>将0.01修改为0.05</p>
]]></content>
  </entry>
  <entry>
    <title>AMCL参数</title>
    <url>/2024/09/21/Robot/Localization/AMCL%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h2 id="AMCL参数说明"><a href="#AMCL参数说明" class="headerlink" title="AMCL参数说明"></a>AMCL参数说明</h2><p>ROS AMCL节点有三类参数：<strong>overall filter、laser model、odometry model</strong>。  </p>
<h3 id="1、overall-filter-参数"><a href="#1、overall-filter-参数" class="headerlink" title="1、overall filter 参数"></a>1、overall filter 参数</h3><p>min_particles(default: 100)、max_particles(default: 5000)<br>• 允许的最小粒子数、最大粒子数.    </p>
<p>kld_err (double, default: 0.01)<br>• 实际分布与估算的分布之间的误差的最大值.<br>kld_z (double, default: 0.99)<br>• Upper standard normal quantile for (1 - p), where p is the probability that the error on the estimated distrubition will be less than kld_err.<br>这两个参数是针对 KDL_Sampling_MCL(AMCL的一部分)。</p>
<p>update_min_d (default: 0.2 meters)、update_min_a (default: π&#x2F;6.0 radians)<br>• 执行过滤器更新前的移动距离、转动角度。即移动距离或转动角度超过该值就会触发过滤器刷新    </p>
<p>resample_interval (int, default: 2)<br>• 重采样间隔  </p>
<p>transform_tolerance (double, default: 0.1 seconds)<br>• 发布的 map-&gt;odom 的 tf 的容错公差.   </p>
<p>recovery_alpha_slow (double, default: 0.0 (disabled))<br>• 慢速平均加权滤波器(slow average weight filter)的指数衰减速率，通过增加随机的位姿来决定何时recover。a good value might be 0.001  </p>
<p>recovery_alpha_fast (double, default: 0.0 (disabled))<br>• 快速平均加权滤波器(fast average weight filter)的指数衰减速率，通过增加随机的位姿来决定何时recover。a good value might be 0.1  </p>
<p>initial_pose_x、initial_pose_y、initial_pose_a (default:0,0,0)<br>• 初始位姿(x,y,yaw), 用于初始化带高斯分布的滤波器(即：初始粒子云分布, initial_pose_x 及 initial_pose_y 确定粒子云的中心位置，initial_pose_a 确定粒子云中粒子的朝向)  </p>
<p>initial_cov_xx、initial_cov_yy、initial_cov_aa (default: 0.5<em>0.5,0.5</em>0.5,0.5<em>0.5 meters)<br>• 初始位姿协方差(x</em>x, y<em>y, yaw</em>yaw), 用于初始化带高斯分布的滤波器(即：初始粒子云分布，initial_cov_xx 及 initial_cov_yy 参数决定初始粒子集的范围, initial_cov_aa 确定粒子朝向的偏差)    </p>
<p>gui_publish_rate (default: -1.0 Hz)<br>• scans及paths的最大发布速率(用于可视化)。-1则禁用(即:不发布)  </p>
<p>save_pose_rate (double, default: 0.5 Hz)<br>• 存储最后估算的位姿和协方差(对应于initial_pose_* 及 initial_cov_<em>变量)到参数服务器的速率(即:更新参数服务器中initial_pose_</em> 及 initial_cov_*的值)。该存储的位姿可用于初始化后续运行的滤波器。-1.0则禁用  </p>
<p>use_map_topic (bool, default: false)<br>• 设置为true时，AMCL将订阅map主题而不是执行服务调用(static_map 服务)来接收地图。  </p>
<p>first_map_only (bool, default: false)<br>• 设置为true时，AMCL将只使用其订阅到的第一张地图，而不会每收到新的地图就进行更新。</p>
<h3 id="2、laser-model-参数"><a href="#2、laser-model-参数" class="headerlink" title="2、laser model 参数"></a>2、laser model 参数</h3><p>注意：使用的混合权重总和始终为1。 beam model 使用所有4个参数： z_hit, z_short, z_max, 及 z_rand。  likelihood_field model 只使用 z_hit 和 z_rand。 通过 laser_model_type 来选择使用的 model。  </p>
<p>laser_min_range、laser_max_range (default: -1.0, -1.0)<br>• 激光有效扫描范围。 激光最小扫描范围。-1.0表示：使用测量到的最小&#x2F;最大距离，否则，超出该范围的不考虑  </p>
<p>laser_max_beams (int, default: 30)<br>• 更新滤波器时，使用的最大激光束数目.  </p>
<p>laser_z_hit(0.95)、laser_z_short(0.1)、laser_z_max(0.05)、laser_z_rand(0.05)<br>• 分别为模型的 z_hit、z_short、z_max、z_rand 部分的混合权重.  </p>
<p>laser_sigma_hit (double, default: 0.2 meters)<br>• 在模型的z_hit部分中使用的高斯模型的标准偏差.  </p>
<p>laser_lambda_short (double, default: 0.1)<br>• 模型的z_short部分的指数衰减参数.  </p>
<p>laser_likelihood_max_dist (double, default: 2.0 meters)<br>• 在地图上进行障碍物膨胀的最大距离，用于 likelihood_field 模型.  </p>
<p>laser_model_type (string, default: “likelihood_field”)<br>• 选择使用的模型，可以是：beam, likelihood_field, 或者 likelihood_field_prob (与likelihood_field 类似，但合并了 beamskip feature).  </p>
<h3 id="3、odometry-model-参数"><a href="#3、odometry-model-参数" class="headerlink" title="3、odometry model 参数"></a>3、odometry model 参数</h3><p>若<strong>odom_model_type</strong>设置为”<strong>diff</strong>“，则使用probabilisitic Robotics中p136页中的<strong>sample_motion_model_odometry</strong>算法，该模式使用噪声参数odom_alpha_1到odom_alpha_4。<br><img src="/images/sample_motion_model_odometry.png" alt="sample_motion_model_odometry"></p>
<p>若<strong>odom_mode_type</strong>设置为”<strong>omni</strong>“，则会为全向底盘使用custom model，该model使用odom_alpha_1到odom_alpha_5参数。前四个参数与”diff” model相似。第五个参数odom_alpha_5采集机器人垂直于观察到的平移方向移动的趋势。<br>注意：为了修复<a href="https://github.com/ros-planning/navigation/issues/20">bug</a>,增加了”diff-corrected”及”omni-corrected”模型。odom_alpha 参数的默认值不再适用于新的 model，<a href="http://answers.ros.org/question/227811/tuning-amcls-diff-corrected-and-omni-corrected-odom-models/">新的 model 这些值更低</a>。</p>
<p>odom_model_type(default:”diff”)<br>• 指定使用的odom模型。可以为：”diff”, “omni”, “diff-corrected” or “omni-corrected”。  </p>
<p>odom_alpha1 (0.2)<br>• 指定在根据机器人的运动的<strong>旋转分量</strong>估算odometry的旋转时期望的噪声<br>odom_alpha2 (0.2)<br>• 指定在根据机器人的运动的<strong>平移分量</strong>估算odometry的旋转时期望的噪声<br>odom_alpha3 (0.2)<br>• 指定在根据机器人的运动的<strong>平移分量</strong>估算odometry的平移时期望的噪声<br>odom_alpha4 (0.2)<br>• 指定在根据机器人的运动的<strong>旋转分量</strong>估算odometry的平移时期望的噪声<br>odom_alpha5 (0.2)<br>• 与平移相关的噪声参数。只对 omni 模型有效  </p>
<p>odom_frame_id (default:”odom”)<br>base_frame_id (default:”base_link”)<br>global_frame_id (default:”map”)  </p>
<p>tf_broadcast(default:true)<br>• 将此设置为false可禁止发布 全局坐标系 -&gt; odometry坐标系(即: map-&gt;odom) 之间的转换。。</p>
]]></content>
  </entry>
  <entry>
    <title>Augmented_MCL</title>
    <url>/2024/09/21/Robot/Localization/Augmented_MCL/</url>
    <content><![CDATA[<h2 id="Augmented-MCL"><a href="#Augmented-MCL" class="headerlink" title="Augmented_MCL"></a>Augmented_MCL</h2><p>Augmented_MCL解决的是从机器人绑架或全局定位失效中恢复的问题。recovery_alpha_slow 及 recovery_alpha_fast 配置参数就是用于失效恢复的。随机采样以max{0.0,1.0-w(fast)&#x2F;w(slow)}概率增加。如果短期似然劣于长期似然则增加随机采样，这种方法，测量似然的一个突然衰减将引起随机采样的数目增加。w&#x3D;w+α(Wavg-w)–Wavg当前测量模型的权重，w为短期（w(fast)）或长期(w(slow))平滑估计，α为与w对应的recovery_alpha_参数。</p>
]]></content>
  </entry>
  <entry>
    <title>KDL_Sampling_MCL</title>
    <url>/2024/09/21/Robot/Localization/KDL_Sampling_MCL/</url>
    <content><![CDATA[<h2 id="KLD-Sampling-MCL"><a href="#KLD-Sampling-MCL" class="headerlink" title="KLD_Sampling_MCL"></a>KLD_Sampling_MCL</h2><p>KLD_Sampling_MCL随时间改变粒子数，改良了度过初期后的蒙特卡洛大样本集合的资源浪费。kld_err 及 kld_z 参数就是KLD的参数。对于每次粒子滤波迭代，KLD采样以概率 1-δ 确定样本数（1-δ就是kld_z配置参数），使得真实的后验与基于采样的近似之间的误差小于ε（ε就是kld_err配置参数）.kld_z&#x3D;0.99,kld_err&#x3D;0.05,直方图位大小为15cm<em>15cm</em>15°就能取得良好的结果。</p>
]]></content>
  </entry>
  <entry>
    <title>MCL</title>
    <url>/2024/09/21/Robot/Localization/MCL/</url>
    <content><![CDATA[<h2 id="MCL（Monte-Carlo-Localization）算法"><a href="#MCL（Monte-Carlo-Localization）算法" class="headerlink" title="MCL（Monte Carlo Localization）算法"></a>MCL（Monte Carlo Localization）算法</h2><p>MC(Monte Carlo)方法：<br>蒙特卡罗方法，也称随机抽样或统计模拟方法。 若所求解的问题是某事件出现的概率或者是某个随机变量的期望值时 。通过某种“实验”的方法，得出事件出现的频率，以此估计出A事件出现的概率，或者得到这个随机变量的期望值。 </p>
<p>MCL算法基于粒子滤波器（particle filters）。<br>Particle filters的基本步骤为：<br>1、随机生成一堆粒子<br>粒子可以具有位置，方向或需要估计的任何其他状态变量。 每个都有一个权重（概率），表示它与系统的实际状态匹配的可能性。 用相同的权重初始化每个粒子。<br>若初始位姿已知，则只需设定粒子群大小 M，然后用repmat方法复制 M 个初始位置作为初始粒子群；若初始位置未知，则可以使用高斯分布随机采样的方法初始化粒子群。<br>2、预测粒子的下一个状态<br>根据预测真实系统的行为方式移动粒子。例如根据里程计来数值（速度、加速度）来预测粒子的下一个状态。<br>3、更新粒子权重<br>根据测量值更新粒子权重。 每个粒子的加权基于它与测量值的匹配程度。<br>4、重采样<br>丢弃极不可能的粒子（权重低的粒子），并用可能性更高的粒子（权重高的粒子）的副本替换它们。<br>重采样之后，粒子权值归一(权重一致)，但是在机器人可能出现的位置处，粒子数目开始变多。  </p>
<p>经过数次迭代后，只有少数粒子权重较大，其余粒子的权值可以忽略不计，粒子权值的方差随着时间增大，空间中的有效粒子数目减少，即：<strong>权值退化问题</strong>。<br>5、计算 estimate（<strong>可选</strong>）<br>计算该组粒子的均值和协方差以获得最可能的当前状态。  </p>
<p><img src="/images/mcl.png" alt="mcl"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/21/Robot/Graph-based%20SLAM/Graph-based%20SLAM/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>基础</title>
    <url>/2024/09/21/Robot/Map/%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>地图类型：基于特征的地图和基于位置的地图。  </p>
<p>基于位置的地图：<br>1）、占用栅格地图  </p>
<p>二维度量图、图形化的拓扑地图、占用栅格地图、图像镶嵌图等</p>
]]></content>
  </entry>
  <entry>
    <title>Publisher及Subscribe</title>
    <url>/2024/09/21/Robot/ROS/Publisher%E5%8F%8ASubscribe/</url>
    <content><![CDATA[<p>ros::Publisher<br>可自定义有订阅者连接&#x2F;断开时的通知函数  </p>
<pre><code class="C++">template&lt;class M &gt; Publisher advertise (const std::string &amp;topic, uint32_t queue_size, const SubscriberStatusCallback &amp;connect_cb, const SubscriberStatusCallback &amp;disconnect_cb=SubscriberStatusCallback(), const VoidConstPtr &amp;tracked_object=VoidConstPtr(), bool latch=false)
</code></pre>
<p>例如：（python为例）<br><code>rospy_tutorials/004_listener_subscribe_notify/listener_subscribe_notify.py</code></p>
<p> <br>ros::Subscribe<br>可通过不同参数对同一个主题进行不同的处理<br>例如：<br><code>rospy_tutorials/003_listener_with_user_data/listener_with_user_data.py</code></p>
]]></content>
  </entry>
  <entry>
    <title>NodeHandle</title>
    <url>/2024/09/21/Robot/ROS/NodeHandle/</url>
    <content><![CDATA[<h2 id="访问节点信息"><a href="#访问节点信息" class="headerlink" title="访问节点信息"></a>访问节点信息</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Get the fully-qualified name of this node.</span></span><br><span class="line">ros::this_node::<span class="built_in">getName</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the fully-qualified namespace of this node.</span></span><br><span class="line">ros::this_node::<span class="built_in">getNamespace</span>()</span><br></pre></td></tr></table></figure>

<h2 id="操作-Names"><a href="#操作-Names" class="headerlink" title="操作 Names"></a>操作 Names</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用NodeHandle的命名空间解析名称</span></span><br><span class="line">std::string ros::NodeHandle::<span class="built_in">resolveName</span>(<span class="type">const</span> std::string&amp; name, <span class="type">bool</span> remap = <span class="literal">true</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 node 的命名空间解析名称 </span></span><br><span class="line">std::string ros::names::<span class="built_in">resolve</span>(<span class="type">const</span> std::string&amp; name, <span class="type">bool</span> remap = <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// append right to left</span></span><br><span class="line">std::string ros::names::<span class="built_in">append</span>(<span class="type">const</span> std::string&amp; left, <span class="type">const</span> std::string&amp; right);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除重复的 / 字符</span></span><br><span class="line">std::string ros::names::<span class="built_in">clean</span>(<span class="type">const</span> std::string&amp; name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测名字是否合规</span></span><br><span class="line"><span class="type">bool</span> ros::names::<span class="built_in">validate</span>(<span class="type">const</span> std::string&amp; name, std::string&amp; error);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<pre><code class="C++">ros::init(argc, argv, &quot;my_node_name&quot;);
ros::NodeHandle nh1(&quot;~&quot;);
ros::NodeHandle nh2(&quot;~foo&quot;);
</code></pre>
<p>其中，<code>nh1</code> 的命名空间是 <code>/my_node_name</code>，<code>nh2</code> 的命名空间是 <code>/my_node_name/foo</code>。  </p>
<p><img src="/./images/NodeHandle.png" alt="NodeHandle"></p>
]]></content>
  </entry>
  <entry>
    <title>参数服务器</title>
    <url>/2024/09/21/Robot/ROS/%E5%8F%82%E6%95%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="Parameter-Server"><a href="#Parameter-Server" class="headerlink" title="Parameter Server"></a>Parameter Server</h2><p><strong>参数服务器是一个可通过网络 APIs 进行访问的共享的、多元的目录</strong>。节点运行时使用该服务器来存储和取回参数。因为没有将该服务器设置为高性能，因此最好用于静态、非二进制文件，例如配置参数。这意味着参数是全局可见的，因此使用工具可以轻易的检查系统的配置状态和修改配置。  </p>
<p>参数服务器使用 XML RPC 实现，运行在 ROS master 中。因此，其 APIs 可通过普通的 XML RPC 库进行访问。  </p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>参数命名遵循通用的 <a href="./%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.md">ROS 命名规则</a>。意味着 ROS 参数有一个与之匹配的名称空间的。例如:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/camera/left/name: leftcamera</span><br><span class="line">/camera/left/exposure: 1</span><br><span class="line">/camera/right/name: rightcamera</span><br><span class="line">/camera/right/exposure: 1.1</span><br><span class="line">```  </span><br><span class="line">`/camera/left/name` 参数值为 leftcamera。也可以获取 /camera/left 参数的值，其值为该dictionary：  </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  name: leftcamera</span>  </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  exposure: 1</span>   </span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line"></span><br><span class="line">获取 /camera 的值，其值为一个表示参数树的 dictionary：  </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">left: &#123; name: leftcamera, exposure: 1 &#125;</span>  </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">right: &#123; name: rightcamera, exposure: 1.1 &#125;</span>  </span><br><span class="line">&lt;p&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 参数类型</span></span>  </span><br><span class="line">参数服务器使用XML RPC数据类型最为参数值，包括:  </span><br><span class="line">- 32-bit integers</span><br><span class="line">- booleans</span><br><span class="line">- strings</span><br><span class="line">- doubles</span><br><span class="line">- iso8601 dates</span><br><span class="line">- lists</span><br><span class="line">- base64-encoded binary data  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 私有参数</span></span>  </span><br><span class="line">ROS 命名规则中满足 `~name` 命名方式的名字即为私有名字。这些私有名字主要用于指定给某个单一节点的参数。`~` 前缀假设节点名为一个半私有的命名空间---仍然可以从其他部分进行访问，但通常被保护起来以避免意外的名字冲突。</span><br><span class="line">可以在命令行使用重映射参数，并改变 `~` 为一个下划线 `_` 来指定节点参数。例如:  </span><br></pre></td></tr></table></figure>
<p>$ rosrun rospy_tutorials talker _param:&#x3D;1.0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## roscpp API</span><br><span class="line">roscpp 中提供了两套 param API：  </span><br><span class="line">- `ros::param` namespace 中的 API</span><br><span class="line">- `ros::NodeHandle` 中的 API  </span><br><span class="line"></span><br><span class="line">### ros::param API  </span><br><span class="line">示例：  </span><br><span class="line">```c++</span><br><span class="line">...</span><br><span class="line">ros::init(argc, argv, &quot;demo&quot;);</span><br><span class="line">ros::NodeHandle nh;</span><br><span class="line"></span><br><span class="line">// 获取及设置参数</span><br><span class="line">bool status = ros::param::get(&quot;param1&quot;, param1);</span><br><span class="line">ros::param::set(&quot;param2&quot;, 4);</span><br><span class="line">// ros::param::getCached(); // 缓存的参数</span><br><span class="line"></span><br><span class="line">// 检查参数</span><br><span class="line">if (ros::param::has(&quot;param3&quot;)) &#123;</span><br><span class="line">  // param3 exists</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 删除参数</span><br><span class="line">bool status = ros::param::del(&quot;param4&quot;);</span><br><span class="line"></span><br><span class="line">// 获取所有参数名</span><br><span class="line">std::vector&lt;std::string&gt; param_names;</span><br><span class="line">ros::param::search(param_names);</span><br><span class="line"></span><br><span class="line">// 访问私有参数</span><br><span class="line">ros::param::get(&quot;~private_param_name&quot;, param5);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="ros-NodeHandle"><a href="#ros-NodeHandle" class="headerlink" title="ros::NodeHandle"></a>ros::NodeHandle</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;demo&quot;</span>);</span><br><span class="line">ros::NodeHandle nh;</span><br><span class="line"><span class="function">ros::NodeHandle <span class="title">priv_nh</span><span class="params">(<span class="string">&quot;~&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取参数</span></span><br><span class="line"><span class="type">bool</span> status = nh.<span class="built_in">getParam</span>(<span class="string">&quot;param1&quot;</span>, param1);</span><br><span class="line">nh.<span class="built_in">param</span>&lt;std:string&gt;(<span class="string">&quot;param2&quot;</span>, param2, <span class="string">&quot;test&quot;</span>); <span class="comment">// 允许指定默认值</span></span><br><span class="line"><span class="comment">// nh.getParamCached(); // 缓存的参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置参数</span></span><br><span class="line">nh.<span class="built_in">setParam</span>(<span class="string">&quot;param3&quot;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查参数  </span></span><br><span class="line"><span class="keyword">if</span> (nh.<span class="built_in">hasParam</span>(<span class="string">&quot;param4&quot;</span>)) &#123;</span><br><span class="line">  <span class="comment">// param exist</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 搜索参数. 假设参数服务器有 /a/b 参数，</span></span><br><span class="line"><span class="comment"> * 若 NodeHandle 在 /a/c 空间，则搜索 b 将会得到 /a/b；</span></span><br><span class="line"><span class="comment"> * 若增加 /a/c/b 参数，再搜索 b 将会得到 /a/c/b</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">if</span> (nh.<span class="built_in">searchParam</span>(<span class="string">&quot;b&quot;</span>, param_name)) &#123;</span><br><span class="line">  <span class="comment">// found param</span></span><br><span class="line">  nh.<span class="built_in">getParam</span>(param_name, param6);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除参数</span></span><br><span class="line"><span class="keyword">if</span> (nh.<span class="built_in">deleteParam</span>(<span class="string">&quot;param3&quot;</span>)) &#123;</span><br><span class="line">  <span class="comment">// param deleted</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有参数名</span></span><br><span class="line">std::vector&lt;std::string&gt; param_names;</span><br><span class="line">nh.<span class="built_in">getParamNames</span>(param_names);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问私有参数</span></span><br><span class="line">priv_nh.<span class="built_in">getParam</span>(<span class="string">&quot;private_param_name&quot;</span>, param7); <span class="comment">// 注意：函数中不能使用 ~</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="launch-中加载参数"><a href="#launch-中加载参数" class="headerlink" title="launch 中加载参数"></a>launch 中加载参数</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;param1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rosparam</span>&gt;</span></span><br><span class="line">    param2: 2</span><br><span class="line">    param3: 3</span><br><span class="line">  <span class="tag">&lt;/<span class="name">rosparam</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;demo&quot;</span>);</span><br><span class="line">  <span class="type">int</span> g_serial_number = <span class="number">-1</span>;</span><br><span class="line">  <span class="type">int</span> l_serial_number = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  ros::NodeHandle nh_global;</span><br><span class="line">  <span class="function">ros::NodeHandle <span class="title">nh_local</span><span class="params">(<span class="string">&quot;~&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Global nh ns: %s&quot;</span>, nh_global.<span class="built_in">getNamespace</span>().<span class="built_in">c_str</span>());</span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Local nh ns: %s&quot;</span>, nh_local.<span class="built_in">getNamespace</span>().<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// global namespace</span></span><br><span class="line">  nh_global.<span class="built_in">getParam</span>(<span class="string">&quot;serial&quot;</span>, g_serial_number);    </span><br><span class="line">  nh_global.<span class="built_in">getParam</span>(<span class="string">&quot;demo/serial&quot;</span>, l_serial_number);</span><br><span class="line">  <span class="comment">// 注意：NodeHandle 类方法不支持 ~</span></span><br><span class="line">  <span class="comment">// nh_global.getParam(&quot;~serial&quot;, g_serial_number); // 报错</span></span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;#1 Global param: %d, Local param: %d&quot;</span>, g_serial_number, l_serial_number);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// local namespace</span></span><br><span class="line">  nh_local.<span class="built_in">getParam</span>(<span class="string">&quot;serial&quot;</span>, l_serial_number); </span><br><span class="line">  nh_local.<span class="built_in">getParam</span>(<span class="string">&quot;/serial&quot;</span>, g_serial_number); </span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;#2 Global param: %d, Local param: %d&quot;</span>, g_serial_number, l_serial_number);</span><br><span class="line"></span><br><span class="line">  ros::<span class="built_in">spin</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">Launch 文件内容为：</span><br><span class="line">```xml</span><br><span class="line">&lt;launch&gt;</span><br><span class="line">  &lt;!-- global serial --&gt;</span><br><span class="line">  &lt;param name=<span class="string">&quot;serial&quot;</span> value=<span class="string">&quot;5&quot;</span> /&gt;</span><br><span class="line">  &lt;!--&lt;node name=<span class="string">&quot;demo&quot;</span> pkg=<span class="string">&quot;param_test&quot;</span> type=<span class="string">&quot;param_test_node&quot;</span> output=<span class="string">&quot;screen&quot;</span>&gt;--&gt;</span><br><span class="line">  &lt;node name=<span class="string">&quot;demo&quot;</span> pkg=<span class="string">&quot;param_test&quot;</span> type=<span class="string">&quot;param_test_node&quot;</span> output=<span class="string">&quot;screen&quot;</span> ns=<span class="string">&quot;ns1&quot;</span>&gt;</span><br><span class="line">    &lt;!-- local serial --&gt;</span><br><span class="line">    &lt;param name=<span class="string">&quot;serial&quot;</span> value=<span class="string">&quot;10&quot;</span> /&gt;</span><br><span class="line">  &lt;/node&gt;</span><br><span class="line">&lt;/launch&gt;</span><br><span class="line">```  </span><br><span class="line">- 若不设置 `ns=<span class="string">&quot;ns1&quot;</span>` 属性，`nh_global` 及 `nh_local` 均能正常读取局部和全局参数</span><br><span class="line">- 若设置 `ns=<span class="string">&quot;ns1&quot;</span>` 属性，则 `nh_global` 无法读取全局参数（需将其修改为 `&lt;arg name=<span class="string">&quot;ns1/serial&quot;</span> value=<span class="string">&quot;5&quot;</span>&gt;`），但能读取局部参数，`nh_local` 能正常读取局部和全局参数</span><br><span class="line">- 若将 `name` 属性修改为其它值，则 `nh_global` 将无法读取局部参数  </span><br><span class="line">- 添加命名空间除了使用 `ns` 属性，还可使用 `&lt;group&gt;`, 例如：  </span><br><span class="line">```xml</span><br><span class="line">&lt;launch&gt;</span><br><span class="line">  &lt;group ns=<span class="string">&quot;ns1&quot;</span>&gt;</span><br><span class="line">    &lt;!-- global serial --&gt;</span><br><span class="line">    &lt;param name=<span class="string">&quot;serial&quot;</span> value=<span class="string">&quot;5&quot;</span> /&gt;</span><br><span class="line">    &lt;node name=<span class="string">&quot;demo&quot;</span> pkg=<span class="string">&quot;parameter_demo&quot;</span> type=<span class="string">&quot;test_node&quot;</span> output=<span class="string">&quot;screen&quot;</span>&gt;</span><br><span class="line">      &lt;!-- local serial --&gt;</span><br><span class="line">      &lt;param name=<span class="string">&quot;serial&quot;</span> value=<span class="string">&quot;10&quot;</span> /&gt;</span><br><span class="line">    &lt;/node&gt;</span><br><span class="line">  &lt;/group&gt;</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure>
<p>此时均能正常读取参数。对应参数为：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ns1/demo/serial</span><br><span class="line">/ns1/serial</span><br></pre></td></tr></table></figure>

<p> 

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">group</span> <span class="attr">ns</span>=<span class="string">&quot;ns1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- global serial --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;param_test&quot;</span> <span class="attr">type</span>=<span class="string">&quot;param_test_node&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">ns</span>=<span class="string">&quot;ns2&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- local serial --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br><span class="line">```  </span><br><span class="line">对应参数为：  </span><br></pre></td></tr></table></figure>
<p>&#x2F;ns1&#x2F;ns2&#x2F;demo&#x2F;serial<br>&#x2F;ns1&#x2F;serial</p>
<pre><code>&gt; ---
&gt; - 注意：此时，`nh_global` 命名空间为 `/ns1/ns2` 其读取参数分别为 `/ns1/ns2/serial` 及 `/ns1/ns2/demo/serial`，因此能读取到局部参数（注意 `name` 属性值需保持一致），但无法读取全局参数；而 `nh_local` 命名命名空间为 `/ns1/ns2/demo`，同样只能读取局部参数，无法读取全局参数。需将全局参数修改为 `&lt;arg name=&quot;ns2/serial&quot; value=&quot;5&quot;&gt;`
&gt; ---  



</code></pre>
]]></content>
  </entry>
  <entry>
    <title>命名空间</title>
    <url>/2024/09/15/Robot/ROS/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a><!--需保留首行 # --></h1><h1 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h1><p>参考：<a href="http://wiki.ros.org/Names">ros Names</a>  </p>
<h2 id="Graph-Resource-Names"><a href="#Graph-Resource-Names" class="headerlink" title="Graph Resource Names"></a>Graph Resource Names</h2><p>Graph Resource Names 提供了一个<strong>分层的命名结构</strong>，该结构用于 ROS 计算图中的所有资源，如 nodes、参数、topics 和 services。  </p>
<p>例如：  </p>
<ul>
<li><code>/</code> : 全局命名空间</li>
<li><code>/foo</code></li>
<li><code>/stanford/robot/name</code></li>
<li><code>/wg/node</code></li>
</ul>
<p>Graph Resource Names 是 ROS 中一个提供封装(encapsulation)的重要机制。每个资源定义在一个命名空间(namespace)中，而该命名空间有可能为多个资源所共享。通常，资源可在其 namespace 中创建资源，并且可以访问其 namespace 内或其 namespace 上一层的资源。可以建立属于不同 namespace 的资源之间的连接，这通常是通过在上层整合这两个 namespace 的代码来实现。  </p>
<p>names 是相对解析的，因此资源不需要关注其所属的 namespace。</p>
<h3 id="可用的-names"><a href="#可用的-names" class="headerlink" title="可用的 names"></a>可用的 names</h3><p>一个可用的名字有以下特征：  </p>
<ul>
<li>以字母、’~’、’&#x2F;‘ 开始</li>
<li>后跟字母、数字、下划线或 ‘&#x2F;‘</li>
</ul>
<blockquote>
<hr>
<p><strong><em>注意：</em></strong>  </p>
<ul>
<li>base names 不能使用 ‘&#x2F;‘ 或 ‘~’</li>
</ul>
<hr>
</blockquote>
<h3 id="resolving"><a href="#resolving" class="headerlink" title="resolving"></a>resolving</h3><p>ROS 中有四种类型的 Graph Resource Names: <code>base</code>、<code>relative</code>、<code>global</code>、<code>private</code>  </p>
<ul>
<li>base</li>
<li>relative&#x2F;name</li>
<li>&#x2F;global&#x2F;name</li>
<li>~private&#x2F;name</li>
</ul>
<p>默认情况下，<code>resolution is done relative to the node&#39;s namespace(resolution 是相对于节点的命名空间)</code>。  </p>
<p>没有指定任何 namespace 限定符的 names 属于 <code>base names</code>。**<code>base names</code> 实际上是 <code>relative names</code> 的一个子类，并且有着相同的 resolution 规则**。Base names 经常用于初始化节点名。    </p>
<p><strong>以 <code>/</code> 开头的 names 是全局的</strong>。应当尽量避免 <code>Global names</code>，因为其限制了代码的可移植性。   </p>
<p>**以 <code>~</code> 开头的 names 是 <code>private</code> **。将节点的名字转换为 namespace。例如，<code>/wg</code> 命名空间中的节点 node1 的私有命名空间为 <code>/wg/node1</code>。Private names 用于通过参数服务器传递参数到一个指定节点。    </p>
<p>示例: <!-- 注意：表格与文字间需换行，否则无效 -->  </p>
<table>
<thead>
<tr>
<th>Node</th>
<th>Relative(default)</th>
<th>Global</th>
<th>Private</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;node1</td>
<td>bar -&gt; &#x2F;bar</td>
<td>&#x2F;bar -&gt; &#x2F;bar</td>
<td>~bar -&gt; &#x2F;node1&#x2F;bar</td>
</tr>
<tr>
<td>&#x2F;wg&#x2F;node2</td>
<td>bar -&gt; &#x2F;wg&#x2F;bar</td>
<td>&#x2F;bar -&gt; &#x2F;bar</td>
<td>~bar -&gt; &#x2F;wg&#x2F;node2&#x2F;bar</td>
</tr>
<tr>
<td>&#x2F;wg&#x2F;node3</td>
<td>foo&#x2F;bar -&gt; &#x2F;wg&#x2F;foo&#x2F;bar</td>
<td>&#x2F;foo&#x2F;bar -&gt; &#x2F;foo&#x2F;bar</td>
<td>~foo&#x2F;bar -&gt; &#x2F;wg&#x2F;node3&#x2F;foo&#x2F;bar</td>
</tr>
</tbody></table>
<h3 id="remapping"><a href="#remapping" class="headerlink" title="remapping"></a>remapping</h3><p>命令行启动节点时，可对 ROS 节点的名字进行重映射。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun rospy_tutorials talker chatter:=/wg/chatter</span></span><br></pre></td></tr></table></figure>
<p>将 <code>chatter</code> 重映射为 <code>/wg/chatter</code>。  </p>
<p>重映射匹配规则示例：  </p>
<table>
<thead>
<tr>
<th>Node Namespace</th>
<th>Remapping Argument</th>
<th>Matching Names</th>
<th>Final Resolved Name</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;</td>
<td>foo:&#x3D;bar</td>
<td>foo,&#x2F;foo</td>
<td>&#x2F;bar</td>
</tr>
<tr>
<td>&#x2F;baz</td>
<td>foo:&#x3D;bar</td>
<td>foo,&#x2F;baz&#x2F;foo</td>
<td>&#x2F;baz&#x2F;bar</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>&#x2F;foo:&#x3D;bar</td>
<td>foo,&#x2F;foo</td>
<td>&#x2F;bar</td>
</tr>
<tr>
<td>&#x2F;baz</td>
<td>&#x2F;foo:&#x3D;bar</td>
<td>&#x2F;foo</td>
<td>&#x2F;baz&#x2F;bar</td>
</tr>
<tr>
<td>&#x2F;baz</td>
<td>&#x2F;foo:&#x3D;&#x2F;a&#x2F;b&#x2F;c&#x2F;bar</td>
<td>&#x2F;foo</td>
<td>&#x2F;a&#x2F;b&#x2F;c&#x2F;bar</td>
</tr>
</tbody></table>
<p>参数重映射：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 ~param 设置为 1.0</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun rospy_tutorials talker _param:=1.0</span> </span><br></pre></td></tr></table></figure>
<p>其它常用 keys：  </p>
<ul>
<li><code>__name</code>:</li>
<li><code>__log</code>:</li>
<li><code>__ip</code>:</li>
<li><code>__host</code>:</li>
<li><code>__master</code>:</li>
<li><code>__ns</code>:</li>
</ul>
<p>

<h2 id="Package-Resource-Names"><a href="#Package-Resource-Names" class="headerlink" title="Package Resource Names"></a>Package Resource Names</h2><p>该名字用于 ROS 文件系统级别的概念，用于简化指向磁盘文件和数据类型的过程。包资源名字非常简单: 在包名后增加资源名。例如，<code>std_msgs/String</code> 指 <code>std_msgs</code> 包中的 <code>String</code> 消息类型。  </p>
<p>可以使用包资源名引用的一些ros相关文件包括:  </p>
<ul>
<li>Message types（msg）</li>
<li>Service types（srv）</li>
<li>Node types</li>
</ul>
<p>可用 names：    </p>
<ul>
<li>以字母（<code>[a-z|A-Z]</code>）开始</li>
<li>后跟字母或数字、下划线、斜杠(&#x2F;)</li>
<li>最多有一个斜杠</li>
</ul>
<h2 id="roscpp-API"><a href="#roscpp-API" class="headerlink" title="roscpp API"></a>roscpp API</h2><p>参考：<a href="http://docs.ros.org/en/noetic/api/roscpp/html/namespaceros_1_1names.html">ros::names Namespace Reference</a></p>
<h1 id="全局名称"><a href="#全局名称" class="headerlink" title="全局名称"></a>全局名称</h1><p><code>/</code> 表示全局名称。由斜杠分开的一系列命名空间，每个斜杠代表一级命名空间。基本名（base name）称描述资源本身。<br>例如：&#x2F;teleop_turtle，该名称为全局名称，teleop_turtle 为基本名称。  </p>
<h1 id="相对名称"><a href="#相对名称" class="headerlink" title="相对名称"></a>相对名称</h1><p>缺少全局名称的斜杠 <code>/</code>。  </p>
<p><strong>相对名称解析</strong>：将当前默认的命名空间的名称加在相对名称的前面，从而将相对名解析为全局名称。  </p>
<p><strong>设置默认命名空间</strong>：默认的命名空间是单独为每个节点设置的，而不是在系统范围进行。为节点选择一个不同的默认命名空间的最好的也是最常用的方法是在 launch 文件中使用命名空间属性(ns)。ROS 提供如下方式设置默认命名空间：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过命令行参数 __ns 设置默认命名空间</span></span><br><span class="line">__ns:=default-namespace  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 shell 环境变量设置默认命名空间</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> ROS_NAMESPACE=default-namespace</span> </span><br></pre></td></tr></table></figure>

<blockquote>
<hr>
<ul>
<li>只有当没有其他由 <code>__ns</code> 参数指定的默认命名空间时，<code>ROS_NAMESPACE</code> 环境变量才有效</li>
</ul>
<hr>
</blockquote>
<h1 id="私有名称"><a href="#私有名称" class="headerlink" title="私有名称"></a>私有名称</h1><p>以 <code>~</code> 开始。和相对名称一样，私有名称并不能完全确定他们自身所在的命名空间，而是需要 ROS 客户端库将这个名称解析为一个全局名称。  </p>
<p>与相对名称的主要差别在于：<strong>私有名称不是用当前默认命名空间，而是使用其节点名称作为命名空间</strong>。</p>
<h1 id="匿名名称"><a href="#匿名名称" class="headerlink" title="匿名名称"></a>匿名名称</h1><p>一般用于节点名（匿名并不是指没有名字，而是指非用户指定而又没有语义信息的名字）。<strong>匿名名称的目的是使节点的命名更容易准守唯一性的规则</strong>。其思路是，当节点调用 <code>ros::init</code> 方法时可以请求一个自动分配的唯一名称。  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ros::<span class="built_in">init</span>(argc, argv, base_name, ros::init_options::AnonymousName);</span><br></pre></td></tr></table></figure>
<p>注意：需要将 <em><code>ros::init_options::AnonymousName</code></em> 作为第四个参数传递给 ros::init 方法   </p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;demo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ros::NodeHandle nh_global; <span class="comment">// global</span></span><br><span class="line">    <span class="function">ros::NodeHandle <span class="title">nh_local</span><span class="params">(<span class="string">&quot;~&quot;</span>)</span></span>; <span class="comment">// private</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结果为 /</span></span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Global nh ns: %s&quot;</span>, nh_global.<span class="built_in">getNamespace</span>().<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="comment">// 结果为 /demo</span></span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Local nh ns: %s&quot;</span>, nh_local.<span class="built_in">getNamespace</span>().<span class="built_in">c_str</span>());</span><br><span class="line">    </span><br><span class="line">    std::string test_param1;</span><br><span class="line">    std::string test_param2;</span><br><span class="line">    nh_local.<span class="built_in">param</span>(<span class="string">&quot;param1&quot;</span>, test_param1, std::<span class="built_in">string</span>(<span class="string">&quot;param1&quot;</span>));</span><br><span class="line">    nh_global.<span class="built_in">param</span>(<span class="string">&quot;param2&quot;</span>, test_param2, std::<span class="built_in">string</span>(<span class="string">&quot;param2&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    ros::Subscriber sub0 = private_nh.<span class="built_in">subscribe</span>(<span class="string">&quot;test_sub1&quot;</span>, <span class="number">1000</span>, chatterCallback);</span><br><span class="line">    ros::Subscriber sub1 = nh.<span class="built_in">subscribe</span>(<span class="string">&quot;test_sub2&quot;</span>, <span class="number">1000</span>, chatterCallback);</span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>rosrun</code> 指令直接运行节点时，若不使用 <code>_name</code> 则默认节点名为 <code>ros::init</code> 中指定的名字；若使用 <code>launch</code> 文件启动节点，则节点名为 <code>&lt;node&gt;</code> 元素中 <code>name</code> 属性指定的值；若 <code>name</code> 属性值为空，则为匿名名称。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">节点名为 /test</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun &lt;package&gt; demo __name:=<span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">节点名为 /ns0/demo</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun &lt;package&gt; demp __ns:=ns0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">节点名为 /ns0/test</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun &lt;package&gt; demp __ns:=ns0 __name:=<span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>
<p>

<p>若使用 launch 文件：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">group</span> <span class="attr">ns</span>=<span class="string">&quot;ns&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- global serial --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;param1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/dev/ttyS0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;parameter_demo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;test_node&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">ns</span>=<span class="string">&quot;ns1&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- local serial --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;param2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/dev/ttyS1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此时，节点名为 <code>/ns/ns1/test</code>  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;param1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;global_param1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;param2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;global_param2&quot;</span> /&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;test_pkg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;test_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test_node&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;param1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;local_param1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;param2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;local_param2&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 结果为</span></span><br><span class="line"><span class="comment">/param1 - global_param1</span></span><br><span class="line"><span class="comment">/param2 - global_param2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/test_node/param1 - local_param1</span></span><br><span class="line"><span class="comment">/test_node/param2 - local_param2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">nh_local 读取的实际为 /test_node/param1</span></span><br><span class="line"><span class="comment">nh_global 读取的实际为 /test_node/param2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">并订阅主题：/test_node/test_sub1 和 /test_sub2</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;param1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;global_param1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;param2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;global_param2&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">group</span> <span class="attr">ns</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;param2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test/global_param2&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;test_pkg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;test_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test_node&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;param1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;local_param1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;param2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;local_param2&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 结果为</span></span><br><span class="line"><span class="comment">/param1 - global_param1</span></span><br><span class="line"><span class="comment">/param2 - global_param2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/test/param2 - test/global_param2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/test/test_node/param1 - local_param1 # 包含指定的 namespace: test</span></span><br><span class="line"><span class="comment">/test/test_node/param2 - local_param2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">nh_local 读取的实际为 /test/test_node/param1</span></span><br><span class="line"><span class="comment">nh_global 读取的实际为 /test/param2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">并订阅主题：/test/test_node/test_sub1 和 /test/test_sub2</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Robot</category>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>Robot</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>内参-外参</title>
    <url>/2024/09/21/Robot/%E4%BC%A0%E6%84%9F%E5%99%A8/%E5%86%85%E5%8F%82-%E5%A4%96%E5%8F%82/</url>
    <content><![CDATA[<p>机器人系统中，每个传感器都有各自的坐标系，各传感器得到的测量数据都是基于其自身坐标系。<br><strong>传感器标定</strong>：确定各传感器之间的坐标关系，即相对位姿。  </p>
<p>传感器标定可分为：<strong>外参标定</strong>和<strong>内参标定</strong>。 <strong>内参</strong>决定传感器内部映射关系，例如摄像头焦距、畸变系数等，是传感器自身特性，通常由厂家提供，但有部分需要自行标定，例如：相机焦距的定期矫正、lidar中各激光管的垂直朝向角。 <strong>外参</strong>决定传感器之间的相对位姿，通常由6个自由度表示（旋转+平移）。   </p>
<p>不同传感器之间标定的问题在于，每个传感器获取的数据类型不一样：</p>
<ul>
<li>摄像头得到的是 RGB 图像，但缺乏深度信息</li>
<li>激光雷达得到的是点云，但信号稀疏，噪音大</li>
<li>GPS&#x2F;IMU得到的是机器人的位姿<br>因此，不同传感器之间的标定方法不同。</li>
</ul>
<p>传感器之间的相对位姿关系可通过转换矩阵 M(4X4) 表示。传感器的位移、旋转、尺寸变化都可以用转换矩阵 M 来表示：<br><img src="/./images/matrix-M.png" alt="转换矩阵"><br>包含 3x3 的旋转矩阵 R 和 3x1 的平移矩阵 T。(只需 4x3?)<br>旋转矩阵 R 具有正交性，且行列值为 1，即： det(R) &#x3D; 1。 因此，旋转局局长可以转换为轻易装换为 四元素向量。</p>
<p>标定步骤：  </p>
<ul>
<li>粗略测量传感器之间的相对位姿</li>
<li>采集有用的传感器标定数据</li>
<li>算法优化使得标定误差最小化，得到标定值</li>
</ul>
<p>标定方法分为：targetless 和 target 两种。 前者在自然环境中进行，约束条件少，不需要用专门的target；后者则需要专门的控制场，有ground truth的target，比如典型的棋盘格平面板。</p>
<p>hand-eye calibrate标定算法: <a href="https://github.com/ethz-asl/hand_eye_calibration">hand_eye_calibration</a><br>lidar-imu 外参标定：<a href="https://github.com/ethz-asl/lidar_align">lidar_align</a><br>lidar-camera 外参标定：<a href="https://github.com/ankitdhall/lidar_camera_calibration">lidar_camera_calibration</a><br>lidar-to-lidar 外参标定：<br>相机内参的标定工具，例如：<a href="http://wiki.ros.org/camera_calibration">ROS Camera Calibration Tools</a> 和 Camera Calibration Toolbox for Matlab。<br>IMU外参标定：<a href="https://github.com/Kyle-ak/imu_tk">imu_tk</a>  </p>
<p>参考：<br>  -<a href="https://zhuanlan.zhihu.com/p/57028341">https://zhuanlan.zhihu.com/p/57028341</a><br>  -<a href="https://gitbook.cn/books/5cd8e067d7a0dd4c0f47391a/index.html">https://gitbook.cn/books/5cd8e067d7a0dd4c0f47391a/index.html</a>  </p>
]]></content>
  </entry>
  <entry>
    <title>tf</title>
    <url>/2024/09/21/Robot/TF/tf/</url>
    <content><![CDATA[<h2 id="tf-vs-tf2"><a href="#tf-vs-tf2" class="headerlink" title="tf vs tf2"></a>tf vs tf2</h2><p>tf2是tf的新实现，具有更好的抽象和依赖隔离。 有关概述，请参阅Wiki页面：tf2新版本的设计记录在tf2 &#x2F; Design页面上。  </p>
<p>tf2仍然是实验性的，在geometry_experimental堆栈中，仍然建议使用tf包，直到 tf2 正式发布。</p>
]]></content>
  </entry>
  <entry>
    <title>ZeroMQ使用</title>
    <url>/2024/09/07/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/ZeroMQ/README/</url>
    <content><![CDATA[<p>参考：  </p>
<ul>
<li><a href="http://hintjens.com/blog:49">Using ZeroMQ Security</a>  </li>
<li><a href="https://www.hivemq.com/article/mqtt-vs-zeromq-for-iot/">MQTT vs ZeroMQ</a>  </li>
<li><a href="https://www.cnblogs.com/zengzy/p/5122634.html">zeromq源码分析</a></li>
</ul>
<h1 id="ZeroMQ-部署"><a href="#ZeroMQ-部署" class="headerlink" title="ZeroMQ 部署"></a>ZeroMQ 部署</h1><p>参考：<a href="https://zeromq.org/download/">https://zeromq.org/download/</a>  </p>
<p>Ubuntu 安装：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">sudo</span> apt install libzmq3-dev</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install libzmq5 libczmq-dev</span></span><br></pre></td></tr></table></figure>

<p>源码编译：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载源码，切换到相应版本的 tag</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/zeromq/libzmq.git</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> libzmq</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./version.sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置及编译 zeromq</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./autogen.sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure --prefix=/usr/local/zeromq</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make &amp;&amp; make install</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或使用 cmake 编译</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make install</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置环境变量</span></span><br><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或在 /etc/ld.so.conf.d 中添加 zeromq.conf</span></span><br></pre></td></tr></table></figure>

<p>使用示例程序：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> --depth=1 https://github.com/imatix/zguide.git</span></span><br></pre></td></tr></table></figure>


<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/jedisct1/libsodium.git</span><br><span class="line">cd libsodium</span><br><span class="line">./autogen.sh -s</span><br><span class="line">./configure -prefix=/usr/local/libsodium &amp;&amp; make check</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">git clone https://github.com/zeromq/libzmq.git</span><br><span class="line">cd libzmq</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">./autogen.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">./configure &amp;&amp; make check</span></span><br><span class="line">mkdir build &amp;&amp; cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local/libzmq</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line">cd ../../</span><br><span class="line"></span><br><span class="line">git clone https://github.com/zeromq/czmq.git</span><br><span class="line">cd czmq</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">./autogen.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">./configure &amp;&amp; make check</span></span><br><span class="line">mkdir build &amp;&amp; cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local/czmq</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure>

<h1 id="ZeroMQ-使用"><a href="#ZeroMQ-使用" class="headerlink" title="ZeroMQ 使用"></a>ZeroMQ 使用</h1><h2 id="ZeroMQ-Socket-types"><a href="#ZeroMQ-Socket-types" class="headerlink" title="ZeroMQ Socket types"></a>ZeroMQ Socket types</h2><p>ZeroMQ 提供 12 中 Socket 类型：  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  Socket types.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ZMQ_PAIR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ZMQ_PUB 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ZMQ_SUB 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ZMQ_REQ 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ZMQ_REP 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ZMQ_DEALER 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ZMQ_ROUTER 6</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ZMQ_PULL 7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ZMQ_PUSH 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ZMQ_XPUB 9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ZMQ_XSUB 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ZMQ_STREAM 11</span></span><br></pre></td></tr></table></figure>

<h2 id="zsock-t-结构体"><a href="#zsock-t-结构体" class="headerlink" title="zsock_t 结构体"></a>zsock_t 结构体</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zsock_t</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> tag; <span class="comment">// object 标记，用于运行时检测</span></span><br><span class="line">    <span class="type">void</span> *handle; <span class="comment">// libzmq 套接字句柄</span></span><br><span class="line">    <span class="type">char</span> *endpoint; <span class="comment">// 最后一个绑定端点(如果有的话)</span></span><br><span class="line">    <span class="type">char</span> *cache; <span class="comment">// 保存最后接收到的 zsock_brecv 字符串</span></span><br><span class="line">    <span class="type">int</span> type; <span class="comment">// 套接字类型</span></span><br><span class="line">    <span class="type">size_t</span> cache_size; <span class="comment">// 缓存大小</span></span><br><span class="line">    <span class="type">uint32_t</span> routing_id; <span class="comment">// server 套接字的 routing ID</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其中，<code>tag</code> 在 <code>zsock_new</code> 时赋值为 <code>ZSOCK_TAG(0xcafe0004)</code>。zsock_t 实例总是将此标记作为其数据的前 4 个字节，这使得可以执行运行时对象类型和验证。  </p>
<h2 id="zsock-new"><a href="#zsock-new" class="headerlink" title="zsock_new"></a>zsock_new</h2><p>该接口会自动完成 zsock 泄漏检测 – 不是 zsock 官方接口的一部分。这使 CZMQ 能够智能地报告套接字泄漏 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#   <span class="keyword">define</span> zsock_new(t) zsock_new_checked((t), __FILE__, __LINE__)</span></span><br></pre></td></tr></table></figure>
<p><code>zsock_new_checked(...)</code> 中创建 socket。这个宏传递调用方文件名和行号，以便 CZMQ 可以智能地报告套接字泄漏。要关闭这种检查，请在编译代码之前定义 <code>ZSOCK_NOCHECK</code>。  </p>
<p>最终，调用 <code>zsys_socket(...)</code> 创建套接字，并且，若为初次调用该接口，还会自动创建 ZMQ context。调用者负责在进程退出前销毁 ZMQ 套接字，避免 ZMQ 死锁(deadlock)。注意：不要在 CZMQ 应用中直接调用该接口，而应该使用 <code>zsock_new()</code> 方法。  </p>
<h2 id="zmalloc"><a href="#zmalloc" class="headerlink" title="zmalloc"></a>zmalloc</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> defined (_ZMALLOC_DEBUG) || defined (_ZMALLOC_PEDANTIC)</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> zmalloc(size) calloc(1,(size))</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> zmalloc(size) safe_malloc((size), __FILE__, __LINE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>若需要追踪内存泄漏(如使用 mtrace)，则定义 <code>_ZMALLOC_DEBUG</code> 宏。<code>_ZMALLOC_PEDANTIC</code> 做同样的事情，但它的目的是将内存溢出的情况传播到调用堆栈。  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> *</span><br><span class="line"><span class="title function_">safe_malloc</span> <span class="params">(<span class="type">size_t</span> size, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> line)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//     printf (&quot;%s:%u %08d\n&quot;, file, line, (int) size);</span></span><br><span class="line">    <span class="type">void</span> *mem = <span class="built_in">calloc</span> (<span class="number">1</span>, size);</span><br><span class="line">    <span class="keyword">if</span> (mem == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">&quot;FATAL ERROR at %s:%u\n&quot;</span>, file, line);</span><br><span class="line">        <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">&quot;OUT OF MEMORY (malloc returned NULL)\n&quot;</span>);</span><br><span class="line">        fflush (<span class="built_in">stderr</span>);</span><br><span class="line">        <span class="built_in">abort</span> ();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="zsys-socket"><a href="#zsys-socket" class="headerlink" title="zsys_socket"></a>zsys_socket</h2><p>创建新的 ZMQ 套接字，且若为初次调用，会自动创建 ZMQ context。调用者负责在进程退出时销毁 ZMQ socket，避免 ZMQ 死锁(deadlock)。注意：不要在应用程序中直接调用该接口，而应该使用 <code>zsock_new()</code>  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">zsys_socket</span> <span class="params">(<span class="type">int</span> type, <span class="type">const</span> <span class="type">char</span> *filename, <span class="type">size_t</span> line_nbr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 第一次初始化;如果应用程序将自己的线程调用与zsock混合在一起，如果两个线程试图同时创建套接字，则可能会失败。在这样的应用程序中，它们必须在启动任何线程之前在主程序中创建一个套接字。如果应用程序的线程使用zactor，那么可以保证它始终是安全的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    zsys_init ();</span><br><span class="line">    ZMUTEX_LOCK (s_mutex);</span><br><span class="line">    <span class="type">void</span> *handle = zmq_socket (s_process_ctx, type);</span><br><span class="line">    <span class="keyword">if</span> (handle) &#123;</span><br><span class="line">        <span class="comment">//  Configure socket with process defaults</span></span><br><span class="line">        zsock_set_linger (handle, (<span class="type">int</span>) s_linger);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (ZMQ_VERSION_MAJOR == 2)</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> v2/v3 socket api in zsock_option.inc are not public (not</span></span><br><span class="line">        <span class="comment">// added to include/zsock.h) so we have to use zmq_setsockopt directly</span></span><br><span class="line">        <span class="comment">// This should be fixed and zsock_set_hwm should be used instead</span></span><br><span class="line"><span class="meta">#       <span class="keyword">if</span> defined (ZMQ_HWM)</span></span><br><span class="line">        <span class="type">uint64_t</span> value = s_sndhwm;</span><br><span class="line">        <span class="type">int</span> rc = zmq_setsockopt (handle, ZMQ_HWM, &amp;value, <span class="keyword">sizeof</span> (<span class="type">uint64_t</span>));</span><br><span class="line">        assert (rc == <span class="number">0</span> || zmq_errno () == ETERM);</span><br><span class="line"><span class="meta">#       <span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="comment">//  For later versions we use separate SNDHWM and RCVHWM</span></span><br><span class="line">        zsock_set_sndhwm (handle, (<span class="type">int</span>) s_sndhwm);</span><br><span class="line">        zsock_set_rcvhwm (handle, (<span class="type">int</span>) s_rcvhwm);</span><br><span class="line"><span class="meta">#   <span class="keyword">if</span> defined (ZMQ_IPV6)</span></span><br><span class="line">        zsock_set_ipv6 (handle, s_ipv6);</span><br><span class="line"><span class="meta">#   <span class="keyword">else</span></span></span><br><span class="line">        zsock_set_ipv4only (handle, s_ipv6? <span class="number">0</span>: <span class="number">1</span>);</span><br><span class="line"><span class="meta">#   <span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="comment">//  Add socket to reference tracker so we can report leaks; this is</span></span><br><span class="line">        <span class="comment">//  done only when the caller passes a filename/line_nbr</span></span><br><span class="line">        <span class="keyword">if</span> (filename) &#123;</span><br><span class="line">            <span class="type">s_sockref_t</span> *sockref = (<span class="type">s_sockref_t</span> *) zmalloc (<span class="keyword">sizeof</span> (<span class="type">s_sockref_t</span>));</span><br><span class="line">            <span class="keyword">if</span> (sockref) &#123;</span><br><span class="line">                sockref-&gt;handle = handle;</span><br><span class="line">                sockref-&gt;type = type;</span><br><span class="line">                sockref-&gt;filename = filename;</span><br><span class="line">                sockref-&gt;line_nbr = line_nbr;</span><br><span class="line">                zlist_append (s_sockref_list, sockref);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                zmq_close (handle);</span><br><span class="line">                ZMUTEX_UNLOCK (s_mutex);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s_open_sockets++;</span><br><span class="line">    &#125;</span><br><span class="line">    ZMUTEX_UNLOCK (s_mutex);</span><br><span class="line">    <span class="keyword">return</span> handle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="zsys-init"><a href="#zsys-init" class="headerlink" title="zsys_init"></a>zsys_init</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> *</span><br><span class="line"><span class="title function_">zsys_init</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined (__UNIX__)</span></span><br><span class="line">    <span class="comment">//To avoid two inits at same time</span></span><br><span class="line">    pthread_once(&amp;init_all_mutex_var, zsys_initialize_mutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s_initialized) &#123;</span><br><span class="line">        assert (s_process_ctx);</span><br><span class="line">        <span class="keyword">return</span> s_process_ctx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ZMUTEX_LOCK (s_init_mutex);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Doing this again here... to ensure that after mutex wait if the thread 2 gets execution, it will</span></span><br><span class="line">    <span class="comment">// will get the context right away</span></span><br><span class="line">    <span class="keyword">if</span> (s_initialized) &#123;</span><br><span class="line">        assert (s_process_ctx);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined (__UNIX__)</span></span><br><span class="line">        <span class="comment">// unlock the mutex before returning the context</span></span><br><span class="line">        ZMUTEX_UNLOCK(s_init_mutex);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">return</span> s_process_ctx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Pull process defaults from environment</span></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_IO_THREADS&quot;</span>))</span><br><span class="line">        s_io_threads = atoi (getenv (<span class="string">&quot;ZSYS_IO_THREADS&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_MAX_SOCKETS&quot;</span>))</span><br><span class="line">        s_max_sockets = atoi (getenv (<span class="string">&quot;ZSYS_MAX_SOCKETS&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_MAX_MSGSZ&quot;</span>))</span><br><span class="line">        s_max_msgsz = atoi (getenv (<span class="string">&quot;ZSYS_MAX_MSGSZ&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_ZERO_COPY_RECV&quot;</span>))</span><br><span class="line">        s_zero_copy_recv = atoi (getenv (<span class="string">&quot;ZSYS_ZERO_COPY_RECV&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_FILE_STABLE_AGE_MSEC&quot;</span>))</span><br><span class="line">        s_file_stable_age_msec = atoi (getenv (<span class="string">&quot;ZSYS_FILE_STABLE_AGE_MSEC&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_LINGER&quot;</span>))</span><br><span class="line">        s_linger = atoi (getenv (<span class="string">&quot;ZSYS_LINGER&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_SNDHWM&quot;</span>))</span><br><span class="line">        s_sndhwm = atoi (getenv (<span class="string">&quot;ZSYS_SNDHWM&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_RCVHWM&quot;</span>))</span><br><span class="line">        s_rcvhwm = atoi (getenv (<span class="string">&quot;ZSYS_RCVHWM&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_PIPEHWM&quot;</span>))</span><br><span class="line">        s_pipehwm = atoi (getenv (<span class="string">&quot;ZSYS_PIPEHWM&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_IPV6&quot;</span>))</span><br><span class="line">        s_ipv6 = atoi (getenv (<span class="string">&quot;ZSYS_IPV6&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_LOGSTREAM&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (streq (getenv (<span class="string">&quot;ZSYS_LOGSTREAM&quot;</span>), <span class="string">&quot;stdout&quot;</span>))</span><br><span class="line">            s_logstream = <span class="built_in">stdout</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (streq (getenv (<span class="string">&quot;ZSYS_LOGSTREAM&quot;</span>), <span class="string">&quot;stderr&quot;</span>))</span><br><span class="line">            s_logstream = <span class="built_in">stderr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        s_logstream = <span class="built_in">stdout</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_LOGSYSTEM&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (streq (getenv (<span class="string">&quot;ZSYS_LOGSYSTEM&quot;</span>), <span class="string">&quot;true&quot;</span>))</span><br><span class="line">            s_logsystem = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (streq (getenv (<span class="string">&quot;ZSYS_LOGSYSTEM&quot;</span>), <span class="string">&quot;false&quot;</span>))</span><br><span class="line">            s_logsystem = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_AUTO_USE_FD&quot;</span>))</span><br><span class="line">        s_auto_use_fd = atoi (getenv (<span class="string">&quot;ZSYS_AUTO_USE_FD&quot;</span>));</span><br><span class="line"></span><br><span class="line">    zsys_catch_interrupts ();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined (__WINDOWS__)</span></span><br><span class="line">    ZMUTEX_INIT (s_mutex);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    s_sockref_list = zlist_new ();</span><br><span class="line">    <span class="keyword">if</span> (!s_sockref_list) &#123;</span><br><span class="line">        zsys_shutdown ();</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined (__UNIX__)</span></span><br><span class="line">        ZMUTEX_UNLOCK(s_init_mutex);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    srandom ((<span class="type">unsigned</span>) time (<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    assert (!s_process_ctx);</span><br><span class="line">    <span class="comment">//  We use zmq_init/zmq_term to keep compatibility back to ZMQ v2</span></span><br><span class="line">    s_process_ctx = zmq_init ((<span class="type">int</span>) s_io_threads);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined (ZMQ_MAX_SOCKETS)</span></span><br><span class="line">    zmq_ctx_set (s_process_ctx, ZMQ_MAX_SOCKETS, (<span class="type">int</span>) s_max_sockets);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    s_initialized = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined (__UNIX__)</span></span><br><span class="line">    atexit (zsys_shutdown);</span><br><span class="line">    pthread_atfork(<span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;zsys_pthread_at_fork_handler);</span><br><span class="line">    <span class="comment">//don&#x27;t hold the lock because some of the function will call zsys_init again</span></span><br><span class="line">    ZMUTEX_UNLOCK(s_init_mutex);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  The following functions call zsys_init(), so they MUST be called after</span></span><br><span class="line">    <span class="comment">//  s_initialized is set in order to avoid an infinite recursion</span></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_INTERFACE&quot;</span>))</span><br><span class="line">        zsys_set_interface (getenv (<span class="string">&quot;ZSYS_INTERFACE&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_IPV6_ADDRESS&quot;</span>))</span><br><span class="line">        zsys_set_ipv6_address (getenv (<span class="string">&quot;ZSYS_IPV6_ADDRESS&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_IPV6_MCAST_ADDRESS&quot;</span>))</span><br><span class="line">        zsys_set_ipv6_mcast_address (getenv (<span class="string">&quot;ZSYS_IPV6_MCAST_ADDRESS&quot;</span>));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        zsys_set_ipv6_mcast_address (<span class="string">&quot;ff02:0:0:0:0:0:0:1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_IPV4_MCAST_ADDRESS&quot;</span>))</span><br><span class="line">        zsys_set_ipv4_mcast_address (getenv (<span class="string">&quot;ZSYS_IPV4_MCAST_ADDRESS&quot;</span>));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        zsys_set_ipv4_mcast_address (<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_LOGIDENT&quot;</span>))</span><br><span class="line">        zsys_set_logident (getenv (<span class="string">&quot;ZSYS_LOGIDENT&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_LOGSENDER&quot;</span>))</span><br><span class="line">        zsys_set_logsender (getenv (<span class="string">&quot;ZSYS_LOGSENDER&quot;</span>));</span><br><span class="line"></span><br><span class="line">    zsys_set_max_msgsz (s_max_msgsz);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined ZMQ_ZERO_COPY_RECV</span></span><br><span class="line">    zmq_ctx_set (s_process_ctx, ZMQ_ZERO_COPY_RECV, s_zero_copy_recv);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    zsys_set_file_stable_age_msec (s_file_stable_age_msec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_THREAD_PRIORITY&quot;</span>))</span><br><span class="line">        zsys_set_thread_priority (atoi (getenv (<span class="string">&quot;ZSYS_THREAD_PRIORITY&quot;</span>)));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        zsys_set_thread_priority (s_thread_priority);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_THREAD_SCHED_POLICY&quot;</span>))</span><br><span class="line">        zsys_set_thread_sched_policy (atoi (getenv (<span class="string">&quot;ZSYS_THREAD_SCHED_POLICY&quot;</span>)));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        zsys_set_thread_sched_policy (s_thread_sched_policy);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_THREAD_NAME_PREFIX&quot;</span>))</span><br><span class="line">        zsys_set_thread_name_prefix (atoi (getenv (<span class="string">&quot;ZSYS_THREAD_NAME_PREFIX&quot;</span>)));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        zsys_set_thread_name_prefix (s_thread_name_prefix);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getenv (<span class="string">&quot;ZSYS_THREAD_NAME_PREFIX_STR&quot;</span>))</span><br><span class="line">        zsys_set_thread_name_prefix_str (getenv (<span class="string">&quot;ZSYS_THREAD_NAME_PREFIX_STR&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s_process_ctx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>若为 Unix 系统，则使用 <code>pthread_once</code> 避免在多个线程中同时进行初始化</li>
<li>若已初始化，则返回进程 context，退出</li>
<li>获取环境变量</li>
<li>定义信号处理函数 <code>zsys_catch_interrupts()</code></li>
<li>初始化 socket 存储列表 <code>s_sockref_list</code>  </li>
<li>ZMQ 初始化，使用 <strong><code>zmq_init/zmq_term</code></strong> 兼容 ZMQ v2</li>
<li>若为 Unix 系统，则通过 <code>atexit(zsys_shutdown)</code> 指定退出时执行 <code>zsys_shutdown</code> 函数；并调用 <code>pthread_atfork</code>  </li>
<li>是否设置零拷贝 <code>ZMQ_ZERO_COPY_RECV</code>  </li>
<li><code>zsys_set_file_stable_age_msec</code></li>
<li>设置线程参数：    <ul>
<li>设置线程优先级 <code>zsys_set_thread_priority</code>  </li>
<li>设置线程调度策略 <code>zsys_set_thread_sched_polcy</code></li>
<li>设置线程名字前缀 <code>zsys_set_thread_name_prefix</code>，<code>zsys_set_thread_name_prefix_str</code></li>
</ul>
</li>
</ul>
<h2 id="zmq-socket"><a href="#zmq-socket" class="headerlink" title="zmq_socket"></a>zmq_socket</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">zmq_socket</span> <span class="params">(<span class="type">void</span> *ctx_, <span class="type">int</span> type_)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!ctx_ || !(static_cast&lt;zmq::<span class="type">ctx_t</span> *&gt; (ctx_))-&gt;check_tag ()) &#123;</span><br><span class="line">        errno = EFAULT;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    zmq::<span class="type">ctx_t</span> *ctx = static_cast&lt;zmq::<span class="type">ctx_t</span> *&gt; (ctx_);</span><br><span class="line">    zmq::<span class="type">socket_base_t</span> *s = ctx-&gt;create_socket (type_);</span><br><span class="line">    <span class="keyword">return</span> static_cast&lt;<span class="type">void</span> *&gt; (s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用 <code>ctx-&gt;create_socket(type_)</code> 来创建套接字。该接口调用 <code>socket_base_t::create(...)</code> 来创建 socket 并注册其 mailbox，该接口中，根据套接字类型，调用相应接口(如：<code>pair_t</code>、<code>pub_t</code>、<code>sub_t</code>、<code>req_t</code>、<code>dealer_t</code>、<code>router_t</code>、<code>pull_t</code>、<code>push_t</code>、<code>xpub_t</code>、<code>xsub_t</code>、<code>stream_t</code>、<code>server_t</code>、<code>client_t</code>、<code>radio_t</code>、<code>dish_t</code>、<code>gather_t</code>、<code>scatter_t</code>、<code>dgram_t</code>、<code>peer_t</code>、<code>channel_t</code>)创建对应类型套接字    </p>
<h2 id="reaper-t-线程"><a href="#reaper-t-线程" class="headerlink" title="reaper_t 线程"></a>reaper_t 线程</h2><p>ZeroMQ 中的 Reaper 线程是一个后台线程，负责清理不再使用的资源，比如已断开的连接、已完成的消息等等。当一个 socket 或者一个 endpoint 被关闭时，其相关的资源会被标记为不再使用，并放入 Reaper thread 维护的队列中。Reaper thread 在空闲时会扫描这个队列，将不再使用的资源清理掉。</p>
<p>Reaper thread 的存在可以有效地减少应用程序的内存占用和资源浪费，特别是当应用程序运行时间较长、连接数量较大时。同时，Reaper thread 也可以提高应用程序的运行效率和稳定性。</p>
<h2 id="主要参数"><a href="#主要参数" class="headerlink" title="主要参数"></a>主要参数</h2><ul>
<li>ZSYS_IO_THREADS</li>
<li>ZSYS_MAX_SOCKETS</li>
<li>ZSYS_MAX_MSGSZ</li>
<li>ZSYS_ZERO_COPY_RECV</li>
<li>ZSYS_FILE_STABLE_AGE_MSEC</li>
<li>ZSYS_LINGER</li>
<li>ZSYS_SNDHWM</li>
<li>ZSYS_RCVHWM</li>
<li>ZSYS_PIPEHWM</li>
<li>ZSYS_IPV6</li>
<li>ZSYS_LOGSTREAM：日志路径</li>
<li>ZSYS_LOGSYSTEM</li>
<li>ZSYS_AUTO_USE_FD</li>
</ul>
<p>以下参数需在 <code>zsys_init()</code> 之后调用：  </p>
<ul>
<li>ZSYS_INTERFACE</li>
<li>ZSYS_IPV6_ADDRESS</li>
<li>ZSYS_IPV6_MCAST_ADDRESS</li>
<li>ZSYS_IPV4_MCAST_ADDRESS</li>
<li>ZSYS_LOGIDENT</li>
<li>ZSYS_LOGSENDER</li>
<li>ZSYS_THREAD_PRIORITY</li>
<li>ZSYS_THREAD_SCHED_POLICY</li>
<li>ZSYS_THREAD_NAME_PREFIX</li>
<li>ZSYS_THREAD_NAME_PREFIX_STR</li>
</ul>
<h1 id="使用问题"><a href="#使用问题" class="headerlink" title="使用问题"></a>使用问题</h1><h2 id="error-unknown-type-name-‘zctx-t’"><a href="#error-unknown-type-name-‘zctx-t’" class="headerlink" title="error: unknown type name ‘zctx_t’"></a>error: unknown type name ‘zctx_t’</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;czmq.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">zctx_t</span> *ctx = zctx_new ();</span><br><span class="line">    <span class="type">void</span> *publisher = zsocket_new (ctx, ZMQ_PUB);</span><br><span class="line">    zsocket_set_curve_server (publisher, <span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">puts</span> (<span class="string">&quot;Hello, Curve!&quot;</span>);</span><br><span class="line">    zctx_destroy (&amp;ctx);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>error: unknown type name ‘zctx_t’; did you mean ‘zrex_t’?</code>    </p>
<p>原因：代码中使用的是 CZMQ v2 API，这些 API 在 v3 中已启用，在 v4 中已被删除。  </p>
<p>解决方法：  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;czmq.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">zsock_t</span> *publisher = zsock_new (ZMQ_PUB);</span><br><span class="line">    zsock_set_curve_server (publisher, <span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">puts</span> (<span class="string">&quot;Hello, Curve!&quot;</span>);</span><br><span class="line">    zsock_destroy (&amp;publisher);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Missing-Message-Problem-Solver"><a href="#Missing-Message-Problem-Solver" class="headerlink" title="Missing Message Problem Solver"></a>Missing Message Problem Solver</h2><p>在使用 ZeroMQ 构建应用程序时，经常会遇到：丢失期望接收的消息。  </p>
<p>造成这种情况的最常见原因：<br><img src="/./images/Missing%20Message%20Problem%20Solver.png" alt="Missing Message Problem Solver"></p>
]]></content>
      <categories>
        <category>数据通信</category>
        <category>ZeroMQ</category>
      </categories>
      <tags>
        <tag>ZeroMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>术语</title>
    <url>/2024/09/21/Robot/%E6%A6%82%E7%8E%87%E6%9C%BA%E5%99%A8%E4%BA%BA/%E6%9C%AF%E8%AF%AD/</url>
    <content><![CDATA[<p><strong>置信度(belief)<strong>：反映了机器人有关环境状态的内部信息。机器人的状态不能直接测量，必须从数据中推测其位姿，因此要从位姿的内部置信度识别出真正的状态。概率机器人通过条件概率分布表示置信度。置信度分布可以获得数据为条件的关于状态变量的后验概率。用 <img src="http://chart.googleapis.com/chart?cht=tx&chl={bel}(x_t)" style="border:none;"> 表示状态变量 <img src="http://chart.googleapis.com/chart?cht=tx&chl=x_t" style="border:none;"> 的置信度：<img src="http://chart.googleapis.com/chart?cht=tx&chl={bel}(x_t) = p(x_t | z_{1:t}, u_{1:t})" style="border:none;"><br>1:t 表示从其实到 t 时刻的而所有值。<br>  用  <img src="http://chart.googleapis.com/chart?cht=tx&chl=\bar{bel}(x_t)" style="border:none;"> 表示预测(prediction)，即刚刚执行完控制  <img src="http://chart.googleapis.com/chart?cht=tx&chl=u_t" style="border:none;"> 之后，综合  <img src="http://chart.googleapis.com/chart?cht=tx&chl=z_t" style="border:none;"> 之前计算得到的后验值，是是基于以前状态的后验：<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=\bar{bel}(x_t) = p(x_t | z_{1:t-1}, u_{1:t})" style="border:none;"><br>由 <img src="http://chart.googleapis.com/chart?cht=tx&chl=\bar{bel}(x_t)" style="border:none;"> 计算 <img src="http://chart.googleapis.com/chart?cht=tx&chl={bel}(x_t)" style="border:none;"> 称为</strong>修正(correction) 或 测量更新(measurement update)</strong></p>
<p><strong>置信区间</strong>：<br>**海岸导航(coastal navigation)**：  </p>
<p><strong>马尔可夫假设</strong>：如果知道当前状态，马尔可夫假设设定过去和未来的数据都是独立的。  </p>
<p>隐马尔可夫模型(Hidden Markov Model - HMM)：<br>动态贝叶斯网络(Dynamic Bayes Network - DBN)：  </p>
<p>普通密度函数都是具有均值 μ 和方差 <img src="http://chart.googleapis.com/chart?cht=tx&chl=\sigma^2" style="border:none;"> 的一维正态分布。<br>正态分布的概率密度函数：<br>1)、假设x为标量 <img src="http://chart.googleapis.com/chart?cht=tx&chl=p(x)=(2\pi\sigma^2)^{-\frac{1}{2}} exp\{-\frac{1}{2}\frac{(x-\mu)^2}{\sigma^2}\}" style="border:none;"><br>2)、假设x为多维矢量 <img src="http://chart.googleapis.com/chart?cht=tx&chl=p(x)=det(2\pi\Sigma)^{-\frac{1}{2}} exp\{-\frac{1}{2}(x-\mu)^T\Sigma^{-1}(x-\mu)\}" style="border:none;"><br>其正态分布缩写方式：<img src="http://chart.googleapis.com/chart?cht=tx&chl=N(x;\mu, \delta^2)" style="border:none;"><br>**概率密度函数(Probability Density Function 即 PDF)**的积分总是等于 1，即：<img src="http://chart.googleapis.com/chart?cht=tx&chl=\displaystyle \int {p(x)dx} = 1" style="border:none;">  </p>
<p><strong>贝叶斯定理</strong>：基于新数据和与事件相关条件的先验知识，对事件概率进行更新的规则。贝叶斯公式：<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=p(x|y)=\frac{p(y|x)p(x)}{p(y)} = \frac{p(y|x)p(x)}{\Sigma_{x'}p(y|x')p(x')}}" style="border:none;"> – 离散<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=p(x|y)=\frac{p(y|x)p(x)}{p(y)}} = \frac{p(y|x)p(x)}{\displaystyle \int {p(y|x')p(x')dx'}}" style="border:none;"> – 连续<br>若 x 是一个希望由 y 推测出来的数值，则概率 p(x) 称为<strong>先验概率分布</strong>。其中，y 称为数据（例如：传感器测量值）。 p(x|y) 称为在 X 上的后验概率。 贝叶斯准则为利用 p(y|x) 和先验概率 p(x) 一起去计算后验概率 p(x|y) 提供了一种方便的方法。<br>贝叶斯准则的分母 p(y) 不依赖 x。因此贝叶斯公式中因子 <img src="http://chart.googleapis.com/chart?cht=tx&chl=p(y)^{-1}" style="border:none;"> 对任何 x 的后验概率 p(x|y) 都是相同的。因此，<img src="http://chart.googleapis.com/chart?cht=tx&chl=p(y)^{-1}" style="border:none;"> 经常写成贝叶斯准则中的归一化变量，通常用 <img src="http://chart.googleapis.com/chart?cht=tx&chl=\eta" style="border:none;"> 表示: <img src="http://chart.googleapis.com/chart?cht=tx&chl=p(x|y)=\eta{p(y|x)p(x)}" style="border:none;">   </p>
<p><strong>期望值（expectation）</strong>：即均值。是试验中每次可能结果的概率乘以其结果的总和。<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=E(X)=\Sigma\limits_{x}xp(x) " style="border:none;"> – 离散<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=E(X)=\displaystyle \int {xp(x)dx} " style="border:none;"> – 连续  </p>
<p><strong>协方差 Cov</strong> 衡量的是偏离均值的二次方期望：<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=Cov[x]=E[X - E[X]]^2 = E[X^2] - E[X]^2" style="border:none;"> </p>
<p><strong>熵（entropy）</strong>：<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=H_p(x)=E[-log_2p(x)]" style="border:none;"><br>是<strong>信息杂乱程度的描述，是 x 所携带的期望信息</strong>。离散情况下，假定 p(x) 是观测 x 的概率，则 $-log_2p(x)$ 就是使用最佳编码对 x 进行编码所需的比特数。熵用在机器人信息收集，用以表达机器人在执行具体行动时可能接收到的信息。  </p>
<p><strong>运动学状态（kinematic state）</strong>：例如机器人转动关节的关节角度等<br><strong>动态学状态（dynamic state）</strong>：例如机器人速度、角速度<br>环境中，移动的人或物体也有其自身的运动和动态状态。  </p>
<p><strong>状态</strong>：<img src="http://chart.googleapis.com/chart?cht=tx&chl=x_t" style="border:none;"><br><strong>测量（或观察、认知percept）</strong>：基于传感器测量数据。用<img src="http://chart.googleapis.com/chart?cht=tx&chl=z_t" style="border:none;"> 表示<br><strong>控制数据</strong>：控制数据携带环境中关于状态改变的信息，例如：机器人的速度、odometry等。 控制数据用 <img src="http://chart.googleapis.com/chart?cht=tx&chl=u_t" style="border:none;">表示。  </p>
]]></content>
  </entry>
  <entry>
    <title>疑问</title>
    <url>/2024/09/21/Robot/%E6%A6%82%E7%8E%87%E6%9C%BA%E5%99%A8%E4%BA%BA/%E7%96%91%E9%97%AE/</url>
    <content><![CDATA[<p>1、噪声互相依赖的可能原因？<br>1）人经常会劣化几个相邻传感器的测量<br>2）模型 m 的误差<br>3）后验的近似等  </p>
]]></content>
  </entry>
  <entry>
    <title>Advance Request-Reply</title>
    <url>/2024/09/07/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/ZeroMQ/ZeroMQ%20Advanced%20Request-Reply%20patterns/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><!-- TOC -->

<ul>
<li><a href="#"></a></li>
<li><a href="#request-reply-%E6%9C%BA%E5%88%B6">Request-Reply 机制</a><ul>
<li><a href="#the-simple-reply-envelop">The Simple Reply Envelop</a></li>
<li><a href="#the-extended-rely-envelope">The Extended Rely Envelope</a></li>
</ul>
</li>
<li><a href="#request-reply-%E7%BB%84%E5%90%88">Request-Reply 组合</a><ul>
<li><a href="#dealer-to-rep">DEALER to REP</a></li>
<li><a href="#req-to-router">REQ to ROUTER</a></li>
<li><a href="#dealer-to-router">DEALER to ROUTER</a></li>
<li><a href="#dealer-to-dealer">DEALER to DEALER</a></li>
<li><a href="#router-to-router">ROUTER to ROUTER</a></li>
</ul>
</li>
<li><a href="#router-%E5%A5%97%E6%8E%A5%E5%AD%97">ROUTER 套接字</a><ul>
<li><a href="#identities-and-addresses">Identities and Addresses</a></li>
<li><a href="#router-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">ROUTER 异常处理</a></li>
</ul>
</li>
<li><a href="#the-load-balancing-pattern">The Load Balancing Pattern</a><ul>
<li><a href="#router-broker-and-dealer-workers">ROUTER Broker and DEALER Workers</a></li>
</ul>
</li>
</ul>
<!-- /TOC -->

<h1 id="Request-Reply-机制"><a href="#Request-Reply-机制" class="headerlink" title="Request-Reply 机制"></a>Request-Reply 机制</h1><p>reply message envelopes  </p>
<p><strong>Envelopes 是一种用地址安全地包装数据而不接触数据本身的方法</strong>。通过将 Reply 地址分离到一个信封中，可以编写通用的中介，例如 api 和代理，这些中介可以创建、读取和删除地址，而不管消息有效负载或结构是什么。  </p>
<p>在 Request-reply 模式中，<strong>信封(<em>envelope</em>)保存应答的返回地址</strong>。这也是为什么没有状态的 ZeroMQ 网络创建双向(round-trip)请求-应答对话的方式。  </p>
<p>使用 REQ 和 REP 套接字时，甚至看不到信封；这些套接字自动处理它们。但是对于大多数有趣的请求-应答模式，需要了解信封，特别是 ROUTER 套接字。  </p>
<h2 id="The-Simple-Reply-Envelop"><a href="#The-Simple-Reply-Envelop" class="headerlink" title="The Simple Reply Envelop"></a>The Simple Reply Envelop</h2><p>request-reply 通信由请求消息和最终的应答消息组成。在简单的 request-reply 模式中，每个请求都有一个应答。在更高级的模式中，请求和应答可以异步流动。然而，应答信封的工作方式总是一样的。  </p>
<p>ZeroMQ 应答信封组成结构：  </p>
<ul>
<li>零个或多个应答地址</li>
<li>后面跟着一个空帧(信封分隔符 delimiter)</li>
<li>然后跟着消息正文(零个或多个帧)<br>信封是由多个套接字在一个链中一起工作创建的。</li>
</ul>
<p>例如，以通过 REQ 套接字发送 “Hello” 为例。REQ 套接字创建尽可能简单的 rely 信封，其中没有地址，只有一个空分隔符帧和包含“Hello”字符串的消息帧。这是一个两帧信息。<br><img src="/./images/request%20with%20minimal%20envelope.png" alt="request with minimal envelope">  </p>
<p><strong>REP 套接字完成匹配工作：去掉信封，直到并包括分隔符帧，保存整个信封</strong>，并将 “Hello” 字符串传递给应用程序。因此，最初的 Hello World 示例在内部使用 request-rely 信封，但应用程序从未看到它们。  </p>
<p>查看在 hwclient 和 hwserver 之间的网络数据，可以看到的：每个请求和每个应答实际上是两个帧，一个空帧，然后是正文。  </p>
<h2 id="The-Extended-Rely-Envelope"><a href="#The-Extended-Rely-Envelope" class="headerlink" title="The Extended Rely Envelope"></a>The Extended Rely Envelope</h2><p>现在，在中间添加 ROUTER-DEALER 代理扩展 REQ-REP，看看这会如何影响应答信封。参考：第2章-套接字和模式中已经看到的扩展的请求-应答模式。实际上，可以插入任意数量的代理步骤。机制是一样的。<br><img src="/./images/extended%20request-rely%20pattern.png" alt="extended request-rely pattern"></p>
<p>Proxy 功能伪代码：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">prepare context, frontend and backend sockets</span><br><span class="line">while true:</span><br><span class="line">    poll on both sockets</span><br><span class="line">    if frontend had input:</span><br><span class="line">        read all frames from frontend</span><br><span class="line">        send to backend</span><br><span class="line">    if backend had input:</span><br><span class="line">        read all frames from backend</span><br><span class="line">        send to frontend</span><br></pre></td></tr></table></figure>

<p>ROUTER 套接字与其他套接字不同，它跟踪它拥有的每个连接，并告诉调用者这些连接。它告诉调用者的方式是将连接标识粘贴到接收到的每个消息前面。<strong>标识，也即地址</strong>，是一个二进制字符串，除了“这是连接的唯一句柄”之外没有任何意义。然后，当通过 ROUTER 套接字发送消息时，首先发送一个身份帧。</p>
<ul>
<li>从 Router 读取一条消息时，ZeroMQ 会封装一层信封，注明消息的来源</li>
<li>向 Router 写入一条消息时，ZeroMQ 会将信封拆开，并将消息传递给相应的对象</li>
</ul>
<p>ZeroMQ v2.2 及以前版本使用 <code>uid</code> 作为标识。<strong>ZeroMQ v3.0 及以后版本默认生成一个 5 字节的标识(0 +一个随机的 32 位整数)</strong> 。这对网络性能有一些影响，但只有在使用多个代理时才会有影响，这种情况很少见。主要的变化是通过删除对 UUID 库的依赖来简化 libzmq 的编译。  </p>
<p>假设 REQ 套接字于一个三字节的标识 <code>ABC</code>：<br><img src="/./images/reply%20with%20one%20address.png" alt="Reply with one Address"></p>
<h1 id="Request-Reply-组合"><a href="#Request-Reply-组合" class="headerlink" title="Request-Reply 组合"></a>Request-Reply 组合</h1><p>有四个请求-应答套接字，每个套接字都有特定的行为。已经了解了它们如何以简单和扩展的 请求-答复 模式进行连接。但这些套接字是可以用来解决许多问题。  </p>
<p>有效组合：  </p>
<ul>
<li>REQ to REP</li>
<li>DEALER to REP</li>
<li>REQ to ROUTER</li>
<li>DEALER to ROUTER</li>
<li>DEALER to DEALER</li>
<li>ROUTER to ROUTER</li>
</ul>
<p>无效组合：  </p>
<ul>
<li>REQ to REQ</li>
<li>REQ to DEALER</li>
<li>REP to REP</li>
<li>REP to ROUTER</li>
</ul>
<p>DEALER 就像一个异步 REQ 套接字，而 ROUTER 就像一个异步 REP 套接字。当使用 REQ 套接字时，可以使用 DEALER；只需要自己阅读和书写信封即可。在使用 REP 套接字的地方，可以使用一个 ROUTER；只需要自己管理身份即可。</p>
<h2 id="DEALER-to-REP"><a href="#DEALER-to-REP" class="headerlink" title="DEALER to REP"></a>DEALER to REP</h2><p>使用 DEALER 替代 REQ，提供了一个可以与多个 REP 服务器通信的异步客户端，发送请求后无需等待应答。  </p>
<p>使用 DEALER 于 REP 套接字通信时，必须准确的模拟 REQ 套接字将发送的信封，否则 REP 套接字将丢弃该消息。因此，要发送消息，需要：  </p>
<ul>
<li>发送一个设置了 MORE 标志的空消息帧</li>
<li>发送消息正文</li>
</ul>
<p>另一端接收到消息时：  </p>
<ul>
<li>接收第一帧，若不为空，则丢弃整条消息</li>
<li>接受下一帧并将其传递给应用程序</li>
</ul>
<h2 id="REQ-to-ROUTER"><a href="#REQ-to-ROUTER" class="headerlink" title="REQ to ROUTER"></a>REQ to ROUTER</h2><p>提供了一个可以同时与多个 REQ 客户端通信的异步服务器。  </p>
<p>可通过两种不同的方式使用 ROUTER：  </p>
<ul>
<li>作为在前端和后端套接字之间切换消息的代理</li>
<li>作为读取消息并对其进行操作的应用程序</li>
</ul>
<p>第一种方式，ROUTER 简单读取所有帧，包括身份识别帧，然后直接传送他们。第二种方法，ROUTER 必须知道它所发送的 REPLY 信封的格式。  </p>
<h2 id="DEALER-to-ROUTER"><a href="#DEALER-to-ROUTER" class="headerlink" title="DEALER to ROUTER"></a>DEALER to ROUTER</h2><p>使异步客户端能够与异步服务器进行通信，双方都可以完全控制消息格式。  </p>
<p>DEALER 和 ROUTER 都可以处理任意消息格式。  </p>
<h2 id="DEALER-to-DEALER"><a href="#DEALER-to-DEALER" class="headerlink" title="DEALER to DEALER"></a>DEALER to DEALER</h2><p>使用 DEALER 替换 REP 时，worker 进程可以是完全异步的，发送任意数量的回复。代价是必须自行管理回复信封。  </p>
<h2 id="ROUTER-to-ROUTER"><a href="#ROUTER-to-ROUTER" class="headerlink" title="ROUTER to ROUTER"></a>ROUTER to ROUTER</h2><p>使用复杂。  </p>
<h1 id="ROUTER-套接字"><a href="#ROUTER-套接字" class="headerlink" title="ROUTER 套接字"></a>ROUTER 套接字</h1><h2 id="Identities-and-Addresses"><a href="#Identities-and-Addresses" class="headerlink" title="Identities and Addresses"></a>Identities and Addresses</h2><p>ZeroMQ 中的身份(identity)被用作回复信封中的地址。在大多数情况下，标识是任意的并且对于 ROUTER 套接字而言是本地的：它是哈希表中的查找键。独立地，对端可以拥有物理地址（网络端点，如 <code>tcp://192.168.55.117:5670</code>）或逻辑地址（UUID 或电子邮件地址或其他唯一密钥）。  </p>
<p>使用 ROUTER 套接字与特定对端通信的应用程序可以将逻辑地址转换为标识（如果它已构建了必要的哈希表）。因为 ROUTER 套接字仅在某个对端发送消息时宣布连接的身份（到特定对端），所以只能真正回复消息，而不能自发地与对端通信。  </p>
<p>即使翻转规则并使 ROUTER 连接到对端而不是等待对端连接到 ROUTER，情况也是如此。但是，可以强制 ROUTER 套接字使用逻辑地址来代替其标识。通过 <code>zmq_setsockopt</code> 配置。其工作原理如下：</p>
<ul>
<li>对端应用程序在绑定或连接之前设置其对端套接字（DEALER 或 REQ）的 <code>ZMQ_IDENTITY</code> 选项</li>
<li>通常，对端会连接到已绑定的 ROUTER 套接字。但 ROUTER 也可以连接到对端</li>
<li>在连接时，对端套接字告诉 ROUTER 套接字“请使用此身份进行此连接”</li>
<li>如果对端套接字没有说明这一点，则 ROUTER 会为连接生成任意随机标识</li>
<li>ROUTER 套接字现在向应用程序提供此逻辑地址，作为来自该对端的任何消息的前缀身份帧</li>
<li>ROUTER 还期望逻辑地址作为任何传出消息的前缀标识帧</li>
</ul>
<p>例如：  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  Demonstrate request-reply identities</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;zhelpers.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *context = zmq_ctx_new ();</span><br><span class="line">    <span class="type">void</span> *sink = zmq_socket (context, ZMQ_ROUTER);</span><br><span class="line">    zmq_bind (sink, <span class="string">&quot;inproc://example&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  First allow 0MQ to set the identity</span></span><br><span class="line">    <span class="type">void</span> *anonymous = zmq_socket (context, ZMQ_REQ);</span><br><span class="line">    zmq_connect (anonymous, <span class="string">&quot;inproc://example&quot;</span>);</span><br><span class="line">    s_send (anonymous, <span class="string">&quot;ROUTER uses a generated 5 byte identity&quot;</span>);</span><br><span class="line">    s_dump (sink);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Then set the identity ourselves</span></span><br><span class="line">    <span class="type">void</span> *identified = zmq_socket (context, ZMQ_REQ);</span><br><span class="line">    zmq_setsockopt (identified, ZMQ_IDENTITY, <span class="string">&quot;PEER2&quot;</span>, <span class="number">5</span>);</span><br><span class="line">    zmq_connect (identified, <span class="string">&quot;inproc://example&quot;</span>);</span><br><span class="line">    s_send (identified, <span class="string">&quot;ROUTER socket uses REQ&#x27;s socket identity&quot;</span>);</span><br><span class="line">    s_dump (sink);</span><br><span class="line"></span><br><span class="line">    zmq_close (sink);</span><br><span class="line">    zmq_close (anonymous);</span><br><span class="line">    zmq_close (identified);</span><br><span class="line">    zmq_ctx_destroy (context);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该示例是链接到 ROUTER 套接字的两个端点的示例，其中一个强加逻辑地址 “PEER2”。  </p>
<h2 id="ROUTER-异常处理"><a href="#ROUTER-异常处理" class="headerlink" title="ROUTER 异常处理"></a>ROUTER 异常处理</h2><p>ZeroMQ V3.2 开始，可以设置 <code>ZMQ_ROUTER_MANDATORY</code> 来捕获发送失败错误（旧版本无法发送消息时采用丢弃策略）。在 ROUTER 套接字上设置，然后在 send 调用上提供不可路由的标识时，套接字将发出 <code>EHOSTUNREACH</code> 错误。  </p>
<h1 id="The-Load-Balancing-Pattern"><a href="#The-Load-Balancing-Pattern" class="headerlink" title="The Load Balancing Pattern"></a>The Load Balancing Pattern</h1><p><strong>负载均衡</strong>。  </p>
<p>以邮局为例，如果每个柜台有一个队列，并且有些人购买邮票(一种快速、简单的交易)，有些人开设新账户(一种非常缓慢的交易)，那么将发现购买邮票的人被不公平地困在队列中。就像在邮局一样，如果消息传递体系结构不公平，人们就会感到恼火。  </p>
<p>邮局示例的解决方案是创建一个单一队列，这样即使一两个柜台工作缓慢，其他柜台也将继续按照先到先得的原则为客户提供服务。  </p>
<p>PUSH 和 DEALER 使用简单方法的原因之一是纯粹的性能。如果您到达美国任何一个主要机场，您都会发现入境处排着长队。边境巡逻官员会提前派人在每个柜台排队，而不是单独排队。让人们提前步行五十码可以为每位乘客节省一两分钟。而且由于每次护照检查所需的时间大致相同，因此或多或少是公平的。这就是 <strong>PUSH 和 DEALER 的策略：提前发送工作负载，so that there is less travel distance</strong>。</p>
<p>回到连接到代理(ROUTER)的 worker (DEALER 或 REQ)的场景。代理必须知道 worker 何时准备好，并保留 worker 列表，以便每次都可以使用最近使用最少的 worker。  </p>
<p>事实上，解决方案非常简单：worker 在启动时以及完成每项任务后发送一条 <code>ready</code> 消息。代理逐一读取这些消息。每次它读取一条消息时，都是来自最后使用的工作线程。因为使用的是 ROUTER 套接字，所以获得了一个身份，然后可以使用该身份将任务发送回 worker 线程。</p>
<p>这是请求-答复的一种变形，因为任务是与答复一起发送的，并且任务的任何响应都作为新请求发送。  </p>
<h2 id="ROUTER-Broker-and-DEALER-Workers"><a href="#ROUTER-Broker-and-DEALER-Workers" class="headerlink" title="ROUTER Broker and DEALER Workers"></a>ROUTER Broker and DEALER Workers</h2><p>任何可以使用 REQ 的地方，都可以使用 DEALER。具体区别有两点：  </p>
<ul>
<li>REQ 套接字始终在任何数据帧之前发送一个空定界符帧，而 DEALER 没有</li>
<li>REQ 套接字在收到回复之前只会发送一条消息，而 DEALER 是完全异步的</li>
</ul>
]]></content>
      <categories>
        <category>数据通信</category>
        <category>ZeroMQ</category>
      </categories>
      <tags>
        <tag>ZeroMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>阅读笔记</title>
    <url>/2024/09/21/Robot/%E6%A6%82%E7%8E%87%E6%9C%BA%E5%99%A8%E4%BA%BA/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="1-机器人学不确定性"><a href="#1-机器人学不确定性" class="headerlink" title="1. 机器人学不确定性"></a>1. 机器人学不确定性</h3><p>1)、机器人所处环境不可预测. 在非结构化环境(例如:高速公路、家庭等)中, 环境高度动态, 且在许多方便是无法预测的.<br>2)、传感器误差及限制. 例如:相机无法看到墙后的物体, 激光雷达穿透玻璃等. 此外, 传感器还受噪声的限制.<br>3)、执行机构(例如:电机)是不可预测的. 其不确定性来自:控制噪声、机械磨损、机械故障等.<br>4)、软件导致的不确定性. 如：模型误差<br>5)、近似算法引入的不确定性. 机器人是实时系统, 这就限制了可执行的计算次数. 许多流行算法都是近似算法, 通过牺牲精度而得到实时响应.  </p>
<p>机器人感知问题用概率来描述，就是一个状态估计问题。概率算法能计算机器人的瞬间不确定性，也能预知未来的不确定性，并在决定正确的控制选择时， 对未来的不确定性进行考虑。</p>
<p>与传统模型的机器人技术相比，概率算法有如下优势：<br>1)、概率算法对机器人模型的精度要求较低<br>2)、概率算法对传感器精度要求比许多反应技术要低  </p>
<p>概率算法的两个局限：计算的复杂性(computational complexity)和近似的必要性(need to approximate)。</p>
<h3 id="2-递归状态估计"><a href="#2-递归状态估计" class="headerlink" title="2. 递归状态估计"></a>2. 递归状态估计</h3><p>概率机器人技术的核心是由传感器数据来估计状态。 <strong>状态估计</strong>解决的是从不能直接观测但可以推断的传感器数据中估计数量的问题。</p>
<p><strong>贝叶斯准则</strong>在概率机器人中起着主导作用。贝叶斯公式：<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=p(x|y)=\frac{p(y|x)p(x)}{p(y)} = \frac{p(y|x)p(x)}{\Sigma_{x'}p(y|x')p(x')}}" style="border:none;"> – 离散<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=p(x|y)=\frac{p(y|x)p(x)}{p(y)}} = \frac{p(y|x)p(x)}{\displaystyle \int {p(y|x')p(x')dx'}}" style="border:none;"> – 连续<br>若 x 是一个希望由 y 推测出来的数值，则概率 p(x) 称为<strong>先验概率分布</strong>。其中，y 称为数据（例如：传感器测量值）。 p(x|y) 称为在 X 上的后验概率分布(posterior probability distribution)。 贝叶斯准则为利用’逆’条件概率 p(y|x) 和先验概率 p(x) 一起去计算后验概率 p(x|y) 提供了一种方便的方法。<br>p(y|x) 在机器人学中，通常被称为: 生成模型 - <strong>generative model</strong>，因为在一定的抽象层面上，它表示状态变量 X 如何引起了检测数据 Y。</p>
<p><strong>机器人的置信度</strong>是对给定的所有过去的传感器测量值和所有过去控制的环境状态（包括机器人状态）的一个后验分布。大多数计算置信度的通用算法都是由贝叶斯算法给出的。该算法根据测量和控制数据计算置信度分布 bel()。  </p>
<p>贝叶斯滤波算法的两个步骤：<br>  1）、<strong>控制更新（或预测 prediction）</strong>，基于 t-1 时刻的置信度和控制  <img src="http://chart.googleapis.com/chart?cht=tx&chl=u_t" style="border:none;">   来计算状态  <img src="http://chart.googleapis.com/chart?cht=tx&chl=x_t" style="border:none;"> 的置信度。<br>  2）、<strong>测量更新（measurement update）</strong>，用观测到的测量 <img src="http://chart.googleapis.com/chart?cht=tx&chl=z_t" style="border:none;"> 的概率乘以置信度 <img src="http://chart.googleapis.com/chart?cht=tx&chl=\bar{bel}(x_t)" style="border:none;">。  </p>
<p>总之，贝叶斯滤波算法以 到时间 t 的测量和控制数据为条件来计算状态 <img src="http://chart.googleapis.com/chart?cht=tx&chl=x_t" style="border:none;"> 的后验。该算法在任何具体实现中都需要三个概率分布：初始置信度 <img src="http://chart.googleapis.com/chart?cht=tx&chl=p(x_0)" style="border:none;"> 、测量概率<img src="http://chart.googleapis.com/chart?cht=tx&chl=p(z_t | x_t)" style="border:none;">  、状态转移概率 <img src="http://chart.googleapis.com/chart?cht=tx&chl=p(x_t | u_t, x_{t_1})" style="border:none;">   </p>
<h3 id="6、机器人感知"><a href="#6、机器人感知" class="headerlink" title="6、机器人感知"></a>6、机器人感知</h3><p>环境测量模型(environment measurement models)包括概率机器人学中仅次于运动模型的第二个特定领域模型。测量模型描述在客观世界生成传感器测量的过程。模型的特性取决于传感器：成像传感器最好通过投影几何学建立模型，而声呐传感器最好通过描述声波和声波在环境表面上的反射来建立模型。  </p>
<p>概率机器人为传感器测量噪声建立模型。形式上，测量模型定义为条件概率分布<img src="http://chart.googleapis.com/chart?cht=tx&chl=p(z_t|x_t, m)" style="border:none;">   </p>
<ul>
<li><img src="http://chart.googleapis.com/chart?cht=tx&chl=x_t" style="border:none;">:机器人位姿  </li>
<li><img src="http://chart.googleapis.com/chart?cht=tx&chl=z_t" style="border:none;">:t时刻的测量值  </li>
<li>m: 环境地图</li>
</ul>
<p>传感器模型越精确，得到的结果越好。  </p>
<h3 id="7-定位"><a href="#7-定位" class="headerlink" title="7. 定位"></a>7. 定位</h3><h4 id="1、定位问题分类"><a href="#1、定位问题分类" class="headerlink" title="1、定位问题分类"></a>1、定位问题分类</h4><p>1.1、定位问题是以最初及运行期间可供使用信息的类型为特征的。随着难度的增加，可分为三类定位问题：<br>1）、位置跟踪（position tracking）<br>假定机器人初始位姿已知，通过适应机器人运动噪声来完成定位机器人。该方法的前提是传感器误差小。位姿不确定性用单峰分布(例如：高斯分布)来近似。 位置跟踪问题是一个局部问题，因为不确定性是局部的，并且局限于机器人真是位姿附近的区域。<br>即：在局部范围内，可认为传感器数据（例如里程计等）是准确的或者误差小的。<br>2）、全局定位<br>机器人初始位姿未知。机器人放置在环境中的某个地方，但缺少它的位置信息。全局定位方法不能假定位姿误差的有界性。 全局定位包括了位置跟踪。<br>3）、绑架问题（kidnapped）<br>绑架问题是全局定位问题的变种，但更加困难。运动过程中，机器人被绑架，瞬间移动到其它位置。 绑架问题比全局定位更困难的地方在于：机器人可能相信知道自己在哪，因为机器人不知道被绑架到其它位置了，仍然相信之前的定位是准确的。</p>
<p>1.2、影响定位的第二个方面是环境，环境又分为静态环境和动态环境<br>1）、静态环境<br>静态环境是指<strong>仅有的变量是机器人位姿</strong>的环境。即：只有机器人是移动的。<br>2）、动态环境<br>动态拥有出机器人外，位置和配置随时间变化的物体。及还有其它运动或动态物体。  </p>
<p>1.3、定位算法是否控制机器人运动<br>1）、被动定位（passive）<br>定位模块仅观察机器人运行。<br>2）、主动定位（active）<br>该类算法控制机器人，以便最小化定位误差。<br>例一：海岸导航。<br>例二：假设机器人位于对称的长廊环境，机器人在长廊过道中时，由于环境的局部对称性使得定位机器人是不可能的，只有当它运动进入其中一个房间才能消除模糊性并定位自身位姿。在这种情况下，主动定位可以主动控制机器人进入其中一个房间，来确定自身的位姿。  </p>
<p>1.4、单机器人与多机器人定位<br>多机器人环境中，每个机器人都能独立定位自身，因此多机器人定位问题可以通过单一机器人定位解决。然而，如果机器人能相互探测，定位可能更好。</p>
<h4 id="2、定位方法"><a href="#2、定位方法" class="headerlink" title="2、定位方法"></a>2、定位方法</h4><p>本章主要介绍单峰高斯定位技术。  </p>
<h3 id="8、蒙特卡洛定位与栅格定位"><a href="#8、蒙特卡洛定位与栅格定位" class="headerlink" title="8、蒙特卡洛定位与栅格定位"></a>8、蒙特卡洛定位与栅格定位</h3><p>本章介绍两个能解决全局定位问题的定位算法：栅格定位和蒙特卡洛定位（MCL）。<br><strong>栅格定位</strong>：使用直方图滤波表示后验置信度。 栅格定位存在的问题是：对于高分辨率的栅格，定位的计算量大；低分辨率的栅格又会导致附加信息的损失，会负面影响滤波。<br><strong>蒙特卡洛定位</strong>：使用粒子滤波估计机器人位姿的后验置信度。  </p>
<h4 id="1、栅格定位"><a href="#1、栅格定位" class="headerlink" title="1、栅格定位"></a>1、栅格定位</h4><h4 id="2、蒙特卡洛定位"><a href="#2、蒙特卡洛定位" class="headerlink" title="2、蒙特卡洛定位"></a>2、蒙特卡洛定位</h4>]]></content>
  </entry>
  <entry>
    <title>ctx_t</title>
    <url>/2024/09/07/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/ZeroMQ/ZeroMQ%20context/</url>
    <content><![CDATA[<h1 id="ctx-t"><a href="#ctx-t" class="headerlink" title="ctx_t"></a>ctx_t</h1><p>ZeroMQ 中的 context 相关类。封装了与库关联的所有全局状态。用于支持 ZeroMQ 的多个套接字（Socket）在同一个进程中进行通信。<code>ctx_t</code> 会管理 ZeroMQ 库中所有的内存和线程资源，并且负责将消息传递给正确的套接字。ctx_t 主要提供以下功能：  </p>
<ul>
<li><strong>管理 ZeroMQ 库中的内存和线程资源</strong>。context 会为每个与之关联的套接字分配内存和线程资源，并在套接字关闭后回收这些资源，以避免内存泄漏和资源浪费</li>
<li><strong>建立、销毁套接字</strong></li>
<li><strong>提供事件循环（Event Loop）机制，以支持异步 I&#x2F;O</strong>。套接字接收到消息时，其回调函数将被加入到时事件循环队列中，等待后续处理</li>
</ul>
<p><code>ctx_t</code> 实例可以通过调用 <code>zmq_ctx_new()</code> 函数来创建，并且用 <code>zmq_ctx_destroy()</code> 函数来销毁。一个进程可以拥有多个 <code>ctx_t</code> 实例，但通常情况下只需要一个。在创建 <code>ctx_t</code> 实例时，可以提供一个整数参数来指定该 context 的线程数，即可以指定该 context 在多少个线程中进行。线程数目一般需要根据使用场景和机器配置来确定。<strong>如果线程数值为 0，则 ctx_t 会根据机器配置选择合适的线程数目</strong>。</p>
<p>通过使用 context，可以有效地管理和优化 ZeroMQ 库中的资源使用。在创建 context 时，可以通过设置参数来改变 context 的属性。常用的参数包括：</p>
<ul>
<li><strong>线程数目</strong>：可以指定 context 的线程数目，以控制其并发处理能力。如果线程数值为 0，则 ctx_t 会根据机器配置选择合适的线程数目</li>
<li><strong>消息缓冲区大小</strong>：可以控制消息缓冲区的大小，以适应不同的应用场景</li>
<li><strong>I&#x2F;O 内核事件驱动器类型</strong>：可以选择使用 epoll、kqueue 等内核事件驱动器类型，以更好地利用操作系统底层的异步 I&#x2F;O 能力</li>
</ul>
<blockquote>
<hr>
<ul>
<li>注意：在同一进程中，应该只创建一个 context。多个 context 会导致资源浪费和不必要的复杂性。</li>
</ul>
<hr>
</blockquote>
<h2 id="ctx-t-构造函数"><a href="#ctx-t-构造函数" class="headerlink" title="ctx_t() 构造函数"></a>ctx_t() 构造函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">zmq::<span class="type">ctx_t</span>::<span class="type">ctx_t</span> () :</span><br><span class="line">    _tag (ZMQ_CTX_TAG_VALUE_GOOD), <span class="comment">// ZMQ_CTX_TAG_VALUE_GOOD 与 ZMQ_CTX_TAG_VALUE_BAD</span></span><br><span class="line">    _starting (<span class="literal">true</span>),</span><br><span class="line">    _terminating (<span class="literal">false</span>),</span><br><span class="line">    _reaper (<span class="literal">NULL</span>),</span><br><span class="line">    _max_sockets (clipped_maxsocket (ZMQ_MAX_SOCKETS_DFLT)),</span><br><span class="line">    _max_msgsz (INT_MAX), <span class="comment">// 消息最大大小</span></span><br><span class="line">    _io_thread_count (ZMQ_IO_THREADS_DFLT), <span class="comment">// 默认线程数为 1</span></span><br><span class="line">    _blocky (<span class="literal">true</span>), <span class="comment">// context 是否在终止时等待(可能永远)</span></span><br><span class="line">    _ipv6 (<span class="literal">false</span>),</span><br><span class="line">    _zero_copy (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> HAVE_FORK</span></span><br><span class="line">    _pid = getpid (); <span class="comment">// 获取当前进程 ID</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ZMQ_HAVE_VMCI</span></span><br><span class="line">    _vmci_fd = <span class="number">-1</span>;</span><br><span class="line">    _vmci_family = <span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Initialise crypto library, if needed.若设置 ZMQ_USE_LIBSODIUM 初始化加密库 sodium </span></span><br><span class="line">    zmq::random_open ();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ZMQ_USE_NSS</span></span><br><span class="line">    <span class="comment">// 初始化NSS库（Network Security Services）的函数. </span></span><br><span class="line">    <span class="comment">// NSS 是一个开源加密库，用于支持网络安全协议的实现。例如 SSL/TLS 及 S/MIME 等</span></span><br><span class="line">    NSS_NoDB_Init (<span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ZMQ_USE_GNUTLS</span></span><br><span class="line">    <span class="comment">// 初始化 GnuTLS 加密库.</span></span><br><span class="line">    gnutls_global_init ();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据通信</category>
        <category>ZeroMQ</category>
      </categories>
      <tags>
        <tag>ZeroMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>ZeroMQ sockets and patterns</title>
    <url>/2024/09/07/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/ZeroMQ/ZeroMQ%20sockets%20and%20patterns/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><!-- TOC -->

<ul>
<li><a href="#"></a></li>
<li><a href="#socket-api">Socket API</a><ul>
<li><a href="#%E5%B0%86%E5%A5%97%E6%8E%A5%E5%AD%97%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84%E4%B8%AD">将套接字添加到网络拓扑结构中</a></li>
<li><a href="#%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF">发送&#x2F;接收消息</a></li>
<li><a href="#unicast-transports">Unicast Transports</a></li>
<li><a href="#zeromq-%E4%B8%8D%E5%8F%AA%E6%98%AF%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93">ZeroMQ 不只是数据传输</a></li>
<li><a href="#io-threads">I&#x2F;O Threads</a></li>
</ul>
</li>
<li><a href="#%E6%B6%88%E6%81%AF%E6%A8%A1%E5%BC%8F">消息模式</a><ul>
<li><a href="#high-level-%E6%B6%88%E6%81%AF%E6%A8%A1%E5%BC%8F">High-Level 消息模式</a></li>
<li><a href="#%E6%B6%88%E6%81%AF%E7%9A%84%E4%BD%BF%E7%94%A8">消息的使用</a></li>
<li><a href="#%E5%A4%84%E7%90%86%E5%A4%9A%E4%B8%AA%E5%A5%97%E6%8E%A5%E5%AD%97">处理多个套接字</a></li>
<li><a href="#multipart-messages">Multipart Messages</a></li>
<li><a href="#intermediaries-and-proxies">Intermediaries and Proxies</a></li>
<li><a href="#%E5%8F%91%E7%8E%B0%E6%9C%8D%E5%8A%A1%E9%97%AE%E9%A2%98">发现服务问题</a></li>
<li><a href="#shared-queue">Shared Queue</a></li>
<li><a href="#zeromq-%E7%9A%84%E5%86%85%E7%BD%AE%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0">ZeroMQ 的内置代理函数</a></li>
<li><a href="#transport-bridging">Transport Bridging</a></li>
</ul>
</li>
<li><a href="#%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF%E5%8F%8A-eterm">处理错误及 ETERM</a></li>
<li><a href="#%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%AD%E4%BF%A1%E5%8F%B7">处理中断信号</a></li>
<li><a href="#%E6%A3%80%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F">检查内存泄漏</a></li>
<li><a href="#zeromq-%E5%A4%9A%E7%BA%BF%E7%A8%8B">ZeroMQ 多线程</a></li>
<li><a href="#%E9%9B%B6%E6%8B%B7%E8%B4%9D%E2%80%BB">零拷贝※</a></li>
<li><a href="#pub-sub-message-envelopes">Pub-Sub Message Envelopes</a></li>
<li><a href="#high-water-marks%E5%8D%B3-hwm">High-Water Marks即 HWM</a></li>
</ul>
<!-- /TOC -->

<h1 id="Socket-API"><a href="#Socket-API" class="headerlink" title="Socket API"></a>Socket API</h1><p>ZMQ 提供了一套类似于 BSD 套接字的 API，但将很多消息处理机制的细节隐藏了起来。  </p>
<p>套接字事实上是用于网络编程的标准接口，ZMQ 之所那么吸引人眼球（stopping your eyes from falling onto your cheeks），原因之一就是它是建立在标准套接字 API 之上。因此，ZMQ 的套接字操作非常容易理解，其生命周期主要包含四个部分：  </p>
<ul>
<li>创建和销毁套接字：<code>zmq_socket()</code>, <code>zmq_close()</code></li>
<li>配置和读取套接字选项：<code>zmq_setsockopt()</code>， <code>zmq_getsockopt()</code></li>
<li>为套接字建立连接：<code>zmq_bind()</code>，<code>zmq_connect()</code>  </li>
<li>发送和接收消息：<code>zmq_send()</code>，<code>zmq_recv()</code></li>
</ul>
<p>注意：套接字永远是 void * 类型，而消息则是一个数据结构体。因此，在 C 语言中，通过变量传递套接字，而用引用传递消息。注意：<strong>ZMQ 中所有的套接字都由 ZMQ 管理，只有消息是由用户管理</strong>。  </p>
<p>创建、销毁以及配置套接字的工作和处理任何对象一样。但是，注意 ZMQ 是异步的、可扩展的，因此将其应用到网络结构中时，可能需要更多时间来理解。  </p>
<h2 id="将套接字添加到网络拓扑结构中"><a href="#将套接字添加到网络拓扑结构中" class="headerlink" title="将套接字添加到网络拓扑结构中"></a>将套接字添加到网络拓扑结构中</h2><p>连接两个节点时，其中一个节点需要适用 <code>zmq_bind()</code>，另一个则使用 <code>zmq_connect()</code>。通常而言，使用 <code>zmq_bind()</code> 的节点称为服务器，其有一个较为固定的网络地址；使用 <code>zmq_connect()</code> 连接的节点称为客户端，其地址不固定。  </p>
<p>ZMQ 连接和传统 TCP 连接的区别主要有：  </p>
<ul>
<li>使用多种协议，例如：inproc(进程内)、IPC(进程间)、TCP、pgm、epgm 等。对应接口：<code>zmq_inproc()</code>、<code>zmq_ipc()</code>、<code>zmq_tcp()</code>、<code>zmq_pgm()</code>、<code>zmq_epgm()</code> 等</li>
<li>一个套接字可以有许多 outgoing 连接和许多 incoming 连接</li>
<li>没有 <code>zmq_accept()</code> 方法。当套接字绑定到端点时，它会自动开始 accepting 连接</li>
<li>网络连接是在后台进行的，如果网络连接断开(例如，如果端点退出然后又重启)，ZeroMQ 会自动重新连接</li>
<li>应用程序代码不能直接使用这些连接；它们被封装在 ZMQ 底层</li>
<li>连接是异步的，并由一组消息队列做缓冲</li>
<li>连接会表现出某种消息模式，这是由创建连接的套接字类型决定的</li>
</ul>
<p>很多架构中都使用 C&#x2F;S 架构。其中服务端是比较稳定的组件，而客户端组件则较为动态，也就是说，它们经常启动&#x2F;停止。所以，有时会出现寻址问题：服务器对客户端是可见的，但客户端不一定是可见的。因此，架构中哪些组件应作为服务端(使用 <code>zmq_bind()</code>)，哪些作为客户端(<code>zmq_connect()</code>) 是很明显的。同时，它还取决于正在使用的套接字类型，对于不同的网络体系结构有一些例外。  </p>
<p>在传统网络连接中，先打开客户端时一定会收到系统报错信息，但 ZQM 让用户能够自由地启动架构中的组件。当客户端使用 <code>zmq_connect()</code> 连接至某个端点时，它就已经能够使用该套接字发送消息了。如果这时，服务端启动起来了，并使用 <code>zmq_bind()</code> 绑定至该端点，ZMQ 将自动开始转发消息。  </p>
<p>服务端节点可以仅使用一个套接字就能绑定至多个端点，也就是说，能够使用不同的协议来建立连接。例如：  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">zmq_bind (socket, <span class="string">&quot;tcp://*:5555&quot;</span>);</span><br><span class="line">zmq_bind (socket, <span class="string">&quot;tcp://*:9999&quot;</span>);</span><br><span class="line">zmq_bind (socket, <span class="string">&quot;ipc://myserver.ipc&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>注意：不能多次绑定至同一个端点。  </p>
<p>每当有客户端节点使用 <code>zmq_connect()</code> 连接至上述某个端点时，服务端就会自动创建连接。ZMQ 没有对连接数量进行限制。此外，<strong>客户端节点也可以使用一个套接字同时建立多个连接</strong>。  </p>
<p><strong>套接字是有类型的，套接字类型定义了套接字的行为，它在发送和接收消息时的规则等</strong>。<strong>可以将不同种类的套接字进行连接</strong>，如 PUB-SUB 组合，这种组合称之为发布-订阅模式，其他组合也会有相应的模式名称。  </p>
<h2 id="发送-接收消息"><a href="#发送-接收消息" class="headerlink" title="发送&#x2F;接收消息"></a>发送&#x2F;接收消息</h2><p>发送和接收消息使用的是 <code>zmq_msg_send()</code>和 <code>zmq_msg_recv()</code>。虽然函数名称看起来很直白，但由于 ZMQ 的 I&#x2F;O 模式和传统的TCP协议有很大不同，因此还是需要花点时间去理解的。  </p>
<p>TCP 套接字和 ZMQ 套接字在传输数据方面的区别：  </p>
<ul>
<li>**ZMQ 套接字传输的是消息，而不是字节(TCP)或帧(UDP)**。消息是指一段指定长度的二进制数据。这种设计是为了性能优化而考虑的</li>
<li>ZMQ 套接字在后台进行 I&#x2F;O 操作，即：无论是接收还是发送消息，都会先传送到一个本地的缓冲队列，这个内存队列的大小是可配置的</li>
<li>根据套接字类型，ZMQ 套接字内置一对多路由行为；此外。ZMQ 还支持多对多、多对一、一对一连接。TCP 只能进行点对点的连接</li>
</ul>
<p><code>zmq_send()</code> 方法实际上并不会将消息发送到套接字连接。消息会在一个内存队列中保存下来，以便 I&#x2F;O 线程可以<strong>异步</strong>发送消息。它不会阻塞，除非在某些例外情况下。因此，当 <code>zmq_send()</code> 返回时，并不一定已发送消息。  </p>
<blockquote>
<hr>
<ul>
<li>当用 <code>zmq_msg_init_data()</code> 初始化消息后，不能重用或是释放这条消息，否则 ZMQ 的 I&#x2F;O 线程会认为它在传输垃圾数据</li>
</ul>
<hr>
</blockquote>
<p>  

<h2 id="Unicast-Transports"><a href="#Unicast-Transports" class="headerlink" title="Unicast Transports"></a>Unicast Transports</h2><p>ZMQ 提供了一组单播传输协议(inproc、IPC、TCP)，以及两个广播协议(epgm、pgm)。  </p>
<p><em><strong>fan-out ratios will make 1-to-N unicast impossible</strong></em>  </p>
<p>通常会使用 TCP 作为传输协议，ZMQ 中的 TCP 连接是可以脱机运作的，其灵活、便携、且足够快速。之所以称之为**脱机(disconnected)**，是因为 ZMQ 中 TCP 连接不需要该端点已经有某个服务器进行了绑定，客户端和服务端可以随时进行连接和绑定，这对应用程序而言都是透明的。  </p>
<p>ZMQ 中的进程间通信协议 IPC 类似 TCP，也是脱机的。它有一个限制：<strong>不能在Windows上运行</strong>。按照惯例，使用带有 <code>.ipc</code> 后缀的端点名，以避免与其他文件名的潜在冲突。在 UNIX 系统上，使用 ipc 端点时，需要注意权限问题，否则它们可能无法在以不同用户 id 运行的进程之间共享。还必须确保所有进程都可以访问这些 IPC 端点文件。  </p>
<p>线程内通信协议 inproc，可以在同一个进程的不同线程之间进行消息传输，比 IPC 或 TCP 快得多。该协议有一个限制：<strong>必须先绑定到端点，才能建立连接</strong>。该限制将在 ZeroMQ v4.0 后之后的版本修复。  </p>
<h2 id="ZeroMQ-不只是数据传输"><a href="#ZeroMQ-不只是数据传输" class="headerlink" title="ZeroMQ 不只是数据传输"></a>ZeroMQ 不只是数据传输</h2><p><strong>ZeroMQ is Not a Neutral Carrier</strong>  </p>
<p>ZeroMQ 不是一个中立的载体：<strong>它在它使用的传输协议上强加了一个帧。这种帧与现有协议不兼容</strong>，现有协议倾向于使用自己的帧。例如，比较 HTTP 请求和 ZeroMQ 请求，两者都通过TCP&#x2F;IP。 </p>
<p><img src="/./images/HTTP%20%E4%B8%8E%20ZeroMQ.png" alt="HTTP vs ZeroMQ">    </p>
<p>HTTP request 使用 CR-LF 作为最简单的帧分隔符，而 ZeroMQ 使用长度指定的帧。虽然可以使用 ZeroMQ 编写一个类似 HTTP 协议的东西，但这并不是 HTTP。  </p>
<p>从v3.3开始，ZeroMQ 有一个名为 <strong><code>ZMQ_ROUTER_RAW</code></strong> 的套接字选项，它允许在没有 ZeroMQ 帧的情况下读写数据。可以使用它来读取和编写正确的 HTTP 请求和响应。Hardeep Singh 贡献了这个更改，这样他就可以从他的 ZeroMQ 应用程序连接到 Telnet 服务器。在撰写本文时，这仍然是实验性的，但它显示了 ZeroMQ 如何不断发展以解决新问题。  </p>
<p>可以使用 ZeroMQ 设计自有通信协议。参考：<a href="http://mongrel2.org/">Mongrel2</a> 网络服务架构。  </p>
<h2 id="I-O-Threads"><a href="#I-O-Threads" class="headerlink" title="I&#x2F;O Threads"></a>I&#x2F;O Threads</h2><p>前面提到 ZeroMQ 是通过后台 I&#x2F;O 线程进行消息传输的。除了最极端的应用程序外，一个 I&#x2F;O 线程已经足以处理多个套接字的数据传输要求。这也是创建 context 时传入的 1 的作用：  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *context = <span class="built_in">zmq_init</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>创建多个 I&#x2F;O 线程：  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> io_threads = <span class="number">4</span>;</span><br><span class="line"><span class="type">void</span> *context = <span class="built_in">zmq_ctx_new</span> ();</span><br><span class="line"><span class="built_in">zmq_ctx_set</span> (context, ZMQ_IO_THREADS, io_threads);</span><br><span class="line"><span class="built_in">assert</span> (<span class="built_in">zmq_ctx_get</span> (context, ZMQ_IO_THREADS) == io_threads);</span><br></pre></td></tr></table></figure>

<p>已经看到，ZeroMQ 中一个套接字可以同时处理数十甚至数千个连接。这对如何编写应用程序具有根本性的影响。<strong>传统的网络应用程序每个远程连接有一个进程或一个线程，每个进程或线程处理一个套接字</strong>。ZeroMQ 允许将整个结构折叠为单个进程，然后根据扩展需要将其分解。</p>
<p>如果仅将 ZeroMQ 用于线程间通信(即，不进行外部套接字 I&#x2F;O 的多线程应用程序)，则可以将 I&#x2F;O 线程设置为零。这并不是一个重要的优化，更多的是一种好奇。  </p>
<h1 id="消息模式"><a href="#消息模式" class="headerlink" title="消息模式"></a>消息模式</h1><p>ZeroMQ 套接字 API 中提供了多种消息模式。  </p>
<ul>
<li>ZeroMQ 会将消息快速高效地发送给其它节点。这里的节点可以是线程、进程或其它 nodes；</li>
<li>ZeroMQ 为应用程序提供了一套简单的套接字 API，不需要考虑实际使用的协议类型(in-process、inter-process、TCP、multicast)；</li>
<li>ZeroMQ 会自动进行连接或重连；</li>
<li>无论是发送消息还是接收消息，ZeroMQ 都会先将消息放入队列中，并保证进程不会因为内存溢出而崩溃；</li>
<li>ZeroMQ 会处理套接字异常；</li>
<li>所有 I&#x2F;O 操作都在后台进行；</li>
<li><strong>ZeroMQ 使用无锁技术在节点之间通信</strong>，因此不存在锁、等待、信号量或死锁，不会产生死锁</li>
</ul>
<p>但是，以上种种的前提是用户能够正确地使用消息模式。  </p>
<p>ZeroMQ 消息模式是指不同类型套接字的组合。换句话说，要理解 ZeroMQ 的消息模式，需要了解套接字类型以及它们如何协同工作。  </p>
<p>ZeroMQ 内置的核心消息模式包括：  </p>
<ul>
<li><strong>Request-reply</strong>：该模式将一组服务端和一组客户端相连，用于远程过程调用会任务分发</li>
<li><strong>Pub-sub</strong>：该模式将一组发布者和一组订阅者相连，用于数据分发</li>
<li><strong>Pipeline</strong>：该模式以扇出&#x2F;扇入形式连接节点，该模式可以有多个步骤和循环。这是一个并行的任务分发和收集模式</li>
<li><strong>Exclusive pair</strong>：该模式将两个套接字一对一的连接起来。这是一种在进程中连接两个线程的模式，不要与“普通”套接字对混淆</li>
</ul>
<p><a href="http://api.zeromq.org/master:zmq_socket"><code>zmq_socket()</code></a>手册中详细介绍了所有消息模式。  </p>
<p>以下是合法的套接字连接-绑定对（一端绑定，一端连接即可）：  </p>
<ul>
<li>PUB and SUB</li>
<li>REQ and REP</li>
<li>REQ and ROUTER (take care, REQ inserts an extra null frame)</li>
<li>DEALER and REP (take care, REP assumes a null frame)</li>
<li>DEALER and ROUTER</li>
<li>DEALER and DEALER</li>
<li>ROUTER and ROUTER</li>
<li>PUSH and PULL</li>
<li>PAIR and PAIR</li>
</ul>
<p>还将看到对 XPUB 和 XSUB 套接字的引用。任何其他组合都将产生未记录且不可靠的结果，并且如果尝试它们，ZeroMQ 的未来版本可能会返回错误。当然，可以并且将通过代码桥接其他套接字类型，即从一个套接字类型读取并写入另一个套接字类型。  </p>
<h2 id="High-Level-消息模式"><a href="#High-Level-消息模式" class="headerlink" title="High-Level 消息模式"></a>High-Level 消息模式</h2><p>上面四种核心模式是 ZeroMQ 中内置的，是 API 的一部分，在 ZeroMQ 的 C++ 核心类库中实现，能保证正确运行。  </p>
<p>在这些核心消息模式之上，会建立更为上层的消息模式。这种模式可以用任何预研编写，不属于核心模式，也不会随 ZeroMQ 发布。  </p>
<h2 id="消息的使用"><a href="#消息的使用" class="headerlink" title="消息的使用"></a>消息的使用</h2><p>ZeroMQ 的传输单位是消息，是一个二进制块。可以使用任意序列化工具，如 protocol buffer、XDR 等，将内容转换为 ZeroMQ 消息。  </p>
<p><code>libzmq</code> 核心库实际上有两个 API 来发送和接收消息。前面已经看到和使用的 <code>zmq_send()</code> 和 <code>zmq_recv()</code> 方法是简单的一行程序。后续会经常使用这两个接口，但 <code>zmq_recv()</code> 不擅长处理任意大小的消息：它将消息截断为提供的缓冲区大小。所以有第二个 API 与 zmq_msg_t 结构一起工作，具有更丰富但更复杂的 API:  </p>
<ul>
<li>初始化消息：<code>zmq_msg_init()</code>、<code>zmq_msg_init_size()</code>、<code>zmq_msg_init_data()</code></li>
<li>发送及接收消息：<code>zmq_msg_send()</code>、<code>zmq_msg_recv()</code></li>
<li>释放消息：<code>zmq_msg_close()</code></li>
<li>访问消息内容：<code>zmq_msg_data()</code>、<code>zmq_msg_size()</code>、<code>zmq_msg_more()</code></li>
<li>操作消息属性：<code>zmq_msg_get()</code>、<code>zmq_msg_set()</code>  </li>
<li>消息处理：<code>zmq_msg_copy()</code>、<code>zmq_msg_move()</code></li>
</ul>
<p>在内存中，ZeroMQ 消息用 <code>zmq_msg_t</code> 结构表示。在 C 语言中使用 ZeroMQ 消息的基本规则:  </p>
<ul>
<li>创建并传递 <code>zmq_msg_t</code> 对象，而不是一组数据块</li>
<li>读取消息是，先用 <code>zmq_msg_init()</code> 初始化一个空消息，然后将其传递给 <code>zmq_recv()</code> 函数</li>
<li>写入消息时，先用 <code>zmq_msg_init_size()</code> 来创建消息(同时也初始化了一块内存区域)，然后使用 <code>memcpy()</code> 函数将数据拷贝到该对象中，最后传递给 <code>zmq_send()</code>  </li>
<li>释放消息（并不是销毁）时，使用 <code>zmq_msg_close()</code> 函数，它会将对消息对象的引用删除，最终由 ZeroMQ 将消息销毁</li>
<li>获取消息内容时需使用 <code>zmq_msg_data()</code> 函数；若想知道消息的长度，可以使用 <code>zmq_msg_size()</code> 函数</li>
</ul>
<p>如果需要多次发送相同的消息，并且该消息相当大，请创建第二条消息，使用 <code>zmq_msg_init()</code> 对其进行初始化，然后使用 <code>zmq_msg_copy()</code> 创建第一条消息的副本。这不是复制数据，而是复制引用。然后，可以发送消息两次，并且只有在发送或关闭最后一个副本时才会最终销毁消息。  </p>
<p>帧是 ZeroMQ 消息的基本连线格式。帧是指定长度的数据块。长度可以是 0 以上。有一个称为 <a href="http://rfc.zeromq.org/spec:15">ZMTP</a> 的线级协议，它定义了 ZeroMQ 如何在 TCP 连接上读写帧。  </p>
<p>关于消息，还有一些需要注意的地方：  </p>
<ul>
<li>可以发送长度为 0  的消息，例如：从一个线程向另一个线程发送信号</li>
<li>ZeroMQ 的消息作为一个整体来收发的，不会只收到消息的一部分  </li>
<li>ZeroMQ 不会立即发送消息，而是有一定延迟（非实时？？）</li>
<li>消息必须能在内存中保存，若想发送文件或大的消息，则需将其切割成小块，在独立的消息中进行发送  </li>
<li>必须使用 <code>zmq_msg_close()</code> 函数来关闭消息，但在一些会在变量超出作用域时自动释放消息对象的语言中除外</li>
</ul>
<p>注意：不要贸然使用 <code>zmq_msg_init_data()</code>，它是用于零拷贝，且可能会造成麻烦。  </p>
<h2 id="处理多个套接字"><a href="#处理多个套接字" class="headerlink" title="处理多个套接字"></a>处理多个套接字</h2><p>要从多个端点读取消息，最简单的方法是将一个套接字连接到所有端点上，让 ZeroMQ 执行 <em><strong>fan-in</strong></em>。如果远程端点处于相同的模式，这是合法的，但是<strong>将 PULL 套接字连接到 PUB 端点将是错误的</strong>。</p>
<p>正确的方法是使用 <code>zmq_poll()</code>。更好的方法是将 <code>zmq_poll()</code> 封装为一个框架，编写一个事件驱动反应器(event-driven reactor)。  </p>
<p><code>zmq_poll()</code> 将使用 <code>zmq_pollitem_t</code>:  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">void</span> *socket;       <span class="comment">//  ZeroMQ socket to poll on</span></span><br><span class="line">    <span class="type">int</span> fd;             <span class="comment">//  OR, native file handle to poll on</span></span><br><span class="line">    <span class="type">short</span> events;       <span class="comment">//  Events to poll on</span></span><br><span class="line">    <span class="type">short</span> revents;      <span class="comment">//  Events returned after poll</span></span><br><span class="line">&#125; <span class="type">zmq_pollitem_t</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Multipart-Messages"><a href="#Multipart-Messages" class="headerlink" title="Multipart Messages"></a>Multipart Messages</h2><p>使用 multipart 消息时，每个部分都是一个 <code>zmq_msg</code> 项。例如，如果要发送一个包含五个部分的消息，必须构造、发送和销毁五个 <code>zmq_msg</code> 项。  </p>
<p>下面是如何在一个 multipart 消息中发送帧(将每个帧接收到一个消息对象中):</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">zmq_msg_send</span> (&amp;message, socket, ZMQ_SNDMORE);</span><br><span class="line">...</span><br><span class="line"><span class="built_in">zmq_msg_send</span> (&amp;message, socket, ZMQ_SNDMORE);</span><br><span class="line">...</span><br><span class="line"><span class="built_in">zmq_msg_send</span> (&amp;message, socket, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>下面是如何接收和处理消息中的所有部分，无论是单个部分还是多个部分:  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">zmq_msg_t</span> message;</span><br><span class="line">    <span class="built_in">zmq_msg_init</span> (&amp;message);</span><br><span class="line">    <span class="built_in">zmq_msg_recv</span> (&amp;message, socket, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//  Process the message frame</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">zmq_msg_close</span> (&amp;message);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">zmq_msg_more</span> (&amp;message))</span><br><span class="line">        <span class="keyword">break</span>;      <span class="comment">//  Last message frame</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于 Multipart 消息需要了解的一些事情:  </p>
<ul>
<li>发送 multipart 消息时，第一部分(及后续部分)在发送最后一部分之后才会真正的发送出去</li>
<li>若使用 <code>zmq_poll()</code>，当接收到第一部分消息时，实际上其余的部分也都到达了  </li>
<li>要么就接收到所有消息，要么就完全接收不到，不会接收到不完整的消息  </li>
<li>消息的每个部分都是一个 <code>zmq_msg</code> 项</li>
<li>无论是否选中 more 属性，都将收到消息的所有部分</li>
<li>在发送时，ZeroMQ 将消息帧在内存中排队，直到最后一个消息帧被接收，然后将它们全部发送出去</li>
<li>没有办法取消部分发送的消息，除非关闭套接字</li>
</ul>
<h2 id="Intermediaries-and-Proxies"><a href="#Intermediaries-and-Proxies" class="headerlink" title="Intermediaries and Proxies"></a>Intermediaries and Proxies</h2><h2 id="发现服务问题"><a href="#发现服务问题" class="headerlink" title="发现服务问题"></a>发现服务问题</h2><p>在设计大型分布式架构时，将遇到的一个问题是发现。也就是说，pieces 是如何知道彼此的？如果 pieces 来了又走，这尤其困难，所以称之为“动态发现问题”。  </p>
<p>有几种动态发现的解决方案。最简单的方法是通过硬编码(或配置)网络架构来完全避免这种情况，以便手工完成发现。也就是说，当添加一个新 piece 时，需要重新配置网络以发现它。该方式在客户端增多时，维护的代价越来越大。  </p>
<p>对此有很多答案，但最简单的答案是添加一个中介；也就是说，所有其他节点都连接到网络中的一个静态点。在经典消息传递中，这是消息代理的工作。ZeroMQ 没有自带消息代理，但是它让我们可以很容易地构建中介体。  </p>
<h2 id="Shared-Queue"><a href="#Shared-Queue" class="headerlink" title="Shared Queue"></a>Shared Queue</h2><p>在实际情况中，通常需要允许多个服务和多个客户端。这让我们可以扩展服务的能力(多个线程、进程或节点，而不仅仅是一个)。唯一的约束是<strong>服务必须是无状态的</strong>，所有状态都在请求中或在某些共享存储(如数据库)中。  </p>
<p>有两种方法可以将多个客户机连接到多个服务器。<strong>暴力方法</strong>是将每个客户端套接字连接到多个服务端点。一个客户端套接字可以连接到多个服务套接字，然后 REQ 套接字将在这些服务之间分发请求。假设将客户端套接字连接到三个服务端点；A、B、C。客户端请求R1、R2、R3、R4。R1 和 R4 去服务端 A, R2 去服务端 B, R3 去服务端 C。  </p>
<p>这种设计使得可以方便地添加更多客户端。还可以添加更多的服务端。每个客户机将其请求分发给服务。但是每个客户机都必须知道服务拓扑。如果有 100 个客户端，然后决定再添加三个服务，那么需要重新配置并重新启动 100 个客户端，以便客户端了解这三个新服务。  </p>
<p>因此，将编写一个小消息队列代理来提供这种灵活性。代理绑定到两个端点，一个 frontend 用于客户端，一个 backend 用于服务端。然后，它使用 <code>zmq_poll()</code> 监视这两个套接字的活动，当有活动时，它在两个套接字之间传送消息。它实际上并不显式地管理任何队列 —— ZeroMQ 在每个套接字上自动管理队列。  </p>
<p>当使用 REQ 与 REP 通信时，将得到一个严格同步的请求-应答会话。客户端发送请求。服务读取请求并发送应答。然后客户端读取应答。如果客户端或服务试图做任何其他事情(例如，连续发送两个请求而不等待响应)，它们将得到一个错误。  </p>
<p>但 broker 必须是非阻塞的。显然，可以使用 <code>zmq_poll()</code> 来等待两个套接字上的活动，但是不能使用 REP 和 REQ。    </p>
<p>幸运的是，有两个套接字 <em><code>DEALER</code></em> 和 <em><code>ROUTER</code></em> ，它们允许执行非阻塞请求-响应。<br><img src="/./images/request-reply%20broker.png" alt="request-reply broker.png">  </p>
<p>在这个简单的扩展请求-应答模式中，REQ 与 ROUTER 对话，DEALER 与 REP 对话。在 DEALER 和 ROUTER 之间，必须有代码将消息从一个套接字中取出并推到另一个套接字上。</p>
<h2 id="ZeroMQ-的内置代理函数"><a href="#ZeroMQ-的内置代理函数" class="headerlink" title="ZeroMQ 的内置代理函数"></a>ZeroMQ 的内置代理函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">zmq_proxy</span>(frontend, backend, capture);</span><br></pre></td></tr></table></figure>
<p>两个套接字(或者三个套接字，如果想捕获数据)必须正确连接、绑定和配置。  </p>
<h2 id="Transport-Bridging"><a href="#Transport-Bridging" class="headerlink" title="Transport Bridging"></a>Transport Bridging</h2><p>ZeroMQ用户经常提出的一个问题是，“如何将 ZeroMQ 网络与 X 技术连接起来?”其中 X 是其他网络或消息传递技术。</p>
<p>最简单的答案就是 <em>bridge</em>。Bridge 是一个小应用程序，它在一个套接字上使用一种协议，并在另一个套接字上转换为&#x2F;从另一种协议。可以看做一个协议解释器。ZeroMQ 中常见的桥接问题是桥接两个传输或网络。  </p>
<p><img src="/./images/pub-sub%20forwarder%20proxy.png" alt="pub-sub forwarder proxy"></p>
<h1 id="处理错误及-ETERM"><a href="#处理错误及-ETERM" class="headerlink" title="处理错误及 ETERM"></a>处理错误及 ETERM</h1><p>ZeroMQ 的错误处理理念是<strong>快速崩溃</strong>和弹性的结合。<strong>一个进程对于自身内部的错误来说要越脆弱越好，而对外部的攻击和错误要足够健壮</strong>。  </p>
<p><strong>代码中应该对每一次的 ZMQ 函数调用作错误处理</strong>。  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *socket = <span class="built_in">zmq_socket</span> (context, ZMQ_REP);</span><br><span class="line"><span class="built_in">assert</span> (socket);</span><br></pre></td></tr></table></figure>
<p>不要将函数调用直接放在 <code>assert()</code> 函数中，因为一些优化程序会直接将程序中的 <code>assert()</code> 函数去除。  </p>
<h1 id="处理中断信号"><a href="#处理中断信号" class="headerlink" title="处理中断信号"></a>处理中断信号</h1><p>实际的应用程序需要在使用 Ctrl-C 或其他信号(如SIGTERM)时正确地清理和退出。默认情况下，这些信号会终止进程，这意味着尚未发送的消息会就此丢失，文件不会被正确地关闭等等。  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> s_interrupted = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">s_signal_handler</span> <span class="params">(<span class="type">int</span> signal_value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s_interrupted = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">s_catch_signals</span> <span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sigaction</span> action;</span><br><span class="line">    action.sa_handler = s_signal_handler;</span><br><span class="line">    action.sa_flags = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sigemptyset</span> (&amp;action.sa_mask);</span><br><span class="line">    <span class="built_in">sigaction</span> (SIGINT, &amp;action, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">sigaction</span> (SIGTERM, &amp;action, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">s_catch_signals</span>();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (s_interrpted) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清理资源</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当接收到 Ctrl-C(SIGINT) 或 SIGTERM 信号时，会将 <code>s_interrupted</code> 设置为 1。此时程序不会自动停止，而是退出循环，执行清理操作。   </p>
<p>注意：  </p>
<ul>
<li>若程序在 <code>zmq_recv()</code>、<code>zmq_poll()</code>、<code>zmq_send()</code> 等函数中阻塞，当有信号传来时，会返回 <code>EINTR</code></li>
<li>像 <code>s_recv()</code> 函数会将这种中断封装为 NULL 返回</li>
</ul>
<h1 id="检查内存泄漏"><a href="#检查内存泄漏" class="headerlink" title="检查内存泄漏"></a>检查内存泄漏</h1><p>任何长时间运行的程序都应该妥善的管理内存，否则最终会发生内存溢出，导致程序崩溃。使用类似C&#x2F;C++之类的语言时，需要自己动手进行内存管理。  </p>
<p>Linux 下常用内存泄漏检查工具：  </p>
<ul>
<li>valgrind</li>
<li>mtrace：为内存分配函数(<code>malloc</code>,<code>rellaoc</code>,<code>memalign</code>,<code>free</code>)安装 hook 函数</li>
<li>dmalloc：检查程序运行结束还没有释放的内存</li>
<li>memwatch：可检测未释放的内存、多次释放同一段内存、位址存取错误及不当使用未分配的内存区域</li>
<li>mpatrol：</li>
<li>dbgmem：</li>
<li>Electric Fece：不仅能跟踪 <code>malloc()</code> 和 <code>free()</code>，同时还能检测读访问及写入，能够准确指出导致错误的指令</li>
</ul>
<p>要对 ZeroMQ 使用 valgrind，需要注意一下事项：</p>
<ul>
<li>默认情况下，ZeroMQ 会导致 valgrind 不停地输出警告，要剔除警告信息，可创建 vg.supp 文件：  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   &lt;socketcall_sendto&gt;</span><br><span class="line">   Memcheck<span class="punctuation">:</span>Param</span><br><span class="line">   socketcall.sendto(msg)</span><br><span class="line">   fun<span class="punctuation">:</span>send</span><br><span class="line">   ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   &lt;socketcall_sendto&gt;</span><br><span class="line">   Memcheck<span class="punctuation">:</span>Param</span><br><span class="line">   socketcall.send(msg)</span><br><span class="line">   fun<span class="punctuation">:</span>send</span><br><span class="line">   ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<!--在编译时指定 `ZMQ_MAKE_VALGRIND_HAPPY` 宏，否则会不停输出警告。    
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> zeromq2</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> CPPFLAGS=-DZMQ_MAKE_VALGRIND_HAPPY</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make clean; make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> make install</span></span><br></pre></td></tr></table></figure>
<p>–&gt;</p>
<ul>
<li>应用程序应正确地处理 Ctrl-C，尤其是长时间运行的程序，如果不这么做，valgrind 会报告所有已分配的内存发生了错误</li>
<li>使用 -DDEBUG 编译程序，这样可让 valgrind 告知具体哪段代码发生内存泄漏</li>
</ul>
<p><code>valgrind --tool=memcheck --leak-check=full --suppressions=vg.supp someprog</code>  </p>
<h1 id="ZeroMQ-多线程"><a href="#ZeroMQ-多线程" class="headerlink" title="ZeroMQ 多线程"></a>ZeroMQ 多线程</h1><p><strong>并发编程：不要共享状态</strong>。  </p>
<p>使用 ZeroMQ 编写多线程代码，需遵循以下规则：  </p>
<ul>
<li>在线程中隔离数据，并且不在多个线程中共享数据。唯一的例外是 ZeroMQ contexts，它是线程安全的</li>
<li>远离经典的并发机制，如互斥锁、临界区(critical sections)、信号量等。这是 ZeroMQ 应用程序中的反模式(anti-pattern)</li>
<li>在进程开始时创建 ZeroMQ context，并将其传递给希望通过 inproc 套接字连接的所有线程</li>
<li>使用 attached 线程在应用程序中创建结构，并使用 inproc 上的 PAIR 套接字将这些线程连接到它们的父线程。模式是:绑定父套接字，然后创建连接其套接字的子线程</li>
<li>线程之间的所有交互都以 ZeroMQ 消息的形式完成，可以或多或少地对其进行正式定义</li>
<li>不要在线程间共享 ZeroMQ 套接字。ZeroMQ 套接字不是线程安全的。从技术上讲，将套接字从一个线程迁移到另一个线程是可能的，但这需要技巧。在线程之间共享套接字的唯一合理的地方是需要在套接字上执行垃圾收集之类的魔法的语言绑定</li>
</ul>
<blockquote>
<hr>
<ul>
<li>Do not use or close sockets except in the thread that created them.</li>
</ul>
<hr>
</blockquote>
<p>ZeroMQ 使用 native OS threads，而不是虚拟的“绿色”线程。其优点是不需要学习任何新的线程 API，并且 ZeroMQ 线程可以清晰地映射到操作系统。可以使用标准的工具，比如英特尔的 ThreadChecker 来查看应用程序在做什么。缺点是本机线程 api 并不总是可移植的，并且如果有大量的线程(数千个)，某些操作系统将会受到压力。  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Multithreaded Hello World server</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;zhelpers.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">worker_routine</span> <span class="params">(<span class="type">void</span> *context)</span> &#123;</span><br><span class="line">    <span class="comment">//  Socket to talk to dispatcher</span></span><br><span class="line">    <span class="type">void</span> *receiver = zmq_socket (context, ZMQ_REP);</span><br><span class="line">    zmq_connect (receiver, <span class="string">&quot;inproc://workers&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">char</span> *<span class="built_in">string</span> = s_recv (receiver);</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">&quot;Received request: [%s]\n&quot;</span>, <span class="built_in">string</span>);</span><br><span class="line">        <span class="built_in">free</span> (<span class="built_in">string</span>);</span><br><span class="line">        <span class="comment">//  Do some &#x27;work&#x27;</span></span><br><span class="line">        sleep (<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//  Send reply back to client</span></span><br><span class="line">        s_send (receiver, <span class="string">&quot;World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    zmq_close (receiver);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *context = zmq_ctx_new ();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Socket to talk to clients</span></span><br><span class="line">    <span class="type">void</span> *clients = zmq_socket (context, ZMQ_ROUTER);</span><br><span class="line">    zmq_bind (clients, <span class="string">&quot;tcp://*:5555&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Socket to talk to workers</span></span><br><span class="line">    <span class="type">void</span> *workers = zmq_socket (context, ZMQ_DEALER);</span><br><span class="line">    zmq_bind (workers, <span class="string">&quot;inproc://workers&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Launch pool of worker threads</span></span><br><span class="line">    <span class="type">int</span> thread_nbr;</span><br><span class="line">    <span class="keyword">for</span> (thread_nbr = <span class="number">0</span>; thread_nbr &lt; <span class="number">5</span>; thread_nbr++) &#123;</span><br><span class="line">        <span class="type">pthread_t</span> worker;</span><br><span class="line">        pthread_create (&amp;worker, <span class="literal">NULL</span>, worker_routine, context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  Connect work threads to client threads via a queue proxy</span></span><br><span class="line">    zmq_proxy (clients, workers, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  We never get here, but clean up anyhow</span></span><br><span class="line">    zmq_close (clients);</span><br><span class="line">    zmq_close (workers);</span><br><span class="line">    zmq_ctx_destroy (context);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/./images/multithreaded%20server.png" alt="Multithreaded Server"><br>消息流向：<code>REQ-ROUTER-queue-DEALER-REP</code></p>
<ul>
<li>服务端启动一组 worker 线程，每个线程创建一个 REP 套接字，并处理收到的请求。Worker 线程就像单线程服务。唯一的区别是使用 inproc 而不是 tcp，以及绑定-连接方向调换了</li>
<li>服务端创建 ROUTER 套接字用以和客户端通信，因此提供了一个 TCP 协议的外部接口</li>
<li>服务端创建 DEALER 套接字用以和 worker 通信，使用了 inproc</li>
<li>服务端启动连接两个套接字的代理。代理公平地从所有客户端提取传入请求，并将其分发给 worker 。它还将应答路由回它们的请求方</li>
</ul>
<p>注意：此例中创建线程使用的是 POSIX 提供的 pthreads 库，该方法在 windows 下不适用。后续介绍如何封装多线程编程的 API。  </p>
<h1 id="零拷贝※"><a href="#零拷贝※" class="headerlink" title="零拷贝※"></a>零拷贝※</h1><p>ZeroMQ 的消息 API 允许直接在应用程序缓冲区之间发送和接收消息，而无需复制数据。称之为 Zero-Copy，它可以提高某些应用程序的性能。  </p>
<p>在以高频率发送大块内存(数千字节)的特定情况下，应该考虑使用零拷贝。对于短消息或较低的消息速率，使用零拷贝反而将使代码更混乱和更复杂。  </p>
<p>使用零拷贝时，用 <code>zmq_msg_init_data()</code> 函数创建消息，其内容指向某个已经分配好的内存区域，然后将该消息传递给 <code>zmq_send()</code> 函数。创建消息时，还需提供一个用于释放消息内容的函数，ZeroMQ 会在消息发送完毕时调用。例如：  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">my_free</span> <span class="params">(<span class="type">void</span> *data, <span class="type">void</span> *hint)</span> &#123;</span><br><span class="line">    <span class="built_in">free</span> (data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  Send message from buffer, which we allocate and ZeroMQ will free for us</span></span><br><span class="line"><span class="type">zmq_msg_t</span> message;</span><br><span class="line">zmq_msg_init_data (&amp;message, buffer, <span class="number">1000</span>, my_free, <span class="literal">NULL</span>);</span><br><span class="line">zmq_msg_send (&amp;message, socket, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>注意，在发送消息后不要调用 <code>zmq_msg_close()</code> — libzmq 在实际完成发送消息时将自动执行此操作。  </p>
<p>在消息接收端无法使用零拷贝：ZeroMQ 会将收到的消息放入一块内存区域供用户读取，但不会直接将消息写入程序指定的内存区域。  </p>
<p>ZeroMQ 的 multipart 消息能够很好地支持零拷贝。在传统消息系统中，需要将不同缓存中的内容保存到同一个缓存中，然后才能发送。但 ZeroMQ 会将来自不同内存区域的内容作为消息的一个帧进行发送。而且在 ZeroMQ 内部，一条消息会作为一个整体进行收发，因而非常高效。  </p>
<h1 id="Pub-Sub-Message-Envelopes"><a href="#Pub-Sub-Message-Envelopes" class="headerlink" title="Pub-Sub Message Envelopes"></a>Pub-Sub Message Envelopes</h1><p>在 Pub-Sub 模式中，可以将 key 拆分为一个单独的消息帧，称之为信封(envelope)。如果想用 pub-sub envelopes，需要自行生成和设置。这是可选的，在之前的发布-订阅示例中，没有这样做。对于简单的情况，使用 pub-sub envelopes 需要做更多的工作，但是对于真正的情况，它更清晰，因为 key 和数据自然是分开的。<br><img src="/./images/pub-sub%20envelop.png" alt="pub-sub envelop">  </p>
<p>带发布者地址的 envelope：<br><img src="/./images/pub-sub%20envelop%20with%20sender%20address.png" alt="pub-sub envelop with sender address"></p>
<h1 id="High-Water-Marks-即-HWM"><a href="#High-Water-Marks-即-HWM" class="headerlink" title="High-Water Marks(即 HWM)"></a>High-Water Marks(即 HWM)</h1><p>当在进程之间快速地发送消息时，很快就会发现内存是一种宝贵的资源，而且很容易被填满。除非了解问题所在并采取预防措施，否则流程中某个地方的几秒钟延迟可能会变成导致服务器崩溃的积压。  </p>
<p>问题：假设进程 A 以高频率向正在处理它们的进程 B 发送消息。突然间，B 变得非常繁忙(垃圾收集、CPU 过载等等)，并且在短时间内无法处理消息。对于一些繁重的垃圾收集，可能需要几秒钟，如果有更严重的问题，可能需要更长的时间。进程 A 仍然试图疯狂发送消息会发生什么?有些会在 B 的网络缓冲区中。一些将位于以太网线本身。有些会在 A 的网络缓冲区中。剩下的会在 A 的内存中积累，和 A 后面的应用程序发送它们的速度一样快。如果不采取一些预防措施，A 很容易耗尽内存并崩溃。  </p>
<p>这是消息代理的一个一贯的经典问题。更糟糕的是，表面上看，这是 B 的错，而 B 通常是 A 无法控制的用户编写的应用程序。</p>
<p>解决方案：一是将问题向上游传递。A 从其他地方获取信息。告诉这个进程，“停止!”等等，这被称为<strong>流量控制</strong>。这听起来似乎有道理，但如果正在发送 Twitter 消息呢?你会告诉全世界不要再发推特了吗?  </p>
<p><strong>流量控制</strong>在某些情况下有效，但在其他情况下无效。传输层不能告诉应用层“停止”，就像地铁系统不能告诉一个大企业，“请你的员工再工作半个小时。我太忙了”。消息传递的答案是<strong>限制缓冲区的大小</strong>，然后当达到这些限制时，采取一些明智的行动。在某些情况下(但不包括地铁系统)，答案是扔掉信息。在其他情况下，最好的策略是等待。  </p>
<p><strong>ZeroMQ 使用 <code>HWM</code> 来定义其内部 pipes 的容量</strong>。每个出套接字或入套接字的连接都有自己的管道和用于发送和&#x2F;或接收的 HWM，具体取决于套接字类型。一些套接字(PUB, PUSH)只有发送缓冲区。有些(SUB, PULL, REQ, REP)只有接收缓冲区。一些(DEALER, ROUTER, PAIR)同时具有发送和接收缓冲区。  </p>
<p>在 ZeroMQ v2 中。缺省情况下，<code>HWM</code> 为无穷大。在 ZeroMQ v3.X 中，默认设置为 1000。  </p>
<p><strong>当套接字达到其 <code>HWM</code> 时，它将根据套接字类型阻塞或丢弃数据</strong>。PUB 和 ROUTER 套接字在达到 <code>HWM</code> 时将丢弃数据，而其他类型的套接字将阻塞。<strong>在 inproc 传输中，发送方和接收方共享相同的缓冲区，因此真正的 <code>HWM</code> 是双方设置的 <code>HWM</code> 的总和</strong>。  </p>
<p>最后，<code>HWM</code> 是不精确的；虽然默认情况下最多可以获得 1000 条消息，但由于 libzmq 实现队列的方式，实际缓冲区大小可能要小得多(只有一半)。</p>
]]></content>
      <categories>
        <category>数据通信</category>
        <category>ZeroMQ</category>
      </categories>
      <tags>
        <tag>ZeroMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>ZeroMQ</title>
    <url>/2024/09/07/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/ZeroMQ/ZeroMQ/</url>
    <content><![CDATA[<!-- TOC -->

<ul>
<li><a href="#zeromq-%E6%B6%88%E6%81%AF%E6%A8%A1%E5%BC%8F">ZeroMQ 消息模式</a><ul>
<li><a href="#request-reply">Request-Reply</a></li>
<li><a href="#pub-sub">Pub-Sub</a></li>
</ul>
</li>
<li><a href="#parallel-pipeline">Parallel Pipeline</a></li>
<li><a href="#fair-queuing">Fair Queuing</a></li>
<li><a href="#zeromq-%E7%BC%96%E7%A8%8B">ZeroMQ 编程</a><ul>
<li><a href="#%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8-context">正确使用 Context</a></li>
<li><a href="#%E6%AD%A3%E7%A1%AE%E7%9A%84%E9%80%80%E5%87%BA%E5%92%8C%E6%B8%85%E7%90%86">正确的退出和清理</a></li>
<li><a href="#%E4%B8%BA%E4%BD%95%E9%9C%80%E8%A6%81-zeromq">为何需要 ZeroMQ</a></li>
<li><a href="#socket-scalability%E5%A5%97%E6%8E%A5%E5%AD%97%E7%9A%84%E6%89%A9%E5%B1%95%E6%80%A7">Socket Scalability套接字的扩展性</a></li>
</ul>
</li>
<li><a href="#%E4%BB%8E-zeromq-v22-%E5%8D%87%E7%BA%A7%E5%88%B0-zeromq-v32">从 ZeroMQ V2.2 升级到 ZeroMQ V3.2</a><ul>
<li><a href="#%E5%85%BC%E5%AE%B9%E6%80%A7%E5%8F%98%E6%9B%B4">兼容性变更</a></li>
<li><a href="#%E4%B8%8D%E5%85%BC%E5%AE%B9%E7%9A%84%E5%8F%98%E6%9B%B4">不兼容的变更</a></li>
<li><a href="#%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8-shim-%E5%AE%8F">建议使用 Shim 宏</a></li>
</ul>
</li>
<li><a href="#warning-unstable-paradigms">Warning: Unstable Paradigms</a></li>
</ul>
<!-- /TOC -->

<p>ZeroMQ (即：ØMQ, 0MQ, zmq)，看似是一个嵌入式网络库，但实际上是一个并发框架。提供了跨多种传输协议(如进程内、进程间、TCP、多播、websocket等)的套接字，可以传输原子消息(atomic messages)。ZeroMQ 支持多种消息传递模式，例如：</p>
<ul>
<li>fan-out</li>
<li>pub-sub</li>
<li>task distribution</li>
<li>request-reply </li>
<li>C&#x2F;S</li>
</ul>
<p>ZeroMQ 是一个高性能<strong>异步</strong>消息传递库，旨在用于分布式或并发应用程序。它提供了一个消息队列(message queue)，但与面向消息的中间件不同，ZeroMQ 系统可以在没有专用消息代理(message broker)的情况下运行。  </p>
<blockquote>
<hr>
<ul>
<li>ZeroMQ 中的 Zero 表示<strong>零代理(ZeroMQ 是无代理的)、零延迟、零成本(免费)和零管理</strong>。</li>
</ul>
<hr>
</blockquote>
<p>查看 ZMQ 版本：  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> major, minor, patch;</span><br><span class="line"><span class="built_in">zmq_version</span>(&amp;major, &amp;minor, &amp;patch);</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;当前ZMQ版本号为 %d.%d.%d\n&quot;</span>, major, minor, patch);</span><br></pre></td></tr></table></figure>

<h1 id="ZeroMQ-编程"><a href="#ZeroMQ-编程" class="headerlink" title="ZeroMQ 编程"></a>ZeroMQ 编程</h1><h2 id="正确使用-Context"><a href="#正确使用-Context" class="headerlink" title="正确使用 Context"></a>正确使用 Context</h2><p>ZeroMQ 应用程序总是首先创建一个 context，然后使用它来创建套接字。C 语言中，使用 <code>zmq_ctx_new()</code> 创建。在一个应用程序中应当只创建并使用一个 context。从技术上讲，context 是单个进程中所有套接字的容器，并为 inproc 套接字提供实现，inproc 套接字是连接一个进程中线程的最快方式。如果在运行时<strong>一个进程有两个 context，它们就像单独的 ZeroMQ 实例</strong>。如果这是明确想要的，那没有问题，但记住: <strong>在一个进程中使用 <em><code>zmq_ctx_new()</code></em> 函数创建一个 context，并在结束时使用 <em><code>zmq_ctx_destroy()</code></em> 函数关闭它</strong>。  </p>
<p>若使用 <code>fork()</code> 创建了进程，那么每个进程都要有自己的 context。如果在调用 <code>fork()</code> 之前调用了 <em><code>zmq_ctx_new()</code></em> 函数，那每个子进程都会有自己的 context 对象。  </p>
<h2 id="正确的退出和清理"><a href="#正确的退出和清理" class="headerlink" title="正确的退出和清理"></a>正确的退出和清理</h2><p>在仍有套接字处于打开状态时调用 <em><code>zmq_ctx_destroy()</code></em> 会导致程序挂起；就算关闭了所有套接字，若仍有消息处于待发送状态，*<code>zmq_ctx_destroy()</code>* 也会造成程序的等待。只有当套接字的 <code>LINGER</code> 选项设为 0 时才能避免。</p>
<p>需要考虑的 ZeroMQ 对象是消息、套接字和 context。幸运的是，它非常简单，至少在简单的程序中:</p>
<ul>
<li>尽可能使用 <em><code>zmq_send()</code></em> 和 *<code>zmq_recv()</code>*，这样可以避免使用 <code>zmq_msg_t</code> 对象  </li>
<li>若使用 *<code>zmq_msg_recv</code>*，在处理完消息后及时调用 <em><code>zmq_msg_close()</code></em> 释放该消息</li>
<li>若同时打开和关闭大量 sockets，那可能需要重新规划程序的结构</li>
<li>退出程序是，先关闭套接字，然后调用 <em><code>zmq_ctx_destroy()</code></em> 删除 context<br>这至少是 C 语言开发的情况。在具有自动对象销毁的语言中，当离开作用域时，套接字和上下文将被销毁。如果使用异常，则必须在类似 <code>final</code> 块的地方进行清理，这与处理任何资源一样。</li>
</ul>
<p>用 ZMQ 进行多线程的编程，需要考虑的问题就更多了。一些建议：  </p>
<ul>
<li>不要在多个线程中使用同一个套接字</li>
<li>关闭具有正在进行的请求的每个套接字。正确的方法是设置较低的 <code>LINGER</code> 值(1秒)，然后关闭套接字</li>
<li>最后，删除 context。这将导致附加线程(即共享相同 context 的线程)中的任何阻塞 <code>recv</code> 或 <code>poll</code> 或 <code>send</code> 都返回错误。应该在主程序中捕获该错误，并设置 <code>linger on</code>，并关闭该线程中的套接字，然后退出。不要两次破删除相同的 context。主线程中的 <em><code>zmq_ctx_destroy</code></em> 将阻塞，直到它所知道的所有套接字都安全关闭为止</li>
</ul>
<h2 id="为何需要-ZeroMQ"><a href="#为何需要-ZeroMQ" class="headerlink" title="为何需要 ZeroMQ"></a>为何需要 ZeroMQ</h2><p>任何可重用的消息传递层都需要解决以下所有或大部分问题:  </p>
<ul>
<li>如何处理 I&#x2F;O？是让程序阻塞等待响应，还是在后台处理这些事？这是软件设计的关键因素。阻塞式的 I&#x2F;O 操作会让程序架构难以扩展，而后台处理 I&#x2F;O 也是比较困难的</li>
<li>如何处理动态组件（即临时的组件）？是否要将组件分为客户端和服务端两种，并要求服务端永不消失？那如果想要将服务端相连怎么办？要每隔几秒就进行重连吗？</li>
<li>如何表示一条消息？怎样通过拆分消息，让其变得易读易写，不用担心缓存溢出，既能高效地传输小消息，又能胜任视频等大型文件的传输？</li>
<li>如何处理那些不能立刻发送出去的消息？比如需要等待一个网络组件重新连接的时候？是直接丢弃该条消息，还是将它存入数据库，或是内存中的一个队列？</li>
<li>要在哪里保存消息队列？如果某个组件读取消息队列的速度很慢，造成消息的堆积怎么办？要采取什么样的策略？</li>
<li>如何处理丢失的消息？是等待新的数据，请求重发，还是需要建立一套新的可靠性机制以保证消息不会丢失？如果这个机制自身崩溃了呢？</li>
<li>如果想换一种网络连接协议，如用广播代替 TCP 单播？或者改用 IPv6？是否需要重写所有的应用程序，或者将这种协议抽象到一个单独的层中？</li>
<li>如何对消息进行路由？可以将消息同时发送给多个节点吗？是否能将应答消息返回给请求的发送方？</li>
<li>如何为另一种语言写一个 API？是否需要完全重写某项协议，还是重新打包一个类库？</li>
<li>怎样才能做到在不同的架构之间传送消息？是否需要为消息规定一种编码？</li>
<li>如何处理网络通信错误？等待并重试，还是直接忽略或取消？</li>
</ul>
<p>以开源代码，如Hadoop Zookeeper 为例，查看其 C 语言 API 源码，<a href="http://github.com/apache/zookeeper/blob/trunk/src/c/src/zookeeper.c">src&#x2F;c&#x2F;src&#x2F;zookeeper.c</a>。这段代码实现了一个 C&#x2F;S 网络通信协议。它工作起来很高效，因为使用了 <em><code>poll()</code></em> 来代替 *<code>select()</code>*。但是，Zookeeper应该被抽象出来，作为一种通用的消息通信层，并加以详细的注释。像这样的模块应该得到最大程度上的复用，而不是重复地制造轮子。  </p>
<p>大多数消息系统项目，如 AMQP，为了解决上面提到的种种问题，发明了一些新的概念，如“代理(<code>broker</code>)”的概念，将寻址、路由、队列等功能都包含了进来。结果就是在一个没有任何注释的协议之上，又构建了一个 C&#x2F;S 协议和相应的 API，让应用程序和代理相互通信。代理的确是一个不错的解决方案，帮助降低大型网络结构的复杂度。但是，在 Zookeeper 这样的项目中应用代理机制的消息系统，可能是件更加糟糕的事，因为这意味着需要添加一台新的计算机，并构成一个新的单点故障。代理会逐渐成为新的瓶颈，管理起来更具风险。如果软件支持，可以添加第二个、第三个、第四个代理，构成某种冗余容错的模式。有人就是这么做的，这让系统架构变得更为复杂，增加了隐患。  </p>
<p>在这种以代理为中心的架构下，需要一支专门的运维团队。</p>
<p>

<p>我们真正需要的是这样一种消息软件，它能够做大型消息软件所能做的一切，但使用起来又非常简单，成本很低，可以用到所有的应用程序中，没有任何依赖条件。因为没有了额外的模块，就降低了出错的概率。这种软件需要能够在所有的操作系统上运行，并能支持所有的编程语言。  </p>
<p>这就是 ZeroMQ:一个高效的、可嵌入的库，它解决了应用程序在网络上可扩展性所需的大多数问题，而且成本不高。  </p>
<p>ZMQ的主要特点有：</p>
<ul>
<li><strong>ZMQ 会在后台线程异步地处理 I&#x2F;O 操作</strong>。使用<strong>无锁数据结构</strong>与应用程序线程通信，因此 ZeroMQ 并发应用程序不需要锁、信号量或其他等待状态</li>
<li>网络组件可以动态增删，ZMQ 会负责自动重连，这就意味着可以以任何顺序启动组件；用它创建的面向服务架构（SOA：service-oriented architectures）中，服务端可以随意地加入或退出网络。</li>
<li>ZMQ 会在必要的情况下自动将消息放入队列中保存，一旦建立了连接就开始发送。</li>
<li><strong>ZMQ有阈值（HWM：High Water Mark）的机制，可以避免消息溢出</strong>。当队列已满，ZMQ 会自动阻塞发送者，或丢弃部分消息，这些行为取决于所使用的消息模式。</li>
<li>ZMQ 可以用不同的通信协议进行连接，如 TCP、广播、进程内、进程间。改变通信协议时不需要去修改代码。</li>
<li>ZMQ 会恰当地处理速度较慢的节点，会根据消息模式使用不同的策略。</li>
<li>ZMQ 提供了多种模式进行消息路由，如 请求-应答模式、发布-订阅模式等。这些模式可以用来搭建网络拓扑结构。</li>
<li>ZMQ 允许创建代理，以便通过单个调用对消息进行排队、转发或捕获。代理可以降低网络互连的复杂性。</li>
<li>ZMQ 会发送整个消息，使用消息帧的机制来传递。如果发送了 10KB 大小的消息，就会收到 10KB 大小的消息。</li>
<li>ZMQ 不强制使用某种消息格式，消息可以是 0 字节的，或是大到 GB 级的数据。当表示这些消息时，可以选用诸如 msgpack、protocol buffers、XDR 等序列化产品。</li>
<li>ZMQ 能够智能地处理网络错误，有时它会进行重试，有时会告知某项操作发生了错误。</li>
<li>ZMQ 节省了CPU 时间意味着节省了电能</li>
</ul>
<h2 id="Socket-Scalability-套接字的扩展性"><a href="#Socket-Scalability-套接字的扩展性" class="headerlink" title="Socket Scalability(套接字的扩展性)"></a>Socket Scalability(套接字的扩展性)</h2><p>例如，以下脚本会启动气象服务器，然后并行启动一堆客户端：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wuserver &amp;</span><br><span class="line">wuclient 12345 &amp;</span><br><span class="line">wuclient 23456 &amp;</span><br><span class="line">wuclient 34567 &amp;</span><br><span class="line">wuclient 45678 &amp;</span><br><span class="line">wuclient 56789 &amp;</span><br></pre></td></tr></table></figure>
<p>查看进程执行状态：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</span><br><span class="line">7136 ph        20   0 1040m 959m 1156 R  157 12.0  16:25.47 wuserver</span><br><span class="line">7966 ph        20   0 98608 1804 1372 S   33  0.0   0:03.94 wuclient</span><br><span class="line">7963 ph        20   0 33116 1748 1372 S   14  0.0   0:00.76 wuclient</span><br><span class="line">7965 ph        20   0 33116 1784 1372 S    6  0.0   0:00.47 wuclient</span><br><span class="line">7964 ph        20   0 33116 1788 1372 S    5  0.0   0:00.25 wuclient</span><br></pre></td></tr></table></figure>
<p>气象服务器只有一个套接字，但是这里让它并行地向五个客户机发送数据。可能有数千个并发客户端。服务器应用程序看不到它们，也不直接与它们对话。因此，ZeroMQ 套接字就像一个小服务器，默默地接受客户端请求，并在网络可以处理的情况下尽可能快地将数据发送给客户端。</p>
<h1 id="从-ZeroMQ-V2-2-升级到-ZeroMQ-V3-2"><a href="#从-ZeroMQ-V2-2-升级到-ZeroMQ-V3-2" class="headerlink" title="从 ZeroMQ V2.2 升级到 ZeroMQ V3.2"></a>从 ZeroMQ V2.2 升级到 ZeroMQ V3.2</h1><h2 id="兼容性变更"><a href="#兼容性变更" class="headerlink" title="兼容性变更"></a>兼容性变更</h2><p>这些变更不影响现有程序：  </p>
<ul>
<li>pub-sub 过滤现在在 publisher 端而不是 subscriber 端完成。这在许多 pub-sub 用例中显著提高了性能。可以安全地混合使用 v3.2 和 v2.1&#x2F;v2.2 发布者和订阅者。</li>
<li>ZeroMQ V3.2 提供了新的 API。例如：<code>zmq_disconnect()</code>、<code>zmq_unbind()</code>、<code>zmq_monitor()</code>、<code>zmq_ctx_set()</code> 等</li>
</ul>
<h2 id="不兼容的变更"><a href="#不兼容的变更" class="headerlink" title="不兼容的变更"></a>不兼容的变更</h2><ul>
<li>send&#x2F;recv 方法变更：提供新的不同的、简单的接口 <code>zmq_send()</code> 和 <code>zmq_recv()</code>。旧的功能现在由 <code>zmq_msg_send()</code> 和 <code>zmq_msg_recv()</code> 提供</li>
<li>这两个方法成功时返回正值，出错时返回 -1。在 v2 版本中，成功时返回 0</li>
<li><code>zmq_poll()</code> 时间改为毫秒而不再是微秒</li>
<li><code>ZMQ_NOBLOCK</code> 更改为 <code>ZMQ_DONTWAIT</code></li>
<li><code>ZMQ_HWM</code> 拆分为 <code>ZMQ_SNDHWM</code> 和 <code>ZMQ_RCVHWM</code></li>
<li><code>zmq_getsockopt()</code> 的大部分选项都变更为整型值</li>
<li>删除了 <code>ZMQ_SWAP</code> 选项</li>
</ul>
<h2 id="建议使用-Shim-宏"><a href="#建议使用-Shim-宏" class="headerlink" title="建议使用 Shim 宏"></a>建议使用 Shim 宏</h2><p>对于想要同时支持 v2.x 和 v3.2 的程序：  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ZMQ_DONTWAIT</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> ZMQ_DONTWAIT     ZMQ_NOBLOCK</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZMQ_VERSION_MAJOR == 2</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> zmq_msg_send(msg,sock,opt) zmq_send (sock, msg, opt)</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> zmq_msg_recv(msg,sock,opt) zmq_recv (sock, msg, opt)</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> zmq_ctx_destroy(context) zmq_term(context)</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> ZMQ_POLL_MSEC    1000        <span class="comment">//  zmq_poll is usec</span></span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> ZMQ_SNDHWM ZMQ_HWM</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> ZMQ_RCVHWM ZMQ_HWM</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> ZMQ_VERSION_MAJOR == 3</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> ZMQ_POLL_MSEC    1           <span class="comment">//  zmq_poll is msec</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h1 id="Warning-Unstable-Paradigms"><a href="#Warning-Unstable-Paradigms" class="headerlink" title="Warning: Unstable Paradigms"></a>Warning: Unstable Paradigms</h1><p>传统网络编程的一个规则是套接字智能和一个节点建立连接。虽然有广播协议，但是第三方的。当我们认定“一个套接字 &#x3D; 一个连接”的时候，我们会用一些特定的方式来扩展应用程序架构：我们为每一块逻辑创建线程，该线程独立地维护一个套接字。</p>
<p><strong>但在 ZMQ 的世界里，套接字是智能的、多线程的，能够自动地维护一组完整的连接</strong>。你无法看到它们，甚至不能直接操纵这些连接。当你进行消息的收发、轮询等操作时，<strong>只能和 ZMQ 套接字打交道，而不是连接本身</strong>。所以说，ZMQ 世界里的连接是私有的，不对外部开放，这也是 ZMQ 易于扩展的原因之一。</p>
<p>由于你的代码只会和某个套接字进行通信，这样就可以处理任意多个连接，使用任意一种网络协议。而 ZMQ 的消息模式又可以进行更为廉价和便捷的扩展。</p>
<p>这样一来，传统的思维就无法在 ZMQ 的世界里应用了。在你阅读示例程序代码的时候，也许你脑子里会想方设法地将这些代码和传统的网络编程相关联：当你读到“套接字”的时候，会认为它就表示与另一个节点的连接——这种想法是错误的；当你读到“线程”时，会认为它是与另一个节点的连接——这也是错误的。</p>
<p>如果你是第一次阅读本指南，使用 ZMQ 进行了一两天的开发（或者更长），可能会觉得疑惑，ZMQ 怎么会让事情便得如此简单。你再次尝试用以往的思维去理解</p>
]]></content>
      <categories>
        <category>数据通信</category>
        <category>ZeroMQ</category>
      </categories>
      <tags>
        <tag>ZeroMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>ZeroMQ 架构</title>
    <url>/2024/09/07/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/ZeroMQ/ZeroMQ%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p>ZeroMQ IO 是异步的，每个 ZeroMQ IO 线程(与实际线程不同)都有与之绑定的 Poller，Poller 采用经典的 Reactor 模式实现，根据不同的操作系统平台使用不同的 IO 模型(select、poll、epoll、devpoll、kequeue)。  </p>
<p>ZeroMQ 中，每个线程内含有一个 MailBox，用于线程间传递命令。创建 ZeroMQ IO 线程时，会把 mailbox 句柄添加到 Poller 中，用于监听是否有命令到达。  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">zmq::<span class="type">socket_base_t</span>::<span class="built_in">socket_base_t</span> (<span class="type">ctx_t</span> *parent_,</span><br><span class="line">                                   <span class="type">uint32_t</span> tid_,</span><br><span class="line">                                   <span class="type">int</span> sid_,</span><br><span class="line">                                   <span class="type">bool</span> thread_safe_) :</span><br><span class="line">    <span class="built_in">own_t</span> (parent_, tid_),</span><br><span class="line">    _sync (),</span><br><span class="line">    _tag (<span class="number">0xbaddecaf</span>),</span><br><span class="line">    _ctx_terminated (<span class="literal">false</span>),</span><br><span class="line">    _destroyed (<span class="literal">false</span>),</span><br><span class="line">    _poller (<span class="literal">NULL</span>),</span><br><span class="line">    _handle (<span class="built_in">static_cast</span>&lt;<span class="type">poller_t</span>::<span class="type">handle_t</span>&gt; (<span class="literal">NULL</span>)),</span><br><span class="line">    _last_tsc (<span class="number">0</span>),</span><br><span class="line">    _ticks (<span class="number">0</span>),</span><br><span class="line">    _rcvmore (<span class="literal">false</span>),</span><br><span class="line">    _monitor_socket (<span class="literal">NULL</span>),</span><br><span class="line">    _monitor_events (<span class="number">0</span>),</span><br><span class="line">    _thread_safe (thread_safe_),</span><br><span class="line">    _reaper_signaler (<span class="literal">NULL</span>),</span><br><span class="line">    _monitor_sync ()</span><br><span class="line">&#123;</span><br><span class="line">    options.socket_id = sid_;</span><br><span class="line">    options.ipv6 = (parent_-&gt;<span class="built_in">get</span> (ZMQ_IPV6) != <span class="number">0</span>);</span><br><span class="line">    options.linger.<span class="built_in">store</span> (parent_-&gt;<span class="built_in">get</span> (ZMQ_BLOCKY) ? <span class="number">-1</span> : <span class="number">0</span>);</span><br><span class="line">    options.zero_copy = parent_-&gt;<span class="built_in">get</span> (ZMQ_ZERO_COPY_RECV) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_thread_safe) &#123;</span><br><span class="line">        _mailbox = <span class="built_in">new</span> (std::nothrow) <span class="built_in">mailbox_safe_t</span> (&amp;_sync);</span><br><span class="line">        <span class="built_in">zmq_assert</span> (_mailbox);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">mailbox_t</span> *m = <span class="built_in">new</span> (std::nothrow) <span class="built_in">mailbox_t</span> ();</span><br><span class="line">        <span class="built_in">zmq_assert</span> (m);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m-&gt;<span class="built_in">get_fd</span> () != retired_fd)</span><br><span class="line">            _mailbox = m;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">LIBZMQ_DELETE</span> (m);</span><br><span class="line">            _mailbox = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当客户端开始发起连接或服务端开始监听时，会在主线程创建 <code>zmq_connector</code> 或 <code>zmq_listener</code>，主线程使用 <code>zmq_socket</code> 的 mailbox 发送命令给 IO 线程，将其绑定到 IO 线程中，IO 线程会把 <code>zmq_connector</code> 或 <code>zmq_listener</code> 含有的句柄加入 Poller 中，以侦听读写时间。客户端与服务端通过 session 来管理连接，一个 session 代表一次会话，每个 session 都会关联到相应的读&#x2F;写通道。session 并不直接与 kernel 交换 IO 数据，而是通过 plugin 到 session 中的 engine 来与 kernel 交换 IO 数据。  </p>
<p><code>zmq::ctx_t::start ()</code> 中创建并启动 IO 线程  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ios 为 _io_thread_count</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = term_and_reaper_threads_count;</span><br><span class="line">    i != ios + term_and_reaper_threads_count; i++) &#123;</span><br><span class="line">    <span class="type">io_thread_t</span> *io_thread = <span class="built_in">new</span> (std::nothrow) <span class="built_in">io_thread_t</span> (<span class="keyword">this</span>, i);</span><br><span class="line">    <span class="keyword">if</span> (!io_thread) &#123;</span><br><span class="line">        errno = ENOMEM;</span><br><span class="line">        <span class="keyword">goto</span> fail_cleanup_reaper;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!io_thread-&gt;<span class="built_in">get_mailbox</span> ()-&gt;<span class="built_in">valid</span> ()) &#123;</span><br><span class="line">        <span class="keyword">delete</span> io_thread;</span><br><span class="line">        <span class="keyword">goto</span> fail_cleanup_reaper;</span><br><span class="line">    &#125;</span><br><span class="line">    _io_threads.<span class="built_in">push_back</span> (io_thread);</span><br><span class="line">    _slots[i] = io_thread-&gt;<span class="built_in">get_mailbox</span> ();</span><br><span class="line">    io_thread-&gt;<span class="built_in">start</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>数据通信</category>
        <category>ZeroMQ</category>
      </categories>
      <tags>
        <tag>ZeroMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>ZeroMQ消息模式</title>
    <url>/2024/09/07/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/ZeroMQ/ZeroMQ%E6%B6%88%E6%81%AF%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<!-- TOC -->

<ul>
<li><a href="#zeromq-%E6%B6%88%E6%81%AF%E6%A8%A1%E5%BC%8F">ZeroMQ 消息模式</a></li>
<li><a href="#request-reply">Request-Reply</a><ul>
<li><a href="#router-and-dealer">Router and Dealer</a></li>
</ul>
</li>
<li><a href="#pub-sub">Pub-Sub</a><ul>
<li><a href="#%E7%AE%80%E5%8D%95-pub-sub">简单 Pub-Sub</a></li>
<li><a href="#pub-sub-synchronization">Pub-Sub Synchronization</a><ul>
<li><a href="#node-coordination%E8%8A%82%E7%82%B9%E5%8D%8F%E8%B0%83">Node Coordination节点协调</a></li>
</ul>
</li>
<li><a href="#pub-sub-network-with-a-proxy">Pub-Sub Network with a Proxy</a></li>
<li><a href="#pub-sub-forward-proxy">Pub-Sub forward proxy</a></li>
<li><a href="#extended-pub-sub">Extended Pub-Sub</a></li>
</ul>
</li>
<li><a href="#push-pull">Push-Pull</a><ul>
<li><a href="#parallel-pipeline">Parallel Pipeline</a></li>
<li><a href="#fair-queuing">Fair Queuing</a></li>
</ul>
</li>
<li><a href="#exclusive-pair">Exclusive Pair</a></li>
</ul>
<!-- /TOC -->


<h1 id="ZeroMQ-消息模式"><a href="#ZeroMQ-消息模式" class="headerlink" title="ZeroMQ 消息模式"></a>ZeroMQ 消息模式</h1><p>ZeroMQ 内置四种核心消息模式：  </p>
<ul>
<li><strong>Request-reply</strong>：该模式将一组服务端和一组客户端相连，用于远程过程调用会任务分发。是一种 remote procedure call 和任务分发模式  </li>
<li><strong>Pub-sub</strong>：该模式将一组发布者和一组订阅者相连，用于数据分发</li>
<li><strong>Pipeline</strong>：该模式以fan-out&#x2F;fan-in形式连接节点，该模式可以有多个步骤和循环。这是一个并行的任务分发和收集模式</li>
<li><strong>Exclusive pair</strong>：该模式将两个套接字一对一的连接起来。这是一种在进程中连接两个线程的模式，不要与“普通”套接字对混淆</li>
</ul>
<p><a href="http://api.zeromq.org/master:zmq_socket"><code>zmq_socket()</code></a>手册中详细介绍了所有消息模式。  </p>
<p>以下是合法的套接字连接-绑定对（一端绑定，一端连接即可）：  </p>
<ul>
<li>PUB and SUB</li>
<li>REQ and REP</li>
<li>REQ and ROUTER (take care, REQ inserts an extra null frame)</li>
<li>DEALER and REP (take care, REP assumes a null frame)</li>
<li>DEALER and ROUTER</li>
<li>DEALER and DEALER</li>
<li>ROUTER and ROUTER</li>
<li>PUSH and PULL</li>
<li>PAIR and PAIR</li>
</ul>
<p>还将看到对 XPUB 和 XSUB 套接字的引用。任何其他组合都将产生未记录且不可靠的结果，并且如果尝试它们，ZeroMQ 的未来版本可能会返回错误。当然，可以并且将通过代码桥接其他套接字类型，即从一个套接字类型读取并写入另一个套接字类型。  </p>
<h1 id="Request-Reply"><a href="#Request-Reply" class="headerlink" title="Request-Reply"></a>Request-Reply</h1><p>是一种同步请求应答模式，发送 request 之后，必须等待 reply 才能继续发送请求。<br><img src="/./images/Request-Reply.png" alt="Request-Reply pattern">  </p>
<h2 id="Router-and-Dealer"><a href="#Router-and-Dealer" class="headerlink" title="Router and Dealer"></a>Router and Dealer</h2><p><img src="/./images/extended%20request-reply.png" alt="extended request-reply"> <img src="/./images/request-reply%20broker.png" alt="extended request-reply"><br>可用于解决请求分发问题。多个客户端和多个服务器，每个请求可能发送到不同的服务器进行处理。可解决当新增服务器时，每个客户端都需要修改以连接到新增的服务器。    </p>
<p>向 Router 发送消息，ZeroMQ 会自动带上消息来源帧。同时，由 Router 发送出去的消息，需手动带上目标 ID，该 ID 通常由 <code>zmq_setsockopt()</code> 定义。  </p>
<p>Router-Dealer 可演变为：  </p>
<ul>
<li>Router-Dealer</li>
<li>Router-REQ</li>
<li>Router-REP</li>
</ul>
<h1 id="Pub-Sub"><a href="#Pub-Sub" class="headerlink" title="Pub-Sub"></a>Pub-Sub</h1><h2 id="简单-Pub-Sub"><a href="#简单-Pub-Sub" class="headerlink" title="简单 Pub-Sub"></a>简单 Pub-Sub</h2><p><img src="/./images/Pub-Sub.png" alt="Pub-Sub pattern"><br>是一种异步模型。Publiser 向所有 subscriber 发布消息。Subscriber 可订阅多种消息，也可以向多个 publishers 订阅消息。  </p>
<p>要使用 SUB 套接字，必须使用 <code>zmq_setsockopt()</code> 设置 subscription。subscriber 可设置多个 subsciptions，只要消息满足其中一条订阅信息，SUB套接字就会收到。<br>pub-sub 模式需要注意：无法得知 SUB 何时开始接收消息，即便是先开启 SUB，后开启 PUB 发送消息，依然会丢失一部分消息。这是因为建立连接需要一些时间。解决方法：  </p>
<ul>
<li>方法一：可在建立连接之后，等待一段时间再发送消息 - 实际使用中不建议该方式，因为该方式太脆弱，且不好控制</li>
<li>方法二：该方法认为发布者发布的消息流是无穷无尽的，丢失一部分也没关系</li>
</ul>
<p>pub-sub 模式说明：  </p>
<ul>
<li>订阅者可连接多个发布者，轮流接收消息</li>
<li>若使用 TCP 协议，那么当订阅者处理速度过慢时，消息会在发布者端堆积(可使用阈值 HWM 进行保护)</li>
<li>ZeroMQ V3.X 版本，若使用 connected 协议(如: <code>tcp:@&lt;&gt;@</code> 或 <code>ipc:@&lt;&gt;@</code>)，则在 publisher 端进行过滤；若使用 <code>epgm:@&lt;//&gt;@</code> 协议，则在 subscriber 端进行过滤。在 ZeroMQ V2.X，所有过滤都是在 subscriber 端进行</li>
</ul>
<p>

<h2 id="Pub-Sub-Synchronization"><a href="#Pub-Sub-Synchronization" class="headerlink" title="Pub-Sub Synchronization"></a>Pub-Sub Synchronization</h2><p><img src="/./images/Pub-Sub%20Synchronization.png" alt="Pub-Sub Synchronization">  </p>
<p>使用 REQ-REP 来同步 Pub 于 Sub，Pub 等待所有 Sub 启动后再向发布消息。  </p>
<h3 id="Node-Coordination-节点协调"><a href="#Node-Coordination-节点协调" class="headerlink" title="Node Coordination(节点协调)"></a>Node Coordination(节点协调)</h3><p>要协调网络中的一组节点时，不适合使用 PAIR 套接字。这也是线程和节点之间的不同处之一。若远程节点断开后又重连，PAIR 不会进行处理。  </p>
<p>线程与节点的第二个重大区别在于：线程的数量一般是固定的，而节点的数量则会经常变化。  </p>
<p>以气象信息模型为基础，考虑节点的协调，保证客户端不会丢失最开始的消息。  </p>
<p>程序流程：  </p>
<ul>
<li>发布者知道预期的订阅者数量，可以任意指定</li>
<li>发布者启动后会等待所有订阅者进行连接，也就是节点协调。每个订阅者会使用另一个套接字来告知发布者自己已经就绪</li>
<li>当所有订阅者准备就绪后，发布者才开始发布消息</li>
</ul>
<p>此例中，使用 <code>REQ-REP</code> 套接字来同步发布者和订阅者。  </p>
<p>当 REQ-REP 请求完成时，仍无法保证 SUB 套接字已成功建立连接。除非使用 inproc 协议，否则对外连接的顺序是不一定的。因此，示例程序中使用了 <code>sleep(1)</code> 的方式来进行处理，随后再发送同步请求。</p>
<p>更可靠的模型是：  </p>
<ul>
<li>发布者打开 PUB 套接字，发送 Hello 消息</li>
<li>订阅者打开 SUB 套接字，当接收到 Hello 消息后再使用 REQ-REP 套接字进行同步</li>
<li>当发布者获得所有订阅者的同步消息后，再发送真正的数据</li>
</ul>
<h2 id="Pub-Sub-Network-with-a-Proxy"><a href="#Pub-Sub-Network-with-a-Proxy" class="headerlink" title="Pub-Sub Network with a Proxy"></a>Pub-Sub Network with a Proxy</h2><p><img src="/./images/Pub-Sub%20with%20a%20proxy.png" alt="Pub-Sub with a proxy"></p>
<h2 id="Pub-Sub-forward-proxy"><a href="#Pub-Sub-forward-proxy" class="headerlink" title="Pub-Sub forward proxy"></a>Pub-Sub forward proxy</h2><p>即：**<em>Transport Bridging</em>**<br>ZeroMQ 用户经常提出的一个问题是，“如何将 ZeroMQ 网络与 X 技术连接起来?”其中 X 是其他网络或消息传递技术。</p>
<p>最简单的答案就是 <em>bridge</em>。Bridge 是一个小应用程序，它在一个套接字上使用一种协议，并在另一个套接字上转换为&#x2F;从另一种协议。可以看做一个协议解释器。ZeroMQ 中常见的桥接问题是桥接两个传输或网络。 </p>
<p><img src="/./images/pub-sub%20forwarder%20proxy.png" alt="Pub-Sub forward proxy"> </p>
<h2 id="Extended-Pub-Sub"><a href="#Extended-Pub-Sub" class="headerlink" title="Extended Pub-Sub"></a>Extended Pub-Sub</h2><p><img src="/./images/Extended%20Pub-Sub.png" alt="Extended Pub-Sub"></p>
<h1 id="Push-Pull"><a href="#Push-Pull" class="headerlink" title="Push-Pull"></a>Push-Pull</h1><p>Push&#x2F;Pull 是消息传输的另一个重要的 pattern。<strong>用于 fan-out、fan-in 单向通信</strong>。  </p>
<p>Push 会将消息均匀地分发到所有可用的客户端，pull 会将来自所有连接的客户端的消息公平地排队。  </p>
<p>Push&#x2F;Pull 的特点是 <strong>Push 端和 Pull 端都可以做 server</strong>，<code>bind</code> 到某个地址等待对方访问。如果在 Push 端绑定地址，那么这是一个 Push server，对应的 Pull clients 可以 connect 到这个 Push server 往外拉数据；反之，如果建立一个 Pull server，对应的 Push clients 可以 connect 到这个 Pull server 往里压数据。由此，可以轻松实现一个 task 的 map reduce 的 framework。如下图所示，中间的 worker 可以随需增减。  </p>
<h2 id="Parallel-Pipeline"><a href="#Parallel-Pipeline" class="headerlink" title="Parallel Pipeline"></a>Parallel Pipeline</h2><p><img src="/./images/parallel%20pipeline.png" alt="Parallel Pipeline">  </p>
<ul>
<li>生成可以并行执行的任务的 ventilator</li>
<li>一组处理这些任务的 workers</li>
<li>结果收集器(Sink)会在末端接收所有worker的处理结果</li>
</ul>
<p>Ventilator 生成任务，并分发到 workers，wokers 处理后将结果发送到 Sink。是一种并行任务处理模型。  </p>
<p>现实中，workers 可能分布在不同的计算机中，也可能利用 GPU 进行复杂计算。  </p>
<p>更进一步，当任务处理完成时，干净的关闭进程。如果在后台启动了很多worker，现在希望在批处理完成时关闭它们。通过向 workers 发送一个 kill 消息来实现。最好的地方是 sink，因为它知道什么时候完成了一个批处理。<br><img src="/./images/parallel%20pipeline%20with%20kill%20signaling.png" alt="parallel pipeline with kill signaling">  </p>
<p>因为 Push-Pull 是单向的。因此需要使用另一种套接字类型，或者可以混合多个套接字流来将 sink 连接到 workers。此例中，如上图，使用 pub-sub 模型向 worker 发送 kill 消息。  </p>
<h2 id="Fair-Queuing"><a href="#Fair-Queuing" class="headerlink" title="Fair Queuing"></a>Fair Queuing</h2><p><img src="/./images/fair%20queuing.png" alt="Fair Queuing">  </p>
<p>管道模式也会出现慢连接的情况，让人误以为 PUSH 套接字没有进行负载均衡。如果正在使用 PUSH 和 PULL，并且其中一个 worker 程序比其他 worker 程序获得更多消息，这是因为其 PULL 套接字比其他 worker 程序连接得更快，并且在其他 worker 程序连接之前捕获了大量消息。如果想要适当的负载平衡，可以看看<a href="https://zguide.zeromq.org/docs/chapter3/#advanced-request-reply">第3章-高级请求-应答模式</a>中的负载平衡模式。</p>
<h1 id="Exclusive-Pair"><a href="#Exclusive-Pair" class="headerlink" title="Exclusive Pair"></a>Exclusive Pair</h1><p>该模式将两个套接字一对一链接起来。是一种在进程中连接两个线程的模式。<br><img src="/./images/Exclusive%20Pair.png" alt="Exclusive Pair"></p>
<p>参考：<a href="https://zguide.zeromq.org/docs/chapter2/#Signaling-Between-Threads-PAIR-Sockets">Signaling Between Threads(PAIR sockets)</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  Multithreaded relay</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;zhelpers.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> *</span></span><br><span class="line"><span class="function"><span class="title">step1</span> <span class="params">(<span class="type">void</span> *context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  Connect to step2 and tell it we&#x27;re ready</span></span><br><span class="line">    <span class="type">void</span> *xmitter = <span class="built_in">zmq_socket</span> (context, ZMQ_PAIR);</span><br><span class="line">    <span class="built_in">zmq_connect</span> (xmitter, <span class="string">&quot;inproc://step2&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;Step 1 ready, signaling step 2\n&quot;</span>);</span><br><span class="line">    <span class="built_in">s_send</span> (xmitter, <span class="string">&quot;READY&quot;</span>);</span><br><span class="line">    <span class="built_in">zmq_close</span> (xmitter);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> *</span></span><br><span class="line"><span class="function"><span class="title">step2</span> <span class="params">(<span class="type">void</span> *context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  Bind inproc socket before starting step1</span></span><br><span class="line">    <span class="type">void</span> *receiver = <span class="built_in">zmq_socket</span> (context, ZMQ_PAIR);</span><br><span class="line">    <span class="built_in">zmq_bind</span> (receiver, <span class="string">&quot;inproc://step2&quot;</span>);</span><br><span class="line">    <span class="type">pthread_t</span> thread;</span><br><span class="line">    <span class="built_in">pthread_create</span> (&amp;thread, <span class="literal">NULL</span>, step1, context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Wait for signal and pass it on</span></span><br><span class="line">    <span class="type">char</span> *string = <span class="built_in">s_recv</span> (receiver);</span><br><span class="line">    <span class="built_in">free</span> (string);</span><br><span class="line">    <span class="built_in">zmq_close</span> (receiver);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Connect to step3 and tell it we&#x27;re ready</span></span><br><span class="line">    <span class="type">void</span> *xmitter = <span class="built_in">zmq_socket</span> (context, ZMQ_PAIR);</span><br><span class="line">    <span class="built_in">zmq_connect</span> (xmitter, <span class="string">&quot;inproc://step3&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;Step 2 ready, signaling step 3\n&quot;</span>);</span><br><span class="line">    <span class="built_in">s_send</span> (xmitter, <span class="string">&quot;READY&quot;</span>);</span><br><span class="line">    <span class="built_in">zmq_close</span> (xmitter);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">void</span> *context = <span class="built_in">zmq_ctx_new</span> ();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Bind inproc socket before starting step2</span></span><br><span class="line">    <span class="type">void</span> *receiver = <span class="built_in">zmq_socket</span> (context, ZMQ_PAIR);</span><br><span class="line">    <span class="built_in">zmq_bind</span> (receiver, <span class="string">&quot;inproc://step3&quot;</span>);</span><br><span class="line">    <span class="type">pthread_t</span> thread;</span><br><span class="line">    <span class="built_in">pthread_create</span> (&amp;thread, <span class="literal">NULL</span>, step2, context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Wait for signal</span></span><br><span class="line">    <span class="type">char</span> *string = <span class="built_in">s_recv</span> (receiver);</span><br><span class="line">    <span class="built_in">free</span> (string);</span><br><span class="line">    <span class="built_in">zmq_close</span> (receiver);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;Test successful!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">zmq_ctx_destroy</span> (context);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是 ZeroMQ 多线程编程的典型示例：  </p>
<ul>
<li>两个线程通过 &#96;inproc&#96;&#96; 通信，使用同一个 context</li>
<li>父线程创建一个套接字，绑定到 <code>inproc://&lt;端点&gt;</code>，然后启动子线程，将 context 对象传递给它</li>
<li>子线程创建一个套接字，连接到 <code>inproc://&lt;端点&gt;</code>，然后发送已就绪信号给父线程</li>
</ul>
<p>注意：使用这种模式的多线程代码不能扩展到进程。如果使用 <code>inproc</code> 和套接字对，那么会构建一个紧密绑定的应用程序，也就是说，线程在结构上是相互依赖的。当低延迟非常重要时，可以这样做。另一种设计模式是松散绑定(loosely bound)的应用程序，其中线程有自己的 context，并通过 <code>ipc</code> 或 <code>tcp</code> 进行通信。可以轻松地将松散绑定的线程分解为单独的进程。  </p>
<p>此处使用了 PAIR 套接字，而不使用其他套接字，是考虑到：  </p>
<ul>
<li>发送方可以使用 PUSH，接收方使用 PULL。看上去可行，但 <strong>PUSH 发送消息时会进行负载均衡</strong>，若开启了两个接收方，就会丢失一半的信号。而 PAIR 套接字建立的是一对一的链接，具有排他性</li>
<li>发送方可以使用 DEALER，接收方使用 ROUTER。但 ROUTER 套接字将信息封装在一个“envelope”中，这意味着零大小信号变成了一个 multipart 信息。如果不关心数据并将任何东西视为有效信号，并且如果重复读取套接字，那么这将无关紧要。但是，如果决定发送真实的数据，会突然发现 ROUTER 会提供“错误”的消息。DEALER 同样有负载均衡机制，和 PUSH 套接字有同样的风险</li>
<li>发送方可以使用 PUB，接收方使用 SUB。这样，消息可以远洋发送，PUB 套接字也不会进行负载均衡。但是，需要对 SUB 套接字设置一个空的订阅消息</li>
</ul>
<p>综上，使用 PAIR 套接字是线程协调最合适的方式。  </p>
<blockquote>
<hr>
<ul>
<li>ZeroMQ 中协调线程应该使用的唯一机制是 ZeroMQ 消息。</li>
</ul>
<hr>
</blockquote>
]]></content>
      <categories>
        <category>数据通信</category>
        <category>ZeroMQ</category>
      </categories>
      <tags>
        <tag>ZeroMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>io_thread</title>
    <url>/2024/09/07/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/ZeroMQ/io_thread/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>ZeroMQ IO 线程类 <code>io_thread_t</code>。包含 I&#x2F;O 线程的通用部分。特定于轮询机制(Polling-mechanism-specific)的特性在单独的“轮询对象”中实现。</p>
<p>每个 ZeroMQ IO 线程都有与之绑定的 <code>Poller</code>，<code>Poller</code> 采用经典的 Reactor 模式实现。</p>
<h1 id="io-thread-t"><a href="#io-thread-t" class="headerlink" title="io_thread_t"></a>io_thread_t</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">io_thread_t</span> ZMQ_FINAL : <span class="keyword">public</span> <span class="type">object_t</span>, <span class="keyword">public</span> i_poll_events</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">io_thread_t</span> (zmq::<span class="type">ctx_t</span> *ctx_, <span class="type">uint32_t</span> tid_);</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">io_thread_t</span> ();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动线程</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">start</span> <span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止线程</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">stop</span> <span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取与该 I/O 线程关联的 mailbox</span></span><br><span class="line">    <span class="function"><span class="type">mailbox_t</span> *<span class="title">get_mailbox</span> <span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// i_poll_events implementation.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">in_event</span> <span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">out_event</span> <span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">timer_event</span> <span class="params">(<span class="type">int</span> id_)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由 io_objects 用于检索关联的 poller 对象</span></span><br><span class="line">    <span class="function"><span class="type">poller_t</span> *<span class="title">get_poller</span> <span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Command handlers.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">process_stop</span> <span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 I/O 线程负载</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_load</span> <span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// I/O 线程通过该 mailbox 访问 incoming commands</span></span><br><span class="line">    <span class="type">mailbox_t</span> _mailbox;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle associated with mailbox&#x27; file descriptor.</span></span><br><span class="line">    <span class="type">poller_t</span>::<span class="type">handle_t</span> _mailbox_handle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// I/O 多路复用由 poller 对象执行</span></span><br><span class="line">    <span class="type">poller_t</span> *_poller;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过宏定义将其设置为 private 以禁用拷贝构造和赋值运算符</span></span><br><span class="line">    <span class="built_in">ZMQ_NON_COPYABLE_NOR_MOVABLE</span> (<span class="type">io_thread_t</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>其中，<code>poller.hpp</code> 中根据宏定义，选择相应的 I&#x2F;O 模型：</p>
<ul>
<li><code>ZMQ_IOTHREAD_POLLER_USE_KQUEUE</code>：使用 <code>kqueue</code></li>
<li><code>ZMQ_IOTHREAD_POLLER_USE_EPOLL</code>：使用 <code>epoll</code></li>
<li><code>ZMQ_IOTHREAD_POLLER_USE_DEVPOLL</code>：使用 <code>devpoll</code></li>
<li><code>ZMQ_IOTHREAD_POLLER_USE_POLLSET</code>：使用 <code>pollset</code></li>
<li><code>ZMQ_IOTHREAD_POLLER_USE_POLL</code>：使用 <code>poll</code></li>
<li><code>ZMQ_IOTHREAD_POLLER_USE_SELECT</code>：使用 <code>select</code></li>
<li><code>ZMQ_HAVE_GNU</code> 且 <code>ZMQ_IOTHREAD_POLLER_USE_POLL</code>：使用 <code>poll</code><br>若同时定义多个宏，则会报错。</li>
</ul>
<p>ZeroMQ 中，每个线程内含有一个 MailBox，用于线程间传递命令。创建 ZeroMQ IO 线程时，会把 mailbox 句柄添加到 Poller 中，用于监听是否有命令到达。</p>
<h2 id="io-thread-t-构造"><a href="#io-thread-t-构造" class="headerlink" title="io_thread_t 构造"></a>io_thread_t 构造</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">zmq::<span class="type">io_thread_t</span>::<span class="built_in">io_thread_t</span> (<span class="type">ctx_t</span> *ctx_, <span class="type">uint32_t</span> tid_) :</span><br><span class="line">    <span class="built_in">object_t</span> (ctx_, tid_),</span><br><span class="line">    _mailbox_handle (<span class="built_in">static_cast</span>&lt;<span class="type">poller_t</span>::<span class="type">handle_t</span>&gt; (<span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">    _poller = <span class="built_in">new</span> (std::nothrow) <span class="built_in">poller_t</span> (*ctx_);</span><br><span class="line">    <span class="built_in">alloc_assert</span> (_poller);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_mailbox.<span class="built_in">get_fd</span> () != retired_fd) &#123;</span><br><span class="line">        _mailbox_handle = _poller-&gt;<span class="built_in">add_fd</span> (_mailbox.<span class="built_in">get_fd</span> (), <span class="keyword">this</span>);</span><br><span class="line">        _poller-&gt;<span class="built_in">set_pollin</span> (_mailbox_handle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建 <code>poller_t</code> 类对象 <code>_poller</code></li>
<li>配置 mailbox</li>
</ul>
]]></content>
      <categories>
        <category>数据通信</category>
        <category>ZeroMQ</category>
      </categories>
      <tags>
        <tag>ZeroMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Mailbox</title>
    <url>/2024/09/07/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/ZeroMQ/mailbox/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>ZeroMQ 中，每个线程内含有一个 MailBox，用于线程间传递命令。创建 ZeroMQ IO 线程时，会把 mailbox 句柄添加到 Poller 中，用于监听是否有命令到达。  </p>
<p>在使用 <code>zsock_new()</code> 新建套接字时，最终会调用 <code>socket_base_t::create(...)</code> 方法创建 socket 并注册其 mailbox。  </p>
<p><code>socket_base_t::create(...)</code> 中会根据指定的套接字类型创建不同的套接字，例如：  </p>
<ul>
<li><code>ZMQ_PAIR</code>：pair_t</li>
<li><code>ZMQ_PUB</code>：pub_t</li>
<li><code>ZMQ_SUB</code>：sub_t</li>
<li>…</li>
</ul>
<p>所有套接字基类均为 <code>socket_base_t</code>，该类构造函数中创建 mailbox：  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (_thread_safe) &#123;</span><br><span class="line">    _mailbox = <span class="built_in">new</span> (std::nothrow) <span class="built_in">mailbox_safe_t</span> (&amp;_sync);</span><br><span class="line">    <span class="built_in">zmq_assert</span> (_mailbox);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">mailbox_t</span> *m = <span class="built_in">new</span> (std::nothrow) <span class="built_in">mailbox_t</span> ();</span><br><span class="line">    <span class="built_in">zmq_assert</span> (m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m-&gt;<span class="built_in">get_fd</span> () != retired_fd)</span><br><span class="line">        _mailbox = m;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">LIBZMQ_DELETE</span> (m);</span><br><span class="line">        _mailbox = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="mailbox-t"><a href="#mailbox-t" class="headerlink" title="mailbox_t"></a>mailbox_t</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">mailbox_t</span> ZMQ_FINAL : <span class="keyword">public</span> i_mailbox</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">mailbox_t</span> ();</span><br><span class="line">    ~<span class="built_in">mailbox_t</span> ();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">fd_t</span> <span class="title">get_fd</span> <span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">send</span> <span class="params">(<span class="type">const</span> <span class="type">command_t</span> &amp;cmd_)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">recv</span> <span class="params">(<span class="type">command_t</span> *cmd_, <span class="type">int</span> timeout_)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">valid</span> <span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> HAVE_FORK</span></span><br><span class="line">    <span class="comment">// close the file descriptors in the signaller. This is used in a forked</span></span><br><span class="line">    <span class="comment">// child process to close the file descriptors so that they do not interfere</span></span><br><span class="line">    <span class="comment">// with the context in the parent process.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">forked</span> <span class="params">()</span> ZMQ_FINAL</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _signaler.forked ();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 存储实际指令的队列</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">ypipe_t</span>&lt;<span class="type">command_t</span>, command_pipe_granularity&gt; <span class="type">cpipe_t</span>;</span><br><span class="line">    <span class="type">cpipe_t</span> _cpipe;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于从 writer 线程发送信号到 reader 线程</span></span><br><span class="line">    <span class="type">signaler_t</span> _signaler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只有一个线程从 mailbox 接收消息，但可以有任意数量的线程向 mailbox 发送消息。</span></span><br><span class="line">    <span class="comment">// 假设管道需要在它的两个端点上同步访问，必须同步发送端。</span></span><br><span class="line">    <span class="type">mutex_t</span> _sync;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果底层管道处于活动状态，则为 True。例如：当被允许从它读取命令时</span></span><br><span class="line">    <span class="type">bool</span> _active;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过宏定义将其设置为 private 以禁用拷贝构造和赋值运算符</span></span><br><span class="line">    <span class="built_in">ZMQ_NON_COPYABLE_NOR_MOVABLE</span> (<span class="type">mailbox_t</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="ypipe-t"><a href="#ypipe-t" class="headerlink" title="ypipe_t"></a>ypipe_t</h2><p><code>ypipe_t</code> 是无锁队列(Lock-free queue)实现。  </p>
<ul>
<li>同一时刻只有一个线程可以从管道中读取数据  </li>
<li>同一时刻只有一个线程可以向管道写入数据</li>
</ul>
<p>使用 <code>yqueue_t</code> 队列存储数据。  </p>
<p>其中 yqueue 是用来设计队列，ypipe 用来设计队列的写入&#x2F;读取时机、回滚以及 flush  </p>
<h2 id="yqueue-t"><a href="#yqueue-t" class="headerlink" title="yqueue_t"></a>yqueue_t</h2><p>参考：  </p>
<ul>
<li><a href="https://www.zhihu.com/question/33309228">https://www.zhihu.com/question/33309228</a>  </li>
<li><a href="https://gopher.blog.csdn.net/article/details/126284313">https://gopher.blog.csdn.net/article/details/126284313</a></li>
</ul>
<p><code>yqueue</code> 是一个高效的队列实现。主要目的是最小化 <code>allocations/deallocations</code> 次数。  </p>
<p><code>yqueue</code> 中的使用 chunk 块机制，每次批量分配一批元素，这样可以减少内存的分配和释放。<code>yqueue_t</code> 由一组 chunk 组成，每个 chunk 保存 N 个元素：<code>spare_chunk</code>，当需要分配 <code>chunk_t</code> 时，从 <code>spare_chunk</code> 中获取。  </p>
<p>当队列空间不足时，每次分配一个 <code>chunk_t</code>，每个 <code>chunk_t</code> 能存储 N 个元素。在数据出队列后，队列有多余空间时，回收的 chunk 也不会立即释放，而是根据局部性原理先回收到队列中。  </p>
<p><code>yqueue_t</code> 类中的 <code>spare_chunk</code> 用于保存最近的空闲块。即：在将一个 chunk 中的所有元素都 <code>pop</code> 掉之后，就可以释放这个 chunk。但是可以保存一块最近的空闲块，以后如果 chunk 不够用时，扩容 chunk 就不用 malloc，直接复用该 <code>spare_chunk</code> 即可。根据局部性原理，这个 <code>spare_chunk</code> 的地址或者内存也很可能还在 cache 中，这样的机制可以减少一次 malloc 以及存入 cache 操作。  </p>
<p><code>yqueue_t</code> 内部有三个 <code>chunk_t</code> 类型指针以及对应的索引位置：  </p>
<ul>
<li><code>begin_chunk/begin_pos</code>：指向队列中第一个 chunk，begin_pos 指向第一个 chunk 中第一个元素的索引位置，因为 <code>pop()</code>，所以第一个元素不可能永远为 0，会随着 <code>pop()</code> 而改变。同理，第一个 chunk 也会被回收，也需记录第一个 chunk 的位置</li>
<li><code>back_chunk/back_pos</code>：用于指向队列最后一个 chunk，back_pos 指向之后一个 chunk 的最后一个元素的索引位置</li>
<li><code>end_chunk/end_pos</code>：在最后一个 chunk 未满时，end_chunk 和 back_chunk 相同，back_pos 的下一个就是 end_pos。最后一个 chunk 已满时，end_chunk 指向新分配的 chunk，end_pos 为 0。即：end_chunk 和 end_pos 是辅助 back_chunk&#x2F;back_pos 的</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> defined HAVE_POSIX_MEMALIGN</span></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * ALIGN 是在 posix_memalign 可用的情况下使用的内存对齐大小。默认值是 64，</span></span><br><span class="line"><span class="comment"> * 这种对齐将防止两个队列块占用同一 CPU 缓存线(Cache line)，在缓存线 &lt;= 64字节的架构</span></span><br><span class="line"><span class="comment"> * (例如，除了POWER之外的大多数内容)。它是在构建时检测到的，以尝试考虑 POWER 和 s390x 等其他平台。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="type">int</span> N, <span class="type">size_t</span> ALIGN = ZMQ_CACHELINE_SIZE&gt; <span class="keyword">class</span> <span class="type">yqueue_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="type">int</span> N&gt; <span class="keyword">class</span> <span class="type">yqueue_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//  Create the queue.</span></span><br><span class="line">    <span class="keyword">inline</span> <span class="built_in">yqueue_t</span> ()</span><br><span class="line">    &#123;</span><br><span class="line">        _begin_chunk = <span class="built_in">allocate_chunk</span> ();</span><br><span class="line">        <span class="built_in">alloc_assert</span> (_begin_chunk);</span><br><span class="line">        _begin_pos = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// back_chunk总是指向队列中最后一个元素所在的 chunk，初始为空</span></span><br><span class="line">        _back_chunk = <span class="literal">NULL</span>;</span><br><span class="line">        _back_pos = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// end_chunk 总是指向链表的最后一个 chunk</span></span><br><span class="line">        _end_chunk = _begin_chunk;</span><br><span class="line">        _end_pos = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Destroy the queue.</span></span><br><span class="line">    <span class="keyword">inline</span> ~<span class="built_in">yqueue_t</span> ()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (_begin_chunk == _end_chunk) &#123;</span><br><span class="line">                <span class="built_in">free</span> (_begin_chunk);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">chunk_t</span> *o = _begin_chunk;</span><br><span class="line">            _begin_chunk = _begin_chunk-&gt;next;</span><br><span class="line">            <span class="built_in">free</span> (o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">chunk_t</span> *sc = _spare_chunk.<span class="built_in">xchg</span> (<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">free</span> (sc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  返回队列首元素.注意：若队列为空，行为未定义</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> T &amp;<span class="title">front</span> <span class="params">()</span> </span>&#123; <span class="keyword">return</span> _begin_chunk-&gt;values[_begin_pos]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> T &amp;<span class="title">back</span> <span class="params">()</span> </span>&#123; <span class="keyword">return</span> _back_chunk-&gt;values[_back_pos]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _back_chunk = _end_chunk;</span><br><span class="line">        _back_pos = _end_pos;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (++_end_pos != N) <span class="comment">// 当前 chunk 未满</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">chunk_t</span> *sc = _spare_chunk.<span class="built_in">xchg</span> (<span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (sc) &#123; <span class="comment">// 若有 spare_chunk，则继续复用</span></span><br><span class="line">            _end_chunk-&gt;next = sc;</span><br><span class="line">            sc-&gt;prev = _end_chunk;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 若没有 spare_chunk，则重新分配 chunk</span></span><br><span class="line">            _end_chunk-&gt;next = <span class="built_in">allocate_chunk</span> (); <span class="comment">// 分配一个 chunk</span></span><br><span class="line">            <span class="built_in">alloc_assert</span> (_end_chunk-&gt;next);</span><br><span class="line">            _end_chunk-&gt;next-&gt;prev = _end_chunk;</span><br><span class="line">        &#125;</span><br><span class="line">        _end_chunk = _end_chunk-&gt;next;</span><br><span class="line">        _end_pos = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除队列末尾元素。即：回滚最后一次推送到队列的元素。注意：调用者负责销毁 unpushed 的对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">unpush</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//  First, move &#x27;back&#x27; one position backwards.</span></span><br><span class="line">        <span class="keyword">if</span> (_back_pos)</span><br><span class="line">            --_back_pos;</span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            _back_pos = N - <span class="number">1</span>;</span><br><span class="line">            _back_chunk = _back_chunk-&gt;prev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Now, move &#x27;end&#x27; position backwards. Note that obsolete end chunk</span></span><br><span class="line">        <span class="comment">//  is not used as a spare chunk. The analysis shows that doing so</span></span><br><span class="line">        <span class="comment">//  would require free and atomic operation per chunk deallocated</span></span><br><span class="line">        <span class="comment">//  instead of a simple free.</span></span><br><span class="line">        <span class="keyword">if</span> (_end_pos)</span><br><span class="line">            --_end_pos;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            _end_pos = N - <span class="number">1</span>;</span><br><span class="line">            _end_chunk = _end_chunk-&gt;prev;</span><br><span class="line">            <span class="built_in">free</span> (_end_chunk-&gt;next);</span><br><span class="line">            _end_chunk-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Removes an element from the front end of the queue.</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pop</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (++_begin_pos == N) &#123; <span class="comment">// 删除满一个 chunk 才回收 chunk</span></span><br><span class="line">            <span class="type">chunk_t</span> *o = _begin_chunk;</span><br><span class="line">            _begin_chunk = _begin_chunk-&gt;next;</span><br><span class="line">            _begin_chunk-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">            _begin_pos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//  &#x27;o&#x27; has been more recently used than _spare_chunk,</span></span><br><span class="line">            <span class="comment">//  so for cache reasons we&#x27;ll get rid of the spare and</span></span><br><span class="line">            <span class="comment">//  use &#x27;o&#x27; as the spare.</span></span><br><span class="line">            <span class="comment">// 根据局部性原理，总是保存最新的空闲块儿释放先前的空闲块</span></span><br><span class="line">            <span class="type">chunk_t</span> *cs = _spare_chunk.<span class="built_in">xchg</span> (o); </span><br><span class="line">            <span class="built_in">free</span> (cs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// Individual memory chunk to hold N elements. 链表节点</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">chunk_t</span></span><br><span class="line">    &#123;</span><br><span class="line">        T values[N];</span><br><span class="line">        <span class="type">chunk_t</span> *prev;</span><br><span class="line">        <span class="type">chunk_t</span> *next;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">chunk_t</span> *<span class="title">allocate_chunk</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 分配的内存空间大小：sizeof(T) * N + 8 (32bit系统，+ 16：64bit系统) </span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined HAVE_POSIX_MEMALIGN</span></span><br><span class="line">        <span class="type">void</span> *pv;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">posix_memalign</span> (&amp;pv, ALIGN, <span class="built_in">sizeof</span> (<span class="type">chunk_t</span>)) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">chunk_t</span> *) pv;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">chunk_t</span> *&gt; (<span class="built_in">malloc</span> (<span class="built_in">sizeof</span> (<span class="type">chunk_t</span>)));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果队列为空，返回位置可能指向无效内存，而开始和结束位置总是有效的。</span></span><br><span class="line"><span class="comment">     * 开始位置由队列读取器(front/pop)独占访问，而back和结束位置由队列写入器(back/push)独占访问。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">chunk_t</span> *_begin_chunk;</span><br><span class="line">    <span class="type">int</span> _begin_pos;</span><br><span class="line">    <span class="type">chunk_t</span> *_back_chunk;</span><br><span class="line">    <span class="type">int</span> _back_pos;</span><br><span class="line">    <span class="type">chunk_t</span> *_end_chunk;</span><br><span class="line">    <span class="type">int</span> _end_pos;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产和消费速度可能接近。此时，保留最近释放的块使得不必调用 malloc/free。 </span></span><br><span class="line">    <span class="type">atomic_ptr_t</span>&lt;<span class="type">chunk_t</span>&gt; _spare_chunk;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ZMQ_NON_COPYABLE_NOR_MOVABLE</span> (<span class="type">yqueue_t</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据通信</category>
        <category>ZeroMQ</category>
      </categories>
      <tags>
        <tag>ZeroMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>CMake-QT5</title>
    <url>/2024/09/15/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/CMake/CMake-QT5/</url>
    <content><![CDATA[<h1 id="AUTORCC"><a href="#AUTORCC" class="headerlink" title="AUTORCC"></a>AUTORCC</h1><p>AUTORCC 是 boolean 值，指定 CMake 是否自动处理 Qt rcc 代码生成器，即：无需使用 QT4_ADD_RESOURCES()、QT5_ADD_RESOURCES()等命令。</p>
<p>若该属性为 ON，CMake 将处理在构建时添加为目标源的 .qrc 文件，并相应的调用 rcc。如果在创建目标时设置类该属性，则该属性由 CMAKE_AUTORCC 变量的值初始化。</p>
<p>默认情况下，AUTORCC 由自定义命令处理。 如果 .qrc 文件是 GENERATED，则使用自定义目标。</p>
<p>当存在多个同名的 .qrc 文件时，CMake 将为 rcc 生成未指定的唯一输出文件名。因此，如果需要使用 Q_INIT_RESOURCE() 或 Q_CLEANUP_RESOURCE()，则 .qrc 文件名必须是唯一的。</p>
<h1 id="QT-接口"><a href="#QT-接口" class="headerlink" title="QT 接口"></a>QT 接口</h1><h2 id="qt5-add-resources"><a href="#qt5-add-resources" class="headerlink" title="qt5_add_resources"></a>qt5_add_resources</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">qt5_add_resources(&lt;VAR&gt; file1.qrc [file2.qrc ...]</span><br><span class="line">                  [OPTIONS ...])</span><br></pre></td></tr></table></figure>

<p>使用 Resource Compiler（rcc）从 Qt 资源文件创建源代码。生成的源文件的路径已添加到中 。</p>
<h2 id="qt5-add-big-resources"><a href="#qt5-add-big-resources" class="headerlink" title="qt5_add_big_resources"></a>qt5_add_big_resources</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">qt5_add_big_resources(&lt;VAR&gt; file1.qrc [file2.qrc ...]</span><br><span class="line">                      [OPTIONS ...])</span><br></pre></td></tr></table></figure>

<p>类似于 qt5_add_resources，但是直接生成目标文件（.o，.obj）而不是 C++ 源代码。这样可以嵌入更大的资源，而在这些资源中编译为 C++ 源代码然后再编译为二进制代码将非常耗时或占用大量内存。</p>
<p>注意：仅 CMake 3.9 及以上版本支持</p>
<h2 id="qt5-wrap-cpp"><a href="#qt5-wrap-cpp" class="headerlink" title="qt5_wrap_cpp"></a>qt5_wrap_cpp</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">qt5_wrap_cpp</span>(&lt;VAR&gt; src_file1 [src_file2 ...]</span><br><span class="line">             [<span class="keyword">TARGET</span> <span class="keyword">target</span>]</span><br><span class="line">             [OPTIONS ...]</span><br><span class="line">             [DEPENDS ...])</span><br></pre></td></tr></table></figure>

<p>创建用于在给定源文件上调用元对象编译器（moc）的规则。对于每个输入文件，将在构建目录中生成一个输出文件。生成文件的路径添加到中 <code>&lt;var&gt;</code></p>
]]></content>
      <categories>
        <category>编译工具</category>
        <category>CMake</category>
      </categories>
      <tags>
        <tag>编译工具</tag>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>catkin</title>
    <url>/2024/09/16/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/catkin/catkin/</url>
    <content><![CDATA[<h1 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h1><h2 id="编译为release版本"><a href="#编译为release版本" class="headerlink" title="编译为release版本"></a>编译为release版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">catkin_make --cmake-args -DCMAKE_BUILD_TYPE=Release</span>              </span><br></pre></td></tr></table></figure>



<p><strong>CMAKE_BUILD_TYPE</strong> 可以的取值是:</p>
<ul>
<li><code>Debug</code> - 调试信息多，没优化</li>
<li><code>Release</code> - 没有多余的调试信息，发布时使用</li>
<li><code>RelWithDebInfo</code> - 优化过的带有有调试信息的版本</li>
<li><code>MinSizeRel</code></li>
</ul>
<h2 id="编译指定包"><a href="#编译指定包" class="headerlink" title="编译指定包"></a>编译指定包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">catkin_make --pkg &lt;package_name&gt;  <span class="comment"># 临时生效</span></span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">catkin_make --only-pkg-with-msgs=&lt;message_package_name&gt; <span class="comment"># 只编译 .msg 文件</span></span></span><br></pre></td></tr></table></figure>



<p>白名单：**<code>-DCATKIN_WHITELIST_PACKAGES</code>**</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class="string">&quot;package1;package2&quot;</span></span> </span><br></pre></td></tr></table></figure>

<p>恢复编译所有的包（如不执行该指令，则后续都只会编译上述指定的包）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class="string">&quot;&quot;</span></span>   </span><br></pre></td></tr></table></figure>



<p> 黑名单: <strong><code>-DCATKIN_BLACKLIST_PACKAGES</code></strong></p>
<h2 id="将指定包编译为release版本"><a href="#将指定包编译为release版本" class="headerlink" title="将指定包编译为release版本"></a>将指定包编译为release版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">catkin_make --pkg=rbx1_bringup --cmake-args -DCMAKE_BUILD_TYPE=Release</span></span><br></pre></td></tr></table></figure>

<p><strong>可使用多个</strong> <strong>–pkg</strong> <strong>参数指定多个包</strong></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">catkin_make install</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">catkin_make install --pkg rbx1_bringup <span class="comment"># 安装指定包</span></span>              </span><br></pre></td></tr></table></figure>



<p>若未编译，则先编译（Debug），再安装。默认安装在当前目录，若要指定安装目录，可使用-DCMAKE_INSTALL_PREFIX参数，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">catkin_make -DCMAKE_INSTALL_PREFIX=/home/ros/catkin_ws/test install --pkg rbx1_bringup</span></span><br></pre></td></tr></table></figure>

<p>​              </p>
<h2 id="编译为release，并安装在指定目录"><a href="#编译为release，并安装在指定目录" class="headerlink" title="编译为release，并安装在指定目录"></a>编译为release，并安装在指定目录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">catkin_make -DCMAKE_INSTALL_PREFIX=/home/ros/catkin_ws/test install --pkg=rbx1_bringup --cmake-args -DCMAKE_BUILD_TYPE=Release</span>              </span><br></pre></td></tr></table></figure>

<h2 id="自动初始化工作空间"><a href="#自动初始化工作空间" class="headerlink" title="自动初始化工作空间"></a>自动初始化工作空间</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">catkin build rovio --cmake-args -DCMAKE_BUILD_TYPE=Release -DMAKE_SCENE=ON</span></span><br></pre></td></tr></table></figure>

<p>编译rovio包。如果工作空间未初始化，可以自动完成工作空间初始化 。</p>
<h2 id="catkin-init-workspace"><a href="#catkin-init-workspace" class="headerlink" title="catkin_init_workspace"></a>catkin_init_workspace</h2><p>将当前目录初始化为一个 ROS 工作空间（通常不需要运行该指令，除非想将某个目录指定为 ROS 工作空间）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Creating symlink &quot;/home/ros/catkin_test/src/CMakeLists.txt&quot; pointing to &quot;/opt/ros/kinetic/share/catkin/cmake/toplevel.cmake&quot;</span><br></pre></td></tr></table></figure>

<p>会在当前目录生成一个 CMakeLists.txt 文件，该文件为 &#x2F;opt&#x2F;ros&#x2F;kinetic&#x2F;share&#x2F;catkin&#x2F;cmake&#x2F;toplevel.cmake 的软链接。</p>
<h2 id="catkin-make-CMakeLists-txt-常用变量"><a href="#catkin-make-CMakeLists-txt-常用变量" class="headerlink" title="catkin_make CMakeLists.txt 常用变量"></a>catkin_make CMakeLists.txt 常用变量</h2><p>install 相关变量：</p>
<p><strong>- CATKIN_PACKAGE_BIN_DESTINATION</strong></p>
<p><strong>- CATKIN_PACKAGE_ETC_DESTINATION</strong></p>
<p><strong>- CATKIN_PACKAGE_INCLUDE_DESTINATION</strong></p>
<p><strong>- CATKIN_PACKAGE_LIB_DESTINATION</strong></p>
<p><strong>- CATKIN_PACKAGE_PYTHON_DESTINATION</strong></p>
<p><strong>-</strong> <strong>CATKIN_PACKAGE_SHARE_DESTINATION</strong>: 被设置为 ${CATKIN_GLOBAL_SHARE_DESTINATION}&#x2F;${PROJECT_NAME}</p>
<p><strong>- CATKIN_GLOBAL_BIN_DESTINATION：</strong>通常值用于ROS核心执行程序</p>
<p><strong>- CATKIN_GLOBAL_ETC_DESTINATION</strong></p>
<p><strong>- CATKIN_GLOBAL_INCLUDE_DESTINATION</strong></p>
<p><strong>- CATKIN_GLOBAL_LIB_DESTINATION</strong></p>
<p><strong>- CATKIN_GLOBAL_LIBEXEC_DESTINATION</strong></p>
<p><strong>- CATKIN_GLOBAL_PYTHON_DESTINATION</strong></p>
<p><strong>- CATKIN_GLOBAL_SHARE_DESTINATION</strong></p>
<h1 id="catkin-make-isolated"><a href="#catkin-make-isolated" class="headerlink" title="catkin_make_isolated"></a>catkin_make_isolated</h1><p>当一个工作空间中包含不同环境的独立的项目时，可以使用该指令进行编译。为纯粹由 catkin 包构成的工作区提供调试，并允许用户构建包含 <strong>catkin</strong> 和 **非catkin **包的工作区。</p>
<p>非catkin包：编译脚本中不使用 Catkin cmake，而是简单的 CMake 或者其它的工具的程序包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">catkin_make_isolated --install-space ./cartographer-packages --install</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">catkin_make -DCMAKE_INSTALL_PREFIX=xxxx install --pkg=</span></span><br></pre></td></tr></table></figure>



<h1 id="catkin-build"><a href="#catkin-build" class="headerlink" title="catkin build"></a>catkin build</h1><p>主要区别在于 catkin build 获取的 isolated 环境。catkin build 使得整个 build configuration 更加独立，并且对配置文件的修改(添加&#x2F;删除程序包，修改 cmake 变量等)更加健壮。</p>
<ul>
<li><strong><code>catkin build</code> 并行编译相互独立的包</strong>，因此速度更快</li>
<li><code>catkin build</code> 可在 workspace 的任何目录下执行，**<code>catkin_make</code> 只能在顶层目录下执行**</li>
<li>编译指定包更加方便。<code>catkin build</code> ，或者，在要编译的包目录下执行 <code>catkin build --this</code></li>
<li><code>catkin build</code> 输出的日志更易读</li>
<li>使用 <code>catkin build</code>，还可以获得许多其它有用的 <code>catkin</code> 子命令，例如: <ul>
<li>catkin clean - 清除 build devel 及 install 目录</li>
<li>catkin list</li>
<li>catkin locate</li>
<li>catkin profile</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>编译工具</category>
        <category>catkin</category>
      </categories>
      <tags>
        <tag>编译工具</tag>
        <tag>catkin</tag>
      </tags>
  </entry>
  <entry>
    <title>CMake</title>
    <url>/2024/09/15/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/CMake/CMake/</url>
    <content><![CDATA[<p>为 cmake 设置快捷方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias cmakedebug=&#x27;cmake $1 -DCMAKE_BUILD_TYPE=DEBUG&#x27;</span><br><span class="line">alias cmakerelease=&#x27;cmake $1 -DCMAKE_BUILD_TYPE=RELEASE&#x27;</span><br></pre></td></tr></table></figure>





<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>变量使用 <code>$&#123;&#125;</code> 方式取值，但是在 <code>IF</code> 控制语句中是直接使用变量名。</p>
<p><code>指令 ( 参数 1 参数 2 … )</code> 参数使用括弧括起，参数之间使用空格或分号分开。 以 <code>ADD_EXECUTABLE</code> 指令为例：<code>ADD_EXECUTABLE(hello main.c func.c)</code> 或者 <code>ADD_EXECUTABLE(hello main.c;func.c) </code>。</p>
<p>指令是大小写无关的，参数和变量是大小写相关的。但，推荐全部使用大写指令。</p>
<p>cmake 语法灵活，例如： <code>SET(SRC_LIST main.c)</code> 也可写成 <code>SET(SRC_LIST &quot;main.c&quot;) </code>，但是当文件名中有空格时则必须使用双引号；还可以忽略源文件列表中的文件后缀， cmake 会自动在本目录查找。</p>
<p>当工程中有多个子目录时，每个子目录都需创建 CMakeLists.txt 文件</p>
<h2 id="内部构建与外部构建"><a href="#内部构建与外部构建" class="headerlink" title="内部构建与外部构建"></a>内部构建与外部构建</h2><p>内部构建即在项目 CMakeLists.txt 同级目录进行配置及编译。外部构建即在项目外进行编译，例如：在项目中创建 <code>&lt;project&gt;/build</code> 目录，然后进入该目录执行 <code>cmake .. &amp;&amp; make</code> 配置及配置。</p>
<p>外部构建时，<code>&lt;project&gt;_SOURCE_DIRS</code> 仍为项目根目录，而 <code>&lt;project&gt;_BINRAY_DIR</code> 则为 <code>&lt;project&gt;/build</code> </p>
<h1 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h1><h2 id="project"><a href="#project" class="headerlink" title="project"></a>project</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># language 列表可选，默认表示支持所有语言</span></span><br><span class="line"><span class="comment"># VERSION 指定版本号，并同时定义以下变量</span></span><br><span class="line"><span class="comment"># 	- PROJECT_VERSION: 项目完整版本号</span></span><br><span class="line"><span class="comment"># 	- PROJECT_VERSION_MAJOR</span></span><br><span class="line"><span class="comment"># 	- PROJECT_VERSION_MINOR</span></span><br><span class="line"><span class="comment"># 	- PROJECT_VERSION_PATCH: 补丁号</span></span><br><span class="line"><span class="comment"># DESCRIPTION 添加项目描述，并定义 PROJECT_DESCRIPTION 变量</span></span><br><span class="line"><span class="comment"># HOMEPAGE_URL 设置项目主页，并定义 PROJECT_HOMEPAGE_URL 变量</span></span><br><span class="line"><span class="keyword">project</span>(&lt;<span class="keyword">PROJECT</span>-NAME&gt; [&lt;language-name&gt;...])</span><br><span class="line"><span class="keyword">project</span>(&lt;<span class="keyword">PROJECT</span>-NAME&gt;</span><br><span class="line">        [VERSION &lt;major&gt;[.&lt;minor&gt;[.&lt;patch&gt;[.&lt;tweak&gt;]]]]</span><br><span class="line">        [DESCRIPTION &lt;<span class="keyword">project</span>-description-<span class="keyword">string</span>&gt;]</span><br><span class="line">        [HOMEPAGE_URL &lt;url-<span class="keyword">string</span>&gt;]</span><br><span class="line">        [LANGUAGES &lt;language-name&gt;...])</span><br></pre></td></tr></table></figure>

<p>定义项目名称， <strong>必要</strong>，多个 <code>projcet</code> 指令以最后一个为准。当从顶层调用 CMakeLists.txt 时，cmake 还将项目名称存储在变量 <strong><code>CMAKE_PROJECT_NAME</code></strong> 中。</p>
<p>同时设置以下变量：</p>
<ul>
<li><strong><code>PROJECT_SOURCE_DIR</code></strong> 、**<code>&lt;PROJECT-NAME&gt;_SOURCE_DIR</code>** ：项目源目录的绝对路径</li>
<li><strong><code>PROJECT_BINARY_DIR</code></strong> 、**<code>&lt;PROJECT-NAME&gt;_BINARY_DIR</code>** ：项目可执行文件目录的绝对路径</li>
<li><strong><code>PROJECT_IS_TOP_LEVEL</code></strong> 、**<code>&lt;PROJECT-NAME&gt;_IS_TOP_LEVEL</code>** ：v3.21 新增变量，表示当前项目是否为 top-level</li>
</ul>
<h2 id="MESSAGE"><a href="#MESSAGE" class="headerlink" title="MESSAGE"></a>MESSAGE</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通用消息</span></span><br><span class="line"><span class="comment">## mode: 消息类型，会影响消息的处理方式:</span></span><br><span class="line"><span class="comment">## 	- FATAL_ERROR: CMake 错误，停止</span></span><br><span class="line"><span class="comment">## 	- SEND_ERROR: CMake 错误，继续处理，但跳过生成</span></span><br><span class="line"><span class="comment">##	- WARNING: 警告，继续处理</span></span><br><span class="line"><span class="comment">##	- AUTHOR_WARNING: </span></span><br><span class="line"><span class="comment">## 	- DEPRECATION: 如果变量 CMAKE_ERROR_DEPRECATED 或 CMAKE_WARN_DEPRECATED 分别被启用，则产 生Deprecation 错误或警告，否则没有消息</span></span><br><span class="line"><span class="comment">## 	- 空/NOTICE: 输出日志到 stderr</span></span><br><span class="line"><span class="comment">## 	- STATUS: 感兴趣的主要信息</span></span><br><span class="line"><span class="comment">## 	- VERBOSE: 详细信息消息。提供额外的细节</span></span><br><span class="line"><span class="comment">## 	- DE<span class="doctag">BUG:</span> </span></span><br><span class="line"><span class="comment">## 	- TRACE: 最低级别消息。通常只是临时的，项目发布之前会被删除</span></span><br><span class="line"><span class="keyword">message</span>([&lt;mode&gt;] <span class="string">&quot;message text&quot;</span> ...)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reporting checks. v3.17 新增</span></span><br><span class="line"><span class="comment">## checktate:</span></span><br><span class="line"><span class="comment">## 	- CHECK_START: 记录即将执行的检查的简短信息</span></span><br><span class="line"><span class="comment">## 	- CHECK_PASS: 若成功则记录</span></span><br><span class="line"><span class="comment">## 	- CHECK_FAIL: 若失败则记录</span></span><br><span class="line"><span class="keyword">message</span>(&lt;checkState&gt; <span class="string">&quot;message text&quot;</span> ...)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure Log。V3.26 新增</span></span><br><span class="line"><span class="keyword">message</span>(CONFIGURE_LOG &lt;text&gt;...)</span><br></pre></td></tr></table></figure>



<h2 id="ADD-COMPILE-OPTIONS"><a href="#ADD-COMPILE-OPTIONS" class="headerlink" title="ADD_COMPILE_OPTIONS"></a>ADD_COMPILE_OPTIONS</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD_COMPILE_OPTIONS</span>(-std=c++<span class="number">11</span>)</span><br></pre></td></tr></table></figure>



<h2 id="ADD-EXECUTABLE"><a href="#ADD-EXECUTABLE" class="headerlink" title="ADD_EXECUTABLE"></a>ADD_EXECUTABLE</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加可执行文件</span></span><br><span class="line"><span class="comment"># name: 可执行文件名，在项目中必须是全局唯一的</span></span><br><span class="line"><span class="comment"># options：</span></span><br><span class="line"><span class="comment"># 	- WIN32: 自动设置 WIN32_EXECUTABLE 属性</span></span><br><span class="line"><span class="comment">#	- MACOSX_BUNDLE: 自动设置 MACOSX_BUNDLE 属性</span></span><br><span class="line"><span class="comment">#	- EXCLUDE_FROM_ALL: 设置 EXCLUDE_FROM_ALL 属性</span></span><br><span class="line"><span class="comment"># sources: 源文件列表</span></span><br><span class="line"><span class="keyword">add_executable</span>(&lt;name&gt; &lt;options&gt;... &lt;sources&gt;...)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Imported Executables</span></span><br><span class="line"><span class="comment"># options:</span></span><br><span class="line"><span class="comment"># 	- GLOBAL: 使目标名称全局可见 </span></span><br><span class="line"><span class="keyword">add_executable</span>(&lt;name&gt; IMPORTED [GLOBAL])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Alias Executables</span></span><br><span class="line"><span class="keyword">add_executable</span>(&lt;name&gt; ALIAS &lt;<span class="keyword">target</span>&gt;)</span><br></pre></td></tr></table></figure>



<h2 id="ADD-LIBRARY"><a href="#ADD-LIBRARY" class="headerlink" title="ADD_LIBRARY"></a>ADD_LIBRARY</h2><p>生成动态&#x2F;静态库。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Normal Libraries</span></span><br><span class="line"><span class="comment"># name: 库名，在项目中全局唯一。实际库名是基于编译平台的约定(例如lib&lt;name&gt;.a 或 &lt;name&gt;.lib)</span></span><br><span class="line"><span class="comment"># type: 库的类型，若不指定，则根据 BUILD_SHARED_LIBS 变量选择</span></span><br><span class="line"><span class="comment"># 	- STATIC: 静态库</span></span><br><span class="line"><span class="comment">#	- SHARED: 动态库</span></span><br><span class="line"><span class="comment">#	- MODULE: 插件，可能不会被其他目标链接，但可以在运行时使用 dlopen 等动态加载。若不支持 dyld，等同于 SHARED</span></span><br><span class="line"><span class="comment"># EXCLUDE_FROM_ALL: </span></span><br><span class="line"><span class="keyword">add_library</span>(&lt;name&gt; [&lt;type&gt;] [EXCLUDE_FROM_ALL] &lt;sources&gt;...)</span><br></pre></td></tr></table></figure>

<p>对于 <code>SHARED</code> 和 <code>MODULE</code>，会自动将 <code>POSITION_INDEPENDENT_CODE</code> 设置为 <code>ON</code>。</p>
<p>若一个库不暴露任何 symbols，则不能被定义为 <code>SHARED</code> 库。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Object Libraries</span></span><br><span class="line"><span class="comment"># 添加对象库以编译源文件，而无需将其对象文件归档或链接到库中.</span></span><br><span class="line"><span class="comment"># 其它通过 add_library/add_executable 构建的目标可依赖该对象</span></span><br><span class="line"><span class="keyword">add_library</span>(&lt;name&gt; OBJECT &lt;sources&gt;...)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line"><span class="keyword">add_library</span>(... $&lt;TARGET_OBJECTS:objlib&gt; ...)</span><br><span class="line"><span class="keyword">add_executable</span>(... $&lt;TARGET_OBJECTS:objlib&gt; ...)</span><br></pre></td></tr></table></figure>



<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># interface Libraries</span></span><br><span class="line"><span class="comment"># 添加 Interface Library 目标。可以指定依赖项的使用需求，但不编译源代码，也不会在磁盘上生成库</span></span><br><span class="line"><span class="keyword">add_library</span>(&lt;name&gt; INTERFACE)</span><br></pre></td></tr></table></figure>



<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Imported Libraries</span></span><br><span class="line"><span class="comment"># type 支持 STATIC/SHARED/MODULE/UNKNOWN</span></span><br><span class="line"><span class="keyword">add_library</span>(&lt;name&gt; &lt;type&gt; IMPORTED [GLOBAL])</span><br></pre></td></tr></table></figure>



<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Alias Libraries</span></span><br><span class="line"><span class="keyword">add_library</span>(&lt;name&gt; ALIAS &lt;<span class="keyword">target</span>&gt;)</span><br></pre></td></tr></table></figure>



<h2 id="ADD-SUBDIRECTORY"><a href="#ADD-SUBDIRECTORY" class="headerlink" title="ADD_SUBDIRECTORY"></a>ADD_SUBDIRECTORY</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># binary_dir 指定放置输出文件的目录</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(source_dir [binary_dir] [EXCLUDE_FROM_ALL] [SYSTEM])</span><br></pre></td></tr></table></figure>

<p>该指令用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存 放的位置。 </p>
<p>EXCLUDE_FROM_ALL 参数的含义是将这个目录从编译过程中排除，比如，工程 的 example ，可能就需要工程构建完成后，再进入 example 目录单独进行构建</p>
<p>V3.25 新增 SYSTEM 参数，子目录的 SYSTEM directory 属性将被设置为true。该属性用于初始化在该子目录中创建的每个非导入目标的SYSTEM属性。</p>
<h2 id="AUX-SOURCE-DIRECTORY"><a href="#AUX-SOURCE-DIRECTORY" class="headerlink" title="AUX_SOURCE_DIRECTORY"></a>AUX_SOURCE_DIRECTORY</h2><p>查找指定目录下的所有源文件，并将结果写入 variable 中</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">AUX_SOURCE_DIRECTORY</span>(&lt;dir&gt; &lt;variable&gt;)</span><br></pre></td></tr></table></figure>



<h2 id="INCLUDE-DIRECTORIES"><a href="#INCLUDE-DIRECTORIES" class="headerlink" title="INCLUDE_DIRECTORIES"></a>INCLUDE_DIRECTORIES</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(<span class="keyword">include</span> <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span> ) </span><br><span class="line"><span class="keyword">if</span>(ENABLE_EGO) </span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;thd_lib_path&#125;</span>/boost/<span class="keyword">include</span>) </span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#message($&#123;INCLUDE_DIRECTORIES&#125;) 不可使用</span></span><br><span class="line"><span class="keyword">get_property</span>(dirs DIRECTORY <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span> PROPERTY <span class="keyword">INCLUDE_DIRECTORIES</span>) </span><br><span class="line"><span class="keyword">foreach</span>(dir <span class="variable">$&#123;dirs&#125;</span>) </span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;dir=&#x27;$&#123;dir&#125;&#x27;&quot;</span>) </span><br><span class="line"><span class="keyword">endforeach</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br></pre></td></tr></table></figure>





<h2 id="INSTALL"><a href="#INSTALL" class="headerlink" title="INSTALL"></a>INSTALL</h2><h3 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装目标文件，通常是ADD_EXECUTABLE/ADD_LIBRARY定义的目标</span></span><br><span class="line"><span class="keyword">install</span>(TARGETS &lt;<span class="keyword">target</span>&gt;... [<span class="keyword">EXPORT</span> &lt;<span class="keyword">export</span>-name&gt;]</span><br><span class="line">        [RUNTIME_DEPENDENCIES &lt;arg&gt;...|RUNTIME_DEPENDENCY_SET &lt;<span class="keyword">set</span>-name&gt;]</span><br><span class="line">        [&lt;artifact-<span class="keyword">option</span>&gt;...]</span><br><span class="line">        [&lt;artifact-kind&gt; &lt;artifact-<span class="keyword">option</span>&gt;...]...</span><br><span class="line">        [INCLUDES DESTINATION [&lt;dir&gt; ...]]</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<p>目标文件类型有：</p>
<ul>
<li>ARCHIVE：特指静态库</li>
<li>LIBRARY：特指动态库</li>
<li>RUNTIME：特指可执行目标二进制</li>
<li>PUBLIC_HEADER：与目标文件相关联的 <code>PUBLIC_HEADER</code> 文件。由 <code>PUBLIC_HEADER</code> 属性指定</li>
<li>PRIVATE_HEADER：</li>
<li>FILE_SET(type HEADERS)：</li>
</ul>
<p>DESTINATION 定义了安装的路径，如果路径以 &#x2F; 开头，那么指的是绝对路径，这时候 <code>CMAKE_INSTALL_PREFIX</code> 就无效了。如果希望使用 <code>CMAKE_INSTALL_PREFIX</code> 来定义安装路径，就要写成相对路径，即不要以 &#x2F; 开头，那么安装后的路径就是 <code>$&#123;CMAKE_INSTALL_PREFIX&#125;/</code> </p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set_target_properties</span>(mylib PROPERTIES PUBLIC_HEADER mylib.h)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 myrun 安装到 CMAKE_INSTALL_PREFIX/bin 目录</span></span><br><span class="line"><span class="comment"># 将 mylib 安装到 CMAKE_INSTALL_PREFIX/lib 目录</span></span><br><span class="line"><span class="comment"># 将 mystaticlib 安装到 CMAKE_INSTALL_PREFIX/libstatic 目录</span></span><br><span class="line"><span class="keyword">INSTALL</span>(TARGETS myrun mylib mystaticlib </span><br><span class="line">    RUNTIME DESTINATION bin </span><br><span class="line">    LIBRARY DESTINATION lib </span><br><span class="line">    ARCHIVE DESTINATION libstatic</span><br><span class="line">    PUBLIC_HEADER DESTINATION <span class="variable">$&#123;CMAKE_INSTALL_INCLUDEDIR&#125;</span>/myproj)</span><br></pre></td></tr></table></figure>



<h3 id="FILES-与-programs"><a href="#FILES-与-programs" class="headerlink" title="FILES 与 programs"></a>FILES 与 programs</h3><p>两者指令使用方法相同，不同的是安装后的权限。</p>
<p>FILES 默认权限为：<code>OWNER_WRITE</code>, <code>OWNER_READ</code>, <code>GROUP_READ</code>, 和 WORLD_READ ，即 644 </p>
<p>programs 权限为：<code>WNER_EXECUTE</code>, <code>GROUP_EXECUTE</code>, 和 <code>WORLD_EXECUTE</code>，即 755 </p>
<h3 id="DIRECTORY"><a href="#DIRECTORY" class="headerlink" title="DIRECTORY"></a>DIRECTORY</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">install</span>(DIRECTORY dirs...</span><br><span class="line">        TYPE &lt;type&gt; | DESTINATION &lt;dir&gt;</span><br><span class="line">        [FILE_PERMISSIONS &lt;permission&gt;...]</span><br><span class="line">        [DIRECTORY_PERMISSIONS &lt;permission&gt;...]</span><br><span class="line">        [USE_SOURCE_PERMISSIONS] [OPTIONAL] [MESSAGE_NEVER]</span><br><span class="line">        [CONFIGURATIONS &lt;config&gt;...]</span><br><span class="line">        [COMPONENT &lt;component&gt;] [EXCLUDE_FROM_ALL]</span><br><span class="line">        [FILES_MATCHING]</span><br><span class="line">        [[PATTERN &lt;pattern&gt; | REGEX &lt;regex&gt;]</span><br><span class="line">         [EXCLUDE] [PERMISSIONS &lt;permission&gt;...]] [...])</span><br></pre></td></tr></table></figure>

<p>目录安装。注意: abc 表示将被安装到目标路径下的 abc ,而 abc&#x2F; 表示将 abc 中的内容安装到目标路径，不包括该目录本身 。</p>
<p>参数 <code>PATTERN</code> 用于使用正则表达式进行过滤， <code>PERMISSIONS</code> 用于指定 <code>PATTERN</code> 过滤后的文件 权限。</p>
<p>不论是 <code>SUBDIRS</code> 还是 <code>ADD_SUBDIRECTORY</code> 指令 ( 不论是否指定编译输出目录 ) ，都可 以通过 SET 指令重新定义 <code>EXECUTABLE_OUTPUT_PATH</code> 和 <code>LIBRARY_OUTPUT_PATH</code> 变量 来指定最终的目标二进制的位置 ( 指最终生成的 hello 或者最终的共享库，不包含编译生成 的中间文件 )</p>
<h2 id="SET-SOURCE-FILES-PROPERTIES"><a href="#SET-SOURCE-FILES-PROPERTIES" class="headerlink" title="SET_SOURCE_FILES_PROPERTIES"></a><strong>SET_SOURCE_FILES_PROPERTIES</strong></h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET_SOURCE_FILES_PROPERTIES</span>(<span class="variable">$&#123;DIR_SRS&#125;</span> PROPERTIES LANGUAGE CXX)</span><br></pre></td></tr></table></figure>

<p>将源文件列表 DIR_SRS 中的所有源文件的属性设置为CXX,则编译器会将该列表中的所有源文件都当做 C++ 文件,使用 g++ 进行编译.</p>
<p>例如,当在C++工程内部包含 .c 格式的源文件, 并且该文件中为某些参数设置了默认参数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">record_dev_id <span class="title">get_default_input_dev</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* capdev = <span class="literal">NULL</span>)</span></span></span><br></pre></td></tr></table></figure>

<p>则编译时，若不设置 CXX 属性，会存在如下错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error: expected &#x27;;&#x27;, &#x27;,&#x27; or &#x27;)&#x27; before &#x27;=&#x27; token</span><br></pre></td></tr></table></figure>







<h1 id="常用变量"><a href="#常用变量" class="headerlink" title="常用变量"></a>常用变量</h1><ul>
<li><p><strong><code>&lt;project&gt;_BINARY_DIR</code></strong> 工程根目录</p>
</li>
<li><p><strong><code>PROJECT_NAME</code></strong> 返回通过PROJECT指令定义的项目名称 </p>
</li>
<li><p><strong><code>CMAKE_BINARY_DIR</code></strong> 、**<code>PROJECT_BINARY_DIR</code>** 运行cmake命令的目录,通常是 <code>$&#123;PROJECT_SOURCE_DIR&#125;/build</code></p>
</li>
<li><p><strong><code>PROJECT_SOURCE_DIR</code></strong> 工程的根目录</p>
</li>
<li><p><strong><code>CMAKE_SOURCE_DIR</code></strong></p>
</li>
<li><p><strong><code>&lt;project&gt;_SOURCE_DIR</code></strong></p>
</li>
<li><p><strong><code>CMAKE_INCLUDE_PATH</code></strong> 环境变量,非cmake变量 </p>
</li>
<li><p><strong><code>CMAKE_LIBRARY_PATH</code></strong> 环境变量</p>
</li>
<li><p><strong><code>CMAKE_CURRENT_SOURCE_DIR</code></strong> 当前处理的CMakeLists.txt所在的路径</p>
</li>
<li><p><strong><code>CMAKE_CURRENT_BINARY_DIR</code></strong> target编译目录。使用 **<code>ADD_SURDIRECTORY(src bin)</code><strong>可以更改此变量的值。</strong><code>SET(EXECUTABLE_OUTPUT_PATH &lt;新路径&gt;)</code>**并不会对此变量有影响,只是改变了最终目标文件的存储路径 </p>
</li>
<li><p><strong><code>CMAKE_CURRENT_LIST_FILE</code></strong> 输出调用这个变量的CMakeLists.txt的完整路径 </p>
</li>
<li><p><strong><code>CMAKE_CURRENT_LIST_LINE</code></strong> 输出这个变量所在的行 </p>
</li>
<li><p><strong><code>CMAKE_MODULE_PATH</code></strong> 定义自己的cmake模块所在的路径。**<code>SET(CMAKE_MODULE_PATH $&#123;PROJECT_SOURCE_DIR&#125;/cmake)</code>**,然后可以用 <em><code>INCLUDE</code></em> 命令来调用自己的模块 </p>
</li>
<li><p><strong><code>EXECUTABLE_OUTPUT_PATH</code></strong> 重新定义目标二进制可执行文件的存放位置 </p>
</li>
<li><p><strong><code>LIBRARY_OUTPUT_PATH</code></strong> 重新定义目标链接库文件的存放位置 </p>
</li>
<li><p><strong><code>CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS</code></strong> 用来控制 <code>IF ELSE</code> 语句的书写方式</p>
</li>
</ul>
<p><strong>系统信息</strong></p>
<ul>
<li><p><strong><code>CMAKE_MAJOR_VERSION</code></strong> cmake主版本号,如2.8.6中的2 </p>
</li>
<li><p><strong><code>CMAKE_MINOR_VERSION</code></strong> cmake次版本号,如2.8.6中的8 </p>
</li>
<li><p><strong><code>CMAKE_PATCH_VERSION</code></strong> cmake补丁等级,如2.8.6中的6 </p>
</li>
<li><p><strong><code>CMAKE_SYSTEM</code></strong> 系统名称,例如Linux-2.6.22 </p>
</li>
<li><p><strong><code>CAMKE_SYSTEM_NAME</code></strong> 不包含版本的系统名,如Linux </p>
</li>
<li><p><strong><code>CMAKE_SYSTEM_VERSION</code></strong> 系统版本,如2.6.22 </p>
</li>
<li><p><strong><code>CMAKE_SYSTEM_PROCESSOR</code></strong> 处理器名称,如i686</p>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(CMAKE_SYSTEM_PROCESSOR <span class="keyword">MATCHES</span> <span class="string">&quot;i686.*|i386.*|x86.*|amd64.*|AMD64.*&quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(CMAKE_SYSTEM_PROCESSOR <span class="keyword">MATCHES</span> <span class="string">&quot;^(arm.*|ARM.*))&quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(CMAKE_SYSTEM_PROCESSOR <span class="keyword">MATCHES</span> <span class="string">&quot;^(aarch64.*|AARCH64.*))&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong><code>UNIX</code></strong> 在所有的类UNIX平台为TRUE,包括OS X和cygwin </p>
</li>
<li><p><strong><code>WIN32</code></strong> 在所有的win32平台为TRUE,包括cygwin</p>
</li>
</ul>
<p><strong>开关选项</strong></p>
<ul>
<li><p><strong><code>BUILD_SHARED_LIBS</code></strong> 控制默认的库编译方式。如果未进行设置，使用 <code>ADD_LIBRARY</code> 时又没有指定库类型,默认编译生成的库都是静态库</p>
</li>
<li><p><strong><code>CMAKE_C_FLAGS</code></strong> 设置C编译选项 </p>
</li>
<li><p><strong><code>CMAKE_CXX_FLAGS</code></strong> 设置C++编译选项</p>
</li>
<li><p><strong><code>CMAKE_C_COMPILER_INIT</code></strong></p>
</li>
<li><p>**<code>CMAKE_BUILD_TYPE</code>**：Debug、Release、RelWithDebInfo、MinSizeRel。对应使用如下宏来生成 Makefile: </p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">CMAKE_C_FLAGS_[DEBUG|RELEASE|RELWITHDEBINFO|MINSIZEREL]</span><br><span class="line">CMAKE_CXX_FLAGS_[DEBUG|RELEASE|RELWITHDEBINFO|MINSIZEREL]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>CMAKE_SIZEOF_VOID_P</code></strong>: void* 的大小，可用于判断当前系统是 32bits 还是 64bits</p>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(CMAKE_SIZEOF_VOID_P <span class="keyword">EQUAL</span> <span class="number">8</span>)    </span><br><span class="line">	<span class="comment"># 64bits </span></span><br><span class="line"><span class="keyword">else</span>()    </span><br><span class="line">	<span class="comment"># 32bits </span></span><br><span class="line"><span class="keyword">endif</span>()           </span><br></pre></td></tr></table></figure>

<p><strong>cmake自定义变量</strong></p>
<p>主要有隐式定义和显式定义两种.</p>
<p>隐式定义：就是 PROJECT 指令,会隐式的定义_BINARY_DIR 和_SOURCE_DIR 两个变量。</p>
<p>显式定义：使用 SET 指令,就可以构建一个自定义变量了。</p>
<h1 id="Macro"><a href="#Macro" class="headerlink" title="Macro"></a>Macro</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">## utils.cmake, 定义 macro 宏，用于获取 Git 的 hash 及 分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get git hash</span></span><br><span class="line"><span class="keyword">macro</span>(get_git_hash _git_hash)   <span class="comment"># 宏的开始</span></span><br><span class="line">    <span class="keyword">find_package</span>(Git QUIET)     <span class="comment"># 查找Git，QUIET静默方式不报错</span></span><br><span class="line">    <span class="keyword">if</span>(GIT_FOUND)</span><br><span class="line">      <span class="keyword">execute_process</span>(          <span class="comment"># 执行一个子进程</span></span><br><span class="line">        <span class="keyword">COMMAND</span> <span class="variable">$&#123;GIT_EXECUTABLE&#125;</span> log -<span class="number">1</span> --pretty=format:%h <span class="comment"># 命令</span></span><br><span class="line">        OUTPUT_VARIABLE <span class="variable">$&#123;_git_hash&#125;</span>        <span class="comment"># 输出字符串存入变量</span></span><br><span class="line">        OUTPUT_STRIP_TRAILING_WHITESPACE    <span class="comment"># 删除字符串尾的换行符</span></span><br><span class="line">        ERROR_QUIET                         <span class="comment"># 对执行错误静默</span></span><br><span class="line">        WORKING_DIRECTORY                   <span class="comment"># 执行路径</span></span><br><span class="line">          <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endmacro</span>()                      <span class="comment"># 宏的结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get git branch</span></span><br><span class="line"><span class="keyword">macro</span>(get_git_branch _git_branch)   <span class="comment"># 宏的开始</span></span><br><span class="line">    <span class="keyword">find_package</span>(Git QUIET)     <span class="comment"># 查找Git，QUIET静默方式不报错</span></span><br><span class="line">    <span class="keyword">if</span>(GIT_FOUND)</span><br><span class="line">      <span class="keyword">execute_process</span>(          <span class="comment"># 执行一个子进程</span></span><br><span class="line">        <span class="keyword">COMMAND</span> <span class="variable">$&#123;GIT_EXECUTABLE&#125;</span> symbolic-ref --short -q HEAD</span><br><span class="line">        OUTPUT_VARIABLE <span class="variable">$&#123;_git_branch&#125;</span>        <span class="comment"># 输出字符串存入变量</span></span><br><span class="line">        OUTPUT_STRIP_TRAILING_WHITESPACE    <span class="comment"># 删除字符串尾的换行符</span></span><br><span class="line">        ERROR_QUIET                         <span class="comment"># 对执行错误静默</span></span><br><span class="line">        WORKING_DIRECTORY                   <span class="comment"># 执行路径</span></span><br><span class="line">          <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endmacro</span>()                      <span class="comment"># 宏的结束</span></span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(cmake/utils.cmake)</span><br><span class="line"><span class="comment">#  添加自定义cmake文件目录.</span></span><br><span class="line"><span class="comment"># list(APPEND CMAKE_MODULE_PATH $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/cmake)</span></span><br><span class="line"><span class="comment"># include(utils) # 使用 utils.cmake. 可替代上面 include</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span>(TIMESTAMP BUILD_TIMESTAMP <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;Build timestamp is $&#123;BUILD_TIMESTAMP&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(VERSION_MAJOR <span class="number">0</span>)</span><br><span class="line"><span class="keyword">set</span>(VERSION_MINOR <span class="number">0</span>)</span><br><span class="line"><span class="keyword">set</span>(VERSION_PATCH <span class="number">1</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;Version is $&#123;VERSION_MAJOR&#125; $&#123;VERSION_MINOR&#125; $&#123;VERSION_PATCH&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(GIT_HASH <span class="string">&quot;&quot;</span>)</span><br><span class="line">get_git_hash(GIT_HASH)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(GIT_BRANCH <span class="string">&quot;&quot;</span>)</span><br><span class="line">get_git_branch(GIT_BRANCH)</span><br></pre></td></tr></table></figure>



<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Get version info from git and pass it into compiled code</span></span><br><span class="line"><span class="keyword">execute_process</span>(<span class="keyword">COMMAND</span> git rev-parse --abbrev-ref HEAD</span><br><span class="line">    WORKING_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span></span><br><span class="line">    OUTPUT_VARIABLE GIT_BRANCH)</span><br><span class="line"><span class="keyword">string</span>(STRIP <span class="string">&quot;$&#123;GIT_BRANCH&#125;&quot;</span> GIT_BRANCH)</span><br><span class="line"></span><br><span class="line"><span class="keyword">execute_process</span>(<span class="keyword">COMMAND</span> git describe --tags --abbrev=<span class="number">0</span></span><br><span class="line">    WORKING_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span></span><br><span class="line">    OUTPUT_VARIABLE GIT_VERSION)</span><br><span class="line"><span class="keyword">string</span>(STRIP <span class="string">&quot;$&#123;GIT_VERSION&#125;&quot;</span> GIT_VERSION)</span><br><span class="line"></span><br><span class="line"><span class="keyword">execute_process</span>(<span class="keyword">COMMAND</span> date <span class="string">&quot;+%Y-%m-%d-%H:%M&quot;</span></span><br><span class="line">    OUTPUT_VARIABLE BUILD_TIME)</span><br><span class="line"><span class="keyword">string</span>(STRIP <span class="variable">$&#123;BUILD_TIME&#125;</span> BUILD_TIME)</span><br></pre></td></tr></table></figure>





<h1 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h1><p>创建 cmake 目录 ( 测试用，可任意指定目录名 ) <code>mkdir -p /home/ros/Documents/test/tutorial</code></p>
<p>创建 Tutorial.c 文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Tutorial.c*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">( <span class="type">int</span> argc , <span class="type">char</span> * argv [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span> ( <span class="string">&quot;Hello world!\n&quot;</span> );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建 CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> ( VERSION <span class="number">2.8</span>.<span class="number">3</span> ) <span class="comment"># 指定 CMake 版本</span></span><br><span class="line"><span class="keyword">project</span> ( Tutorial )</span><br><span class="line"> </span><br><span class="line"><span class="keyword">message</span> ( STATUS <span class="string">&quot;This is BINARY dir &quot;</span> <span class="variable">$&#123;Tutorial_BINARY_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">message</span> ( STATUS <span class="string">&quot;This is SOURCE dir &quot;</span> <span class="variable">$&#123;Tutorial_SOURCE_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">add_executable</span> ( Tutorial tutorial.c )</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内部构建。Tutorial_BINARY_DIR 与 Tutorial_SOURCE_DIR 相同，均为 /home/ros/Documents/test/tutorial</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /home/ros/Documents/test/tutorial</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make <span class="comment"># make VERBOSE=1 或 VERBOSE=1 make 可显示详细编译信息</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">外部构建</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /home/ros/Documents/test/tutorial</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make <span class="comment"># make VERBOSE=1 或 VERBOSE=1 make 可显示详细编译信息</span></span></span><br></pre></td></tr></table></figure>



<h1 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>.<span class="number">3</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"><span class="keyword">add_compile_options</span>(-std=c++<span class="number">11</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">set</span>(CMAKE_INSTALL_PREFIX <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/<span class="keyword">install</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#option(arm &quot;toggle for arm environment.&quot; OFF) </span></span><br><span class="line"><span class="keyword">set</span>(PLATFORM <span class="string">&quot;x86&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(arm <span class="keyword">OFF</span>)</span><br><span class="line"><span class="keyword">if</span>(arm)</span><br><span class="line"> <span class="keyword">set</span>(PLATFORM <span class="string">&quot;arm&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>(arm)</span><br><span class="line"> <span class="keyword">set</span>(PLATFORM <span class="string">&quot;x86&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>(arm)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">set</span>(BUILD_TYPE <span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(<span class="keyword">test</span> <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">test</span>)</span><br><span class="line"> <span class="keyword">set</span>(BUILD_TYPE <span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>(<span class="keyword">test</span>)</span><br><span class="line"> <span class="keyword">set</span>(IFLYTEK_TYPE <span class="string">&quot;release&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">set</span>(lib_path <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/lib/$&#123;BUILD_TYPE&#125;/$&#123;PLATFORM&#125;&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#add_definitions( -DTEST_LIBRARY_PATH=$&#123;lib_path&#125; )</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="keyword">include</span> <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span></span><br><span class="line">  <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;lib_path&#125;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">aux_source_directory</span>(./src DIR_SRCS) <span class="keyword">aux_source_directory</span>(./jsoncpp DIR_SRCS)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">set_source_files_properties</span>(<span class="variable">$&#123;DIR_SRCS&#125;</span> PROPERTIES LANGUAGE CXX)</span><br><span class="line"> </span><br><span class="line"><span class="comment">## Declare a cpp executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="keyword">test</span> <span class="variable">$&#123;DIR_SRCS&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="keyword">test</span> dl asound pthread ev)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">install</span>(TARGETS audio_capturer RUNTIME DESTINATION . )</span><br><span class="line"> </span><br><span class="line"><span class="keyword">install</span>(DIRECTORY res config udev modules system <span class="keyword">include</span> DESTINATION  . )</span><br><span class="line"> </span><br><span class="line"><span class="comment"># install 无法使用 * 等符号,可使用 file 来实现</span></span><br><span class="line"><span class="keyword">file</span>(GLOB libs <span class="string">&quot;$&#123;lib_path&#125;/*&quot;</span>)</span><br><span class="line"><span class="keyword">install</span>(FILES <span class="variable">$&#123;libs&#125;</span> DESTINATION  lib )</span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span>(GLOB script_files <span class="string">&quot;scripts/*.sh&quot;</span>)</span><br><span class="line"><span class="keyword">install</span>(PROGRAMS <span class="variable">$&#123;script_file&#125;</span></span><br><span class="line">    DESTINATION .)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake -Darm=1/0/ON/OFF/YES/NO/TRUE/FALSE/Y/N -Dtest=1/0/ON/OFF/YES/NO/TRUE/FALSE/Y/N</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编译工具</category>
        <category>CMake</category>
      </categories>
      <tags>
        <tag>编译工具</tag>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>CMake使用</title>
    <url>/2024/09/15/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/CMake/CMake%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="指定依赖库及增加宏定义"><a href="#指定依赖库及增加宏定义" class="headerlink" title="指定依赖库及增加宏定义"></a><strong>指定依赖库及增加宏定义</strong></h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(PkgConfig)</span><br><span class="line">pkg_check_modules(NEW_YAMLCPP yaml-cpp&gt;=<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">if</span>(NEW_YAMLCPP_FOUND)</span><br><span class="line">  <span class="keyword">add_definitions</span>(-DHAVE_NEW_YAMLCPP)</span><br><span class="line"><span class="keyword">endif</span>(NEW_YAMLCPP_FOUND)</span><br><span class="line">……</span><br><span class="line"><span class="keyword">target_link_libraries</span>(sanbot_app <span class="variable">$&#123;catkin_LIBRARIES&#125;</span> usb-<span class="number">1.0</span> yaml-cpp)</span><br></pre></td></tr></table></figure>

<p> 上例中，查找 yaml-cpp 库，并判断库的版本是否大于 0.5，若是，则通过 <code>add_definitions</code> 函数增加 <em><code>HAVE_NEW_YAML_CPP</code></em> 宏</p>
<h1 id="查找某个路径下的所有源文件"><a href="#查找某个路径下的所有源文件" class="headerlink" title="查找某个路径下的所有源文件"></a><strong>查找某个路径下的所有源文件</strong></h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span>(&lt; dir &gt; &lt; variable &gt;)</span><br></pre></td></tr></table></figure>



<h1 id="指定编译选项"><a href="#指定编译选项" class="headerlink" title="指定编译选项"></a><strong>指定编译选项</strong></h1><h2 id="指定-C-11"><a href="#指定-C-11" class="headerlink" title="指定 C++11"></a><strong>指定 C++11</strong></h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法一：</span></span><br><span class="line"><span class="keyword">add_definitions</span>(-std=c++<span class="number">11</span>)</span><br><span class="line"><span class="comment">#方法二：</span></span><br><span class="line"><span class="keyword">SET</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;</span>)</span><br><span class="line"><span class="comment">#方法三：</span></span><br><span class="line"><span class="keyword">add_compile_options</span>(-std=c++<span class="number">11</span>)</span><br><span class="line"><span class="comment">#方法四：</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br></pre></td></tr></table></figure>



<h1 id="msg-编译顺序"><a href="#msg-编译顺序" class="headerlink" title="msg 编译顺序"></a><strong>msg 编译顺序</strong></h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;PROJECT_NAME&#125;</span>_generate_headers</span><br></pre></td></tr></table></figure>

<p>可确保在编译包时，先根据 msg 目录生成头文件在编译，否则可能出现找不到头文件的错误。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_dependencies</span>(control_master_node <span class="variable">$&#123;PROJECT_NAME&#125;</span>_generate_headers <span class="variable">$&#123;PROJECT_NAME&#125;</span>_generate_messages_cpp)</span><br><span class="line"><span class="comment"># 或者：</span></span><br><span class="line"><span class="keyword">set</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span>_EXPORTED_TARGETS <span class="variable">$&#123;PROJECT_NAME&#125;</span>_generate_headers)</span><br></pre></td></tr></table></figure>



<h1 id="catkin-package"><a href="#catkin-package" class="headerlink" title="catkin_package()"></a><strong>catkin_package()</strong></h1><p><strong>该方法不能缺少，即便没有内容</strong>，也需指出，例如：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">catkin_package(</span><br><span class="line"><span class="comment">#  INCLUDE_DIRS include</span></span><br><span class="line"><span class="comment">#  LIBRARIES sanbot_navigation</span></span><br><span class="line"><span class="comment">#  CATKIN_DEPENDS roscpp rospy</span></span><br><span class="line"><span class="comment">#  DEPENDS system_lib</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>否则，可能出现 <code>CATKIN_PACKAGE_SHARE_DESTINATION</code> 等环境变量为空的问题</strong>。</p>
<p><strong>6、设置系统环境变量</strong></p>
<p>例如：PKG_CONFIG_PATH</p>
<p>首先会在模块路径中寻找 Find.cmake，这是查找库的一个典型方式。具体查找路径依次为 CMake：变量 ${<strong>CMAKE_MODULE_PATH</strong>} 中的所有目录。如果没有，然后再查看它自己的模块目录 &#x2F;share&#x2F;cmake-x.y&#x2F;Modules&#x2F;（例如：ubuntu上为 &#x2F;usr&#x2F;share&#x2F;cmake-3.5&#x2F;Modules&#x2F;）。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(ENV&#123;PKG_CONFIG_PATH&#125; <span class="string">&quot;/path_to_protobuf/lib/pkgconfig:$ENV&#123;PKG_CONFIG_PATH&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>



<h1 id="编译异常时退出"><a href="#编译异常时退出" class="headerlink" title="编译异常时退出"></a><strong>编译异常时退出</strong></h1><p>CMakeLists.txt 中没有 EXIT 类似的语法指令. 但可使用如下方式退出:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(FATAL_ERROR  <span class="string">&quot;Error&quot;</span>)</span><br></pre></td></tr></table></figure>



<h1 id="install-python-脚本"><a href="#install-python-脚本" class="headerlink" title="install python 脚本"></a><strong>install python 脚本</strong></h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">catkin_install_python(PROGRAMS scripts/<span class="keyword">test</span>.py</span><br><span class="line">            DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_SHARE_DESTINATION&#125;</span>/scripts) </span><br></pre></td></tr></table></figure>



<h1 id="catkin-add-gtest"><a href="#catkin-add-gtest" class="headerlink" title="catkin_add_gtest"></a><strong>catkin_add_gtest</strong></h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(CATKIN_ENABLE_TESTING)  </span><br><span class="line">	catkin_add_gtest(myUnitTest <span class="keyword">test</span>/utest.cpp) </span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>不要在 manifest 中声明依赖于 gtest。catkin_add_gtest()宏将引入必要的标志</li>
<li>如果想构建一个针对 gtest 的可执行文件，但是不声明它是一个单独的测试(例如，当想要这个可执行文件由 rostest 运行时)，使用catkin_add_executable_with_gtest()</li>
</ul>
<h1 id="deprecated-报错"><a href="#deprecated-报错" class="headerlink" title="deprecated 报错"></a><strong>deprecated 报错</strong></h1><p>在 CMakeLists.txt 中添加：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -Wno-error=deprecated-declarations&quot;</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>编译工具</category>
        <category>CMake</category>
      </categories>
      <tags>
        <tag>编译工具</tag>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS-Industrial</title>
    <url>/2024/09/28/%E6%9C%BA%E6%A2%B0%E8%87%82/ROS-I/ROS-Industrial/</url>
    <content><![CDATA[<img src="/2024/09/28/%E6%9C%BA%E6%A2%B0%E8%87%82/ROS-I/ROS-Industrial/ros_industrial_architecture.png" class="" title="ROS-Industrial Architecture">



<p>将不同供应商的机器人的控制与通用 ROS 框架集成，实现不同供应商的机器人之间的互操作性。</p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>ROS-Industrial</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>ROS-Industrial</tag>
      </tags>
  </entry>
  <entry>
    <title>接口规范</title>
    <url>/2024/09/28/%E6%9C%BA%E6%A2%B0%E8%87%82/ROS-I/%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>提供一些关于 ROS 工业机器人应提供哪些特定 ROS 接口的指南，以确保最大的兼容性。</p>
<h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><p>参考：<a href="https://github.com/ros-industrial/rep/blob/master/rep-I0006.rst">https://github.com/ros-industrial/rep/blob/master/rep-I0006.rst</a></p>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>关于初始化：</p>
<ul>
<li><p>ROS node 需自动初始化与机器人控制器的所有连接</p>
<ul>
<li>不应该出现需手动连接的需求</li>
</ul>
</li>
<li><p>机械臂端代码最好在控制器启动时自动运行</p>
</li>
</ul>
<p>关于通信：</p>
<ul>
<li>机械臂和 ROS 节点都需要处理通信断连情况<ul>
<li>ROS 节点端：<ul>
<li>以固定频率（如 1Hz）重连</li>
<li>断连后停止发送大部分消息</li>
<li>继续发送 state 消息，其中 <code>connected=false</code></li>
</ul>
</li>
<li>机械臂端：<ul>
<li>停止运动，并将驱动断电</li>
<li>重新初始化所有连接，等待新的连接请求</li>
</ul>
</li>
<li>如果接口不能直接检测到通信中断，则需要在机器人&#x2F;ROS双方之间实现心跳消息</li>
</ul>
</li>
</ul>
<h1 id="ROS-API"><a href="#ROS-API" class="headerlink" title="ROS API"></a>ROS API</h1><p>定义机器人应该提供的 ROS 接口。</p>
<h2 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h2><ul>
<li><code>robot_ip_address</code></li>
<li><code>robot_description</code>：URDF</li>
</ul>
<h2 id="State-Feedback"><a href="#State-Feedback" class="headerlink" title="State Feedback"></a>State Feedback</h2><p>通过 Topics 发布状态信息</p>
<ul>
<li><code>feedback_states</code><ul>
<li>ROS-I <a href="https://github.com/ros-industrial/industrial_core/blob/groovy-devel/industrial_robot_client/src/joint_trajectory_action.cpp">joint_trajectory_action</a> 订阅该主题数据来监测正在执行的运动</li>
</ul>
</li>
<li><code>joint_state</code>：关节位姿信息（及 速度&#x2F;力）</li>
<li><code>robot_status</code>：<a href="https://docs.ros.org/en/groovy/api/industrial_msgs/html/msg/RobotStatus.html">industrial_msgs&#x2F;RobotStatus</a> 类型</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std_msgs/Header header</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UNKNOWN: -1</span></span><br><span class="line"><span class="comment"> * MANUAL: 1 # 手动控制</span></span><br><span class="line"><span class="comment"> * AUTO: 2</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">industrial_msgs/RobotMode mode</span><br><span class="line">industrial_msgs/TriState e_stopped</span><br><span class="line">industrial_msgs/TriState drives_powered</span><br><span class="line">industrial_msgs/TriState motion_possible</span><br><span class="line">industrial_msgs/TriState in_motion</span><br><span class="line">industrial_msgs/TriState in_error</span><br><span class="line">int32 error_code</span><br></pre></td></tr></table></figure>





<h2 id="运动控制"><a href="#运动控制" class="headerlink" title="运动控制"></a>运动控制</h2><h3 id="订阅主题"><a href="#订阅主题" class="headerlink" title="订阅主题"></a>订阅主题</h3><ul>
<li><p><code>joint_path_command</code> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// trajectory_msgs/JointTrajectory 类型</span></span><br><span class="line"></span><br><span class="line">std_msgs/Header header</span><br><span class="line"><span class="comment">// 关节列表</span></span><br><span class="line">string[] joint_names </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 轨迹点链表。每个轨迹点包含：</span></span><br><span class="line"><span class="comment"> * 	float64[] positions # 该轨迹点时各关节的位姿</span></span><br><span class="line"><span class="comment"> * 	float64[] velocities # 该轨迹点上各关节的速度</span></span><br><span class="line"><span class="comment"> * 	float64[] accelerations # 该轨迹点上各关节的加速度</span></span><br><span class="line"><span class="comment"> *	float64[] effort # 该轨迹点上各关节的力</span></span><br><span class="line"><span class="comment"> *  duration time_from_start # 该轨迹点与轨迹起点间隔（即：多久运行到该轨迹点）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  time_from_stat 可替代速度参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">trajectory_msgs/JointTrajectoryPoint[] points</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>joint_command</code> ：消息类型为 <a href="http://docs.ros.org/en/api/trajectory_msgs/html/msg/JointTrajectoryPoint.html">trajectory_msgs&#x2F;JointTrajectoryPoint</a> 。流式下路径点</p>
</li>
</ul>
<h3 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h3><ul>
<li><p><code>stop_motion</code>：停止当前运动</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">industrial_msgs/ServiceReturnCode code</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>joint_path_command</code>：执行运动轨迹，与 <code>joint_path_command</code> 主题功能相同</p>
</li>
</ul>
<h3 id="Kinematics"><a href="#Kinematics" class="headerlink" title="Kinematics"></a>Kinematics</h3><p>为了实现实时运动规划和避撞，节点应该提供机器人特定的逆运动学求解器。ROS 提供了一个通用求解器，但它的运行速度太慢，无法进行避障路径规划。</p>
<p>这类求解器应该作为插件而不是服务与 ROS 集成，以避免昂贵的通信相关开销（可使用共享内存解决通信开销问题）。</p>
<h3 id="路径精度"><a href="#路径精度" class="headerlink" title="路径精度"></a>路径精度</h3><p>上面提到的运动接口没有指定遵循特定轨迹所需的精度。实现的路径精度水平将取决于特定机器人、控制器和 ROS 接口驱动程序的限制。</p>
<p>ROS 路径规划器和碰撞检查器使用<strong>高阶平滑</strong>路径点之间的轨迹。由机器人控制器执行的最终轨迹将遵循类似的“平滑”轨迹，“但可能与“理想的”计划轨迹不完全匹配”。出于这个原因，ROS 路径规划器在机器人模型中添加了一定数量的 padding，以考虑规划路径与实际路径之间的差异。这将导致无碰撞运动的概率非常高。增加 padding 的级别可以减少碰撞的概率。</p>
<p>路径规划器和机器人控制器之间的紧密集成将减少路径执行误差和碰撞填充要求。然而，这种集成水平超出了当前 ROS-Industrial 努力的范围，可能需要机器人特定的解决方案。</p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>ROS-Industrial</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>ROS-Industrial</tag>
      </tags>
  </entry>
  <entry>
    <title>Hand-Eye Calibration</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/Hand-Eye%20Calibration/</url>
    <content><![CDATA[<p>ROS noetic 版本添加。</p>
<h1 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a><strong>安装使用</strong></h1><p><a href="http://www.github.com/ros-planning/moveit_calibration">MoveIt Calibration</a> 包提供了进行手眼相机校准的插件和图形界面。可以对刚性安装在机器人底座架上的相机(eye_to_hand)和安装在末端执行器上的相机(eye_in_hand)进行校准。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> git@github.com:ros-planning/moveit_calibration.git</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosdep install -y --from-paths . --ignore-src --rosdistro melodic</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">catkin build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">source</span> devel/setup.sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch panda_moveit_config demo.launch</span></span><br></pre></td></tr></table></figure>

<p>RViz -&gt; 菜单栏 Panels -&gt; Add New Panel -&gt; moveit_calibration_gui -&gt; HandEyeCalibration.</p>
<p>然后创建一个视觉校准目标。该目标具有独特的模式，在图像数据中很容易识别，并且通过提供目标尺寸的测量，可以估计出目标在摄像机坐标系中的姿态。在进行手眼标定时，不需要知道目标的精确位置——只要目标静止在机器人的 base frame 内，手眼标定就可以从 5 个或更多位姿序列中估计出来。</p>
<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/Hand-Eye%20Calibration/image-20240917193008953.png" class="" title="image-20240917193008953">

<p>在 Target 标签中，输入 Target Params 创建目标。然后使用 “Save target” 按钮保存目标图像，并打印出图像。可以随意使用目标参数进行实验，以了解它们如何影响目标，但一定要记住打印的目标所使用的参数——需要输入相同的参数才能识别目标。</p>
<p>目标必须是平的，才能被摄像机可靠地定位。把它放在平坦的表面上就足够了，也可以安装在木板上。<strong>测量标记的宽度(其中一个黑色方块的外部尺寸)<strong>，以及</strong>标记之间的间隔距离</strong>。在 Target Params 部分的相应框中输入这些值，单位为米。同时，在 Image topic 和 CameraInfo主题 下拉菜单中选择合适的主题。</p>
<h1 id="几何背景"><a href="#几何背景" class="headerlink" title="几何背景"></a><strong>几何背景</strong></h1><p>HandEyeCalibration 插件的 Context 标签中，包含进行校准所需的几何信息。</p>
   <img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/Hand-Eye%20Calibration/image-20240917193046936.png" class="" title="image-20240917193046936">

<ul>
<li><p>Sensor configuration：</p>
</li>
<li><ul>
<li>Eye-in-hand</li>
<li>Eye-on-hand</li>
</ul>
</li>
<li><p>Sensor frame：camera optical frame(相机光学坐标系)</p>
</li>
<li><p>Object frame：标定目标的坐标系</p>
</li>
<li><p>End-effector frame：末端执行器坐标系</p>
</li>
<li><p>Robot base frame：机械臂基座坐标系</p>
</li>
</ul>
<p>FOV 部分在 RViz 中控制相机的视场渲染。要查看 FOV，添加 MarkerArray 显示，并将其设置为 &#x2F;rviz_visual_tools 主题</p>
<h1 id="采集数据"><a href="#采集数据" class="headerlink" title="采集数据"></a><strong>采集数据</strong></h1><p>需要采集几个 samples 以确保良好的校准。机器人运动学提供了机器人底座上的末端执行器的姿态,并根据上面所述,估计了摄像机坐标系中的标定目标。如果目标在机器人 base 坐标系的姿态是准确的,只有对摄像机目标变换的单一观察才能在末端执行器框架中恢复相机的姿势。直接的 camera-to-end-effector 转换相当于复合相机到目标到基线-到末端的执行器变换。然而,一个更好的选择是将这些信息与几个姿势结合起来,以消除在这个等式的基础框架中设定的目标,正如Kostas Daniilidis所描述的那样。</p>
<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/Hand-Eye%20Calibration/image-20240917193114714.png" class="" title="image-20240917193114714">
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>Low Level Controllers</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/Low%20Level%20Controllers/</url>
    <content><![CDATA[<p>​            <a href="#2334-1678883206395">1、YAML 配置</a>        </p>
<p>​            <a href="#2080-1678883124905">2、FollowJointTrajectory 控制器接口</a>        </p>
<p>​            <a href="#2471-1678883447459">3、GripperCommand 控制器接口</a>        </p>
<p>​            <a href="#9890-1678883508924">4、轨迹允许执行时间参数</a>        </p>
<p>​            <a href="#7253-1678883125014">5、创建 launch</a>        </p>
<p>​            <a href="#4245-1678883125074">6、Debugging</a>        </p>
<p>​            <a href="#4611-1678883125160">7、映射 &#x2F;joint_states 主题</a>        </p>
<p>​            <a href="#7621-1678928401128">8、轨迹执行管理器选项</a>        </p>
<p>通过机器人上的 controllers 来配置 MoveIt。假设机器人为手臂提供了 <strong>FollowJointTrajectory</strong> action service，(可选地)为夹手提供了GripperCommand 服务。如果机器人不提供这个功能，推荐使用 ROS control 框架，可以很容易地在硬件通信层添加这个功能。</p>
<h1 id="YAML-配置"><a href="#YAML-配置" class="headerlink" title="YAML 配置"></a><strong>YAML 配置</strong></h1><p>首先在 robot_moveit_config&#x2F;config 中创建 controllers.yaml，指定机器人的 controller 配置。例如：为 panda_arm 配置一个 FollowJointTrajectory action controller，并为 hand 配置 GripperCommand</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">controller_list:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">panda_arm_controller</span></span><br><span class="line">   <span class="attr">action_ns:</span> <span class="string">follow_joint_trajectory</span></span><br><span class="line">   <span class="attr">type:</span> <span class="string">FollowJointTrajectory</span></span><br><span class="line">   <span class="attr">default:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">joints:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">panda_joint1</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">panda_joint2</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">panda_joint3</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">panda_joint4</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">panda_joint5</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">panda_joint6</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">panda_joint7</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hand_controller</span></span><br><span class="line">   <span class="attr">action_ns:</span> <span class="string">gripper_action</span></span><br><span class="line">   <span class="attr">type:</span> <span class="string">GripperCommand</span></span><br><span class="line">   <span class="attr">default:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">parallel:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">joints:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">panda_finger_joint1</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">panda_finger_joint2</span></span><br></pre></td></tr></table></figure>



<h1 id="FollowJointTrajectory-控制器接口"><a href="#FollowJointTrajectory-控制器接口" class="headerlink" title="FollowJointTrajectory 控制器接口"></a><strong>FollowJointTrajectory 控制器接口</strong></h1><p>包含以下参数：</p>
<ul>
<li>name：该 controller 的名字</li>
<li>action_ns：该 action 的命名空间</li>
<li>type：该 action 的类型</li>
<li>default：默认控制器是 MoveIt 选择用于与特定关节集通信的主控制器</li>
<li>joints：该接口控制的关节</li>
</ul>
<h1 id="GripperCommand-控制器接口"><a href="#GripperCommand-控制器接口" class="headerlink" title="GripperCommand 控制器接口"></a><strong>GripperCommand 控制器接口</strong></h1><p>包含以下参数：</p>
<ul>
<li>name：该 controller 的名字</li>
<li>action_ns：该 action 的命名空间</li>
<li>type：该 action 的类型</li>
<li>default：默认控制器是 MoveIt 选择用于与特定关节集通信的主控制器</li>
<li>joints：该接口控制的关节</li>
<li>parallel：当设置这个值时，关节的大小应该是 2，命令将是两个关节的和</li>
</ul>
<h1 id="轨迹允许执行时间参数"><a href="#轨迹允许执行时间参数" class="headerlink" title="轨迹允许执行时间参数"></a><strong>轨迹允许执行时间参数</strong></h1><p>可选。对于每个控制器，可以选择设置 <strong>allowed_execution_duration_scaling</strong> 和 <strong>allowed_goal_duration_margin</strong> 参数。是全局参数 trajectory_execution&#x2F;allowed_execution_duration_scaling 和 trajectory_execution&#x2F;allowed_goal_duration_margin 的特定于控制器的重写。与全局值相反，特定于控制器的值不能在运行时动态重新配置。这些参数用于计算允许的轨迹执行持续时间，通过缩放预期执行持续时间并随后添加余量。如果超过这个持续时间，轨迹将被取消。控制器相关参数的设置方法如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">controller_list:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">arm_controller</span></span><br><span class="line">   <span class="attr">action_ns:</span> <span class="string">follow_joint_trajectory</span></span><br><span class="line">   <span class="attr">type:</span> <span class="string">FollowJointTrajectory</span></span><br><span class="line">   <span class="attr">allowed_execution_duration_scaling:</span> <span class="number">1.2</span></span><br><span class="line">   <span class="attr">allowed_goal_duration_margin:</span> <span class="number">0.5</span></span><br></pre></td></tr></table></figure>



<h1 id="创建-launch"><a href="#创建-launch" class="headerlink" title="创建 launch"></a><strong>创建 launch</strong></h1><p>创建 controller launch 文件(例如：robot_moveit_controller_manager.launch.xml)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Set the param that trajectory_execution_manager needs to find the controller plugin --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;moveit_controller_manager&quot;</span> <span class="attr">default</span>=<span class="string">&quot;moveit_simple_controller_manager/MoveItSimpleControllerManager&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;moveit_controller_manager&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg moveit_controller_manager)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- load controller_list --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find robot_moveit_config)/config/controllers.yaml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a><strong>Debugging</strong></h1><p>FollowJointTrajectory 和 GripperCommand 接口的命名空间为 &#x2F;name&#x2F;action_ns。上面例子中：</p>
<ul>
<li>&#x2F;panda_arm_controller&#x2F;follow_joint_trajectory&#x2F;goal</li>
<li>&#x2F;panda_arm_controller&#x2F;follow_joint_trajectory&#x2F;feedback</li>
<li>&#x2F;panda_arm_controller&#x2F;follow_joint_trajectory&#x2F;result</li>
<li>&#x2F;hand_controller&#x2F;gripper_action&#x2F;goal</li>
<li>&#x2F;hand_controller&#x2F;gripper_action&#x2F;feedback</li>
<li>&#x2F;hand_controller&#x2F;gripper_action&#x2F;result</li>
</ul>
<h1 id="映射-joint-states-主题"><a href="#映射-joint-states-主题" class="headerlink" title="映射 &#x2F;joint_states 主题"></a><strong>映射 &#x2F;joint_states 主题</strong></h1><p>当运行一个 move group 节点时，可能需要将 &#x2F;joint_states 主题重新映射到 &#x2F;robot&#x2F;joint_states，否则 MoveIt 将没有来自关节的反馈。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;moveit_ros_move_group&quot;</span> <span class="attr">type</span>=<span class="string">&quot;move_group&quot;</span> <span class="attr">name</span>=<span class="string">&quot;any_name&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">&quot;joint_states&quot;</span> <span class="attr">to</span>=<span class="string">&quot;robot/joint_states&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="轨迹执行管理器选项"><a href="#轨迹执行管理器选项" class="headerlink" title="轨迹执行管理器选项"></a><strong>轨迹执行管理器选项</strong></h1><p>在 trajectory_execution.launch.xml 中有几个选项可对 execution pipeline 的行为和安全检查进行调整。包含以下参数:</p>
<ul>
<li><strong>execution_duration_monitoring</strong>：为 false 时，轨迹耗费时间超过期望值时不会抛出异常</li>
<li><strong>allowed_goal_duration_margin</strong>：允许的超过预期时间的余量</li>
<li><strong>allowed_start_tolerance</strong>：检查轨迹起始点与机器人当前位姿是否匹配的关节角度公差。如果设置为0，将跳过等待机器人执行后停止</li>
</ul>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>Perception</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/Perception/</url>
    <content><![CDATA[<p>launch 目录的 <code>sensor_manager.launch.xml</code> 文件会加载该配置参数。需修改 <code>xxx_moveit_sensor_manager.launch.xml</code>，添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find xxx_moveit_config)/config/sensors.yaml&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>还需要配置 Octomap，在 <code>sensor_manager.launch</code> 中添加以下代码行:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;octomap_frame&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">value</span>=<span class="string">&quot;odom_combined&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;octomap_resolution&quot;</span> <span class="attr">type</span>=<span class="string">&quot;double&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;max_range&quot;</span> <span class="attr">type</span>=<span class="string">&quot;double&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5.0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="Obstacle-Avoidance"><a href="#Obstacle-Avoidance" class="headerlink" title="Obstacle Avoidance"></a><strong>Obstacle Avoidance</strong></h1><p>参考 moveit_tutorials 中的 <code>obstacle_avoidance_demo.launch</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_moveit_config)/launch/demo.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Play the rosbag that contains the pointcloud data --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;moveit_tutorials&quot;</span> <span class="attr">type</span>=<span class="string">&quot;bag_publisher_maintain_time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;point_clouds&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- If needed, broadcast static tf for robot root --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;tf2_ros&quot;</span> <span class="attr">type</span>=<span class="string">&quot;static_transform_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;to_panda&quot;</span> <span class="attr">args</span>=<span class="string">&quot;0 0 0 0 0 0  world panda_link0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;tf2_ros&quot;</span> <span class="attr">type</span>=<span class="string">&quot;static_transform_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;to_camera&quot;</span> <span class="attr">args</span>=<span class="string">&quot;0.115 0.427 0.570 0 0.2 1.92 camera_rgb_optical_frame world&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="检测并添加目标作为-Collision-目标"><a href="#检测并添加目标作为-Collision-目标" class="headerlink" title="检测并添加目标作为 Collision 目标"></a><strong>检测并添加目标作为 Collision 目标</strong></h2><p>演示从点云中提取圆柱体、计算相关值并将其作为碰撞对象添加到规划场景中的示例。</p>
<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/Perception/image-20240917194220440.png" class="" title="image-20240917194220440">

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch moveit_tutorials detect_and_add_cylinder_collision_object_demo.launch</span></span><br></pre></td></tr></table></figure>

<p><code>detect_and_add_cylinder_collision_object_demo.launch</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find moveit_tutorials)/doc/perception_pipeline/launch/obstacle_avoidance_demo.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Run the detection and adding cylinder node --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;moveit_tutorials&quot;</span> <span class="attr">type</span>=<span class="string">&quot;cylinder_segment&quot;</span> <span class="attr">name</span>=<span class="string">&quot;point_cloud_preprocessor&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>Time Parameterization</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/Time%20Parameterization/</url>
    <content><![CDATA[<p>MoveIt! 目前主要是一个 <strong>kinematic motion planning</strong></p>
<p> <strong>framework</strong> - 规划关节或末端执行器的位置，而不是速度或加速度。然而，MoveIt! 会<strong>利用后处理来时间参数化运动轨迹的速度和加速度值</strong>。</p>
<h1 id="Speed-Control"><a href="#Speed-Control" class="headerlink" title="Speed Control"></a><strong>Speed Control</strong></h1><h2 id="From-File"><a href="#From-File" class="headerlink" title="From File"></a><strong>From File</strong></h2><p>默认情况下，MoveIt! 将关节轨迹的速度和加速度设置为机器人的 URDF 或 joint_limits.yaml 中允许的默认值。</p>
<p>joint_limits.yaml 由 setup assistant 生成，最初是 URDF 中值的副本。如果需要特殊约束，用户可以将这些值修改为小于原始 URDF 值。特定的关节属性可以通过 <em>max_position</em>、<em>min_position</em>、<em>max_velocity</em>、<em>max_acceleration</em> 来改变。关节限制可以通过 <em>has_velocity_limits</em>、<em>has_acceleration_limits</em> 键来打开或关闭。</p>
<h2 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a><strong>运行时</strong></h2><p>运动轨迹的速度也可以在运行时修改。要在每个运动规划的基础上改变速度，可以设置两个缩放因子，如 MotionPlanRequest.msg 中所述。在 MoveIt MotionPlanning RViz 插件中也可以使用 spinbox 来设置这两个因子</p>
<ul>
<li><strong>max_velocity_scaling_factor</strong>：</li>
<li><strong>max_acceleration_scaling_factor</strong>：</li>
</ul>
<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/Time%20Parameterization/image-20240917194940845.png" class="" title="image-20240917194940845">



<h1 id="Time-Parameterization-Algorithms"><a href="#Time-Parameterization-Algorithms" class="headerlink" title="Time Parameterization Algorithms"></a><strong>Time Parameterization Algorithms</strong></h1><p>MoveIt 支持多种运动学轨迹后处理算法，以添加时间戳和速度&#x2F;加速度值。目前在 MoveIt 中有三个默认可用的选项:</p>
<ul>
<li><a href="https://github.com/ros-planning/moveit/blob/melodic-devel/moveit_core/trajectory_processing/src/iterative_time_parameterization.cpp"><strong>Iterative Parabolic Time Parameterization</strong></a>：即 iptp，调用 <strong>AddTimeParameterization</strong></li>
<li><a href="https://github.com/ros-planning/moveit/blob/melodic-devel/moveit_core/trajectory_processing/src/iterative_spline_parameterization.cpp"><strong>Iterative Spline Parameterization</strong></a>：即 isp，调用 <strong>AddIterativeSplineParameterization</strong></li>
<li><a href="https://github.com/ros-planning/moveit/blob/melodic-devel/moveit_core/trajectory_processing/src/time_optimal_trajectory_generation.cpp"><strong>Time-optimal Trajectory Generation</strong></a>：即 totg，调用 <strong>AddTimeOptimalParameterization</strong>。注意，需 melodic 及以上版本</li>
</ul>
<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/Time%20Parameterization/image-20240917195006177.png" class="" title="image-20240917195006177">



<h2 id="Iterative-Parabolic-Time-Parameterization"><a href="#Iterative-Parabolic-Time-Parameterization" class="headerlink" title="Iterative Parabolic Time Parameterization"></a><strong>Iterative Parabolic Time Parameterization</strong></h2><p>IPTP - 迭代抛物线时间参数化算法默认在 motion planning pipeline 中作为 planning request adapter 使用。尽管 MoveIt 使用的迭代抛物线时间参数化算法多年来已经被数百个机器人使用，但它存在已知的 bug。</p>
<p>使用 <strong>五次样条曲线</strong> 插补。</p>
<ul>
<li>moveit 默认使用规划器，可以实现速度和加速度平滑，但无法避免加速度的抖动，详细参考 <a href="https://github.com/ros-planning/moveit/issues/160">Improve time parameterization</a>。</li>
<li>该规划器<strong>等间距</strong>插补，平滑速度和加速度，适合用在低速精确轨迹控制下。</li>
</ul>
<h2 id="Iterative-Spline-Parameterization"><a href="#Iterative-Spline-Parameterization" class="headerlink" title="Iterative Spline Parameterization"></a><strong>Iterative Spline Parameterization</strong></h2><p>迭代样条参数化算法与 <a href="https://github.com/ros-planning/moveit/pull/382">pr382</a> 合并为解决这些问题的。虽然初步的实验很有希望，但在完全替代迭代抛物时间参数化算法之前，正在等待来自社区的更多反馈。</p>
<p><strong>三次样条曲线</strong>。</p>
<p>原理参考 <a href="https://github.com/ros-planning/moveit/pull/382">Improved IPTP by fitting a cubic spline</a></p>
<h2 id="Time-optimal-Trajectory-Generation"><a href="#Time-optimal-Trajectory-Generation" class="headerlink" title="Time-optimal Trajectory Generation"></a><strong>Time-optimal Trajectory Generation</strong></h2><p>在 <a href="https://github.com/ros-planning/moveit/pull/809">pr#809</a> 和 <a href="https://github.com/ros-planning/moveit/pull/1365">pr#1365</a> 中引入的时间最优轨迹生成算法可以产生非常平滑和连续的速度 profiles 轨迹。该方法是在原始轨迹上拟合路径段，然后从优化后的路径上采样新的路径点。这与严格的时间参数化方法不同，因为生成的路点可能在一定的误差范围内偏离原始轨迹。因此，<strong>在使用此方法时，可能需要额外的碰撞检查</strong>。</p>
<p>算法原理参考 <a href="http://www.golems.org/projects/traj.html">Time-Optimal Path Following (July 2012)</a></p>
<ul>
<li>该规划器输出轨迹为<strong>等时间间距</strong>（其余为等距）</li>
<li>该规划器在小间距下规划的速度和加速度较其余两种优化算法更加合理与平滑，<strong>在较大间距下三种规划算法效果差距不大</strong>，良好的规划间距会因机械臂参数的不同而有所不同</li>
<li><strong>在过小间距下(0.001s)插补，会出现运动规划不恒定</strong>，规划速度不平滑的现象，经测试在0.005s（不同机械臂不一致，同时需要根据控制器输出频率等确定）的规划间距下可以有较为稳定和理想的规划效果。</li>
</ul>
<p>切换到 TOTG 方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">default_planner_request_adapters/AddTimeParameterization</span><br><span class="line"># 替换为</span><br><span class="line">default_planner_request_adapters/AddTimeOptimalParameterization.</span><br></pre></td></tr></table></figure>



<p>planning_request_adapter_plugins&#x2F;src&#x2F;add_time_parameterization.cpp</p>
<p>C++ 解决方案参考：</p>
<ul>
<li><a href="https://groups.google.com/forum/#!topic/moveit-users/x5FwalM5ruk">https://groups.google.com/forum/#!topic/moveit-users/x5FwalM5ruk</a></li>
<li><a href="https://groups.google.com/forum/#!topic/moveit-users/MOoFxy2exT4">https://groups.google.com/forum/#!topic/moveit-users/MOoFxy2exT4</a></li>
</ul>
<p>moveit_commander 解决方案：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.robot= moveit_commander.RobotCommander()</span><br><span class="line"><span class="variable language_">self</span>.arm= <span class="variable language_">self</span>.robot.right_arm</span><br><span class="line">...</span><br><span class="line"><span class="variable language_">self</span>.arm.compute_cartesian_path(waypoints, <span class="number">0.01</span>, <span class="number">0.0</span>, <span class="literal">True</span>)</span><br><span class="line">plan= <span class="variable language_">self</span>.arm.retime_trajectory(<span class="variable language_">self</span>.robot.get_current_state(), plan, <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>Subframes</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/Subframes/</url>
    <content><![CDATA[<p>Subframes 是在 CollisionObjects 上定义的帧。可以用来定义放置在场景中的物体上的兴趣点，比如瓶子的开口、螺丝刀的尖端或螺钉的头部。它们可以用于计划和编写机器人指令，如“拿起瓶子，然后移动水龙头壶嘴下的开口”，或“拿起螺丝刀，然后把它放在螺钉头部上方”。</p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>URDF及SRDF</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/URDF%E5%8F%8ASRDF/</url>
    <content><![CDATA[<h1 id="URDF"><a href="#URDF" class="headerlink" title="URDF"></a><strong>URDF</strong></h1><p>MoveIt 以 URDF(通用机器人描述格式)开始，这是 ROS 中描述机器人的原生格式。</p>
<p>介绍确保生成的 URDF 可以与 MoveIt 一起使用的技巧。</p>
<h2 id="Joint-名中的特殊字符"><a href="#Joint-名中的特殊字符" class="headerlink" title="Joint 名中的特殊字符"></a><strong>Joint 名中的特殊字符</strong></h2><p>Joint 名不能包含以下特殊字符: -，[，]，(，)，</p>
<h2 id="Safety-Limits"><a href="#Safety-Limits" class="headerlink" title="Safety Limits"></a><strong>Safety Limits</strong></h2><p>除了机器人的关节限制外，一些 urdf 还设置了安全限制。下面是一个为 Panda head pan 关节指定的安全控制器的例子:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">safety_controller</span> <span class="attr">k_position</span>=<span class="string">&quot;100&quot;</span> <span class="attr">k_velocity</span>=<span class="string">&quot;1.5&quot;</span>     <span class="attr">soft_lower_limit</span>=<span class="string">&quot;-2.857&quot;</span> <span class="attr">soft_upper_limit</span>=<span class="string">&quot;2.857&quot;</span>/&gt;</span>  </span><br></pre></td></tr></table></figure>

<p> soft_lower_limit 字段和 soft_upper_limit 字段指定该关节的关节位置限制。MoveIt 将把这些限制与 URDF 中指定的关节的硬限制进行比较，并选择更保守的限制。</p>
<p>注意：如果将 soft_lower_limit 和 soft_upper_limit 设置为 0.0，可能导致关节无法运动。</p>
<h2 id="碰撞检查"><a href="#碰撞检查" class="headerlink" title="碰撞检查"></a><strong>碰撞检查</strong></h2><p>MoveIt 使用 URDF 中指定的 mesh 进行碰撞检查。URDF 允许指定两组 mesh 分别用于可视化和碰撞检查。一般来说，<strong>可视化 mesh 可以很详细，但是 collision mesh 应该不那么详细</strong>。Mesh 中三角形的数量会影响机器人连接碰撞检查所需的时间。整个机器人的三角形数量应该在几千的数量级。</p>
<h1 id="SRDF-概述"><a href="#SRDF-概述" class="headerlink" title="SRDF 概述"></a><strong>SRDF 概述</strong></h1><p>Semantic Robot Description Format，描述机器人的语义信息。</p>
<p>这种格式的目的是表示 URDF 文件中没有的关于机器人的信息，但它对各种应用程序都很有用。其目的是包含具有语义方面的信息。</p>
<p><strong>SRDF 补充了 URDF</strong>，并指定了：</p>
<ul>
<li>joint groups</li>
<li>default robot configurations</li>
<li>additional collision checking information</li>
<li>additional transforms</li>
</ul>
<p>推荐使用 MoveIt! Setup Assistant 生成 SRDF 文件。</p>
<h2 id="Virtual-Joints"><a href="#Virtual-Joints" class="headerlink" title="Virtual Joints"></a><strong>Virtual Joints</strong></h2><p>URDF 中定义机器人上真实存在的关节信息，SRDF 中则可通过  添加虚拟关节。该功能常用语将机器人的 root joint 与 world 坐标系相关联。</p>
<h2 id="Passive-Joints"><a href="#Passive-Joints" class="headerlink" title="Passive Joints"></a><strong>Passive Joints</strong></h2><p>即：被动关节。指不受直接控制的关节。例如：差动机器人的从动轮。它们在 SRDF 中单独指定，以确保运动规划或 control pipelines 中的不同组件知道无法直接控制此关节。</p>
<h2 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a><strong>Groups</strong></h2><p>MoveIt! 的核心概念，MoveIt! 始终作用于特定 group。MoveIt! 中所有运动都是基于特定的 group 进行规划，每次规划只会控制该规划组包含的关节，而保持其余的关节不变。Group 是关节和 link 的集合。可以通过以下方式定义 group：</p>
<ul>
<li><p><strong>Collection of joints</strong>：通过一组 joints 来定义一个 group。每个 joint 的所有 <strong>child link</strong> 都自动包含在组中</p>
</li>
<li><p><strong>Collection of links</strong>：通过一组 links 来定义一个 group。所有 link 的 <strong>parent joint</strong> 都会被自动添加到 group 中</p>
</li>
<li><p><strong>Serial Chain</strong>：通过串联 link 来定义一个 group，用 base link 和 tip link 来指定 serial chain</p>
</li>
<li><ul>
<li>base link 是该 chain 中的第一个 joint 的 parent link</li>
<li>tip link 是该 chain 中最后一个 joint 的 child link</li>
</ul>
</li>
<li><p><strong>Collection of Sub-Groups</strong>：一个 group 也可以是多个其它 group 的集合。如：定义左臂规划组 left_arm、右臂规划组 right_arm，并在 arms 组中包含这两个 group，实现同时控制左右臂</p>
</li>
</ul>
<h2 id="End-Effectors"><a href="#End-Effectors" class="headerlink" title="End-Effectors"></a><strong>End-Effectors</strong></h2><p>末端执行器是一种特殊的 group，区分与一般的 group。</p>
<p><strong>定义末端执行器规划组时，要保证和与之关联的规划组没有共有的 link</strong>。</p>
<h2 id="Self-Collisions"><a href="#Self-Collisions" class="headerlink" title="Self-Collisions"></a><strong>Self-Collisions</strong></h2><p>默认自碰撞矩阵生成器（Setup Assistant 的一部分）搜索机器人上可以安全地从碰撞检查中禁用的 links 对，从而减少运动规划处理时间。当这些links 对处于以下状态时将被禁用：</p>
<ul>
<li><strong>Always</strong> in collision：始终处于碰撞中</li>
<li><strong>Never</strong> in collision：从不碰撞</li>
<li>in collision in the robot’s <strong>Default</strong> position</li>
<li><strong>Adjacent</strong> links：相邻 links</li>
</ul>
<p>MoveIt! Setup Assistant 中可以通过 Default Self-Collision Matrix Generator 来检测机器人的自碰撞。</p>
<p>采样密度指定了多少个随机的机器人位置来检查自碰撞。较高的密度需要更多的计算时间，而较低的密度有更大的可能性禁用不应该禁用的对。默认值是10000 个冲突检查。冲突检查是并行进行的，以减少处理时间。</p>
<h2 id="Robot-Poses"><a href="#Robot-Poses" class="headerlink" title="Robot Poses"></a><strong>Robot Poses</strong></h2><p>SRDF 中还可以存储机器人的固定位姿，并指定 id，方便程序中调用。例如：SRDF 的一个典型示例是定义机械手的 HOME 位置。</p>
<h1 id="SRDF-语法"><a href="#SRDF-语法" class="headerlink" title="SRDF 语法"></a><strong>SRDF 语法</strong></h1><p>SRDF 文件中的标签</p>
<ul>
<li><p>&lt;**robot**&gt;：</p>
</li>
<li><ul>
<li><p>Purpose：SRDF 文档的 根 标签。所有信息均包含在该标签内</p>
</li>
<li><p>Elements：</p>
</li>
<li><ul>
<li><code>&lt;group&gt;</code></li>
<li><code>&lt;end_effector&gt;</code></li>
<li><code>&lt;virtual_joint&gt;</code></li>
<li><code>&lt;group_state&gt;</code></li>
<li><code>&lt;disable_collisions&gt;</code></li>
</ul>
</li>
<li><p>Attributes：</p>
</li>
<li><ul>
<li><strong>name</strong>：<strong>robot 名字，需与对应的 URDF 文件中同名</strong></li>
</ul>
</li>
</ul>
</li>
<li><p><strong><code>&lt;group&gt;</code></strong></p>
</li>
<li><ul>
<li><p>Purpose：一组 joints 和 links 的表示。这可以用于指定规划的自由度，定义手臂，末端执行器等</p>
</li>
<li><p>Elements：</p>
</li>
<li><ul>
<li><code>&lt;link&gt;</code></li>
<li><code>&lt;joint&gt;</code></li>
<li><code>&lt;chain&gt;</code></li>
<li><code>&lt;group&gt;</code></li>
</ul>
</li>
<li><p>Attributes：</p>
</li>
<li><ul>
<li>name：group 名字</li>
</ul>
</li>
<li><p>注意：当一个组不包含任何其它 tags，只包含 name 属性时，被假定为具有该名称的组(在前面定义)的引用</p>
</li>
</ul>
</li>
<li><p>&lt;**group_state**&gt;</p>
</li>
<li><ul>
<li><p>Purpose：根据 joint value 为特定组定义命名状态。这对于定义像 “folded arms” 这样的状态很有用</p>
</li>
<li><p>Elements：<code>&lt;joint&gt;</code></p>
</li>
<li><p>Attributes：</p>
</li>
<li><ul>
<li>name：状态名</li>
<li>group：该状态对应的 group 名</li>
</ul>
</li>
<li><p>注意：为了使组状态有效，组中的所有 joint 都必须将其值指定为 group state 的一部分</p>
</li>
</ul>
</li>
<li><p>&lt;**link**&gt;</p>
</li>
<li><ul>
<li><p>Purpose：指定  中的 link</p>
</li>
<li><p>Elements：None</p>
</li>
<li><p>Attributes：</p>
</li>
<li><ul>
<li>name：必须与 URDF 中的 link 名一致</li>
</ul>
</li>
<li><p>注意：当一个 link 包含在一个组中时，相应的父关节(如果存在)也是如此</p>
</li>
</ul>
</li>
<li><p>&lt;**joint**&gt;</p>
</li>
<li><ul>
<li><p>Purpose：指定  中的 joint</p>
</li>
<li><p>Elements：None</p>
</li>
<li><p>Attributes：</p>
</li>
<li><ul>
<li><strong>name</strong>：<strong>必须与 URDF 中的 joint 名一致</strong></li>
<li>value：只出现在  中，浮点值。当一个 joint 包含多个自由度时，其 value 属性是一个由空格分隔的浮点值数组</li>
</ul>
</li>
<li><p>注意：当一个 joint 包含在一个组中时，相应的子 link 也应包含</p>
</li>
</ul>
</li>
<li><p>&lt;**chain**&gt;</p>
</li>
<li><ul>
<li><p>Purpose：表示机器人的 kinematic chain </p>
</li>
<li><p>Elements：None</p>
</li>
<li><p>Attributes：</p>
</li>
<li><ul>
<li>base_link：该 chain 的 root link</li>
<li>tip_link：该 chain 的最后一个 link</li>
</ul>
</li>
<li><p>注意：根据 chain 中的 links，隐式的定义了 chain 中的 joints。与 chain 对应的 joints 是 chain 中 links 的父关节</p>
</li>
</ul>
</li>
<li><p>&lt;**end_effector**&gt;</p>
</li>
<li><ul>
<li><p>Purpose：描述末端执行器的信息</p>
</li>
<li><p>Elements：None</p>
</li>
<li><p>Attributes：</p>
</li>
<li><ul>
<li>name：末端执行器的名字</li>
<li>group：包含组成末端执行器的 links(和 joints)的组名</li>
<li>parent_link：末端执行器连接到的 link 名</li>
<li>parent_group：是包含 parent_link 的关节组的名称。例如，如果有一个 arm group、一个 hand group 和一个包含手臂和手部关节的 arm_hand 组，那么手部末端执行器的 parent_group 将是 arm</li>
</ul>
</li>
<li><p>注意：根据 chain 中的 links，隐式的定义了 chain 中的 joints。与 chain 对应的 joints 是 chain 中 links 的父关节</p>
</li>
</ul>
</li>
<li><p>&lt;**virtual_joint**&gt;</p>
</li>
<li><ul>
<li><p>Purpose：添加非真实存在于机器人上的关节，定义机器人 link 与外部参照系(相对于机器人而言被认为是固定的)之间的虚关节。通常，会利用虚拟关节将机器人的根关节 root joint 和 world 坐标系关联起来</p>
</li>
<li><p>Elements：None</p>
</li>
<li><p>Attributes：</p>
</li>
<li><ul>
<li><p>name：虚拟关节的名字</p>
</li>
<li><p>child_link：连接机器人与环境的 link 的名称</p>
</li>
<li><p>parent_frame：虚拟关节的父 link</p>
</li>
<li><p>type：虚拟关节的类型。可以是</p>
</li>
<li><ul>
<li><strong>fixed</strong>(0 DOF)</li>
<li><strong>floating</strong>(all 6 DOF)</li>
<li><strong>planar</strong>(3 DOF: x,y,yaw)</li>
</ul>
</li>
</ul>
</li>
<li><p>注意：当  标签用于通过名称引用现有关节时，也可以使用已定义的虚拟关节的名称</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Define how the robot moves in its environment, </span></span><br><span class="line"><span class="comment">    i.e., connection to robot&#x27;s root link --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">virtual_joint</span> <span class="attr">name</span>=<span class="string">&quot;world_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;planar&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">parent_frame</span>=<span class="string">&quot;some fixed frame&quot;</span> <span class="attr">child_link</span>=<span class="string">&quot;robot&#x27;s root link name&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    </p>
<ul>
<li><p>&lt;**disable_collisions**&gt;</p>
</li>
<li><ul>
<li><p>Purpose：默认情况下，假定机器人的任何 link 都可能与机器人中的任何其他 link 发生冲突。此标签禁用指定 link 对之间的冲突检查</p>
</li>
<li><p>Elements：None</p>
</li>
<li><p>Attributes：</p>
</li>
<li><ul>
<li><p>link1：</p>
</li>
<li><p>link2：</p>
</li>
<li><p>reason：可选。这两个 link 之间的冲突应该被禁用的原因</p>
</li>
<li><ul>
<li>Adjacent：相邻 link</li>
<li>Never：永远不会发送碰撞</li>
<li>Default：在默认位姿会产生碰撞</li>
<li>Always：总是碰撞</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>&lt;**passive_joint**&gt;</p>
</li>
<li><ul>
<li><p>Purpose：被动关节。默认情况下，假定由 URDF 指定的所有 joints 都处于活动状态，并且它们的状态可用于规划。如果某些关节不是这种情况，则可以使用此标签来指定。即：不受直接控制的关节，例如移动底盘的从动轮</p>
</li>
<li><p>Elements：None</p>
</li>
<li><p>Attributes：</p>
</li>
<li><ul>
<li>name：passive joint 的名字</li>
</ul>
</li>
</ul>
</li>
<li><p>&lt;**link_sphere_approximation**&gt;</p>
</li>
<li><ul>
<li><p>Purpose：此标记指定一组保守地近似 link 的球体。球体在与 URDF 中的碰撞几何体相同的坐标系中指定。该标签是可选的。如果 link 没有出现任何标记，则将使用包含 link 的碰撞几何图形的单个球体。如果标签出现并且仅包含半径为 0 的球体，则在进行基于球体的碰撞检测时将不考虑该链接</p>
</li>
<li><p>Elements：sphere</p>
</li>
<li><p>Attributes：</p>
</li>
<li><ul>
<li>link：近似为球体的 link</li>
</ul>
</li>
</ul>
</li>
<li><p>&lt;**sphere**&gt;</p>
</li>
<li><ul>
<li><p>Purpose：定义一个球体</p>
</li>
<li><p>Elements：None</p>
</li>
<li><p>Attributes：</p>
</li>
<li><ul>
<li>center：3个用空格分隔的浮点值，指定球体中心 x y z</li>
<li>radius：球体半径，浮点值</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>mesh filter</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/mesh%20filter/</url>
    <content><![CDATA[<p>MoveIt 的网格过滤器功能从点云中移除机器人的几何形状。如果机器人的手臂在深度传感器的视图中，则与手臂相关的点将从点云中减去。</p>
<p>这是通过将原始点云、机器人的变换(\tf)和机器人的 URDF 作为输入来实现的。然后，过滤器发布一个修改后的点云，该点云不包含与当前机器人状态重叠的点。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch moveit_tutorials mesh_filter.launch</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>moveit-API</title>
    <url>/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-API/</url>
    <content><![CDATA[<p>设置 Planner</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">move_group_interface::MoveGroup <span class="title">group</span><span class="params">(<span class="string">&quot;manipulator&quot;</span>)</span></span>; </span><br><span class="line"><span class="comment">// See ompl_planning.yaml for a complete list</span></span><br><span class="line">group.<span class="built_in">setPlannerId</span>(<span class="string">&quot;SBLkConfigDefault&quot;</span>);   </span><br></pre></td></tr></table></figure>

<p>或在 ompl_planning.yaml 相应规划组中设置 default_planner_config 参数</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">manipulator:</span></span><br><span class="line">  <span class="attr">planner_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SBLkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ESTkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LBKPIECEkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">BKPIECEkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">KPIECEkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RRTkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RRTConnectkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RRTstarkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">TRRTkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">PRMkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">PRMstarkConfigDefault</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">projection_evaluator:</span> <span class="string">joints(shoulder_pan_joint,shoulder_lift_joint)</span></span><br><span class="line">  <span class="attr">longest_valid_segment_fraction:</span> <span class="number">0.05</span></span><br><span class="line">  <span class="attr">default_planner_config:</span> <span class="string">ESTkConfigDefault</span></span><br></pre></td></tr></table></figure>





<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>MoveIt! 接口在 move_group 中。</p>
<p>MoveGroupCommander 类常用的api列表如下：</p>
<ul>
<li>get_current_joint_values</li>
<li>set_joint_value_target</li>
<li>get_current_pose</li>
<li>set_pose_target</li>
<li><strong>plan</strong></li>
<li><strong>compute_cartesian_path</strong></li>
<li>go</li>
<li>set_max_velocity_scaling_factor</li>
<li>set_max_acceleration_scaling_factor</li>
<li>execute</li>
<li>set_path_constraints</li>
</ul>
<p>示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">import</span> moveit_commander</span><br><span class="line"><span class="keyword">import</span> moveit_msgs.msg</span><br><span class="line"><span class="keyword">import</span> geometry_msgs.msg</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Starting tutorial setup&quot;</span></span><br><span class="line">moveit_commander.roscpp_initialize(sys.argv)</span><br><span class="line">rospy.init_node(<span class="string">&#x27;move_group_python_interface_tutorial&#x27;</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">robot = moveit_commander.RobotCommander()</span><br><span class="line">group = moveit_commander.MoveGroupCommander(<span class="string">&quot;gauss_arm&quot;</span>)</span><br><span class="line"><span class="comment"># group = robot.get_group(&quot;gauss_arm&quot;) # 方法二</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;planning frame Reference frame: %s&quot;</span> % group.get_planning_frame()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;end effector Reference frame: %s&quot;</span> % group.get_end_effector_link()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Printing robot state&quot;</span></span><br><span class="line"><span class="built_in">print</span> robot.get_current_state()</span><br><span class="line"></span><br><span class="line">group_variable_values = group.get_current_joint_values()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Joint values: &quot;</span>, group_variable_values</span><br><span class="line"></span><br><span class="line">group_variable_values[<span class="number">0</span>] = <span class="number">1.0</span></span><br><span class="line">group.set_joint_value_target(group_variable_values)</span><br><span class="line"></span><br><span class="line">plan = group.plan()</span><br><span class="line">rospy.sleep(<span class="number">5</span>)</span><br><span class="line">group.go(wait=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;move complete&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="computeCartesianPath"><a href="#computeCartesianPath" class="headerlink" title="computeCartesianPath"></a><strong>computeCartesianPath</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> moveit::planning_interface::MoveGroupInterface::<span class="built_in">computeCartesianPath</span>(</span><br><span class="line">    <span class="type">const</span> std::vector&lt; geometry_msgs::Pose &gt; &amp;waypoints, </span><br><span class="line">    <span class="type">double</span> eef_step, <span class="type">double</span> jump_threshold, </span><br><span class="line">    moveit_msgs::RobotTrajectory &amp;trajectory, </span><br><span class="line">    <span class="type">bool</span> avoid_collisions=<span class="literal">true</span>, </span><br><span class="line">    moveit_msgs::MoveItErrorCodes *error_code=<span class="literal">NULL</span></span><br><span class="line">)</span><br><span class="line">    </span><br><span class="line"><span class="type">double</span> moveit::planning_interface::MoveGroupInterface::<span class="built_in">computeCartesianPath</span>(</span><br><span class="line">    <span class="type">const</span> std::vector&lt; geometry_msgs::Pose &gt; &amp; 	waypoints,</span><br><span class="line">    <span class="type">double</span> 	eef_step,</span><br><span class="line">    <span class="type">double</span> 	jump_threshold,</span><br><span class="line">    moveit_msgs::RobotTrajectory &amp; 	trajectory,</span><br><span class="line">    <span class="type">const</span> moveit_msgs::Constraints &amp; 	path_constraints,</span><br><span class="line">    <span class="type">bool</span> 	avoid_collisions = <span class="literal">true</span>,</span><br><span class="line">    moveit_msgs::MoveItErrorCodes * 	error_code = <span class="literal">NULL</span> </span><br><span class="line">)	 </span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><strong>waypoints</strong>：轨迹要经过的中间点，waypoints 的参考坐标系由 <a href="https://docs.ros.org/en/kinetic/api/moveit_ros_planning_interface/html/classmoveit_1_1planning__interface_1_1MoveGroupInterface.html#aac4b6f7cb3c3257001ccbd64c6d14f46">setPoseReferenceFrame()</a> 函数指定</li>
<li><strong>eef_step</strong>：step 大小，单位 m</li>
<li><strong>jump_threshold</strong>：机器人 configuration space 中的距离变化不允许超过 jump_threshold（这是为了防止 IK solutions 中的 “jumps”）。<strong>规划的关节连续运动之间的距离 &lt;&#x3D; Jump_threshold*关节位置的平均距离&#x2F;绝对距离</strong>，其作用是在笛卡尔空间运动时，<strong>避免在经过奇异点时产生关节的抖动</strong>(经过奇异点时，某个轴会短时间内高速运动从而产生抖动)</li>
<li><strong>trajectory</strong>：</li>
<li><strong>avoid_collisions</strong>：默认为 true，开启碰撞检测，若规划的轨迹无法避免碰撞，则执行失败</li>
<li><strong>error_code</strong>：</li>
</ul>
<p>返回值 fraction：返回一个介于 0.0 和 1.0 之间的值，表示规划出的路径的分数。出错时返回 -1.0。该返回值描述规划后的运动轨迹在路点列表中的覆盖率。如果 fraction 小于 1 则有路点没有进入规划；等于1的话就可以用execute()执行了。</p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>moveit-Gazebo</title>
    <url>/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-Gazebo/</url>
    <content><![CDATA[<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-Gazebo/image-20240901210956306.png" class="" title="image-20240901210956306">



<p>Driver 负责 moveit 与真实机器人或者 gazebo 通信，真实机器人与 gazebo 仿真的区别就在于：</p>
<ul>
<li>gazebo仿真时，这个 Driver 已经帮我们集成好了，只需要写个 controller 就可以实现通信！</li>
<li>真实机器人中，如果是自己开发的机器人，这个 Driver 需要自己去编写</li>
</ul>
<p>将 MoveIt 下发的 FollowJointTrajectory 比喻成插头，把机器人接收轨迹 Joint Trajectory Controller 和状态反馈部分 Joint State Controller 比喻成插座，所以需要两个控制器来实现 moveit 和 gazebo 的联合仿真。</p>
<p>主要需要构建 ros_control 和 Moveit! 的桥梁：</p>
<ul>
<li>先在 <strong>Moveit! 端配置关节和传感器接口 yaml 文件</strong>，将其加载到 rviz 端</li>
<li>再在<strong>机器人端配置 ros_control 和接口 yaml 文件，将机器人加载到 Gazebo</strong>（通常在 gazebo 包中，并通过 spawn 加载）  </li>
<li>最后同时启动加载有 ros_control 的 Gazebo 和加载有 Moveit 的 rviz，达到联合仿真的目的</li>
</ul>
<p>需要注意：<strong>保持 gazebo 中加载的 controllers 和 moveit 中的 controllers 命名空间一致</strong>。</p>
<p>包含文件：</p>
<ul>
<li>_bringup_moveit.launch：最顶层</li>
<li>_gazebo_world.launch：加载仿真环境</li>
<li>_gazebo_states.launch：启动 joint state controller</li>
<li>_trajectory_controller.launch：启动插补运算的 controller</li>
<li>_moveit_controller_manager.launch.xml：启动 follow joint trajectory 功能</li>
</ul>
<p><strong>1）MoveIt! 端配置</strong></p>
<p>首先确保已通过 MoveIt! Setup Assiant 完成了配置。</p>
<p>测试指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch ROBOT_moveit_config demo.launch</span></span><br></pre></td></tr></table></figure>



<p><strong>1.1）创建控制器配置文件</strong></p>
<p>创建控制器配置文件。在生成的 MoveIt! config 包的 config 目录下创建 controllers.yaml 文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">joint_state_controller:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">joint_state_controller/JointStateController</span></span><br><span class="line">  <span class="attr">publish_rate:</span> <span class="number">50</span></span><br><span class="line"><span class="attr">controller_list:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;$(arg prefix)gen3_joint_trajectory_controller&quot;</span></span><br><span class="line">    <span class="attr">action_ns:</span> <span class="string">follow_joint_trajectory</span></span><br><span class="line">    <span class="attr">default:</span> <span class="literal">True</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">FollowJointTrajectory</span></span><br><span class="line">    <span class="attr">joints:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$(arg</span> <span class="string">prefix)joint_1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$(arg</span> <span class="string">prefix)joint_2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$(arg</span> <span class="string">prefix)joint_3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$(arg</span> <span class="string">prefix)joint_4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$(arg</span> <span class="string">prefix)joint_5</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$(arg</span> <span class="string">prefix)joint_6</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$(arg</span> <span class="string">prefix)joint_7</span></span><br></pre></td></tr></table></figure>



<p><strong>1.2）修改启动文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;dof&quot;</span> <span class="attr">default</span>=<span class="string">&quot;7&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">default</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Set the param that trajectory_execution_manager needs to find the controller plugin --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;moveit_controller_manager&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">value</span>=<span class="string">&quot;moveit_simple_controller_manager/MoveItSimpleControllerManager&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- The rest of the params are specific to this plugin --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find gen3_move_it_config)/config/$(arg dof)dof/controllers.yaml&quot;</span> <span class="attr">subst_value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>





<p><strong>2）示例一</strong></p>
<p>① 创建 URDF 模型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;&lt;robot_name&gt;&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;world&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;fixed&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;world&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 为 Joints 添加传动 Transmissions for ROS Control --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;transmission_block&quot;</span> <span class="attr">params</span>=<span class="string">&quot;joint_name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">&quot;tran1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;joint_name&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">&quot;motor1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mechanicalReduction</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mechanicalReduction</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">actuator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;joint1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;joint2&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;joint3&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;joint4&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;joint5&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;joint6&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 添加 Gazebo 控制器插件 ros_control plugin --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;gazebo_ros_control&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_control.so&quot;</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">robotNamespace</span>&gt;</span>/robot_name<span class="tag">&lt;/<span class="name">robotNamespace</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">robotSimType</span>&gt;</span>gazebo_ros_control/DefaultRobotHWSim<span class="tag">&lt;/<span class="name">robotSimType</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">legacyModeNS</span>&gt;</span>true<span class="tag">&lt;/<span class="name">legacyModeNS</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>② 生成配置文件</p>
<p>参考 MoveIt! Setup Assistant 使用说明生成配置文件。</p>
<p>③ 创建 Gazebo 功能包</p>
<p>新建 _gazebo 包，在其中创建 config 和 launch 目录</p>
<p>添加 config 文件</p>
<ul>
<li><strong>robot_name_gazebo_joint_states.yaml</strong>：定义 joint_state_controller，用于监控机器人实时状态</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">robot_name:</span></span><br><span class="line">  <span class="comment"># Publish all joint states -----------------------------------</span></span><br><span class="line">  <span class="attr">joint_state_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">joint_state_controller/JointStateController</span></span><br><span class="line">    <span class="attr">publish_rate:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure>



<ul>
<li><strong>robot_name_trajectory_control.yaml</strong>：用于明确控制器接口接收哪些关节信息，需与 URDF 模型对应，此外，还包含每个关节的 PID 参数</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">robot_name:</span></span><br><span class="line">  <span class="attr">arm_joint_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&quot;position_controllers/JointTrajectoryController&quot;</span></span><br><span class="line">    <span class="attr">joints:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint5</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint6</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">gains:</span></span><br><span class="line">      <span class="attr">joint1:</span>   &#123;<span class="attr">p:</span> <span class="number">1000.0</span>, <span class="attr">i:</span> <span class="number">0.0</span>, <span class="attr">d:</span> <span class="number">0.1</span>, <span class="attr">i_clamp:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">      <span class="attr">joint2:</span>   &#123;<span class="attr">p:</span> <span class="number">1000.0</span>, <span class="attr">i:</span> <span class="number">0.0</span>, <span class="attr">d:</span> <span class="number">0.1</span>, <span class="attr">i_clamp:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">      <span class="attr">joint3:</span>   &#123;<span class="attr">p:</span> <span class="number">1000.0</span>, <span class="attr">i:</span> <span class="number">0.0</span>, <span class="attr">d:</span> <span class="number">0.1</span>, <span class="attr">i_clamp:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">      <span class="attr">joint4:</span>   &#123;<span class="attr">p:</span> <span class="number">1000.0</span>, <span class="attr">i:</span> <span class="number">0.0</span>, <span class="attr">d:</span> <span class="number">0.1</span>, <span class="attr">i_clamp:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">      <span class="attr">joint5:</span>   &#123;<span class="attr">p:</span> <span class="number">1000.0</span>, <span class="attr">i:</span> <span class="number">0.0</span>, <span class="attr">d:</span> <span class="number">0.1</span>, <span class="attr">i_clamp:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">      <span class="attr">joint6:</span>   &#123;<span class="attr">p:</span> <span class="number">1000.0</span>, <span class="attr">i:</span> <span class="number">0.0</span>, <span class="attr">d:</span> <span class="number">0.1</span>, <span class="attr">i_clamp:</span> <span class="number">0.0</span>&#125;</span><br></pre></td></tr></table></figure>



<p>创建 launch 文件</p>
<ul>
<li>robot_name_trajectory_controller.launch：将 <strong>robot_name_trajectory_control.yaml</strong> 配置文件加载到参数服务器，再调用 spawner 根据参数文件内容启动 <strong>arm_joint_controller</strong>，该控制器完成每个轴的插补运算，并让每个轴运动</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find robot_name_gazebo)/config/robot_name_trajectory_control.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;arm_controller_spawner&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;controller_manager&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawner&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">ns</span>=<span class="string">&quot;/robot_name&quot;</span> <span class="attr">args</span>=<span class="string">&quot;arm_joint_controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>robot_name_gazebo_states.launch：加载 joint_state_controller</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将关节控制器的配置参数加载到参数服务器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find robot_name_gazebo)/config/robot_name_gazebo_joint_states.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;joint_controller_spawner&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;controller_manager&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawner&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">ns</span>=<span class="string">&quot;/robot_name&quot;</span> <span class="attr">args</span>=<span class="string">&quot;joint_state_controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 运行robot_state_publisher节点，发布tf  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">&quot;/joint_states&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/robot_name/joint_states&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>robot_name_gazebo_world.launch</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- these are the arguments you can pass this launch file, for example paused:=true --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;paused&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;use_sim_time&quot;</span> <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;gui&quot;</span> <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;headless&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- We resume the logic in empty_world.launch --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find gazebo_ros)/launch/empty_world.launch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg debug)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;gui&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg gui)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;paused&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg paused)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;use_sim_time&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg use_sim_time)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;headless&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg headless)&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Load the URDF into the ROS Parameter Server --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro --inorder &#x27;$(find robot_name_description)/urdf/robot_name.xacro&#x27;&quot;</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;urdf_spawner&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;gazebo_ros&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawn_model&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">args</span>=<span class="string">&quot;-urdf -model robot_name -param robot_description&quot;</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>robot_name_bringup_moveit.launch</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- Launch Gazebo  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find robot_name_gazebo)/launch/robot_name_gazebo_world.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ros_control arm launch file --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find robot_name_gazebo)/launch/robot_name_gazebo_states.launch&quot;</span> /&gt;</span>   </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ros_control trajectory control dof arm launch file --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find robot_name_gazebo)/launch/robot_name_trajectory_controller.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- moveit launch file --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find robot_name_moveit_config)/launch/moveit_planning_execution.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>moveit-MoveGroup-Interface</title>
    <url>/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-MoveGroup-Interface/</url>
    <content><![CDATA[<p>在 MoveIt 中，最简单的用户接口通过 <code>MoveGroupInterface</code> 类。为用户可能想要执行的大多数操作提供了易于使用的功能，特别是设置关节或位姿目标、创建运动计划、移动机器人、将对象添加到环境中以及从机器人上附加&#x2F;分离对象。此接口通过 ROS topic、service 和 action <strong>与 MoveGroup 节点进行通信</strong>。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch panda_moveit_config demo.launch</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch moveit_tutorials move_group_interface_tutorial.launch</span></span><br></pre></td></tr></table></figure>

<p>启动后，点击 rviz 中 RvizVisualToolsGui 插件中的 next 依次执行设定好的操作</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-MoveGroup-Interface/image-20240901201434422.png" class="" title="image-20240901201434422">

<p>包括：</p>
<ul>
<li>移动到前方的 pose goal</li>
<li>移动到侧方的 joint goal</li>
<li>在保持末端执行器水平的同时，将手臂移回到一个新的 pose goal</li>
<li>沿着笛卡尔路径移动手臂(一个下、右、上、左的三角形)</li>
</ul>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-MoveGroup-Interface/image-20240901201518555.png" class="" title="image-20240901201518555">

<ul>
<li>在手臂右侧添加一个 box object</li>
<li>移动到 pose goal，同时避开障碍物(box object)</li>
</ul>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-MoveGroup-Interface/image-20240901201556603.png" class="" title="image-20240901201556603">

<ul>
<li>object 附着到 wrist(颜色切换为 紫&#x2F;橙&#x2F;绿)</li>
<li>object 从 wrist 断开(颜色变回绿色)</li>
<li>移除 box object</li>
</ul>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a><strong>源码分析</strong></h1><p><code>moveit_tutorials/doc/move_group_interface/src</code></p>
<p>MoveIt! 对 planning groups 进行操作，并将他们存储在 JointModelGroup 类对象中。在 MoveIt! 中，术语 planning groups 和 joint model group 可以互换使用</p>
<p>① 设置</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// panda_arm 为要操作的 planning group. panda_arm 已在 moveit setup assistant 中设置 </span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> std::string PLANNING_GROUP = <span class="string">&quot;panda_arm&quot;</span>; moveit::<span class="function">planning_interface::MoveGroupInterface <span class="title">move_group</span><span class="params">(PLANNING_GROUP)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 将使用 PlanningSceneInterface 类对象来添加/删除 collision object </span></span><br><span class="line">moveit::planning_interface::PlanningSceneInterface planning_scene_interface; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 raw pointers 引用 planning group 以提高性能.  </span></span><br><span class="line"><span class="comment">// 注意：planning groups 和 joint model group 可以互换使用 </span></span><br><span class="line"><span class="type">const</span> robot_state::JointModelGroup* joint_model_group =    move_group.<span class="built_in">getCurrentState</span>()-&gt;<span class="built_in">getJointModelGroup</span>(PLANNING_GROUP); </span><br></pre></td></tr></table></figure>

<p>​           </p>
<p>② 可视化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MoveItVisualTools 提供了许多在 RViz 中可视化对象、机器人和轨迹的功能，</span></span><br><span class="line"><span class="comment">// 以及调试工具，如 step-by-step introspection of a script</span></span><br><span class="line"><span class="keyword">namespace</span> rvt = rviz_visual_tools;</span><br><span class="line"><span class="function">moveit_visual_tools::MoveItVisualTools <span class="title">visual_tools</span><span class="params">(<span class="string">&quot;panda_link0&quot;</span>)</span></span>;</span><br><span class="line">visual_tools.<span class="built_in">deleteAllMarkers</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 远程控制是一种内省工具，允许用户通过 RViz 中的按钮/快捷键逐步执行高级脚本</span></span><br><span class="line">visual_tools.<span class="built_in">loadRemoteControl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// RViz提供了许多类型的标记，该例中将使用文本、柱面和球体</span></span><br><span class="line">Eigen::Isometry3d text_pose = Eigen::Isometry3d::<span class="built_in">Identity</span>();</span><br><span class="line">text_pose.<span class="built_in">translation</span>().<span class="built_in">z</span>() = <span class="number">1.75</span>; <span class="comment">// 位于机器人上方</span></span><br><span class="line">visual_tools.<span class="built_in">publishText</span>(text_pose, <span class="string">&quot;MoveGroupInterface Demo&quot;</span>, </span><br><span class="line">                            rvt::WHITE, rvt::XLARGE);</span><br><span class="line">                            </span><br><span class="line"><span class="comment">// Batch publishing 用于减少发送到 RViz 的大块可视化消息的数量            </span></span><br><span class="line">visual_tools.<span class="built_in">trigger</span>();   </span><br></pre></td></tr></table></figure>



<p>③ 获取基础信息                    </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取机器人的参考坐标系</span></span><br><span class="line"><span class="built_in">ROS_INFO_NAMED</span>(<span class="string">&quot;tutorial&quot;</span>, <span class="string">&quot;Planning frame: %s&quot;</span>, </span><br><span class="line">                move_group.<span class="built_in">getPlanningFrame</span>().<span class="built_in">c_str</span>());</span><br><span class="line">                </span><br><span class="line"><span class="comment">// 获取 group 中 end-effort link 的名字</span></span><br><span class="line"><span class="built_in">ROS_INFO_NAMED</span>(<span class="string">&quot;tutorial&quot;</span>, <span class="string">&quot;End effector link: %s&quot;</span>, </span><br><span class="line">                move_group.<span class="built_in">getEndEffectorLink</span>().<span class="built_in">c_str</span>());                </span><br><span class="line">                </span><br><span class="line"><span class="comment">// 获取所有 groups</span></span><br><span class="line"><span class="built_in">ROS_INFO_NAMED</span>(<span class="string">&quot;tutorial&quot;</span>, <span class="string">&quot;Available Planning Groups:&quot;</span>);</span><br><span class="line">std::<span class="built_in">copy</span>(move_group.<span class="built_in">getJointModelGroupNames</span>().<span class="built_in">begin</span>(), </span><br><span class="line">            move_group.<span class="built_in">getJointModelGroupNames</span>().<span class="built_in">end</span>(),</span><br><span class="line">              std::<span class="built_in">ostream_iterator</span>&lt;std::string&gt;(std::cout, <span class="string">&quot;, &quot;</span>));  </span><br></pre></td></tr></table></figure>



<p>④ 启动 demo</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">visual_tools.<span class="built_in">prompt</span>(<span class="string">&quot;Press &#x27;next&#x27; in the RvizVisualToolsGui window </span></span><br><span class="line"><span class="string">                    to start the demo&quot;</span>);</span><br></pre></td></tr></table></figure>

<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-MoveGroup-Interface/image-20240901202128716.png" class="" title="image-20240901202128716">



<p>⑤ Planning to a pose goal</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">geometry_msgs::Pose target_pose1;</span><br><span class="line">target_pose<span class="number">1.</span>orientation.w = <span class="number">1.0</span>;</span><br><span class="line">target_pose<span class="number">1.</span>position.x = <span class="number">0.28</span>;</span><br><span class="line">target_pose<span class="number">1.</span>position.y = <span class="number">-0.2</span>;</span><br><span class="line">target_pose<span class="number">1.</span>position.z = <span class="number">0.5</span>;</span><br><span class="line">move_group.<span class="built_in">setPoseTarget</span>(target_pose1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用规划器进行规划并可视化。注意，此处只是在计划，不会实际移动机器人</span></span><br><span class="line">moveit::planning_interface::MoveGroupInterface::Plan my_plan;</span><br><span class="line"><span class="type">bool</span> success = (move_group.<span class="built_in">plan</span>(my_plan) == </span><br><span class="line">        moveit::planning_interface::MoveItErrorCode::SUCCESS);</span><br><span class="line"></span><br><span class="line"><span class="built_in">ROS_INFO_NAMED</span>(<span class="string">&quot;tutorial&quot;</span>, <span class="string">&quot;Visualizing plan 1 (pose goal) %s&quot;</span>, </span><br><span class="line">        success ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;FAILED&quot;</span>);</span><br></pre></td></tr></table></figure>

<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-MoveGroup-Interface/image-20240901202152977.png" class="" title="image-20240901202152977">



<p>⑥ 可视化规划的轨迹</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ROS_INFO_NAMED</span>(<span class="string">&quot;tutorial&quot;</span>, <span class="string">&quot;Visualizing plan 1 as trajectory line&quot;</span>);</span><br><span class="line">visual_tools.<span class="built_in">publishAxisLabeled</span>(target_pose1, <span class="string">&quot;pose1&quot;</span>);</span><br><span class="line">visual_tools.<span class="built_in">publishText</span>(text_pose, <span class="string">&quot;Pose Goal&quot;</span>, rvt::WHITE, rvt::XLARGE);</span><br><span class="line">visual_tools.<span class="built_in">publishTrajectoryLine</span>(my_plan.trajectory_, joint_model_group);</span><br><span class="line">visual_tools.<span class="built_in">trigger</span>();</span><br><span class="line">visual_tools.<span class="built_in">prompt</span>(</span><br><span class="line">    <span class="string">&quot;Press &#x27;next&#x27; in the RvizVisualToolsGui window to continue the demo&quot;</span>);</span><br></pre></td></tr></table></figure>



<p>⑦ 运动到 pose goal</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Uncomment below line when working with a real robot. 阻塞函数，需要控制器</span></span><br><span class="line"><span class="comment">    处于活动状态并上报轨迹执行成功 */</span></span><br><span class="line"><span class="comment">/* move_group.move(); */</span></span><br></pre></td></tr></table></figure>



<p>⑧ planning to a joint-space goal</p>
<p>关节空间的规划结果会覆盖掉上文的工作空间规划结果</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取机器人当前状态. RobotState 中包含当前的 position/velocity/acceleration</span></span><br><span class="line">moveit::core::RobotStatePtr current_state = move_group.<span class="built_in">getCurrentState</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前 group 的所有 joint 值</span></span><br><span class="line">std::vector&lt;<span class="type">double</span>&gt; joint_group_positions;</span><br><span class="line">current_state-&gt;<span class="built_in">copyJointGroupPositions</span>(</span><br><span class="line">        joint_model_group, joint_group_positions);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改某个 joint 的值, 然后进行规划</span></span><br><span class="line">joint_group_positions[<span class="number">0</span>] = <span class="number">-1.0</span>;  <span class="comment">// radians</span></span><br><span class="line">move_group.<span class="built_in">setJointValueTarget</span>(joint_group_positions);</span><br><span class="line">success = (move_group.<span class="built_in">plan</span>(my_plan) == </span><br><span class="line">        moveit::planning_interface::MoveItErrorCode::SUCCESS);</span><br><span class="line"><span class="built_in">ROS_INFO_NAMED</span>(<span class="string">&quot;tutorial&quot;</span>, <span class="string">&quot;Visualizing plan 2 (joint space goal) %s&quot;</span>, </span><br><span class="line">        success ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;FAILED&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轨迹可视化</span></span><br><span class="line">visual_tools.<span class="built_in">deleteAllMarkers</span>();</span><br><span class="line">visual_tools.<span class="built_in">publishText</span>(text_pose, <span class="string">&quot;Joint Space Goal&quot;</span>, </span><br><span class="line">    rvt::WHITE, rvt::XLARGE);</span><br><span class="line">visual_tools.<span class="built_in">publishTrajectoryLine</span>(my_plan.trajectory_, joint_model_group);</span><br><span class="line">visual_tools.<span class="built_in">trigger</span>();</span><br><span class="line">visual_tools.<span class="built_in">prompt</span>(</span><br><span class="line">    <span class="string">&quot;Press &#x27;next&#x27; in the RvizVisualToolsGui window to continue the demo&quot;</span>);</span><br></pre></td></tr></table></figure>



<p>⑨ 路径约束下的规划</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义路径约束</span></span><br><span class="line">moveit_msgs::OrientationConstraint ocm;</span><br><span class="line">ocm.link_name = <span class="string">&quot;panda_link7&quot;</span>;</span><br><span class="line">ocm.header.frame_id = <span class="string">&quot;panda_link0&quot;</span>;</span><br><span class="line">ocm.orientation.w = <span class="number">1.0</span>;</span><br><span class="line">ocm.absolute_x_axis_tolerance = <span class="number">0.1</span>;</span><br><span class="line">ocm.absolute_y_axis_tolerance = <span class="number">0.1</span>;</span><br><span class="line">ocm.absolute_z_axis_tolerance = <span class="number">0.1</span>;</span><br><span class="line">ocm.weight = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 group 设置约束</span></span><br><span class="line">moveit_msgs::Constraints test_constraints;</span><br><span class="line">test_constraints.orientation_constraints.<span class="built_in">push_back</span>(ocm);</span><br><span class="line">move_group.<span class="built_in">setPathConstraints</span>(test_constraints);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为规划组设定新的起始位姿，且该新位姿要满足路径约束</span></span><br><span class="line"><span class="function">robot_state::RobotState <span class="title">start_state</span><span class="params">(*move_group.getCurrentState())</span></span>;</span><br><span class="line">geometry_msgs::Pose start_pose2;</span><br><span class="line">start_pose<span class="number">2.</span>orientation.w = <span class="number">1.0</span>;</span><br><span class="line">start_pose<span class="number">2.</span>position.x = <span class="number">0.55</span>;</span><br><span class="line">start_pose<span class="number">2.</span>position.y = <span class="number">-0.05</span>;</span><br><span class="line">start_pose<span class="number">2.</span>position.z = <span class="number">0.8</span>;</span><br><span class="line"><span class="comment">// 如果start_pose2对应的规划组joint_model_group是 chain,且有解算器可用，</span></span><br><span class="line"><span class="comment">// 则可通过 moveit 中自带的逆运动学求解器进行计算得到规划组中各关节位置值，</span></span><br><span class="line"><span class="comment">// 前提是设置的start_pose2要在运动模型的参考系中</span></span><br><span class="line">start_state.<span class="built_in">setFromIK</span>(joint_model_group, start_pose2);</span><br><span class="line"><span class="comment">// 由于改变了规划组的起始位姿，需要将设定的位姿作为规划组的启动状态</span></span><br><span class="line">move_group.<span class="built_in">setStartState</span>(start_state);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规划</span></span><br><span class="line">move_group.<span class="built_in">setPoseTarget</span>(target_pose1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用约束进行规划可能会很慢，因为每个样本都必须调用反向运动学求解器，</span></span><br><span class="line"><span class="comment">// 因此，将规划时间从默认的 5 秒增加到 10 秒，以保证规划器完成规划</span></span><br><span class="line">move_group.<span class="built_in">setPlanningTime</span>(<span class="number">10.0</span>);</span><br><span class="line"></span><br><span class="line">success = (move_group.<span class="built_in">plan</span>(my_plan) == </span><br><span class="line">    moveit::planning_interface::MoveItErrorCode::SUCCESS);</span><br><span class="line"><span class="built_in">ROS_INFO_NAMED</span>(<span class="string">&quot;tutorial&quot;</span>, <span class="string">&quot;Visualizing plan 3 (constraints) %s&quot;</span>, </span><br><span class="line">    success ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;FAILED&quot;</span>);</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 规划完成，清除约束</span></span><br><span class="line">move_group.<span class="built_in">clearPathConstraints</span>();    </span><br></pre></td></tr></table></figure>



<p>⑩ Cartesian Paths</p>
<p>可以通过指定一组末端执行器要经过的 waypoints 来直接规划一条笛卡尔路径。注意，从上面的新 start state 开始。初始姿态(start state)不需要添加到路径点列表中，但添加它可以帮助可视化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将起始位姿 start_pose2、三个waypoints 依次添加到 waypoints 数组中</span></span><br><span class="line">std::vector&lt;geometry_msgs::Pose&gt; waypoints;</span><br><span class="line">waypoints.<span class="built_in">push_back</span>(start_pose2);</span><br><span class="line"></span><br><span class="line">geometry_msgs::Pose target_pose3 = start_pose2;</span><br><span class="line"></span><br><span class="line">target_pose<span class="number">3.</span>position.z -= <span class="number">0.2</span>;</span><br><span class="line">waypoints.<span class="built_in">push_back</span>(target_pose3);  <span class="comment">// down</span></span><br><span class="line"></span><br><span class="line">target_pose<span class="number">3.</span>position.y -= <span class="number">0.2</span>;</span><br><span class="line">waypoints.<span class="built_in">push_back</span>(target_pose3);  <span class="comment">// right</span></span><br><span class="line"></span><br><span class="line">target_pose<span class="number">3.</span>position.z += <span class="number">0.2</span>;</span><br><span class="line">target_pose<span class="number">3.</span>position.y += <span class="number">0.2</span>;</span><br><span class="line">target_pose<span class="number">3.</span>position.x -= <span class="number">0.2</span>;</span><br><span class="line">waypoints.<span class="built_in">push_back</span>(target_pose3);  <span class="comment">// up and left</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 笛卡尔运动经常需要慢一些的动作，如接近和撤退抓握动作。</span></span><br><span class="line"><span class="comment">// 此例中，演示了如何通过每个关节的最大速度的比例因子来降低机器人手臂的速度。</span></span><br><span class="line"><span class="comment">// 注意，这不是末端执行器点的速度。</span></span><br><span class="line">move_group.<span class="built_in">setMaxVelocityScalingFactor</span>(<span class="number">0.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对笛卡尔路径以 1cm 的分辨率进行插值，因此将笛卡尔平移最大步长设置为 0.01</span></span><br><span class="line">moveit_msgs::RobotTrajectory trajectory;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> jump_threshold = <span class="number">0.0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eef_step = <span class="number">0.01</span>;</span><br><span class="line"><span class="comment">// 计算笛卡尔路径. </span></span><br><span class="line"><span class="comment">//   waypoints: 路径需经过的点</span></span><br><span class="line"><span class="comment">//   eef_step: 步长</span></span><br><span class="line"><span class="comment">//   jump_threshold: 机器人位姿空间中距离的变化的阈值。操作真实硬件时，若将该</span></span><br><span class="line"><span class="comment">//      参数设置为 0，可能会导致冗余连接发送大量不可预测的动作</span></span><br><span class="line"><span class="type">double</span> fraction = move_group.<span class="built_in">computeCartesianPath</span>(waypoints, eef_step, </span><br><span class="line">                                    jump_threshold, trajectory);</span><br><span class="line"><span class="built_in">ROS_INFO_NAMED</span>(<span class="string">&quot;tutorial&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Visualizing plan 4 (Cartesian path) (%.2f%% acheived)&quot;</span>, </span><br><span class="line">    fraction * <span class="number">100.0</span>);</span><br></pre></td></tr></table></figure>



<p>⑪ 添加&#x2F;删除及attach&#x2F;deattach object</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个碰撞目标</span></span><br><span class="line">moveit_msgs::CollisionObject collision_object;</span><br><span class="line">collision_object.header.frame_id = move_group.<span class="built_in">getPlanningFrame</span>();</span><br><span class="line">collision_object.id = <span class="string">&quot;box1&quot;</span>; <span class="comment">// 设置 ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向环境中添加 box</span></span><br><span class="line">shape_msgs::SolidPrimitive primitive;</span><br><span class="line">primitive.type = primitive.BOX;</span><br><span class="line">primitive.dimensions.<span class="built_in">resize</span>(<span class="number">3</span>);</span><br><span class="line">primitive.dimensions[<span class="number">0</span>] = <span class="number">0.4</span>;</span><br><span class="line">primitive.dimensions[<span class="number">1</span>] = <span class="number">0.1</span>;</span><br><span class="line">primitive.dimensions[<span class="number">2</span>] = <span class="number">0.4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义该 box 的位姿</span></span><br><span class="line">geometry_msgs::Pose box_pose;</span><br><span class="line">box_pose.orientation.w = <span class="number">1.0</span>;</span><br><span class="line">box_pose.position.x = <span class="number">0.4</span>;</span><br><span class="line">box_pose.position.y = <span class="number">-0.2</span>;</span><br><span class="line">box_pose.position.z = <span class="number">1.0</span>;</span><br><span class="line">collision_object.primitives.<span class="built_in">push_back</span>(primitive);</span><br><span class="line">collision_object.primitive_poses.<span class="built_in">push_back</span>(box_pose);</span><br><span class="line">collision_object.operation = collision_object.ADD;</span><br><span class="line"></span><br><span class="line">std::vector&lt;moveit_msgs::CollisionObject&gt; collision_objects;</span><br><span class="line">collision_objects.<span class="built_in">push_back</span>(collision_object);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加到 world 中</span></span><br><span class="line"><span class="built_in">ROS_INFO_NAMED</span>(<span class="string">&quot;tutorial&quot;</span>, <span class="string">&quot;Add an object into the world&quot;</span>);</span><br><span class="line">planning_scene_interface.<span class="built_in">addCollisionObjects</span>(collision_objects);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规划一条避开障碍物的轨迹</span></span><br><span class="line">move_group.<span class="built_in">setStartState</span>(*move_group.<span class="built_in">getCurrentState</span>());</span><br><span class="line">geometry_msgs::Pose another_pose;</span><br><span class="line">another_pose.orientation.w = <span class="number">1.0</span>;</span><br><span class="line">another_pose.position.x = <span class="number">0.4</span>;</span><br><span class="line">another_pose.position.y = <span class="number">-0.4</span>;</span><br><span class="line">another_pose.position.z = <span class="number">0.9</span>;</span><br><span class="line">move_group.<span class="built_in">setPoseTarget</span>(another_pose);</span><br><span class="line">success = (move_group.<span class="built_in">plan</span>(my_plan) == </span><br><span class="line">    moveit::planning_interface::MoveItErrorCode::SUCCESS);</span><br><span class="line"><span class="built_in">ROS_INFO_NAMED</span>(<span class="string">&quot;tutorial&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Visualizing plan 5 (pose goal move around cuboid) %s&quot;</span>, </span><br><span class="line">    success ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;FAILED&quot;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// attach 碰撞目标到机器人</span></span><br><span class="line"><span class="built_in">ROS_INFO_NAMED</span>(<span class="string">&quot;tutorial&quot;</span>, <span class="string">&quot;Attach the object to the robot&quot;</span>);</span><br><span class="line">move_group.<span class="built_in">attachObject</span>(collision_object.id);</span><br><span class="line"></span><br><span class="line"><span class="comment">// deattch</span></span><br><span class="line"><span class="built_in">ROS_INFO_NAMED</span>(<span class="string">&quot;tutorial&quot;</span>, <span class="string">&quot;Detach the object from the robot&quot;</span>);</span><br><span class="line">move_group.<span class="built_in">detachObject</span>(collision_object.id);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除碰撞目标</span></span><br><span class="line"><span class="built_in">ROS_INFO_NAMED</span>(<span class="string">&quot;tutorial&quot;</span>, <span class="string">&quot;Remove the object from the world&quot;</span>);</span><br><span class="line">std::vector&lt;std::string&gt; object_ids;</span><br><span class="line">object_ids.<span class="built_in">push_back</span>(collision_object.id);</span><br><span class="line">planning_scene_interface.<span class="built_in">removeCollisionObjects</span>(object_ids);</span><br></pre></td></tr></table></figure>



<h1 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a><strong>约束条件</strong></h1><h2 id="moveit-msgs-Constraints"><a href="#moveit-msgs-Constraints" class="headerlink" title="moveit_msgs::Constraints"></a><strong>moveit_msgs::Constraints</strong></h2><p>包含 方向约束、关节约束、位置约束、可见性约束。</p>
<p>例一：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 构建目标点约束. 使用关节约束</span></span><br><span class="line"> moveit_msgs::Constraints pose_goal =</span><br><span class="line">      kinematic_constraints::<span class="built_in">constructGoalConstraints</span>(</span><br><span class="line">              <span class="string">&quot;panda_link8&quot;</span>,  <span class="comment">// link名称</span></span><br><span class="line">              pose, <span class="comment">// 目标点坐标</span></span><br><span class="line">              tolerance_pose, <span class="comment">// 位置允许误差</span></span><br><span class="line">              tolerance_angle <span class="comment">// 转角允许误差</span></span><br><span class="line">      ); </span><br><span class="line">req.group_name = PLANNING_GROUP;            <span class="comment">//设置运动规划组名称</span></span><br><span class="line">req.goal_constraints.<span class="built_in">push_back</span>(pose_goal);     </span><br></pre></td></tr></table></figure>



<p>其中，</p>
<ul>
<li><strong>tolerance_pose</strong>：与 PositionConstraint 的目标区域关联的球体的维度。赋值给 PositionConstraint shape_msgs&#x2F;SolidPrimitive 中的成员变量 <strong>dimensions</strong>。</li>
<li><strong>tolerance_angle</strong>：方向约束 OrientationConstraint 的绝对公差的值。会将 absolute_x_axis_tolerance、 absolute_y_axis_tolerance、absolute_z_axis_tolerance 均赋值为该参数</li>
</ul>
<p>此处构建的约束将包含一个 PositionConstraint 和一个 OrientationConstraint。球体将用于表示 PositionConstraint 的约束区域。</p>
<p>例二：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pose.pose.position.x = <span class="number">0.32</span>;</span><br><span class="line">pose.pose.position.y = <span class="number">-0.25</span>;</span><br><span class="line">pose.pose.position.z = <span class="number">0.65</span>;</span><br><span class="line">pose.pose.orientation.w = <span class="number">1.0</span>;</span><br><span class="line"><span class="comment">// 位置约束</span></span><br><span class="line">moveit_msgs::Constraints pose_goal_2 =</span><br><span class="line">  kinematic_constraints::<span class="built_in">constructGoalConstraints</span>(</span><br><span class="line">      <span class="string">&quot;panda_link8&quot;</span>, </span><br><span class="line">      pose, </span><br><span class="line">      tolerance_pose, </span><br><span class="line">      tolerance_angle);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Now, let&#x27;s try to move to this new pose goal*/</span></span><br><span class="line">req.goal_constraints.<span class="built_in">clear</span>();</span><br><span class="line">req.goal_constraints.<span class="built_in">push_back</span>(pose_goal_2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* But, let&#x27;s impose a path constraint on the motion.</span></span><br><span class="line"><span class="comment"> Here, we are asking for the end-effector to stay level*/</span></span><br><span class="line"><span class="comment">//方法是：定义一个四元数，只设定旋转位姿，然后将其设置为约束。</span></span><br><span class="line">geometry_msgs::QuaternionStamped quaternion;</span><br><span class="line">quaternion.header.frame_id = <span class="string">&quot;panda_link0&quot;</span>;</span><br><span class="line">quaternion.quaternion.w = <span class="number">1.0</span>;</span><br><span class="line">req.path_constraints = </span><br><span class="line">    kinematic_constraints::<span class="built_in">constructGoalConstraints</span>(</span><br><span class="line">        <span class="string">&quot;panda_link8&quot;</span>, </span><br><span class="line">        quaternion</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<p>其中，quaternion 参数赋值给 OrientationConstraint 中的 orientation</p>
<p>例三</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 添加约束，使末端执行器保持水平 */</span></span><br><span class="line">geometry_msgs::QuaternionStamped quaternion;</span><br><span class="line">quaternion.header.frame_id = <span class="string">&quot;torso_lift_link&quot;</span>;</span><br><span class="line">quaternion.quaternion.w = <span class="number">1.0</span>;</span><br><span class="line">req.path_constraints = kinematic_constraints::<span class="built_in">constructGoalConstraints</span>(</span><br><span class="line">    <span class="string">&quot;r_wrist_roll_link&quot;</span>, </span><br><span class="line">    quaternion</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h2 id="moveit-msgs-OrientationConstraint"><a href="#moveit-msgs-OrientationConstraint" class="headerlink" title="moveit_msgs::OrientationConstraint"></a><strong><code>moveit_msgs::OrientationConstraint</code></strong></h2><p>方向约束</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-MoveGroup-Interface/image-20240901202439071.png" class="" title="image-20240901202439071">

<p>其中，orientation 是以四元数形式指定的机器人 link 的期望方向。<code>absolute__axis_tolerance</code> 是轴角误差公差</p>
<ul>
<li><code>moveit_msgs::JointConstraint</code>：关节约束。将关节的位置约束在一定的范围内。</li>
</ul>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-MoveGroup-Interface/image-20240901202449906.png" class="" title="image-20240901202449906">

<p>可到达的区域为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[position - tolerance_below, position + tolerance_below]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>moveit_msgs::PositionConstraint</code> &#x2F;&#x2F; 位置约束</li>
</ul>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-MoveGroup-Interface/image-20240901202512856.png" class="" title="image-20240901202512856">

<p>其中，target_point_offset 为目标点偏移量；constraint_region 为 3D volume</p>
<ul>
<li><p><code>moveit_msgs::TrajectoryConstraints</code>：轨迹约束。包含每个轨迹点的约束</p>
</li>
<li><p><code>moveit_msgs::VisibilityConstraint</code>：可见性约束。该约束对于在特定坐标系中保持对圆盘(目标)的可见性很有用。该圆盘形成一个可见锥的底部，其尖端位于传感器的原点。通过确保机器人不会阻碍能见度锥来保持能见度。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>Servoing</title>
    <url>/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-Realtime%20Arm%20Servoing/</url>
    <content><![CDATA[<p>向启用 ros 的机器人发送实时伺服命令。伺服节点的一些不错的功能是奇异处理和碰撞检查，以防止操作员破坏机器人。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone -b 1.2.7 https://github.com/ros-industrial/universal_robot</span><br><span class="line"></span><br><span class="line">rosdep install -y --from-paths . --ignore-src --rosdistro $ROS_DISTRO</span><br><span class="line"></span><br><span class="line">cd ~/ws_moveit/</span><br><span class="line">catkin build</span><br><span class="line">source devel/setup.bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">roslaunch ur_gazebo ur5.launch</span><br><span class="line">roslaunch ur5_moveit_config ur5_moveit_planning_execution.launch sim:=true</span><br><span class="line">roslaunch ur5_moveit_config moveit_rviz.launch config:=true</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rosservice call /controller_manager/switch_controller &quot;start_controllers: [&#x27;joint_group_position_controller&#x27;]</span><br><span class="line">stop_controllers: [&#x27;arm_controller&#x27;]</span><br><span class="line">strictness: 0</span><br><span class="line">start_asap: false</span><br><span class="line">timeout: 0.0&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roslaunch moveit_servo spacenav_cpp.launch</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>moveit-使用</title>
    <url>/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>MoveIt! 使用流程：</p>
<ul>
<li>创建 URDF 模型</li>
<li>配置：使用 MoveIt! Setup Assistant 生成配置文件</li>
<li>添加机器人控制器插件 controller</li>
<li>MoveIt! 控制机器人运动</li>
</ul>
<p>MoveIt! 输入用户指令，比如起始位置，输出轨迹数据，每个点通过位置速度加速度描述，为了通过话题发出来，还需要一个 <strong>Follow Joint Trajectory</strong> 功能，通过通信接口发给机器人，机器人还需要对轨迹进行<strong>精插补</strong>，再驱动电机同步运动。机器人控制器还需要将每个电机的状态数据反馈给 MoveIt! 来确定机器人是否到达指定位置，这样完成一个闭环。</p>
<h1 id="RobotModel-与-RobotState"><a href="#RobotModel-与-RobotState" class="headerlink" title="RobotModel 与 RobotState"></a>RobotModel 与 RobotState</h1><blockquote>
<p>介绍通过 C++ API 使用 MoveIt 中的运动学(kinematics)。包括正运动学求解、逆运动学求解以及雅可比矩阵求解。</p>
</blockquote>
<p><a href="http://docs.ros.org/noetic/api/moveit_core/html/classmoveit_1_1core_1_1RobotModel.html"><strong>RobotModel</strong></a> 和 <a href="http://docs.ros.org/noetic/api/moveit_core/html/classmoveit_1_1core_1_1RobotState.html"><strong>RobotState</strong></a> 是访问机器人运动学的两个核心类。</p>
<p><strong>RobotModel 类包含所有 links 和 joints 之间的关系，包括从 URDF 加载的关节限制属性</strong>。RobotModel 还将机器人的 links 和 joints 分开到 SRDF 中定义的规划组中。</p>
<p><strong>RobotState 类包含机器人在某一时刻的信息</strong>，存储关节<strong>位置、速度、加速度向量</strong>等。这些信息可以用来获得机器人的运动学信息，依赖于它的当前状态，例如末端执行器的 Jacobian。</p>
<p>RobotState 还包含辅助函数，用于根据末端执行器位置(笛卡尔姿态)设置手臂位置和计算笛卡尔轨迹。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch moveit_tutorials robot_model_and_robot_state_tutorial.launch</span></span><br></pre></td></tr></table></figure>

<p>运行输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ INFO] : Loading robot model &#x27;panda&#x27;...</span><br><span class="line">[ INFO] : Model frame: world</span><br><span class="line">[ INFO] : Joint panda_joint1: 0.000000</span><br><span class="line">[ INFO] : Joint panda_joint2: 0.000000</span><br><span class="line">[ INFO] : Joint panda_joint3: 0.000000</span><br><span class="line">[ INFO] : Joint panda_joint4: -1.570800</span><br><span class="line">[ INFO] : Joint panda_joint5: 0.000000</span><br><span class="line">[ INFO] : Joint panda_joint6: 0.000000</span><br><span class="line">[ INFO] : Joint panda_joint7: 0.000000</span><br><span class="line">[ INFO] : Current state is not valid</span><br><span class="line">[ INFO] : Current state is valid</span><br><span class="line">[ INFO] : Translation:</span><br><span class="line">0.166555</span><br><span class="line">0.244931</span><br><span class="line">0.408155</span><br><span class="line"></span><br><span class="line">[ INFO] : Rotation:</span><br><span class="line"> -0.119873   0.251145  -0.960498</span><br><span class="line"> -0.735699   -0.67209 -0.0839164</span><br><span class="line"> -0.666617   0.696578   0.265332</span><br><span class="line"></span><br><span class="line">[ INFO] : Joint panda_joint1: -0.887238</span><br><span class="line">[ INFO] : Joint panda_joint2: -1.243671</span><br><span class="line">[ INFO] : Joint panda_joint3: 1.581131</span><br><span class="line">[ INFO] : Joint panda_joint4: -2.349818</span><br><span class="line">[ INFO] : Joint panda_joint5: -0.471360</span><br><span class="line">[ INFO] : Joint panda_joint6: 0.152547</span><br><span class="line">[ INFO] : Joint panda_joint7: -0.966377</span><br><span class="line">[ INFO] : Jacobian:</span><br><span class="line">   -0.244931    0.0474647   -0.0235218     0.043507   -0.0249171    0.0993464  6.07153e-18</span><br><span class="line">    0.166555   -0.0582701    0.0984654     0.281663   -0.0230651   -0.0965234 -3.81639e-17</span><br><span class="line">           0    0.0847139    -0.268771    0.0624676   -0.0974941  -0.00255494  8.67362e-18</span><br><span class="line">           0      0.77533    -0.598064     0.210935     0.970394     0.241357    -0.960498</span><br><span class="line">           0     0.631556     0.734214    -0.242591   -0.0646234     0.223418   -0.0839164</span><br><span class="line">           1  4.89619e-12     0.321323     0.946919     -0.23272     0.944368     0.265332</span><br></pre></td></tr></table></figure>



<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>实例化 <a href="http://docs.ros.org/melodic/api/moveit_ros_planning/html/classrobot__model__loader_1_1RobotModelLoader.html">RobotModelLoader</a> 对象，该对象会在 ROS parameter 中查找 robot description 参数，并构建 RobotModel。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">robot_model_loader::RobotModelLoader <span class="title">robot_model_loader</span><span class="params">(<span class="string">&quot;robot_description&quot;</span>)</span></span>;</span><br><span class="line">robot_model::RobotModelPtr kinematic_model = robot_model_loader.<span class="built_in">getModel</span>();</span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;Model frame: %s&quot;</span>, kinematic_model-&gt;<span class="built_in">getModelFrame</span>().<span class="built_in">c_str</span>());</span><br></pre></td></tr></table></figure>

<p>然后，使用 RobotModel 构建 RobotState 对象来维护机器人的配置。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">robot_state::RobotStatePtr <span class="title">kinematic_state</span><span class="params">(<span class="keyword">new</span> robot_state::RobotState(kinematic_model))</span></span>;</span><br><span class="line">kinematic_state-&gt;<span class="built_in">setToDefaultValues</span>(); <span class="comment">// 将各 joints 设置为默认值</span></span><br><span class="line"><span class="comment">// 根据 group name 获取 JointModelGroup 信息</span></span><br><span class="line"><span class="type">const</span> robot_state::JointModelGroup* joint_model_group = </span><br><span class="line">                    kinematic_model-&gt;<span class="built_in">getJointModelGroup</span>(<span class="string">&quot;panda_arm&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> std::vector&lt;std::string&gt;&amp; joint_names = </span><br><span class="line">                    joint_model_group-&gt;<span class="built_in">getVariableNames</span>();</span><br></pre></td></tr></table></figure>

<p>获取当前关节值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">double</span>&gt; joint_values;</span><br><span class="line">kinematic_state-&gt;<span class="built_in">copyJointGroupPositions</span>(joint_model_group, joint_values);</span><br><span class="line"><span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; joint_names.<span class="built_in">size</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Joint %s: %f&quot;</span>, joint_names[i].<span class="built_in">c_str</span>(), joint_values[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关节限制，setJointGroupPositions() 本身不会强制执行 joint limit，但是调用 enforceBounds()可以实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Set one joint in the Panda arm outside its joint limit */</span></span><br><span class="line">joint_values[<span class="number">0</span>] = <span class="number">5.57</span>;</span><br><span class="line">kinematic_state-&gt;<span class="built_in">setJointGroupPositions</span>(joint_model_group, joint_values);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check whether any joint is outside its joint limits */</span></span><br><span class="line"><span class="built_in">ROS_INFO_STREAM</span>(<span class="string">&quot;Current state is &quot;</span> &lt;&lt; (kinematic_state-&gt;<span class="built_in">satisfiesBounds</span>() ? <span class="string">&quot;valid&quot;</span> : <span class="string">&quot;not valid&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Enforce the joint limits for this state and check again*/</span></span><br><span class="line">kinematic_state-&gt;<span class="built_in">enforceBounds</span>();</span><br><span class="line"><span class="built_in">ROS_INFO_STREAM</span>(<span class="string">&quot;Current state is &quot;</span> &lt;&lt; (kinematic_state-&gt;<span class="built_in">satisfiesBounds</span>() ? <span class="string">&quot;valid&quot;</span> : <span class="string">&quot;not valid&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>正运动学(Forward Kinematics)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对一组随机的关节值计算正运动学</span></span><br><span class="line">kinematic_state-&gt;<span class="built_in">setToRandomPositions</span>(joint_model_group);</span><br><span class="line"><span class="comment">// 此例中，要找到机器人 panda_arm 组中最远端的 panda_link8 的位姿</span></span><br><span class="line"><span class="type">const</span> Eigen::Isometry3d&amp; end_effector_state = </span><br><span class="line">                kinematic_state-&gt;<span class="built_in">getGlobalLinkTransform</span>(<span class="string">&quot;panda_link8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Print end-effector pose. Remember that this is in the model frame */</span></span><br><span class="line"><span class="built_in">ROS_INFO_STREAM</span>(<span class="string">&quot;Translation: \n&quot;</span> &lt;&lt; end_effector_state.<span class="built_in">translation</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">ROS_INFO_STREAM</span>(<span class="string">&quot;Rotation: \n&quot;</span> &lt;&lt; end_effector_state.<span class="built_in">rotation</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>逆运动学(Inverse Kinematics，即：IK)。要求解 IK，需要以下数据：</p>
<ul>
<li>期望的 end-effector 的位姿：前面计算得到的 end_effector_state</li>
<li>超时时间：0.1</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> timeout = <span class="number">0.1</span>;</span><br><span class="line"><span class="type">bool</span> found_ik = kinematic_state-&gt;<span class="built_in">setFromIK</span>(joint_model_group, </span><br><span class="line">                                        end_effector_state, timeout);</span><br><span class="line">                                        </span><br><span class="line"><span class="comment">// 打印 IK 解</span></span><br><span class="line"><span class="keyword">if</span> (found_ik) &#123;</span><br><span class="line">  kinematic_state-&gt;<span class="built_in">copyJointGroupPositions</span>(joint_model_group, joint_values);</span><br><span class="line">  <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; joint_names.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Joint %s: %f&quot;</span>, joint_names[i].<span class="built_in">c_str</span>(), joint_values[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Did not find IK solution&quot;</span>);</span><br><span class="line">&#125;                                        </span><br></pre></td></tr></table></figure>

<p>获取 Jacobian</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Eigen::Vector3d <span class="title">reference_point_position</span><span class="params">(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>)</span></span>;</span><br><span class="line">Eigen::MatrixXd jacobian;</span><br><span class="line">kinematic_state-&gt;<span class="built_in">getJacobian</span>(joint_model_group,</span><br><span class="line">                             kinematic_state-&gt;<span class="built_in">getLinkModel</span>(joint_model_group-&gt;<span class="built_in">getLinkModelNames</span>().<span class="built_in">back</span>()),</span><br><span class="line">                             reference_point_position, jacobian);</span><br><span class="line"><span class="built_in">ROS_INFO_STREAM</span>(<span class="string">&quot;Jacobian: \n&quot;</span> &lt;&lt; jacobian &lt;&lt; <span class="string">&quot;\n&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>launch 文件。要运行代码，launch 文件中需要完成以下任务：</p>
<ul>
<li>加载 URDF 和 SRDF 到参数服务器</li>
<li>将 MoveIt Setup Assistant 生成的 kinematics_solver 配置放到 ROS 参数服务器上</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line">  &lt;include file=<span class="string">&quot;$(find panda_moveit_config)/launch/planning_context.launch&quot;</span>&gt;</span><br><span class="line">    &lt;arg name=<span class="string">&quot;load_robot_description&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">  &lt;/include&gt;</span><br><span class="line"></span><br><span class="line">  &lt;node name=<span class="string">&quot;robot_model_and_robot_state_tutorial&quot;</span></span><br><span class="line">        pkg=<span class="string">&quot;moveit_tutorials&quot;</span></span><br><span class="line">        type=<span class="string">&quot;robot_model_and_robot_state_tutorial&quot;</span></span><br><span class="line">        respawn=<span class="string">&quot;false&quot;</span> output=<span class="string">&quot;screen&quot;</span>&gt;</span><br><span class="line">    &lt;rosparam command=<span class="string">&quot;load&quot;</span></span><br><span class="line">              file=<span class="string">&quot;$(find panda_moveit_config)/config/kinematics.yaml&quot;</span>/&gt;</span><br><span class="line">  &lt;/node&gt;</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure>

<p>其中，plan_context.launch 中会加载 URDF 和 SRDF。</p>
<h2 id="调试-RobotState"><a href="#调试-RobotState" class="headerlink" title="调试 RobotState"></a>调试 RobotState</h2><p>可使用命令行工具帮助调试 robot state</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun moveit_ros_planning moveit_print_planning_model_info</span></span><br></pre></td></tr></table></figure>



<h1 id="Controllers配置"><a href="#Controllers配置" class="headerlink" title="Controllers配置"></a>Controllers配置</h1><p> moveit_controller_manager 参数，在 xxx_moveit_controller_manager.launch.xml 中设置。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Define the controller manager plugin to use for trajectory execution --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;moveit_controller_manager&quot;</span> <span class="attr">default</span>=<span class="string">&quot;moveit_simple_controller_manager/MoveItSimpleControllerManager&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;moveit_controller_manager&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg moveit_controller_manager)&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- loads controller list to the param server --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find mr2000_aubo_i5_moveit_config)/config/ros_controllers.yaml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>trajectory_execution_manager.cpp 中读取该参数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (controller_manager_loader_)</span><br><span class="line">&#123;</span><br><span class="line">    std::string controller;</span><br><span class="line">    <span class="keyword">if</span> (!node_handle_.<span class="built_in">getParam</span>(<span class="string">&quot;moveit_controller_manager&quot;</span>, controller))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 获取 moveit_core 支持的所有插件的名称列表  </span></span><br><span class="line">      <span class="type">const</span> std::vector&lt;std::string&gt;&amp; classes = controller_manager_loader_-&gt;<span class="built_in">getDeclaredClasses</span>();</span><br><span class="line">      <span class="keyword">if</span> (classes.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        controller = classes[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">ROS_WARN_NAMED</span>(name_,</span><br><span class="line">                       <span class="string">&quot;Parameter &#x27;~moveit_controller_manager&#x27; is not specified but only one &quot;</span></span><br><span class="line">                       <span class="string">&quot;matching plugin was found: &#x27;%s&#x27;. Using that one.&quot;</span>,</span><br><span class="line">                       controller.<span class="built_in">c_str</span>());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">ROS_FATAL_NAMED</span>(name_, <span class="string">&quot;Parameter &#x27;~moveit_controller_manager&#x27; not specified. This is needed to &quot;</span></span><br><span class="line">                               <span class="string">&quot;identify the plugin to use for interacting with controllers. No paths can &quot;</span></span><br><span class="line">                               <span class="string">&quot;be executed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!controller.<span class="built_in">empty</span>())</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">        controller_manager_ = controller_manager_loader_-&gt;<span class="built_in">createUniqueInstance</span>(controller);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">catch</span> (pluginlib::PluginlibException&amp; ex)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">ROS_FATAL_STREAM_NAMED</span>(name_,</span><br><span class="line">                               <span class="string">&quot;Exception while loading controller manager &#x27;&quot;</span> &lt;&lt; controller &lt;&lt; <span class="string">&quot;&#x27;: &quot;</span> &lt;&lt; ex.<span class="built_in">what</span>());</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若设置了 <code>moveit_controller_manager</code> 参数，则以该参数指定的插件实例化 ***<code>controller_manger_</code>***。否则使用 moveit_core 支持的插件列表中的第一个。</p>
<p><code>controller_manger_loader_</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">controller_manager_loader_.<span class="built_in">reset</span>(<span class="keyword">new</span> pluginlib::<span class="built_in">ClassLoader</span>&lt;moveit_controller_manager::MoveItControllerManager&gt;(</span><br><span class="line">        <span class="string">&quot;moveit_core&quot;</span>, <span class="string">&quot;moveit_controller_manager::MoveItControllerManager&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>其中，<code>pluginlib::ClassLoader</code> 先获取指定包 moveit_core 的所有支持的插件的 xml 文件路径，等价于使用以下指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rospack plugins --attrib=plugin moveit_core</span></span><br></pre></td></tr></table></figure>

<p>结果如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rospack plugins --attrib=plugin moveit_core</span></span><br><span class="line">aubo_kinematics /home/robuster/grasp_ws/src/aubo_robot/aubo_kinematics/aubo_moveit_plugins.xml</span><br><span class="line">moveit_ros_control_interface /opt/ros/melodic/share/moveit_ros_control_interface/moveit_core_plugins.xml</span><br><span class="line">moveit_ros_planning /opt/ros/melodic/share/moveit_ros_planning/planning_request_adapters_plugin_description.xml</span><br><span class="line">moveit_planners_chomp /opt/ros/melodic/share/moveit_planners_chomp/chomp_interface_plugin_description.xml</span><br><span class="line">industrial_trajectory_filters /opt/ros/melodic/share/industrial_trajectory_filters/planning_request_adapters_plugin_description.xml</span><br><span class="line">moveit_kinematics /opt/ros/melodic/share/moveit_kinematics/kdl_kinematics_plugin_description.xml</span><br><span class="line">moveit_kinematics /opt/ros/melodic/share/moveit_kinematics/lma_kinematics_plugin_description.xml</span><br><span class="line">moveit_kinematics /opt/ros/melodic/share/moveit_kinematics/srv_kinematics_plugin_description.xml</span><br><span class="line">moveit_kinematics /opt/ros/melodic/share/moveit_kinematics/cached_ik_kinematics_plugin_description.xml</span><br><span class="line">moveit_planners_ompl /opt/ros/melodic/share/moveit_planners_ompl/ompl_interface_plugin_description.xml</span><br><span class="line">moveit_fake_controller_manager /opt/ros/melodic/share/moveit_fake_controller_manager/moveit_fake_controller_manager_plugin_description.xml</span><br><span class="line">moveit_simple_controller_manager /opt/ros/melodic/share/moveit_simple_controller_manager/moveit_simple_controller_manager_plugin_description.xml</span><br><span class="line">moveit_core /opt/ros/melodic/share/moveit_core/collision_detector_fcl_description.xml</span><br></pre></td></tr></table></figure>

<p>然后，调用 <code>determineAvailableClasses</code> 根据这些 plugin.xml 文件返回可用的 classes，并赋值给 <code>classes_available_</code> 变量</p>
<h1 id="运动学约束-Kinematic-constraints"><a href="#运动学约束-Kinematic-constraints" class="headerlink" title="运动学约束(Kinematic constraints)"></a><strong>运动学约束(Kinematic constraints)</strong></h1><p>MoveIt! 内置的约束为运动学约束，包括：</p>
<ul>
<li>Position constraints：限制 link 的运动区域</li>
<li>Orientation constraints：限制 link 的运动方向</li>
<li>Visibility constraints：限制 link 上某点在某区域的可见性</li>
<li>Joint constraints：限制 joint 的运动范围</li>
<li>User-specified constraints：用户自定义的约束条件</li>
</ul>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a><strong>调试</strong></h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调试 RobotState</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun moveit_ros_planning moveit_print_planning_model_info</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调试 Planning Scene Monitor</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun moveit_ros_planning moveit_print_planning_scene_info</span>  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MoveIt Commander Scripting</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun moveit_commander moveit_commander_cmdline.py</span>  </span><br></pre></td></tr></table></figure>

<p>​                            </p>
<h1 id="主题及服务"><a href="#主题及服务" class="headerlink" title="主题及服务"></a><strong>主题及服务</strong></h1><p><strong>move_group 节点通过 ROS</strong> <strong>topics</strong> <strong>和</strong> <strong>actions</strong> <strong>与机器人通信</strong>，获取机器人状态、传感器数据等</p>
<h2 id="follow-joint-trajectory"><a href="#follow-joint-trajectory" class="headerlink" title="follow_joint_trajectory"></a><strong>follow_joint_trajectory</strong></h2><p>action，MoveIt! 最终规划发布的 action 消息，机器人控制器接收该消息后控制机器人完成运动。这就需要在 MoveIt!端配置一个控制器插件，实现该接口的功能。该插件的配置在 MoveIt! 配置包中已经实现，可以查看配置包中的 controllers.yaml 文件：</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E4%BD%BF%E7%94%A8/image-20240901204813263.png" class="" title="image-20240901204813263">

<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E4%BD%BF%E7%94%A8/image-20240901204818625.png" class="" title="image-20240901204818625">

<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E4%BD%BF%E7%94%A8/image-20240901204823140.png" class="" title="image-20240901204823140">



<h2 id="trajectory-execution-event"><a href="#trajectory-execution-event" class="headerlink" title="trajectory_execution_event"></a><strong>trajectory_execution_event</strong></h2><p>该主题为轨迹执行事件，在接收到 stop() 请求时，会发布 stop 事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/pickup/cancel</span><br><span class="line">/pickup/feedback</span><br><span class="line">/pickup/goal</span><br><span class="line">/pickup/result</span><br><span class="line">/pickup/statu</span><br><span class="line">/place/cancel</span><br><span class="line">/place/feedback</span><br><span class="line">/place/goal</span><br><span class="line">/place/result</span><br><span class="line">/place/status</span><br><span class="line">/planning_scene</span><br><span class="line">/planning_scene_world</span><br></pre></td></tr></table></figure>





<h2 id="action"><a href="#action" class="headerlink" title="action"></a><strong>action</strong></h2><h3 id="move-group"><a href="#move-group" class="headerlink" title="move_group"></a><strong>move_group</strong></h3><p><code>go()</code> 函数通过调用 <code>move()/async_move()</code>，其中 <code>async_move()</code> 实际是调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">move(<span class="literal">False</span>) <span class="comment"># 即：wait 参数为 False, 非阻塞</span></span><br></pre></td></tr></table></figure>

<p><code>move()</code> 接口通过 actionlib 向 move_group 发送 <strong>moveit_msgs::MoveGroupGoal</strong>  类型 goal。相关主题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/move_group/goal</span><br><span class="line">/move_group/status</span><br><span class="line">/move_group/feedback</span><br><span class="line">/move_group/result</span><br><span class="line">/move_group/cancel</span><br></pre></td></tr></table></figure>

<h3 id="execute-trajectory"><a href="#execute-trajectory" class="headerlink" title="execute_trajectory"></a><strong>execute_trajectory</strong></h3><p><code>execute()</code> 接口，通过 actionlib 向 <strong>execute_trajectory</strong> 发送 <code>moveit_msgs::ExecuteTrajectoryGoal</code> 类型 goal。相关主题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/execute_trajectory/goal</span><br><span class="line">/execute_trajectory/status</span><br><span class="line">/execute_trajectory/feedback</span><br><span class="line">/execute_trajectory/result</span><br><span class="line">/execute_trajectory/cancel</span><br></pre></td></tr></table></figure>

<p>&#x2F;attached_collision_object</p>
<p>&#x2F;collision_object</p>
<h1 id="ACM"><a href="#ACM" class="headerlink" title="ACM"></a><strong>ACM</strong></h1><p><a href="http://docs.ros.org/melodic/api/moveit_core/html/classcollision__detection_1_1AllowedCollisionMatrix.html">AllowedCollisionMatrix</a> - 碰撞免检矩阵。ACM 提供了一种机制来告诉 collision world 忽略某些对象之间的碰撞。</p>
<h1 id="ROS-I"><a href="#ROS-I" class="headerlink" title="ROS-I"></a><strong>ROS-I</strong></h1><p>将 ROS 功能应用到工业生产过程中，为工业机器人提供工业级 ROS 应用开发支持。</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E4%BD%BF%E7%94%A8/image-20240901205228107.png" class="" title="image-20240901205228107">



<h1 id="Planner-评价标准"><a href="#Planner-评价标准" class="headerlink" title="Planner 评价标准"></a><strong>Planner 评价标准</strong></h1><ul>
<li>Optimality：最优性。路径最短，规划速度最快等</li>
<li>Complete：完备性。在有限时间内解决所有有解的问题</li>
</ul>
<p>调试</p>
<p>依次打印轨迹中每个关节的位置及时间，可生成各关节的运动曲线，来判断运动稳定性</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">trajectory_msgs::JointTrajectory::_points_type::iterator iter;</span><br><span class="line">trajectory = as_.<span class="built_in">acceptNewGoal</span>()-&gt;trajectory;</span><br><span class="line"><span class="keyword">for</span>(iter= trajectory.points.<span class="built_in">begin</span>(); iter!=trajectory.points.<span class="built_in">end</span>(); iter++) </span><br><span class="line">    cout&lt;&lt;iter-&gt;positions[<span class="number">0</span>]&lt;&lt;” ”;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(iter=trajectory.points.<span class="built_in">begin</span>(); iter!=trajectory.points.<span class="built_in">end</span>(); iter++)</span><br><span class="line">    cout&lt;&lt;iter-&gt;positions[<span class="number">1</span>]&lt;&lt;””;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(iter=trajectory.points.<span class="built_in">begin</span>(); iter!=trajectory.points.<span class="built_in">end</span>(); iter++)</span><br><span class="line">    cout&lt;&lt;iter-&gt;time_from_start&lt;&lt;” ”;</span><br></pre></td></tr></table></figure>

<p><img src="D:\workspace\my-notes\blog\source_posts\机械臂\MoveIt\moveit-使用\image-20240901205303338.png" alt="image-20240901205303338"></p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E4%BD%BF%E7%94%A8/image-20240901205308525.png" class="" title="image-20240901205308525">

<h1 id="time-from-start"><a href="#time-from-start" class="headerlink" title="time_from_start"></a><strong>time_from_start</strong></h1><p>轨迹规划完成后，通过 IPTP 来添加时间、速度等信息。首先 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">trajectory_processing::IterativeParabolicTimeParameterization time_param;</span><br><span class="line">time_param.<span class="built_in">computeTimeStamps</span>(rt, <span class="number">1.0</span>);</span><br><span class="line">rt.<span class="built_in">getRobotTrajectoryMsg</span>(res.solution) <span class="comment">// res.solution 即生成的轨迹(解决方案)</span></span><br></pre></td></tr></table></figure>

<p><code>computeTimeStamps</code> 接口中根据轨迹点数计算相邻轨迹点之间的时间差 time_diff 数组。初始时，time_diff 数组中的时间差均为 0.0。然后添加速度约束，即：根据允许的最大速度计算相邻轨迹点 t_min, 若 t_min 大于该点的 time_diff，则将该点 time_diff 设置为 t_min；再添加加速度约束。添加速度约束和加速度约束的过程实际是更新 time_diff。</p>
<p>更新完 time_diff 之后，再根据 <strong>time_diff</strong> 数组通过 <strong>duration_from_previous_</strong> 设置轨迹点的 time_from_start(实际就是通过 time_diff 来依次计算各轨迹点的 time_from_start)</p>
<h1 id="Plan-Execute"><a href="#Plan-Execute" class="headerlink" title="Plan &amp; Execute"></a>Plan &amp; Execute</h1><p>RViz MontionPlanning 界面提供 Plan&#x2F;Execute&#x2F;Plan&amp;Execute 按钮。</p>
<p>Plan: 规划轨迹</p>
<p>Execute: 按规划的轨迹控制机械臂</p>
<p>Plan 按键对应 <em><strong>MotionPlanningFrame::computePlanButtonClicked()</strong></em> 接口。根据 <em>use_cartesian_path</em> 参数，调用 <strong>computeCartesianPlan()</strong> 或 <em><strong>computeJointSpacePlan()</strong></em> 接口规划轨迹，规划完成后，触发 <em><strong>planningFinished()</strong></em> 信号。</p>
<p>Execute 按键对应 <em><strong>MotionPlanningFrame::computeExecuteButtonClicked()</strong></em> 接口，该接口调用 <em><strong>execute(current_plan_)</strong></em> 执行轨迹，执行完成后，调用 <em><strong>onFinishedExecution(bool success)</strong></em> 更新状态。</p>
<p><em>Plan &amp; Execute 按键对应</em>  <em><strong>MotionPlanningFrame::computePlanAndExecuteButtonClicked()</strong></em> 接口，该接口调用 <em><strong>computeCartesianPlan()</strong></em> 进行轨迹规划，然后调用 <em><strong>computeExecuteButtonClicked()</strong></em> 接口执行轨迹。</p>
<p>若选择 “Use Cartesian Path”，则使用笛卡尔轨迹规划(move_group_-&gt;<strong>computeCartesianPath</strong>(…))，否则使用 joint space 轨迹规划(move_group_-&gt;<strong>plan</strong>(*current_plan_))。</p>
<p>plan 规划完成后，会在 <strong>&#x2F;move_group&#x2F;goal</strong> 主题发布规划信息给 move_group 节点；点击 Execute 执行轨迹，实际是通过 <strong>&#x2F;execute_trajectory&#x2F;goal</strong> 主题发布轨迹信息给 move_group 节点</p>
<p><strong>rotbotNamespace</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">gazebo</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;gazebo_ros_control&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_control.so&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">robotNamespace</span>&gt;</span>aubo_i5<span class="tag">&lt;/<span class="name">robotNamespace</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;robotNamespace&gt;/&lt;/robotNamespace&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>gazebo_ros_control 插件指定 robotNamespace 后，<strong>controller_manager 服务会添加上该命名空间</strong>，变为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/&lt;robotNamespace&gt;/controller_manager</span><br></pre></td></tr></table></figure>



<p>因此，所有 gazebo controllers 都应在该命名空间中，才能正常加载。此时才可通过 controller_manager&#x2F;list_controllers 服务进行查看。</p>
<p><strong>robtoNamespace 与 controller_spawner 节点的 ns 参数，以及 _gazebo_control.yaml 中的命名空间需要一致</strong>。同样，moveit 中加载的 controller(通常位于 _moveit_config&#x2F;config&#x2F;congrollers.yaml 中) 也要确保命名空间一致。</p>
<p>注意：controller_manager 相关 services 不受 ns 参数影响，只与 robotNamespace 相关。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># robotNamespace 参数设置为 aubo_i5</span><br><span class="line"><span class="tag">&lt;<span class="name">gazebo</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;gazebo_ros_control&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_control.so&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">robotNamespace</span>&gt;</span>aubo_i5<span class="tag">&lt;/<span class="name">robotNamespace</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;robotNamespace&gt;/&lt;/robotNamespace&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># controller_manager 节点 ns 参数设置为 aubo_i5_test</span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;controller_spawner&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;controller_manager&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawner&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">ns</span>=<span class="string">&quot;aubo_i5_test&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">args</span>=<span class="string">&quot;joint_state_controller&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<p>提示如下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">: Could not load controller &#x27;joint_state_controller&#x27; because the type was not specified. Did you load the controller configuration on the parameter server (namespace: &#x27;/aubo_i5/joint_state_controller&#x27;)?</span><br></pre></td></tr></table></figure>



<h1 id="Joystick"><a href="#Joystick" class="headerlink" title="Joystick"></a><strong>Joystick</strong></h1><p>启动 moveit 程序，RViz 中使能 “External Comm”</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E4%BD%BF%E7%94%A8/image-20240917200217931.png" class="" title="image-20240917200217931">

<p>启动 joystick_control.launch</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch &lt;YOURROBOT&gt;_moveit_config joystick_control.launch</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或手动指定遥控器端口</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch YOURROBOT_moveit_config joystick_control.launch dev:=/dev/input/js1</span></span><br></pre></td></tr></table></figure>

<p>该脚本可读取三种类型的 joy sticks</p>
<ul>
<li>XBox360</li>
<li>PS3 USB 接口</li>
<li>PS3 蓝牙接口</li>
<li>Arctic USB Wireless Gamepad</li>
</ul>
<p>请注意，只有对其所 有End executor 父组都具有 IK 求解器的规划组才能工作。</p>
<p>此外，需在 rviz 中添加 &#x2F;rviz&#x2F;moveit&#x2F;move_marker&#x2F;goal_link_tcp 主题才能控制，否则提示</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E4%BD%BF%E7%94%A8/image-20240917200304420.png" class="" title="image-20240917200304420">

<p>按键映射</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>PS3 Controller</th>
<th>Xbox Controller</th>
</tr>
</thead>
<tbody><tr>
<td>+-x&#x2F;y</td>
<td>left analog stick</td>
<td>left analog stick</td>
</tr>
<tr>
<td>+-z</td>
<td>L2&#x2F;R2</td>
<td>LT&#x2F;RT</td>
</tr>
<tr>
<td>+-yaw</td>
<td>L1&#x2F;R1</td>
<td>LB&#x2F;RB</td>
</tr>
<tr>
<td>+-roll</td>
<td>left&#x2F;right</td>
<td>left&#x2F;right</td>
</tr>
<tr>
<td>+-pitch</td>
<td>up&#x2F;down</td>
<td>up&#x2F;down</td>
</tr>
<tr>
<td>change planning group</td>
<td>select&#x2F;start</td>
<td>Y&#x2F;A</td>
</tr>
<tr>
<td>change end effector</td>
<td>triangle&#x2F;cross</td>
<td>back&#x2F;start</td>
</tr>
<tr>
<td>plan</td>
<td>square</td>
<td>X</td>
</tr>
<tr>
<td>execute</td>
<td>circle</td>
<td>B</td>
</tr>
</tbody></table>
<p>RViz 中可添加 “Pose” 订阅 “&#x2F;joy_pose” 来显示 joystick 的输出位置。</p>
<p>[FATAL] [&#x2F;moveit_joy-592]: Check if you started movegroups. Exiting.</p>
<p>需定义 end_effector </p>
<p>延时较大，待调试</p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>moveit-问题记录</title>
    <url>/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="semantic-错误"><a href="#semantic-错误" class="headerlink" title="semantic 错误"></a><strong>semantic 错误</strong></h1><p>① Semantic description is not specified ..</p>
<p>未指定 SRDF 文件(通常在 planning_context.launch 中)</p>
<p>② Semantic description is not specified for the same robot as the URDF</p>
<p>修改了机械臂模型，但未重新生成 SRDF。例如：将机械臂安装在车上，但仍使用机械臂的 SRDF。</p>
<h1 id="move-group-加载慢"><a href="#move-group-加载慢" class="headerlink" title="move_group 加载慢"></a><strong>move_group 加载慢</strong></h1><p>move_group 启动很慢，并提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">It is likely there are too many vertices in collision geometry  </span><br></pre></td></tr></table></figure>

<p>​      </p>
<p>原因：导出的模型(STL&#x2F;dae)太详细，进行碰撞检测时变慢，可减少面或顶点数。注意，只需要修改  中的  即可，无需修改  中的参数。</p>
<h1 id="panda-moveit-config-demo"><a href="#panda-moveit-config-demo" class="headerlink" title="panda_moveit_config demo"></a><strong>panda_moveit_config demo</strong></h1><p>运行 demo 程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch panda_moveit_config demo.launch rviz_tutorial:=<span class="literal">true</span></span>  </span><br></pre></td></tr></table></figure>

<p>​     </p>
<p>无法加载插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception while loading planning adapter plugin &#x27;default_planner_request_adapters/ResolveConstraintFrames&#x27;: According to the loaded plugin descriptions the class default_planner_request_adapters/ResolveConstraintFrames with base class type planning_request_adapter::PlanningRequestAdapter does not exist. Declared types are  chomp/OptimizerAdapter default_planner_request_adapters/AddIterativeSplineParameterization default_planner_request_adapters/AddTimeOptimalParameterization default_planner_request_adapters/AddTimeParameterization default_planner_request_adapters/Empty default_planner_request_adapters/FixStartStateBounds default_planner_request_adapters/FixStartStateCollision default_planner_request_adapters/FixStartStatePathConstraints default_planner_request_adapters/FixWorkspaceBounds              </span><br></pre></td></tr></table></figure>



<p>屏蔽 <code>panda_moveit_config/launch/ompl_planning_pipeline.launch.xml</code> 及 <code>chomp_planning_pipeline.launch.xml</code> 文件中的 controller 配置</p>
<h1 id="moveit-tutorials-无法加载-motion-planning"><a href="#moveit-tutorials-无法加载-motion-planning" class="headerlink" title="moveit_tutorials 无法加载 motion planning"></a><strong>moveit_tutorials 无法加载 motion planning</strong></h1><p>运行 moveit_tutorials demo 时，rviz 卡死在添加 motion planning 插件上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch panda_moveit_config demo.launch rviz_tutorial:=<span class="literal">true</span></span></span><br></pre></td></tr></table></figure>

<p>​              </p>
<h1 id="execution-type-导致异常"><a href="#execution-type-导致异常" class="headerlink" title="execution_type 导致异常"></a><strong>execution_type 导致异常</strong></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RLException: unused args [execution_type] for include of [rxxx_moveit_config/launch/xxx_moveit_controller_manager.launch.xml]     </span><br></pre></td></tr></table></figure>

<p>​         </p>
<p>xxx_moveit_controller_manager.launch.xml 中添加 execution_type 定义</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901212011075.png" class="" title="image-20240901212011075">



<h1 id="visual-array-警告"><a href="#visual-array-警告" class="headerlink" title="visual_array 警告"></a><strong>visual_array 警告</strong></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attempted to add visual [link_base] to link [JXB], but it already exists in visual_array under name [link_base] </span><br></pre></td></tr></table></figure>

<p>​             </p>
<p>机械臂挂载到移动底盘时，挂载 joint 重复导致的。</p>
<h1 id="停止轨迹执行"><a href="#停止轨迹执行" class="headerlink" title="停止轨迹执行"></a><strong>停止轨迹执行</strong></h1><p>轨迹执行过程中停止</p>
<h2 id="asyncMove"><a href="#asyncMove" class="headerlink" title="asyncMove"></a><strong>asyncMove</strong></h2><p>轨迹规划及执行。有两种 move 指令：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">asyncMove</span>()  <span class="comment">// 可通过 stop() 停止轨迹 </span></span><br><span class="line"><span class="built_in">move</span>()    </span><br></pre></td></tr></table></figure>

<ul>
<li><a href="http://docs.ros.org/en/jade/api/moveit_ros_planning_interface/html/classmoveit_1_1planning__interface_1_1MoveGroup.html#a65af5d80f04a9557b627d7d0bcb1e097">asyncMove</a>：规划并执行轨迹。<strong>非阻塞</strong>(不等待轨迹的执行完成)</li>
<li><a href="http://docs.ros.org/en/jade/api/moveit_ros_planning_interface/html/classmoveit_1_1planning__interface_1_1MoveGroup.html#a4c63625e2e9eb5c342d1fc6732bd8cf7">move</a>：规划并执行轨迹。<strong>阻塞</strong>(等待轨迹的执行完成)，并且需要启动一个 asynchronous spinner</li>
</ul>
<p>对应 python 下为：</p>
<ul>
<li>async_move</li>
<li>move</li>
</ul>
<h2 id="async-execute"><a href="#async-execute" class="headerlink" title="async_execute"></a><strong>async_execute</strong></h2><p>轨迹执行(不包括轨迹规划过程)。有两种 execute 指令：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">async_execute</span>() <span class="comment">// 执行过程中可通过 stop() 停止 </span></span><br><span class="line"><span class="built_in">execute</span>()    </span><br></pre></td></tr></table></figure>



<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">moveit::planning_interface::MoveGroupInterface::Plan my_plan;  </span><br><span class="line">moveit::planning_interface::MoveItErrorCode success = group.<span class="built_in">plan</span>(my_plan)  </span><br><span class="line">group.<span class="built_in">asyncexecute</span>(my_plan);  </span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">1</span>);  </span><br><span class="line">group.<span class="built_in">stop</span>();  </span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">plan=arm.<span class="built_in">plan</span>()  </span><br><span class="line">arm.<span class="built_in">execute</span>(plan,wait=False)  </span><br><span class="line">rospy.<span class="built_in">loginfo</span>(<span class="string">&quot;move home finished&quot;</span>)  </span><br><span class="line">rospy.<span class="built_in">sleep</span>(<span class="number">0.5</span>)  </span><br><span class="line">arm.<span class="built_in">stop</span>()  </span><br><span class="line">rospy.<span class="built_in">loginfo</span>(<span class="string">&quot;stoped&quot;</span>)  </span><br><span class="line">rospy.<span class="built_in">sleep</span>(<span class="number">0.5</span>)  </span><br><span class="line">moveit_commander.<span class="built_in">roscpp_shutdown</span>()</span><br></pre></td></tr></table></figure>



<p>execute() 接口，通过 actionlib 向 <strong>execute_trajectory</strong> 发送 moveit_msgs::ExecuteTrajectoryGoal 类型 </p>
<h2 id="go"><a href="#go" class="headerlink" title="go"></a><strong>go</strong></h2><p>将 wait 参数设置为 false</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">group.go(wait=<span class="literal">False</span>)   </span><br></pre></td></tr></table></figure>

<p>​           </p>
<p>然后通过订阅 &#x2F;move_group&#x2F;status 获取轨迹执行状态。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># moveit_commander/src</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">self, joints=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Set the target of the group and then move the group to the specified target &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(joints) <span class="keyword">is</span> <span class="built_in">bool</span>:</span><br><span class="line">        wait = joints</span><br><span class="line">        joints = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span>(joints) <span class="keyword">is</span> JointState:</span><br><span class="line">        <span class="variable language_">self</span>.set_joint_value_target(joints)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span>(joints) <span class="keyword">is</span> Pose:</span><br><span class="line">        <span class="variable language_">self</span>.set_pose_target(joints)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> joints <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="variable language_">self</span>.set_joint_value_target(<span class="variable language_">self</span>.get_remembered_joint_values()[joints])</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            <span class="variable language_">self</span>.set_joint_value_target(joints)</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._g.move()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._g.async_move()</span><br></pre></td></tr></table></figure>



<p>go() 函数通过调用 move()&#x2F;async_move()，其中 async_move() 实际是调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">move(<span class="literal">False</span>) <span class="comment"># 即：wait 参数为 False, 非阻塞   </span></span><br></pre></td></tr></table></figure>

<p>​        </p>
<p>move() 接口通过 actionlib 向 move_group 发送 moveit_msgs::MoveGroupGoal  类型 goal。</p>
<p>设置为 unblock 模式后，前一条轨迹未执行完时，接收到新的指令，会自动执行新的指令。</p>
<h1 id="轨迹起点异常"><a href="#轨迹起点异常" class="headerlink" title="轨迹起点异常"></a><strong>轨迹起点异常</strong></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Invalid Trajectory: start point deviates from current robot state more than 0.01 </span><br></pre></td></tr></table></figure>

<p>​             </p>
<p>可能原因：</p>
<ul>
<li>机械臂抖动大，导致起始位姿改变</li>
<li>move_group 获取的机械臂状态不对</li>
</ul>
<p>原因1解决方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置机械臂当前的状态作为运动初始状态</span></span><br><span class="line">group.setStartStateToCurrentState()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者放大允许误差范围</span></span><br><span class="line">group.setGoalPositionTolernace(<span class="number">0.001</span>)</span><br><span class="line">group.setGoalOrientationTolernace(<span class="number">0.02</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或修改文件参数(无法通过 rosparam set 设置)</span></span><br><span class="line">/move_group/trajectory_execution/allowed_start_tolerance <span class="number">0.0</span></span><br></pre></td></tr></table></figure>



<p>原因2解决方法</p>
<p>查看是否有节点重复发布机械臂关节状态。关掉 launch 中重复的 joint_state_publisher，例如：</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901212441818.png" class="" title="image-20240901212441818">

<p>可以看到有重复发布机械臂关节</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">header:</span> </span><br><span class="line">  <span class="attr">seq:</span> <span class="number">39288</span></span><br><span class="line">  <span class="attr">stamp:</span> </span><br><span class="line">    <span class="attr">secs:</span> <span class="number">1662717522</span></span><br><span class="line">    <span class="attr">nsecs:</span> <span class="number">857585906</span></span><br><span class="line">  <span class="attr">frame_id:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">name:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">front_left_wheel</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">front_right_wheel</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">rear_left_wheel</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">rear_right_wheel</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ur5_shoulder_pan_joint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ur5_shoulder_lift_joint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ur5_elbow_joint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ur5_wrist_1_joint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ur5_wrist_2_joint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ur5_wrist_3_joint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">gripper_finger1_joint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">gripper_finger2_joint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">gripper_finger1_inner_knuckle_joint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">gripper_finger2_inner_knuckle_joint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">gripper_finger1_finger_tip_joint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">gripper_finger2_finger_tip_joint</span></span><br><span class="line"><span class="attr">position:</span> [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line"><span class="attr">velocity:</span> []</span><br><span class="line"><span class="attr">effort:</span> []</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">header:</span> </span><br><span class="line">  <span class="attr">seq:</span> <span class="number">260742</span></span><br><span class="line">  <span class="attr">stamp:</span> </span><br><span class="line">    <span class="attr">secs:</span> <span class="number">1662717522</span></span><br><span class="line">    <span class="attr">nsecs:</span> <span class="number">862274557</span></span><br><span class="line">  <span class="attr">frame_id:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">name:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">ur5_elbow_joint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ur5_shoulder_lift_joint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ur5_shoulder_pan_joint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ur5_wrist_1_joint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ur5_wrist_2_joint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ur5_wrist_3_joint</span></span><br><span class="line"><span class="attr">position:</span> [<span class="number">1.7724227905273438</span>, <span class="number">-2.3259976545916956</span>, <span class="number">1.5698211193084717</span>, <span class="number">0.5097464323043823</span>, <span class="number">1.4149070978164673</span>, <span class="number">3.5952674807049334e-05</span>]</span><br><span class="line"><span class="attr">velocity:</span> [<span class="number">-0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line"><span class="attr">effort:</span> [<span class="number">-0.8272280693054199</span>, <span class="number">1.4930458068847656</span>, <span class="number">-0.46405479311943054</span>, <span class="number">-0.24553163349628448</span>, <span class="number">0.13877874612808228</span>, <span class="number">0.03812602907419205</span>]</span><br></pre></td></tr></table></figure>



<h1 id="无法识别任何一组控制器"><a href="#无法识别任何一组控制器" class="headerlink" title="无法识别任何一组控制器"></a><strong>无法识别任何一组控制器</strong></h1><p>Unable to identify any set of controllers that can actuate the specified joints:</p>
<p>参考： <a href="https://blog.csdn.net/ha010/article/details/109274459">https://blog.csdn.net/ha010/article/details/109274459</a></p>
<h2 id="gazebo-中-controllers"><a href="#gazebo-中-controllers" class="headerlink" title="gazebo 中 controllers"></a><strong>gazebo 中 controllers</strong></h2><p>以 xxxx+Kinova 为例，gazebo launch 中会通过 kinova_control.launch 来配置 controllers：</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901212655189.png" class="" title="image-20240901212655189">

<p>可见，kinova_control.launch 在启动 controller_spawner 时，设置了命名空间(kinova_robotName 参数指定)和 controller 名</p>
<p>同时 kinova_control.launch 会加载 $(arg kinova_robotName)_control.yaml 配置文件</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901212720316.png" class="" title="image-20240901212720316">



<h2 id="moveit-包中-controllers"><a href="#moveit-包中-controllers" class="headerlink" title="moveit 包中 controllers"></a><strong>moveit 包中 controllers</strong></h2><img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901212732200.png" class="" title="image-20240901212732200">

<p>在 moveit 启动 launch 中通过 joint_state_ns 及 controller_manger 设置了命名空间及名字，<strong>后续会将 &#x2F;joint_states 主题映射为 joint_states_ns 参数指定的主题名</strong>。并在 arm_controller.yaml 中配置 controllers 信息</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901212741605.png" class="" title="image-20240901212741605">

<p><code>&lt;controller_manager&gt;_moveit_controller_manager.launch.xml</code></p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901212749902.png" class="" title="image-20240901212749902">

<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901212754200.png" class="" title="image-20240901212754200">

<p>（该配置文件在单独运行 moveit demo，如 j2n6s300_demo.launch 时，可以使用，其中指定了 controllers: j2n6s300 和 j2n6s300_gripper，无法与 kinova_control.launch 一起使用）</p>
<p>即：gazebo 中 joint_states 主题为 &#x2F;j2n6s300&#x2F;joint_states，而在 moveit 中使用的是 &#x2F;mr2000_kinova&#x2F;joint_states，需进行同步。</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901212806141.png" class="" title="image-20240901212806141">

<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901212810524.png" class="" title="image-20240901212810524">

<p>注意：arm_controller.yaml 中指定了 controllers 插件前缀为 j2n6s300，与 kinova_control.launch 中设置的相同</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901212814153.png" class="" title="image-20240901212814153">



<h1 id="Interactive-Marker-不显示"><a href="#Interactive-Marker-不显示" class="headerlink" title="Interactive Marker 不显示"></a><strong>Interactive Marker 不显示</strong></h1><img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901212848740.png" class="" title="image-20240901212848740">

<p>同时，需检查 kinematics.yaml，确保其内容正确。尤其注意 group name 需匹配。</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901212857931.png" class="" title="image-20240901212857931">



<h1 id="cartesian-轨迹速度为空"><a href="#cartesian-轨迹速度为空" class="headerlink" title="cartesian 轨迹速度为空"></a><strong>cartesian 轨迹速度为空</strong></h1><p>compute_cartesian_path 轨迹规划成功，但其速度及加速度为空，导致 UR5 driver 无法执行轨迹。</p>
<p>C++ 解决方案参考：</p>
<ul>
<li><a href="https://groups.google.com/forum/#!topic/moveit-users/x5FwalM5ruk">https://groups.google.com/forum/#!topic/moveit-users/x5FwalM5ruk</a></li>
<li><a href="https://groups.google.com/forum/#!topic/moveit-users/MOoFxy2exT4">https://groups.google.com/forum/#!topic/moveit-users/MOoFxy2exT4</a></li>
</ul>
<p>moveit_commander 解决方案：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.robot= moveit_commander.RobotCommander()</span><br><span class="line"><span class="variable language_">self</span>.arm= <span class="variable language_">self</span>.robot.right_arm</span><br><span class="line">...</span><br><span class="line"><span class="variable language_">self</span>.arm.compute_cartesian_path(waypoints, <span class="number">0.01</span>, <span class="number">0.0</span>, <span class="literal">True</span>)</span><br><span class="line">plan= <span class="variable language_">self</span>.arm.retime_trajectory(<span class="variable language_">self</span>.robot.get_current_state(), plan, <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure>



<h1 id="重力力矩-gravity-torques"><a href="#重力力矩-gravity-torques" class="headerlink" title="重力力矩(gravity torques)"></a><strong>重力力矩(gravity torques)</strong></h1><p>通过 DH 参数计算机械手的雅可比矩阵，然后想通过每个关节的扭矩得到笛卡尔力，但是发现输出的每个关节扭矩通常包含重力扭矩。想知道如何知道不同构型下的重力力矩?</p>
<p>在查看API文档的时候也发现在**导纳控制(<strong>admittance control</strong>)**之前需要降低重力力矩，但是不知道在不同的配置下机械手的重力力矩如何得到。</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901212944566.png" class="" title="image-20240901212944566">

<p>API：</p>
<ul>
<li>GetAngularForceGravityFree：获取当前 torque 值，不包含 gravity</li>
<li>GetAngularTorqueGravityEstimation：获取由 gravity 生成的 torque 值</li>
</ul>
<p><strong>joint_torque &#x3D; GetAngularForceGravityFree + GetAngularTorqueGravityEstimation</strong></p>
<p>KinovaComm::getGravityCompensatedTorques 中会调用 GetAngularTorqueGravityEstimation。参考 <a href="https://github.com/Kinovarobotics/kinova-ros/issues/366">issues#366</a></p>
<h1 id="设置规划时间"><a href="#设置规划时间" class="headerlink" title="设置规划时间"></a><strong>设置规划时间</strong></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arm.set_planning_time(10)  </span><br></pre></td></tr></table></figure>

<p>​            </p>
<h1 id="选择规划算法"><a href="#选择规划算法" class="headerlink" title="选择规划算法"></a><strong>选择规划算法</strong></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">planner = <span class="string">&quot;RRTstarkConfigDefault&quot;</span>  <span class="comment"># Asymptotic optimal tree-based planner</span></span><br><span class="line"><span class="comment"># planner = &quot;ESTkConfigDefault&quot;  # Default: tree-based planner</span></span><br><span class="line"><span class="comment"># planner = &quot;RRTConnectConfigDefault&quot;  # Tree-based planner</span></span><br><span class="line"><span class="comment"># planner = &quot;PRMstarkConfigDefault&quot;  # Probabilistic Roadmap planner</span></span><br><span class="line"></span><br><span class="line">move_group.set_planner_id(planner)</span><br></pre></td></tr></table></figure>



<h1 id="spawner-error-too-few-arguments"><a href="#spawner-error-too-few-arguments" class="headerlink" title="spawner: error: too few arguments"></a><strong>spawner: error: too few arguments</strong></h1><p>运行 xxx_moveit_config 包中的 demo_gazebo.launch 时提示该异常</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901213036326.png" class="" title="image-20240901213036326">

<p>经排查，屏蔽 xxx_moveit_config 包中 gazebo.launch 文件中的 ros_controllers.launch 即不再报错</p>
<p>查看 ros_controllers.launch 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Load joint controller configurations from YAML file to parameter server --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find truck_auboi10_moveit_config)/config/ros_controllers.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Load the controllers --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;controller_spawner&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;controller_manager&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawner&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">args</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>负责加载 ros_controllers.yaml 参数，并<strong>启动 controller_manager 中的 spawner 节点。注意：默认 args 为空，因此出现该异常终止。需在参数中添加 controller 信息</strong>，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Franka 机械臂 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;controller_spawner&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;controller_manager&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawner&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">args</span>=<span class="string">&quot;$(arg transmission)_joint_trajectory_controller&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- JAKA MiniCobo. 其 controller 信息在 ros_controllers.yaml 中 --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;controller_spawner&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;controller_manager&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawner&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">args</span>=<span class="string">&quot;joint_state_controller jaka_minicobo_controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，若 ros_controllers.yaml 中 controllers 设置了命名空间，则还需要 ns 参数。例如：</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901213117876.png" class="" title="image-20240901213117876">



<h1 id="Gazebo-无法加载-controller"><a href="#Gazebo-无法加载-controller" class="headerlink" title="Gazebo 无法加载 controller"></a><strong>Gazebo 无法加载 controller</strong></h1><img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901213129021.png" class="" title="image-20240901213129021">

<p>示例中，gazebo 通过 truck_auboi10.yaml 加载 controllers</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find truck_auboi10_gazebo)/config/truck_auboi10.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span>/&gt;</span></span><br><span class="line">                   </span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;controller_spawner&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;controller_manager&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawner&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">args</span>=<span class="string">&quot;front_aubo_i10_controller</span></span></span><br><span class="line"><span class="string"><span class="tag">                      rear_aubo_i10_controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中 truck_auboi10.yaml 内容为</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901213150207.png" class="" title="image-20240901213150207">

<p>改写为</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901213158311.png" class="" title="image-20240901213158311">

<p>同时，为 spawner 配置 ns 参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;controller_spawner&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;controller_manager&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawner&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">ns</span>=<span class="string">&quot;aubo_i10&quot;</span> <span class="attr">args</span>=<span class="string">&quot;front_aubo_i10_controller</span></span></span><br><span class="line"><span class="string"><span class="tag">                          rear_aubo_i10_controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="RViz-不显示-interactMarker"><a href="#RViz-不显示-interactMarker" class="headerlink" title="RViz 不显示 interactMarker"></a><strong>RViz 不显示 interactMarker</strong></h1><p>检查 kinematics.yaml 参数是否正确加载</p>
<h1 id="Motion-planning-start-tree-could-not-be-initialized"><a href="#Motion-planning-start-tree-could-not-be-initialized" class="headerlink" title="Motion planning start tree could not be initialized!"></a><strong>Motion planning start tree could not be initialized!</strong></h1><p>原因一：SRDF 中指定了 disable_collisions，但 URDF 中无相应 link</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20240901213237796.png" class="" title="image-20240901213237796">



<p>原因二：机器人处于碰撞状态</p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>moveit消息体</title>
    <url>/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit%E6%B6%88%E6%81%AF%E4%BD%93/</url>
    <content><![CDATA[<h1 id="moveit-msgs-Grasp"><a href="#moveit-msgs-Grasp" class="headerlink" title="moveit_msgs::Grasp"></a><strong>moveit_msgs::Grasp</strong></h1><p>此消息包含对 grasp 的描述，该 grasp 将与特定的末端执行器(end-effector)一起使用，以抓取对象，包括如何接近、抓取对象等。此消息不包含有关 “抓点(grasp point - 即:目标物体上的点)” 的任何信息。无论生成此消息的是什么，都应该已经将有关抓取点的信息与有关末端执行器的几何形状的信息进行组合，以计算此消息中的 grasp_pose。</p>
<p>moveit grasp 消息格式:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># A name for this grasp</span><br><span class="line">string id</span><br><span class="line"></span><br><span class="line"># 抓取前<span class="punctuation">,</span> end effector group 中关节的轨迹位置<span class="punctuation">,</span>即<span class="punctuation">:</span>抓取前位姿</span><br><span class="line">trajectory_msgs/JointTrajectory pre_grasp_posture</span><br><span class="line"></span><br><span class="line"># 抓取时的姿态<span class="punctuation">,</span>包括位置和力度  </span><br><span class="line">trajectory_msgs/JointTrajectory grasp_posture</span><br><span class="line"></span><br><span class="line"># grasp 的 end-effector 的位置. 是 end-effector 的 <span class="string">&quot;parent_link&quot;</span> 的位置.</span><br><span class="line">geometry_msgs/PoseStamped grasp_pose</span><br><span class="line"></span><br><span class="line"># 此次抓取的预估成功率<span class="punctuation">,</span> 或其他衡量它有多“好”的方法。</span><br><span class="line">float64 grasp_quality</span><br><span class="line"></span><br><span class="line"># 在进行抓取之前，机器人末端的前进方向，以及前进距离</span><br><span class="line">GripperTranslation pre_grasp_approach</span><br><span class="line"></span><br><span class="line"># 抓握完成后的撤退方向</span><br><span class="line">GripperTranslation post_grasp_retreat</span><br><span class="line"></span><br><span class="line"># 释放物体时的后退动作;这个信息对grasp本身来说不是必要的，</span><br><span class="line"># 但是当释放物体时，这个信息是必要的。 </span><br><span class="line"># 用于执行 pickup 的抓取将作为结果的一部分返回，因此该信息可用于以后使用。 </span><br><span class="line">GripperTranslation post_place_retreat</span><br><span class="line"></span><br><span class="line"># 抓握时使用的最大接触力(&lt;=<span class="number">0</span> 时禁用)  </span><br><span class="line">float32 max_contact_force</span><br><span class="line"></span><br><span class="line"># 可选的障碍列表，我们有语义信息，可以在抓取过程中触摸/推/移动  </span><br><span class="line">string<span class="punctuation">[</span><span class="punctuation">]</span> allowed_touch_objects</span><br></pre></td></tr></table></figure>

<p>示例：<code>moveit_tutorials/doc/pick_place/src/pick_place_tutorial.cpp</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> tau = <span class="number">2</span> * M_PI;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">openGripper</span><span class="params">(trajectory_msgs::JointTrajectory&amp; posture)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// BEGIN_SUB_TUTORIAL open_gripper</span></span><br><span class="line">  <span class="comment">/* Add both finger joints of panda robot. */</span></span><br><span class="line">  posture.joint_names.<span class="built_in">resize</span>(<span class="number">2</span>);</span><br><span class="line">  posture.joint_names[<span class="number">0</span>] = <span class="string">&quot;panda_finger_joint1&quot;</span>;</span><br><span class="line">  posture.joint_names[<span class="number">1</span>] = <span class="string">&quot;panda_finger_joint2&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set them as open, wide enough for the object to fit. */</span></span><br><span class="line">  posture.points.<span class="built_in">resize</span>(<span class="number">1</span>);</span><br><span class="line">  posture.points[<span class="number">0</span>].positions.<span class="built_in">resize</span>(<span class="number">2</span>);</span><br><span class="line">  posture.points[<span class="number">0</span>].positions[<span class="number">0</span>] = <span class="number">0.04</span>;</span><br><span class="line">  posture.points[<span class="number">0</span>].positions[<span class="number">1</span>] = <span class="number">0.04</span>;</span><br><span class="line">  posture.points[<span class="number">0</span>].time_from_start = ros::<span class="built_in">Duration</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="comment">// END_SUB_TUTORIAL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">closedGripper</span><span class="params">(trajectory_msgs::JointTrajectory&amp; posture)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* Add both finger joints of panda robot. */</span></span><br><span class="line">  posture.joint_names.<span class="built_in">resize</span>(<span class="number">2</span>);</span><br><span class="line">  posture.joint_names[<span class="number">0</span>] = <span class="string">&quot;panda_finger_joint1&quot;</span>;</span><br><span class="line">  posture.joint_names[<span class="number">1</span>] = <span class="string">&quot;panda_finger_joint2&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set them as closed. */</span></span><br><span class="line">  posture.points.<span class="built_in">resize</span>(<span class="number">1</span>);</span><br><span class="line">  posture.points[<span class="number">0</span>].positions.<span class="built_in">resize</span>(<span class="number">2</span>);</span><br><span class="line">  posture.points[<span class="number">0</span>].positions[<span class="number">0</span>] = <span class="number">0.00</span>;</span><br><span class="line">  posture.points[<span class="number">0</span>].positions[<span class="number">1</span>] = <span class="number">0.00</span>;</span><br><span class="line">  posture.points[<span class="number">0</span>].time_from_start = ros::<span class="built_in">Duration</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="comment">// END_SUB_TUTORIAL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pick</span><span class="params">(moveit::planning_interface::MoveGroupInterface&amp; move_group)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个要尝试的抓取向量，目前只创建单个抓取。在使用 grasp generator 生成和测试多个grasp时非常有用</span></span><br><span class="line">  std::vector&lt;moveit_msgs::Grasp&gt; grasps;</span><br><span class="line">  grasps.<span class="built_in">resize</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置抓取位姿.此例中，为 panda_link8 的位姿</span></span><br><span class="line">  grasps[<span class="number">0</span>].grasp_pose.header.frame_id = <span class="string">&quot;panda_link0&quot;</span>;</span><br><span class="line">  tf2::Quaternion orientation;</span><br><span class="line">  orientation.<span class="built_in">setRPY</span>(-tau / <span class="number">4</span>, -tau / <span class="number">8</span>, -tau / <span class="number">4</span>);</span><br><span class="line">  grasps[<span class="number">0</span>].grasp_pose.pose.orientation = tf2::<span class="built_in">toMsg</span>(orientation);</span><br><span class="line">  grasps[<span class="number">0</span>].grasp_pose.pose.position.x = <span class="number">0.415</span>;</span><br><span class="line">  grasps[<span class="number">0</span>].grasp_pose.pose.position.y = <span class="number">0</span>;</span><br><span class="line">  grasps[<span class="number">0</span>].grasp_pose.pose.position.z = <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Setting pre-grasp approach.抓取之前，机器人末端的前进方向，以及前进距离</span></span><br><span class="line">  grasps[<span class="number">0</span>].pre_grasp_approach.direction.header.frame_id = <span class="string">&quot;panda_link0&quot;</span>;</span><br><span class="line">  <span class="comment">/* 方向为 x 轴正轴方向 */</span></span><br><span class="line">  grasps[<span class="number">0</span>].pre_grasp_approach.direction.vector.x = <span class="number">1.0</span>;</span><br><span class="line">  grasps[<span class="number">0</span>].pre_grasp_approach.min_distance = <span class="number">0.095</span>;</span><br><span class="line">  grasps[<span class="number">0</span>].pre_grasp_approach.desired_distance = <span class="number">0.115</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Setting post-grasp retreat. 抓握完成后的撤退方向</span></span><br><span class="line">  grasps[<span class="number">0</span>].post_grasp_retreat.direction.header.frame_id = <span class="string">&quot;panda_link0&quot;</span>;</span><br><span class="line">  <span class="comment">/* 方向为 Z 轴正向 */</span></span><br><span class="line">  grasps[<span class="number">0</span>].post_grasp_retreat.direction.vector.z = <span class="number">1.0</span>;</span><br><span class="line">  grasps[<span class="number">0</span>].post_grasp_retreat.min_distance = <span class="number">0.1</span>;</span><br><span class="line">  grasps[<span class="number">0</span>].post_grasp_retreat.desired_distance = <span class="number">0.25</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// pre_grasp_posture:抓取前,eef group 中关节的轨迹位置,即:抓取前位姿</span></span><br><span class="line">  <span class="built_in">openGripper</span>(grasps[<span class="number">0</span>].pre_grasp_posture);</span><br><span class="line">  <span class="comment">// grasp_posture:抓取时的姿态,包括位置和力度  </span></span><br><span class="line">  <span class="built_in">closedGripper</span>(grasps[<span class="number">0</span>].grasp_posture);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置支撑面</span></span><br><span class="line">  move_group.<span class="built_in">setSupportSurfaceName</span>(<span class="string">&quot;table1&quot;</span>);</span><br><span class="line">  <span class="comment">// Call pick to pick up the object using the grasps given</span></span><br><span class="line">  move_group.<span class="built_in">pick</span>(<span class="string">&quot;object&quot;</span>, grasps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>moveit</title>
    <url>/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/</url>
    <content><![CDATA[<h1 id="MoveIt-系统结构"><a href="#MoveIt-系统结构" class="headerlink" title="MoveIt! 系统结构"></a>MoveIt! 系统结构</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/image-20240901173810700.png" class="" title="image-20240901173810700">



<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/image-20240901173833469.png" class="" title="image-20240901173833469">

<h2 id="move-group-节点"><a href="#move-group-节点" class="headerlink" title="move_group 节点"></a>move_group 节点</h2><img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/image-20240901173731744-1725183457499-1-1725183460949-3.png" class="" title="image-20240901173731744">

<p>JointTrajectoryAction 通过 Robot Controllers 进行翻译。</p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a><strong>组件</strong></h2><ul>
<li><p><strong>move_group</strong>：该节点充当整合器。整合多个独立的组件</p>
</li>
<li><p><strong>User Interface</strong>：用户接口。包括：</p>
</li>
<li><ul>
<li>C++，利用 <a href="https://link.zhihu.com/?target=http://docs.ros.org/melodic/api/moveit_ros_planning_interface/html/classmoveit_1_1planning__interface_1_1MoveGroupInterface.html"><strong>move_group_interface</strong></a> 包提供的接口 </li>
<li>Python，利用 <a href="https://link.zhihu.com/?target=http://docs.ros.org/melodic/api/moveit_commander/html/classmoveit__commander_1_1move__group_1_1MoveGroupCommander.html"><strong>moveit_commander</strong></a> 包提供的接口</li>
<li>GUI，<a href="https://link.zhihu.com/?target=https://ros-planning.github.io/moveit_tutorials/doc/quickstart_in_rviz/quickstart_in_rviz_tutorial.html">rviz Motion Planning</a> 插件</li>
</ul>
</li>
<li><p><strong>配置</strong>：move_group 节点从 ROS param server 获取三种信息</p>
<ul>
<li><strong>URDF</strong>：查找 <strong>robot_description</strong> 参数，获取 URDF</li>
<li><strong>SRDF</strong>：查找 <strong>robot_description_semantic</strong> 参数，获取 SRDF，其一般由 MoveIt! Setup Assistant 生成</li>
<li><strong>MoveIt! configuration</strong>：获取其它信息，如 joint limits、kinematics、motion planning、perception 等</li>
</ul>
</li>
<li><p><strong>Robot Interface</strong></p>
<ul>
<li><strong>move_group 节点通过 ROS topics 和 actions 与机器人通信</strong>，获取机器人状态、传感器数据等</li>
</ul>
</li>
<li><p><strong>Joint State Information</strong>：</p>
<ul>
<li>move_group 监听 <code>/joint_states</code> 主题获取状态信息</li>
</ul>
</li>
<li><p><strong>Transform Information</strong>：变换信息</p>
<ul>
<li>move_group 通过 tf 来监听变换信息</li>
</ul>
</li>
<li><p><strong>Controller Interface</strong>：控制接口</p>
<ul>
<li>通过 ROS 的 action 接口，<strong>FollowJointTrajectoryAction</strong> 来使用控制器</li>
</ul>
</li>
<li><p><strong>Planning Scene</strong>：规划场景</p>
<ul>
<li>move_group 使用规划场景监视器来维护规划场景</li>
<li>Scene 是 world 和 机器人的状态的表现</li>
</ul>
</li>
<li><p><strong>Extensible Capabilities</strong>：</p>
<ul>
<li>move_group 的结构易于扩展 - 拾取和放置、运动学、运动规划等单个功能实际上是作为具有公共基类的单独插件实现的。这些插件可以通过一组 ROS yaml 参数和使用 ROS 插件库来使用 ROS 进行配置。大多数用户不必配置 move_group 插件，因为它们是在 MoveIt 设置助手生成的启动文件中自动配置的</li>
</ul>
</li>
</ul>
<h2 id="三大核心功能"><a href="#三大核心功能" class="headerlink" title="三大核心功能"></a><strong>三大核心功能</strong></h2><ul>
<li><p>运动学</p>
<ul>
<li>KDL</li>
<li>Trac-IK</li>
<li>IKFast</li>
</ul>
</li>
<li><p>路径规划</p>
<ul>
<li>OMPL</li>
<li>CHOMP</li>
<li>SBPL</li>
</ul>
</li>
<li><p>碰撞检测</p>
<ul>
<li>FCL</li>
<li>PCD</li>
</ul>
</li>
</ul>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a><strong>工作流程</strong></h2><p>MoveIt! 输入用户指令，比如起始位置，输出轨迹数据，每个点由位置、速度加速度描述，为了通过话题发出来，还需要一个 Follow Joint Trajectory 功能，通过通信接口发给机器人，机器人还需要对轨迹进行<strong>精插补</strong>，再驱动电机同步运动。机器人控制器还需要将每个电机的状态数据反馈给 MoveIt! 来确定机器人是否到达指定位置，这样完成一个闭环。</p>
<p>即：接收到指令后，MoveIt! 进行规划，得到轨迹数据(trajectory data)，通过 <strong>Follow Joint Trajectory</strong> 接口，将轨迹信息封装成 Action，发送给 Trajectory Controller，然后进行<strong>插补运算</strong>(轨迹中是一些中间间隔一定时间长度的轨迹点，这个时间不可以直接用做控制，控制器要求这个时间必须细微，所以就涉及到了插补算法)，插补算法完成各个轴的插补运算，然后将数据发送给 Position Servo，驱动器接收数据后，驱动电机发生运动。同时机器人端通过 Joint State Controller 将状态信息反馈给 MoveIt!。</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/image-20240901174108187.png" class="" title="image-20240901174108187">

<p>主要包含三个模块：</p>
<ul>
<li><strong>Follow Joint Trajectory</strong>：将规划的轨迹封装为 Action，然后发送给 Trajectory Controller</li>
<li><strong>Joint Trajectory Controller</strong>：轨迹插补(Trajectory Interpolation)</li>
<li><strong>Joint State Controller</strong>：反馈机器人关节状态</li>
</ul>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/image-20240901174131395.png" class="" title="image-20240901174131395">

<p>ROS 提供的关节轨迹控制器插补运算：</p>
<ul>
<li><strong>线性样条</strong>：位置连续，速度、加速度不连续</li>
<li><strong>三次样条</strong>：位置和速度连续，加速度不连续</li>
<li><strong>五次样条</strong>：位置、速度、加速度都连续（ROS 默认使用的）</li>
</ul>
<h1 id="Motion-Planning"><a href="#Motion-Planning" class="headerlink" title="Motion Planning"></a>Motion Planning</h1><h2 id="Motion-Planning-Plugin"><a href="#Motion-Planning-Plugin" class="headerlink" title="Motion Planning Plugin"></a>Motion Planning Plugin</h2><p>MoveIt 通过插件接口与运动规划器合作。这允许 MoveIt 与来自多个库的不同运动规划器进行通信和使用，从而使 MoveIt 易于扩展。运动规划器的接口是通过 ROS action 或 service。move_group 的默认运动规划器是使用 OMPL。默认情况下可用的其他规划器包括 <strong>Pilz 工业运动规划器</strong>和 CHOMP 规划器。</p>
<h2 id="Motion-Plan-Request"><a href="#Motion-Plan-Request" class="headerlink" title="Motion Plan Request"></a>Motion Plan Request</h2><p>运动计划请求指定希望运动规划器执行的操作。通常，将要求运动规划器将手臂移动到不同的位置（在关节空间中）或将末端执行器移动到新的姿态。默认情况下会检查碰撞（包括自碰撞和附着对象）。还可以通过 <code>planning_pipeline</code> 和 <code>planner_id</code> 参数指定规划器，以及运动规划器要检查的约束 - MoveIt 提供的内置约束是运动学约束：</p>
<ul>
<li><strong>Position constraints</strong>：将 link 的位置限制在某个区域内</li>
<li><strong>Orientation constraints</strong>：限定 link 的姿态在指定的 roll、pitch、yaw 限制范围内</li>
<li><strong>Visiblity constraints</strong>：限制 link 上的一个点位于特定传感器的可见性锥(cone)内</li>
<li><strong>Joint constraints</strong>：限制关节范围</li>
<li><strong>用户自定义约束</strong>：</li>
</ul>
<p>MotionPlanRequest：</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/image-20240901190156730.png" class="" title="image-20240901190156730">




<h2 id="Motion-Plan-Result"><a href="#Motion-Plan-Result" class="headerlink" title="Motion Plan Result"></a>Motion Plan Result</h2><p>move_group 节点接收到 motion plan request 后将生成一条轨迹。这一轨迹将移动手臂(或任何一组关节)到所需的位置。请注意，move_group 的结果是一条轨迹，而不仅仅是一个路径 ——_move_group*将使用所需的最大速度和加速度(如果指定)来生成一个遵守关节限制的速度和加速度约束的轨迹。</p>
<h2 id="Motion-Planning-Pipeline"><a href="#Motion-Planning-Pipeline" class="headerlink" title="Motion Planning Pipeline"></a>Motion Planning Pipeline</h2><p>Motion planners and Plan Request adapters</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/image-20240901190057195.png" class="" title="image-20240901190057195">

<p>完整的 motion planning pipeline 将 motion planner 与其他称为 planning request adapters 的组件连接在一起。<strong>规划请求适配器允许对运动规划请求进行预处理，并对运动规划响应进行后处理</strong>。预处理在几种情况下是有用的，例如，当机器人的启动状态略微超出机器人指定的关节限制时。后处理还需要进行其他一些操作，例如将机器人生成的路径转换为时间参数化的轨迹。MoveIt 提供了一组默认的运动规划适配器，每个适配器执行一个非常特定的功能。</p>
<h2 id="FixStartStateBounds"><a href="#FixStartStateBounds" class="headerlink" title="FixStartStateBounds"></a>FixStartStateBounds</h2><p>该 adapter 将开始状态修复为满足 URDF 中指定的关节限制。在物理机器人的关节限制没有正确配置的情况下，就需要这种适配器。然后，机器人可能最终处于一个或多个关节略微超出其关节极限的配置中。在这种情况下，运动规划器无法进行规划，因为它会认为起始状态在关节限制之外。“FixStartStateBounds”规划请求适配器将通过将其移动到关节限制来“修复”开始状态。然而，这显然不是每次都是正确的解决方案——例如，当关节确实超出了关节极限很大程度时。适配器的一个参数指定了关节可以超出其“可修复”的限制的程度。</p>
<h2 id="FixWorkspaceBounds"><a href="#FixWorkspaceBounds" class="headerlink" title="FixWorkspaceBounds"></a>FixWorkspaceBounds</h2><p>该适配器将<strong>指定用于规划的默认工作空间</strong>：大小为 10 m x 10 m x 10 m 的立方体。仅当对 planner 的规划请求未填写这些字段时，才会指定此工作区。</p>
<h2 id="FixStartStateCollision"><a href="#FixStartStateCollision" class="headerlink" title="FixStartStateCollision"></a>FixStartStateCollision</h2><p>该适配器将尝试通过少量扰动关节值来对指定配置（冲突中）附近的新无碰撞配置进行采样。扰动值的量由“jiggle_fraction”参数指定，该参数将扰动控制为关节总运动范围的百分比。此适配器的另一个参数指定适配器在放弃之前将采样的随机扰动数。</p>
<h2 id="FixStartStatePathCostraints"><a href="#FixStartStatePathCostraints" class="headerlink" title="FixStartStatePathCostraints"></a><strong>FixStartStatePathCostraints</strong></h2><p>当运动规划的开始状态不遵守指定的路径约束时，将应用此适配器。它将尝试规划机器人当前配置与遵守路径约束的新位置之间的路径。新位置将用作规划的开始状态。</p>
<h2 id="AddTimeParameterization"><a href="#AddTimeParameterization" class="headerlink" title="AddTimeParameterization"></a><strong>AddTimeParameterization</strong></h2><p>运动规划器通常会生成“运动学路径”，即无速度或加速度信息的路径。该适配器将通过应用速度和加速度约束来“时间参数化”运动计划。</p>
<h2 id="ResolveConstraintFrame"><a href="#ResolveConstraintFrame" class="headerlink" title="ResolveConstraintFrame"></a><strong>ResolveConstraintFrame</strong></h2><p>可以使用 subframes 设置目标约束（例如，杯子&#x2F;手柄坐标系中的姿势目标，其中手柄是杯子上的 subframe）。该适配器将约束坐标系更改为对象或机器人坐标系（例如杯子）。</p>
<h1 id="OMPL"><a href="#OMPL" class="headerlink" title="OMPL"></a><strong>OMPL</strong></h1><p>OMPL（开放式运动规划库）是一个开源运动规划库，主要实现随机运动规划器。MoveIt 直接集成 OMPL，并使用该库中的运动规划器作为其主要&#x2F;默认规划器集。OMPL 中的规划器是抽象的；即 OMPL 没有机器人的概念。相反，MoveIt 配置 OMPL 并为 OMPL 提供后端来处理机器人技术中的问题。</p>
<h2 id="Planning-Scene"><a href="#Planning-Scene" class="headerlink" title="Planning Scene"></a><strong>Planning Scene</strong></h2>  <img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/image-20240901190559440.png" class="" title="image-20240901190559440">

<p>规划场景用于表示机器人周围的世界，并存储机器人本身的状态。它由 move group 节点内的 planning scene monitor 维护。Planning scene monitor 监听：</p>
<ul>
<li>状态信息：joint_states 主题</li>
<li>传感器信息：使用 world geometry monitor</li>
<li>World geometry 信息：来自用户对 planning_scene 主题的输入（作为规划场景差异）</li>
</ul>
<h2 id="World-Geometry-Monitor"><a href="#World-Geometry-Monitor" class="headerlink" title="World Geometry Monitor"></a><strong>World Geometry Monitor</strong></h2><p>使用机器人传感器数据或用户输入数据来构建 world geometry。</p>
<p>使用 occupancy map monitor 来构建机器人周围环境的 3D 表示，并使用 planning_scene 主题的信息来增强该表示，以添加对象信息。</p>
<h2 id="3D-Perception"><a href="#3D-Perception" class="headerlink" title="3D Perception"></a><strong>3D Perception</strong></h2><p>MoveIt 中 3D perception 由 occupancy map monitor，使用插件架构来处理不同类型的传感器输入。特别是，MoveIt 内置了对处理两种输入的支持：</p>
<ul>
<li>Point clouds：由 <strong>point cloud occupancy map updater</strong> 插件处理</li>
<li>Depth images：由 <strong>depth image occupancy map updater</strong> 插件处理</li>
</ul>
<h3 id="Octomap"><a href="#Octomap" class="headerlink" title="Octomap"></a><strong>Octomap</strong></h3><p>Occupancy map monitor 使用 octomap 来维护环境的占用地图。Octomap 实际上可以编码有关单个 cell 的概率信息，尽管此信息目前未在 MoveIt 中使用。Octomap 可以直接传递到 FCL，FCL 是 MoveIt 使用的碰撞检查库。</p>
<h3 id="Depth-Image-Occupancy-map-updater"><a href="#Depth-Image-Occupancy-map-updater" class="headerlink" title="Depth Image Occupancy map updater"></a><strong>Depth Image Occupancy map updater</strong></h3><p>该 updater 包括其自己的自我过滤器，即它将从深度图中删除机器人的可见部分。它使用有关机器人的当前信息（机器人状态）来执行此操作。</p>
<h1 id="Kinematics"><a href="#Kinematics" class="headerlink" title="Kinematics"></a><strong>Kinematics</strong></h1><h2 id="Kinematics-插件"><a href="#Kinematics-插件" class="headerlink" title="Kinematics 插件"></a><strong>Kinematics 插件</strong></h2><p>MoveIt 使用插件方式，允许用户编写自己的反向运动学算法。正向运动学和查找雅可比矩阵集成在 RobotState 类中。MoveIt 的默认逆运动学插件是使用 KDL 基于雅可比数值的求解器配置的。</p>
<h2 id="IKFast-插件"><a href="#IKFast-插件" class="headerlink" title="IKFast 插件"></a><strong>IKFast 插件</strong></h2><p>通常，用户会选择实现自定义的逆运动学求解器。实现此类求解器的一种流行方法是使用 IKFast 包生成使用特定机器人所需的 C++ 代码。</p>
<h1 id="Collision-Checking"><a href="#Collision-Checking" class="headerlink" title="Collision Checking"></a><strong>Collision Checking</strong></h1><p>MoveIt 中的碰撞检查是使用 CollisionWorld 对象在 planning scene 中配置的。幸运的是，MoveIt 的设置使用户永远不必担心冲突检查是如何发生的。MoveIt 中的碰撞检查主要使用 FCL 包。</p>
<h2 id="Collision-Objects"><a href="#Collision-Objects" class="headerlink" title="Collision Objects"></a><strong>Collision Objects</strong></h2><p>MoveIt 碰撞检测支持多种类型的物体：</p>
<ul>
<li>Meshes</li>
<li>Primitive Shapes：如 boxes、cylinders、cones、spheres及平面</li>
<li>Octomap：Octomap 物体可直接用于碰撞检测</li>
</ul>
<h2 id="Allowed-Collision-Matrix-ACM"><a href="#Allowed-Collision-Matrix-ACM" class="headerlink" title="Allowed Collision Matrix(ACM)"></a><strong>Allowed Collision Matrix(ACM)</strong></h2><p>碰撞检查非常耗时，通常占运动规划期间计算耗时的近 90%。允许的碰撞矩阵或 ACM 编码一个二进制值，对应于需要检查成对的物体之间的碰撞。如果在 ACM 中将对应于两个主体的值设置为 1，则指定不需要在两个主体之间进行碰撞检查。例如，如果两个物体总是相距很远，以至于它们永远不会相互碰撞，就会发生这种情况。</p>
<h1 id="Traojectory-Processing"><a href="#Traojectory-Processing" class="headerlink" title="Traojectory Processing"></a><strong>Traojectory Processing</strong></h1><h2 id="Time-parameterization"><a href="#Time-parameterization" class="headerlink" title="Time parameterization"></a><strong>Time parameterization</strong></h2><p>Motion planner 通常只会生成“路径”，即没有与路径相关的时序信息。MoveIt 包含一个轨迹处理例程，可以在这些路径上工作并生成经过适当时间参数化的轨迹，考虑到对单个关节施加的最大速度和加速度限制。这些限制从 joint_limits.yaml 文件中读取的。</p>
<h1 id="Developer’s-Concept"><a href="#Developer’s-Concept" class="headerlink" title="Developer’s Concept"></a><strong>Developer’s Concept</strong></h1><h2 id="Collision-Detection"><a href="#Collision-Detection" class="headerlink" title="Collision Detection"></a><strong>Collision Detection</strong></h2><p>规划场景可以访问多个不同的碰撞检测器。每个检测器都从抽象父类  CollisionEnv 派生出自己的碰撞环境。请注意，在 2019 年 8 月之前，MoveIt 没有单一的碰撞环境，而是两个：CollisionWorld 和 CollisionRobot。CollisionRobot 负责自碰撞检查，而 CollisionWorld 则对机器人与环境进行碰撞检查。</p>
<p>有关碰撞检测背后的理论的一般介绍，<a href="https://www.toptal.com/game/video-game-physics-part-ii-collision-detection-for-solid-objects">Video Game Physics Tutorial - Part II: Collision Detection for Solid Objects</a>很有帮助。此外，Christer Ericson的《Realtime Collision Detection》一书是一个很好的资源。</p>
<h2 id="Flexible-Collision-Library-FCL"><a href="#Flexible-Collision-Library-FCL" class="headerlink" title="Flexible Collision Library(FCL)"></a><strong>Flexible Collision Library(FCL)</strong></h2><p>FCL 是一种可用的碰撞检测器。它衍生了自己的碰撞环境，主要结合了以前的 CollisionRobotFCL 和 CollisionWorldFCL。</p>
<p>CollisionRobotFCL：机器人 link 几何图形保存为成员变量。当执行自碰撞检查时，将创建一个新的 FCL manager，并将所有 links 添加到其中。由于 link 几何图形只计算一次并持久存储(包括它们的本地AABB)，因此将它们添加到新的碰撞管理器的成本很低。然后，在对 overlapping pairs 进行 narrowphase 计算之前，使用更新的全局 AABB 进行 broadphase 碰撞检验。</p>
<p>CollisionWorldFCL：包含一个成员碰撞管理器，所有的 world 对象都被添加或删除。该管理器具有用于快速 overlap 计算的持久树结构。当执行机器人与 world 的碰撞检查时，所有的机器人 links 都是针对世界 world 测试的，因为不需要在这里进行自我碰撞检查。为此，将使用 CollisionRobot 中包含的预先计算的碰撞几何图形，并根据当前机器人状态更新它们的全局姿态。</p>
<p>碰撞检查流程如下图所示</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/image-20240901190658163.png" class="" title="image-20240901190658163">



<h2 id="Bullet-Collision-Detection"><a href="#Bullet-Collision-Detection" class="headerlink" title="Bullet Collision Detection"></a><strong>Bullet Collision Detection</strong></h2><p>Bullet 是第二个可用的碰撞检测器。碰撞环境包含一个用于离散和连续检查的管理器。碰撞检查流程如下图所示。</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/image-20240901190717401.png" class="" title="image-20240901190717401">

<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/image-20240901190723439.png" class="" title="image-20240901190723439">

<h2 id="TrajOpt-Planner"><a href="#TrajOpt-Planner" class="headerlink" title="TrajOpt Planner"></a><strong>TrajOpt Planner</strong></h2><p>TrajOpt 是一种基于优化的 motion planner：</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/image-20240901190739645.png" class="" title="image-20240901190739645">



<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>MoveIt! 使用流程：</p>
<ul>
<li>创建 URDF 模型</li>
<li>配置：使用 MoveIt! Setup Assistant 生成配置文件</li>
<li>添加机器人控制器插件 controller</li>
<li>MoveIt! 控制机器人运动</li>
</ul>
<h1 id="MoveIt-Commander-Scripting"><a href="#MoveIt-Commander-Scripting" class="headerlink" title="MoveIt Commander Scripting"></a>MoveIt Commander Scripting</h1><p>moveit_commander Python 包为 MoveIt 中的功能提供了包装器。简单的可用于运动规划、笛卡尔路径计算和拾取和放置的界面。moveit_commander 包还包括一个命令行接口 <code>moveit_commander_cmdline.py</code>。</p>
<p>运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch panda_moveit_config demo.launch</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun moveit_commander moveit_commander_cmdline.py</span></span><br></pre></td></tr></table></figure>

<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/image-20240901174252440.png" class="" title="image-20240901174252440">

<p>连接 move_group 节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; use &lt;group name&gt; # 首先，使用该指令根据指定的 group 名连接到 move_group 节点</span><br></pre></td></tr></table></figure>

<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/image-20240901174320164.png" class="" title="image-20240901174320164">

<p>查询当前状态</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/image-20240901174336930.png" class="" title="image-20240901174336930">

<p>保存当前状态</p>
<img src="/2024/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/moveit/image-20240901174348487.png" class="" title="image-20240901174348487">

<p>移动机器人</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">goal = c </span><br><span class="line">goal[0] = 0.2 </span><br><span class="line">go goal</span><br></pre></td></tr></table></figure>

<p>也可使用以下语句，该方式稍微繁杂，但 plan 命令允许在实际发出执行命令之前在 RViz 中可视化计算的运动计划</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">goal[0] = 0.2 </span><br><span class="line">goal[1] = 0.2 </span><br><span class="line">plan goal </span><br><span class="line">execute </span><br></pre></td></tr></table></figure>



<h1 id="Fake-Controller-Manager"><a href="#Fake-Controller-Manager" class="headerlink" title="Fake Controller Manager"></a>Fake Controller Manager</h1><p>MoveIt 提供了一系列用于模拟的 fake 轨迹控制器。例如：由 MoveIt setup assistant 生成的 demo.launch，使用 fake 控制器在 RViz 中很好的可视化。</p>
<p>通过 config&#x2F;fake_controllers.yaml 文件进行配置，并调整所需的控制器类型。已安装的控制器包括:<br>interpolate：在 via points 之间执行平滑插值；默认选项，用于可视化<br>via points：遍历 via points，在中间 w&#x2F;o 插值；对可视化调试很有用<br>last points：直接 wrap 到轨迹的最后一点；离线基准测试的最快方法</p>
<p>yaml 文件示例</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rate:</span> <span class="number">10</span> <span class="string">(Hz,</span> <span class="string">used</span> <span class="string">for</span> <span class="string">interpolation</span> <span class="string">controller)</span></span><br><span class="line"><span class="attr">controller_list:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">fake_arm_controller</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">interpolate</span> <span class="string">|</span> <span class="string">via</span> <span class="string">points</span> <span class="string">|</span> <span class="string">last</span> <span class="string">point</span></span><br><span class="line">    <span class="attr">joints:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_5</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_6</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">fake_gripper_controller</span></span><br><span class="line">    <span class="attr">joints:</span></span><br><span class="line">      []</span><br></pre></td></tr></table></figure>

<p>为了加载一个初始的姿势，可以有一个(group, pose)对列表，如下所示:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">initial:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">arm</span></span><br><span class="line">    <span class="attr">pose:</span>  <span class="string">ready</span></span><br></pre></td></tr></table></figure>



<h1 id="压力测试-Benchmarking"><a href="#压力测试-Benchmarking" class="headerlink" title="压力测试 Benchmarking"></a>压力测试 Benchmarking</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch panda_moveit_config demo.launch db:=<span class="literal">true</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>warehouse</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/warehouse/</url>
    <content><![CDATA[<p>RViz的 MotionPlanning 插件提供了持久保存完整规划场景和机器人状态的可能性。目前有两个存储插件(基于 warehouse_ros)可用:</p>
<ul>
<li><a href="https://github.com/ros-planning/warehouse_ros_mongo">warehouse_ros_mongo</a>：使用 MongoDB</li>
<li><a href="https://github.com/ros-planning/warehouse_ros_sqlite">warehouse_ros_sqlite</a>：使用 SQLite</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt-get install mongodb-server</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt-get install ros-noetic-warehouse-ros-mongo</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudoapt-get install ros-noetic-warehouse-ros-sqlite</span></span><br></pre></td></tr></table></figure>

<p>warehouse 插件和设置必须在 MoveIt 配置的启动文件中指定。如果不希望使用MongoDB 插件，则应该调整 warehouse_settings.launch.xml 和 warehouse.launch。存储插件由参数 warehouse_plugin 决定。有效选项为 MongoDB 的 warehouse_ros_mongo::MongoDatabaseConnection 和 SQLite 的 warehouse_ros_sqlite::DatabaseConnection。</p>
<p>此外，参数 warehouse_host 和 warehouse_port 配置连接细节。对于 SQLite 插件，warehouse_host 包含数据库文件的路径，而 warehouse_port 未使用。</p>
<p>warehouse_ros_sqlite 的参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;moveit_warehouse_host&quot;</span> <span class="attr">default</span>=<span class="string">&quot;/path/to/your/file.sqlite&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;moveit_warehouse_port&quot;</span> <span class="attr">default</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;warehouse_plugin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;warehouse_ros_sqlite::DatabaseConnection&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<p>warehouse_ros_mongodb 的参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;moveit_warehouse_port&quot;</span> <span class="attr">default</span>=<span class="string">&quot;33829&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;moveit_warehouse_host&quot;</span> <span class="attr">default</span>=<span class="string">&quot;localhost&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;warehouse_plugin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;warehouse_ros_mongo::MongoDatabaseConnection&quot;</span> /&gt;</span> </span><br></pre></td></tr></table></figure>



<p>可选地，启动 MongoDB 服务器(在warehouse.launch中注释&#x2F;取消注释以下内容)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;node name=&quot;$(anon mongo_wrapper_ros)&quot; cwd=&quot;ROS_HOME&quot; type=&quot;mongo_wrapper_ros.py&quot; pkg=&quot;warehouse_ros_mongo&quot;&gt;</span></span><br><span class="line"><span class="comment">  &lt;param name=&quot;overwrite&quot; value=&quot;false&quot;/&gt;</span></span><br><span class="line"><span class="comment">  &lt;param name=&quot;database_path&quot; value=&quot;$(arg moveit_warehouse_database_path)&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;/node&gt; --&gt;</span></span><br></pre></td></tr></table></figure>



<p>连接数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch moveit_resources_panda_moveit_config demo.launch db:=<span class="literal">true</span></span></span><br></pre></td></tr></table></figure>

<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/warehouse/image-20240917201017262.png" class="" title="image-20240917201017262">

<p>点击 connect 按钮</p>
<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/warehouse/image-20240917201033909.png" class="" title="image-20240917201033909">
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>多段序列</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E5%A4%9A%E6%AE%B5%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<p>Sequence of multiple segments。</p>
<p>要连接多个轨迹并一次规划轨迹，可以使用序列功能。这<strong>减少了规划开销，并允许遵循预先描述的路径而不停留在中间点</strong>。</p>
<p>请注意: 如果序列命令规划失败，则该序列命令将不被执行。</p>
<p>请注意: 序列命令允许包含多个组的命令(例如“机械手”，“夹持器”)</p>
<h1 id="User-interface-sequence-capability"><a href="#User-interface-sequence-capability" class="headerlink" title="User interface sequence capability"></a><strong>User interface sequence capability</strong></h1><p>一个专门的 MoveIt 功能将 <code>moveit_msgs::MotionSequenceRequest</code> 作为输入。该请求包含如上所述的后续目标列表和附加的 <strong>blend_radius</strong> 参数。如果给定的以米为单位的 blend_radius 大于零，则将相应的轨迹与以下目标合并在一起，以使机器人不会停在当前目标处。当 TCP 比给定的 <strong>blend_radius</strong> 更接近目标时，允许它朝下一个目标前进。当离开当前目标周围的球体时，机器人会返回到它在没有混合的情况下所采用的轨迹。</p>
<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E5%A4%9A%E6%AE%B5%E5%BA%8F%E5%88%97/image-20240917200130040.png" class="" title="image-20240917200130040">

<p>详细实现参考：<a href="https://github.com/ros-planning/moveit/blob/melodic-devel/moveit_planners/pilz_industrial_motion_planner/doc/MotionBlendAlgorithmDescription.pdf">MotionBlendAlgorithmDescription.pdf</a></p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>behavior_tree</title>
    <url>/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/behavior_tree/</url>
    <content><![CDATA[<p><a href="note://WEB40cf9dd13ecdc0427d94e4994089fcca">nav2 behavior tree</a></p>
<h1 id="BT-概述"><a href="#BT-概述" class="headerlink" title="BT 概述"></a><strong>BT 概述</strong></h1><p>behaviac tree（BT） 即行为树。是 computer science、robotics、控制系统及视频游戏中使用的按计划执行的数学模型。以模块化的方式描述有限数量任务之间的切换。其优势在于他们创建<strong>由一系列简单任务组成非常复杂的任务的能力</strong>，而不必担心简单任务是如何实现的。 BT与分层状态机(HFSM)存在一些相似之处，其关键区别在于行为的主要构建块是任务而不是状态。易于人类理解。</p>
<h1 id="BT-与-FSM"><a href="#BT-与-FSM" class="headerlink" title="BT 与 FSM"></a><strong>BT 与 FSM</strong></h1><p>FSM 的每个节点表示一个状态，而 BT 的每个节点表示一个行为。FSM 是事件机制，而 BT 则属于轮询机制。</p>
<p>BT 相对于 FSM 的主要优势：</p>
<ul>
<li>BT 的主要优势在于其模块化，提升可读性与复用性</li>
<li>BT 本质上是分层的，意味着可以由简单的行为自由组合成复杂的 behavior，包括整个树作为更大的树的子分支。例如：”获取啤酒”可以重用 “抓取对象” 节点</li>
<li>BT 的图形具有语义含义。因此，BT 更容易理解，而 FSM 中的状态转换在文本和图形表示中都难以理解</li>
<li>BT 更具表现力</li>
</ul>
<h1 id="BT-nodes"><a href="#BT-nodes" class="headerlink" title="BT nodes"></a><strong>BT nodes</strong></h1><p>BT 由多个不同类型节点组成，每个节点的执行都会返回一个结果：</p>
<ul>
<li><strong>running</strong>：运行中</li>
<li><strong>success</strong>：成功</li>
<li><strong>failure</strong>：失败</li>
</ul>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/behavior_tree/image-20240907160521358.png" class="" title="image-20240907160521358">

<table>
<thead>
<tr>
<th>节点类型</th>
<th>子节点数量</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ControlNode</td>
<td>1~N</td>
<td>通常，根据其兄弟姐妹的结果或&#x2F;和自己的状态标记子进程</td>
</tr>
<tr>
<td>DecoratorNode</td>
<td>1</td>
<td>除其他事项外，它可以改变其子的结果或多次勾选它</td>
</tr>
<tr>
<td>ConditionNode</td>
<td>0</td>
<td>不应该改变系统。不得返回 RUNNING</td>
</tr>
<tr>
<td>ActionNode</td>
<td>0</td>
<td>执行节点</td>
</tr>
</tbody></table>
<p>BT 中，内部节点称为 <strong>control flow nodes</strong>，叶子节点称为 <strong>execution nodes</strong>。存在四类 control flow nodes（sequence、fallback、parallel 及 decorator）和两类 execution nodes（action 及 condition）</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/behavior_tree/image-20240905212924594.png" class="" title="image-20240905212924594">

<p>来源：<a href="https://docs.ros.org/en/noetic/api/behaviortree_cpp/html/classBT_1_1TreeNode.html">behaviortree_cpp_v4: BT::TreeNode Class Reference (ros.org)</a></p>
<h2 id="control-flow-nodes"><a href="#control-flow-nodes" class="headerlink" title="control flow nodes"></a><strong>control flow nodes</strong></h2><ul>
<li><p><strong>Fallback</strong> - 用于**查找并执行未失败的第一个子节点(若一个节点返回 FAILURE，则继续执行下一个节点)**。当其中一个子节点返回 success 或 running 时，Fallback节点将立即返回状态代码 success 或 running；若所有节点返回 FAILURE，则返回 FAILURE。 即：selector node</p>
</li>
<li><p><strong>Sequence</strong> - 从左往右依次执行所有节点，<strong>直到有节点返回 failure 或列表执行完</strong>。只有当所有节点都返回 success 时，才向父节点返回 success</p>
</li>
<li><p><strong>Parallel</strong> - 并行节点，包含N个节点，直到任意一个节点返回 fail，或者全部返回 success 为止。(并行节点可自定义退出条件，例如：当全部节点都返回成功时退出；当某个节点成功时退出；全部节点都返回成功&#x2F;失败时退出 等)</p>
</li>
<li><p><strong>Decorator</strong> - 装饰节点，与组合节点不同，<strong>装饰节点只能有一个子节点</strong>。装饰节点又可分为：</p>
</li>
<li><ul>
<li><strong>inverter node</strong>：逆变节点，反置&#x2F;否定子节点的结果</li>
<li><strong>succeeder node</strong>：不管其子节点向其返回的结果是什么，总是返回 success</li>
<li><strong>repeater node</strong>：在子节点返回结果后继续执行其子节点</li>
<li><strong>repeat until fail node</strong>：重复直至执行失败</li>
</ul>
</li>
</ul>
<h2 id="execution-nodes"><a href="#execution-nodes" class="headerlink" title="execution nodes"></a><strong>execution nodes</strong></h2><ul>
<li><strong>Action</strong> - </li>
<li><strong>Condition</strong> -</li>
</ul>
<p>执行节点是叶子节点。</p>
<h2 id="其它节点"><a href="#其它节点" class="headerlink" title="其它节点"></a><strong>其它节点</strong></h2><ul>
<li><strong>iterator node</strong>：与 sequence node 类似，不同的是：忽略 failure</li>
<li><strong>random sequence node</strong>：</li>
<li><strong>random selector node</strong>：</li>
<li><strong>condition node</strong>：执行条件判断，返回判断结果</li>
<li><strong>composite nodes</strong>：组合节点</li>
</ul>
<h1 id="节点描述符"><a href="#节点描述符" class="headerlink" title="节点描述符"></a><strong>节点描述符</strong></h1><p>各节点描述符：  </p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/behavior_tree/nodes.png" class="" title="nodes">

<p>Node with memory：允许设计者实现<strong>不重复执行的节点</strong>。节点符号加上 “*****” 即表示 Node with memory。  </p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/behavior_tree/node_with_memory.png" class="" title="node_with_memory">

<p>部分 BT 实现中，节点不包含 Running 状态，而是通过阻塞直到 action 直接结束，再返回 success 或 failure。这类 BT 实现是 <strong>no-reactive</strong> 的。no-reactive BT 可以看做是只包含 memory node 的 BT。</p>
<h1 id="节点图形"><a href="#节点图形" class="headerlink" title="节点图形"></a><strong>节点图形</strong></h1><h2 id="选择器节点"><a href="#选择器节点" class="headerlink" title="选择器节点"></a><strong>选择器节点</strong></h2><img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/behavior_tree/selector_node.png" class="" title="selector_node">

<h2 id="sequence-node"><a href="#sequence-node" class="headerlink" title="sequence node"></a><strong>sequence node</strong></h2><img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/behavior_tree/sequence_node.png" class="" title="sequence_node">

<h2 id="parallel-node"><a href="#parallel-node" class="headerlink" title="parallel node"></a><strong>parallel node</strong></h2><img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/behavior_tree/parallel_node.png" class="" title="parallel_node">

<h2 id="action-node"><a href="#action-node" class="headerlink" title="action node"></a><strong>action node</strong></h2><img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/behavior_tree/action_node.png" class="" title="action_node">

<p>该图包含一个 selector node、一个 sequence node、一个 condition node(黄色)、两个 action node。</p>
<p>当 C1 返回 Success 是才会执行 A1; 只有当 C1 或 A1 返回 Failure 时，才会执行 A2。</p>
<h1 id="BT-设计规则"><a href="#BT-设计规则" class="headerlink" title="BT 设计规则"></a><strong>BT 设计规则</strong></h1><h2 id="使用明确的-Success-Conditions-提升可读性"><a href="#使用明确的-Success-Conditions-提升可读性" class="headerlink" title="使用明确的 Success Conditions 提升可读性"></a><strong>使用明确的 Success Conditions 提升可读性</strong></h2><p>BT 的一个优势是可以用图形来表示树的切换结构。但是，actions 节点何时返回 Success 和 Failure 的详细信息并未显示在图形中。</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/behavior_tree/image-20240907173345832.png" class="" title="image-20240907173345832">

<p>该 BT 树中，执行 Unlock Door 时，如果门已经是关着的了，那此时 Unlock Door 操作的返回值取决于内部的具体实现，从 BT 图上是无法看出的。此时可按如下进行修改：</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/behavior_tree/image-20240907173345834.png" class="" title="image-20240907173345834">

<p>相比原来的 BT 图，增加了明确的 success conditions。这些条件通过 Fallback 下成对出现的节点表示。此时，若门是锁着的，则 Door Unlocked 直接返回 Success，该 action(Unlock Door) 对应的 Fallback 返回 Success。</p>
<h2 id="使用-Implicit-Sequence-提升-reactiving"><a href="#使用-Implicit-Sequence-提升-reactiving" class="headerlink" title="使用 Implicit Sequence 提升 reactiving"></a><strong>使用 Implicit Sequence 提升 reactiving</strong></h2><p>假设人通过之后，门关闭了，则此时， BT 会再次 Unlock Door、Open Door，再到 Agent Has Passed 条件判断处返回 Success。此时可按如下进一步优化：</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/behavior_tree/implicit_sequence.png" class="" title="implicit_sequence">

<p>此例中，提高 reactiving 所需的关键观察是要意识到目标通过门，其它所有 action 都只是为了达成该目标。</p>
<p>在需要撤销自身的某些 action 时，implicit sequence 的使用尤为重要。创建 implicit sequence 的系统方法是使用反向链接。</p>
<h2 id="使用-Decision-Tree-结构处理不同场景"><a href="#使用-Decision-Tree-结构处理不同场景" class="headerlink" title="使用 Decision Tree 结构处理不同场景"></a><strong>使用 Decision Tree 结构处理不同场景</strong></h2><h2 id="使用-sequence-提高安全性"><a href="#使用-sequence-提高安全性" class="headerlink" title="使用 sequence 提高安全性"></a><strong>使用 sequence 提高安全性</strong></h2><h2 id="使用反向链接-Backchaining-创建-Deliberative-BT"><a href="#使用反向链接-Backchaining-创建-Deliberative-BT" class="headerlink" title="使用反向链接(Backchaining)创建 Deliberative BT"></a><strong>使用反向链接(Backchaining)创建 Deliberative BT</strong></h2><h2 id="使用-memory-node-创建-un-reactive-BT"><a href="#使用-memory-node-创建-un-reactive-BT" class="headerlink" title="使用 memory node 创建 un-reactive BT"></a><strong>使用 memory node 创建 un-reactive BT</strong></h2>]]></content>
      <categories>
        <category>行为树</category>
      </categories>
      <tags>
        <tag>行为树</tag>
        <tag>状态机</tag>
      </tags>
  </entry>
  <entry>
    <title>nav2_behavior_tree</title>
    <url>/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/nav2_bt/</url>
    <content><![CDATA[<h1 id="Nav2-Behavior-Tree-概述"><a href="#Nav2-Behavior-Tree-概述" class="headerlink" title="Nav2 Behavior Tree 概述"></a>Nav2 Behavior Tree 概述</h1><p>Nav2 允许用户设置许多不同的插件类型，包括：行为树、核心算法、状态检查器等等。</p>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">main_tree_to_execute</span>=<span class="string">&quot;MainTree&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BehaviorTree</span> <span class="attr">ID</span>=<span class="string">&quot;MainTree&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PipelineSequence</span> <span class="attr">name</span>=<span class="string">&quot;NavigateWithReplanning&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DistanceController</span> <span class="attr">distance</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ComputePathToPose</span> <span class="attr">goal</span>=<span class="string">&quot;&#123;goal&#125;&quot;</span> <span class="attr">path</span>=<span class="string">&quot;&#123;path&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">DistanceController</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">FollowPath</span> <span class="attr">path</span>=<span class="string">&quot;&#123;path&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">PipelineSequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">BehaviorTree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此行为树使用 <code>ComputePathToPose</code>，然后每隔一米 (由 DistanceController 设定) 简单规划一条通往 goal 的新路径。如果在 path blackboard 变量上计算了一个新路径， FollowPath 将采用这个 path ，并使用服务器的默认算法来跟随它。</p>
<p>该示例包含：</p>
<ul>
<li>No recovery methods</li>
<li>No retries on failure</li>
<li>No selected planner or controller algorithms</li>
<li>No nodes to contextually change settings for optimal performance</li>
<li>No integration with automatic door, elevator, or other APIs</li>
<li>No user provided custom BT nodes</li>
<li>No subtrees for other behaviors like docking, following, etc.</li>
</ul>
<h1 id="Nav2-特定节点"><a href="#Nav2-特定节点" class="headerlink" title="Nav2 特定节点"></a>Nav2 特定节点</h1><p>有相当多的自定义 Nav2 BT 节点被提供给 Nav2 使用。自定义 Nav2 BT 节点的完整列表可以在 <a href="https://github.com/ros-planning/navigation2/tree/main/nav2_behavior_tree/plugins">nav2_behavior_tree plugins folder</a> 中找到。也可参考 <a href="https://navigation.ros.org/configuration/packages/configuring-bt-xml.html">configuration guide</a>。</p>
<h2 id="Action-Nodes"><a href="#Action-Nodes" class="headerlink" title="Action Nodes"></a>Action Nodes</h2><ul>
<li><code>ComputePathToPose</code>: ComputePathToPose Action Server Client (Planner Interface)</li>
<li><code>FollowPath</code>: FollowPath Action Server Client (Controller Interface)</li>
<li><code>Spin</code>, <code>Wait</code>, <code>Backup</code>: Behaviors Action Server Client</li>
<li><code>ClearCostmapService</code>: ClearCostmapService Server Clients</li>
</ul>
<p>此类节点完成后，如果操作服务器认为操作已正确完成，这些操作节点将返回 SUCCESS ，如果仍在运行，则返回 RUNNING ，否则返回 FAILURE 。请注意，在上面的列表中， <code>ClearCostmapService</code> 操作节点不是操作服务器客户端，而是服务客户端。</p>
<h2 id="Condition-Nodes"><a href="#Condition-Nodes" class="headerlink" title="Condition Nodes"></a>Condition Nodes</h2><ul>
<li><code>GoalUpdated</code>: Checks if the goal on the goal topic has been updated</li>
<li><code>GoalReached</code>: Checks if the goal has been reached</li>
<li><code>InitialPoseReceived</code>: Checks to see if a pose on the intial_pose topic has been received</li>
<li><code>isBatteryLow</code>: Checks to see if the battery is low by listening on the battery topic</li>
</ul>
<p>上面的条件节点列表可用于探测系统的特定方面。通常，如果条件为真，它们将返回SUCCESS，否则返回FAILURE。默认的 Nav2 BT 中使用的关键条件是 <code>GoalUpdated</code>，它在特定子树中异步检查。这个条件节点允许描述为“如果目标已经更新，那么必须重新计划”的行为。条件节点通常与 <code>ReactiveFallback</code> 节点配对。</p>
<h2 id="Decorator-Nodes"><a href="#Decorator-Nodes" class="headerlink" title="Decorator Nodes"></a>Decorator Nodes</h2><p>即：装饰节点</p>
<ul>
<li><code>Distance Controller</code>: Will tick children nodes every time the robot has traveled a certain distance</li>
<li><code>Rate Controller</code>: Controls the ticking of its child node at a constant frequency. The tick rate is an exposed port</li>
<li><code>Goal Updater</code>: Will update the goal of children nodes via ports on the BT</li>
<li><code>Single Trigger</code>: Will only tick its child node once, and will return FAILURE for all subsequent ticks</li>
<li><code>Speed Controller</code>: Controls the ticking of its child node at a rate proportional to the robot’s speed</li>
</ul>
<h2 id="Control-PipelineSequence"><a href="#Control-PipelineSequence" class="headerlink" title="Control: PipelineSequence"></a>Control: PipelineSequence</h2><p>当一个子节点返回 “RUNNING” 时， <code>PipelineSequence</code> 控制节点会重新标记之前的子节点。该节点类似于 Sequence 节点，具有重新标记 “current” 之前的子节点的附加特性。如果任一子节点返回 FAILURE ，所有子节点都将停止，父节点也将返回 FAILURE。若序列中最后一个子节点 SUCCESS，该节点将停止并返回 SUCCESS 。</p>
<p>例如：</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/nav2_bt/control_pipelineSequence-1726567119152-1.png" class="" title="control_pipelineSequence.png">

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">main_tree_to_execute</span>=<span class="string">&quot;MainTree&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BehaviorTree</span> <span class="attr">ID</span>=<span class="string">&quot;MainTree&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PipelineSequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Action_A</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Action_B</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Action_C</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">PipelineSequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">BehaviorTree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>初始时，Action_A、Action_B、Action_C 均为 IDLE</li>
<li>当父类 <code>PipelineSequence</code> 第一次被 ticked 时，假设 Action_A 返回 RUNNING，父节点也将返回 RUNNING。主节点继续 tick 也不会调用 Action_B 和Action_C，直到 Action_A 返回 success，才调用 Action_B</li>
<li>当 Action_B 返回 running 时，下一个 tick 会继续调用 Action_A，此时无论 Action_A 返回 running 还是 success，都会继续调用 Action_B</li>
</ul>
<blockquote>
<p>若任一子节点执行失败，则终止所有子节点动作，父节点返回 failture</p>
</blockquote>
<h2 id="Control-Recovery"><a href="#Control-Recovery" class="headerlink" title="Control: Recovery"></a>Control: Recovery</h2><p>Recovery 控制节点只有两个子节点， <strong>当且仅当第一个子节点返回 SUCCESS 时返回SUCCESS。如果第一个子节点返回FAILURE，第二个子节点将被 ticked</strong>。这个循环将持续到:</p>
<ul>
<li>第一个子节点返回 SUCCESS</li>
<li>第二个子节点返回 FAILTURE</li>
<li>重试次数超过 number_of_retries 参数指定值</li>
</ul>
<p>该节点通常用于将 action 和 recovery action 链接在一起。第一个 action 通常是“主要”行为，第二个 action 是在主要行为失败的情况下执行的操作。通常，第二个子动作的 ticking 会提高第一个动作成功的几率。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">root main_tree_to_execute=&quot;MainTree&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">BehaviorTree</span> <span class="attr">ID</span>=<span class="string">&quot;MainTree&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RecoveryNode</span> <span class="attr">number_of_retries</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ComputePathToPose</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ClearLocalCostmap</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RecoveryNode</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">BehaviorTree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Control-RoundRobin"><a href="#Control-RoundRobin" class="headerlink" title="Control: RoundRobin"></a>Control: RoundRobin</h2><p>轮循控制节点以轮循的方式 ticks 它的子节点，直到子节点返回 SUCCESS 为止，其父节点也将返回 SUCCESS。如果所有子节点都返回 FAILURE，那么父节点也会返回 FAILURE。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">main_tree_to_execute</span>=<span class="string">&quot;MainTree&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BehaviorTree</span> <span class="attr">ID</span>=<span class="string">&quot;MainTree&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RoundRobin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Action_A</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Action_B</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Action_C</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RoundRobin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">BehaviorTree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>初始时，所有节点均为 IDLE</li>
<li>tick 父节点后，第一个子节点(Action_A)被 ticked。假设在 tick 时子节点返回 RUNNING。此时，不会有其他子节点被 ticked，并且父节点也返回 RUNNING</li>
</ul>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/nav2_bt/control_round_robin_RUNNING_IDLE_IDLE-1726567206096-3.png" class="" title="control_round_robin_RUNNING_IDLE_IDLE.png">

<ul>
<li>假设 Action_A 返回 FAILTURE，则在下一次 tick，Action_B 将被 ticked，此时 Action_C 仍保持 unticked。假设此时，Action_B 返回 running，则父节点也会返回 running</li>
</ul>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/nav2_bt/control_round_robin_FAILURE_RUNNING_IDLE-1726567226834-5.png" class="" title="control_round_robin_FAILURE_RUNNING_IDLE.png">

<ul>
<li>假设 Action_B 返回 SUCCESS，则 RoundRobin 将停止所有子节点，并返回 SUCCESS。父节点保留此状态信息，并在下一个 tick 上 tick Action_C，而不是像步骤2那样从 Action_A 开始</li>
</ul>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/nav2_bt/control_round_robin_FAILURE_SUCCESS_IDLE-1726567316831-11.png" class="" title="control_round_robin_FAILURE_SUCCESS_IDLE.png">

<ul>
<li>在下一个 tick，假设 Action_C 返回 RUNNING，则父节点 RoundRobin 也返回 RUNNING。不会 tick 其它节点</li>
</ul>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/nav2_bt/control_round_robin_FAILURE_SUCCESS_RUNNING-1726567328533-13.png" class="" title="control_round_robin_FAILURE_SUCCESS_RUNNING.png">

<ul>
<li>最后一次 tick，假设 Action_C 返回 FAILTURE，则父节点将循环并 tick Action_A。Action_A 返回 RUNNING，则父节点也返回 RUNNING。此模式将无限期地持续下去，除非所有子节点都返回FAILURE</li>
</ul>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/nav2_bt/control_round_robin_RUNNING_IDLE_FAILURE-1726567335983-15.png" class="" title="control_round_robin_RUNNING_IDLE_FAILURE.png">

<h1 id="Nav2-Behavior-Tree-示例"><a href="#Nav2-Behavior-Tree-示例" class="headerlink" title="Nav2 Behavior Tree 示例"></a>Nav2 Behavior Tree 示例</h1><p>以 <code>nav2_bt_navigator/behavior_trees/navigate_to_pose_w_replanning_and_recovery.xml</code> 为例。该行为树以 1hz 的频率周期性地重新规划全局路径，也有恢复动作。</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/nav2_bt/overall_bt-1726567399622-17.png" class="" title="overall_bt.png">

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">main_tree_to_execute</span>=<span class="string">&quot;MainTree&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BehaviorTree</span> <span class="attr">ID</span>=<span class="string">&quot;MainTree&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RecoveryNode</span> <span class="attr">number_of_retries</span>=<span class="string">&quot;6&quot;</span> <span class="attr">name</span>=<span class="string">&quot;NavigateRecovery&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PipelineSequence</span> <span class="attr">name</span>=<span class="string">&quot;NavigateWithReplanning&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">RateController</span> <span class="attr">hz</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">RecoveryNode</span> <span class="attr">number_of_retries</span>=<span class="string">&quot;1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ComputePathToPose&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ComputePathToPose</span> <span class="attr">goal</span>=<span class="string">&quot;&#123;goal&#125;&quot;</span> <span class="attr">path</span>=<span class="string">&quot;&#123;path&#125;&quot;</span> <span class="attr">planner_id</span>=<span class="string">&quot;GridBased&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ReactiveFallback</span> <span class="attr">name</span>=<span class="string">&quot;ComputePathToPoseRecoveryFallback&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">GoalUpdated</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">ClearEntireCostmap</span> <span class="attr">name</span>=<span class="string">&quot;ClearGlobalCostmap-Context&quot;</span> <span class="attr">service_name</span>=<span class="string">&quot;global_costmap/clear_entirely_global_costmap&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ReactiveFallback</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">RecoveryNode</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">RateController</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">RecoveryNode</span> <span class="attr">number_of_retries</span>=<span class="string">&quot;1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;FollowPath&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">FollowPath</span> <span class="attr">path</span>=<span class="string">&quot;&#123;path&#125;&quot;</span> <span class="attr">controller_id</span>=<span class="string">&quot;FollowPath&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ReactiveFallback</span> <span class="attr">name</span>=<span class="string">&quot;FollowPathRecoveryFallback&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">GoalUpdated</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ClearEntireCostmap</span> <span class="attr">name</span>=<span class="string">&quot;ClearLocalCostmap-Context&quot;</span> <span class="attr">service_name</span>=<span class="string">&quot;local_costmap/clear_entirely_local_costmap&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ReactiveFallback</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">RecoveryNode</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">PipelineSequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ReactiveFallback</span> <span class="attr">name</span>=<span class="string">&quot;RecoveryFallback&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GoalUpdated</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">RoundRobin</span> <span class="attr">name</span>=<span class="string">&quot;RecoveryActions&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Sequence</span> <span class="attr">name</span>=<span class="string">&quot;ClearingActions&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ClearEntireCostmap</span> <span class="attr">name</span>=<span class="string">&quot;ClearLocalCostmap-Subtree&quot;</span> <span class="attr">service_name</span>=<span class="string">&quot;local_costmap/clear_entirely_local_costmap&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ClearEntireCostmap</span> <span class="attr">name</span>=<span class="string">&quot;ClearGlobalCostmap-Subtree&quot;</span> <span class="attr">service_name</span>=<span class="string">&quot;global_costmap/clear_entirely_global_costmap&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">Sequence</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Spin</span> <span class="attr">spin_dist</span>=<span class="string">&quot;1.57&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Wait</span> <span class="attr">wait_duration</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">BackUp</span> <span class="attr">backup_dist</span>=<span class="string">&quot;0.15&quot;</span> <span class="attr">backup_speed</span>=<span class="string">&quot;0.025&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">RoundRobin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ReactiveFallback</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RecoveryNode</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">BehaviorTree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>该行为树包含两个子树， <code>NavigateWithReplanning</code> 子树将被称为 Navigation 子树， <code>RecoveryFallback</code> 子树将被称为 Recovery 子树。</p>
<p>Navigation 子树主要涉及实际的导航行为:</p>
<ul>
<li>计算路径</li>
<li>路径跟随</li>
<li>上述每个主要导航行为的 contextual recovery 行为</li>
</ul>
<p>Recovery 子树包括系统级故障或不容易在内部处理的项目的行为。</p>
<p>整个 BT 将花费大部分时间在导航子树中。如果 Navigation 子树中的两个主要行为中的任何一个失败(路径计算或路径跟踪)，将尝试 contextual recovery。</p>
<p>如果 contextual recovery 仍然不行，Navigation 子树将返回 FAILURE。系统将转到 recovery 子树，尝试清除任何系统级导航失败。</p>
<h2 id="Navigation-subtree"><a href="#Navigation-subtree" class="headerlink" title="Navigation subtree"></a>Navigation subtree</h2><img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/nav2_bt/navigation_subtree-1726568324305-19.png" class="" title="navigation_subtree.png">

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PipelineSequence</span> <span class="attr">name</span>=<span class="string">&quot;NavigateWithReplanning&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RateController</span> <span class="attr">hz</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RecoveryNode</span> <span class="attr">number_of_retries</span>=<span class="string">&quot;1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ComputePathToPose&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ComputePathToPose</span> <span class="attr">goal</span>=<span class="string">&quot;&#123;goal&#125;&quot;</span> <span class="attr">path</span>=<span class="string">&quot;&#123;path&#125;&quot;</span> <span class="attr">planner_id</span>=<span class="string">&quot;GridBased&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ReactiveFallback</span> <span class="attr">name</span>=<span class="string">&quot;ComputePathToPoseRecoveryFallback&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GoalUpdated</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ClearEntireCostmap</span> <span class="attr">name</span>=<span class="string">&quot;ClearGlobalCostmap-Context&quot;</span> <span class="attr">service_name</span>=<span class="string">&quot;global_costmap/clear_entirely_global_costmap&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ReactiveFallback</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RecoveryNode</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RateController</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RecoveryNode</span> <span class="attr">number_of_retries</span>=<span class="string">&quot;1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;FollowPath&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">FollowPath</span> <span class="attr">path</span>=<span class="string">&quot;&#123;path&#125;&quot;</span> <span class="attr">controller_id</span>=<span class="string">&quot;FollowPath&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ReactiveFallback</span> <span class="attr">name</span>=<span class="string">&quot;FollowPathRecoveryFallback&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GoalUpdated</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ClearEntireCostmap</span> <span class="attr">name</span>=<span class="string">&quot;ClearLocalCostmap-Context&quot;</span> <span class="attr">service_name</span>=<span class="string">&quot;local_costmap/clear_entirely_local_costmap&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ReactiveFallback</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RecoveryNode</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PipelineSequence</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>包含两个主要 actions：</p>
<ul>
<li><code>ComputePathToPose</code></li>
<li><code>FollowPath</code></li>
</ul>
<p>父节点 <code>PipelineSequence</code> 允许 <code>ComputePathToPose</code> 被 ticked，若 <code>ComputePathToPose</code> 执行成功，则会 tick <code>FollowPath</code>。 <strong>在 tick <code>FollowPath</code> 子树的同时， <code>ComputePathToPose</code> 子树也将被 ticked。这允许在机器人移动时重新计算路径</strong>。</p>
<p><code>RateController</code> 节点控制以 1Hz 的速度 tick navigation 子树。</p>
<p><code>ComputePathToPose</code> 子树：</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/nav2_bt/contextual_recoveries-1726568336695-21.png" class="" title="contextual_recoveries.png">

<h2 id="Recovery-subtree"><a href="#Recovery-subtree" class="headerlink" title="Recovery subtree"></a>Recovery subtree</h2><img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/nav2_bt/recovery_subtree-1726568371198-23.png" class="" title="recovery_subtree.png">

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ReactiveFallback</span> <span class="attr">name</span>=<span class="string">&quot;RecoveryFallback&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">GoalUpdated</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RoundRobin</span> <span class="attr">name</span>=<span class="string">&quot;RecoveryActions&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Sequence</span> <span class="attr">name</span>=<span class="string">&quot;ClearingActions&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ClearEntireCostmap</span> <span class="attr">name</span>=<span class="string">&quot;ClearLocalCostmap-Subtree&quot;</span> <span class="attr">service_name</span>=<span class="string">&quot;local_costmap/clear_entirely_local_costmap&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ClearEntireCostmap</span> <span class="attr">name</span>=<span class="string">&quot;ClearGlobalCostmap-Subtree&quot;</span> <span class="attr">service_name</span>=<span class="string">&quot;global_costmap/clear_entirely_global_costmap&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Spin</span> <span class="attr">spin_dist</span>=<span class="string">&quot;1.57&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Wait</span> <span class="attr">wait_duration</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">BackUp</span> <span class="attr">backup_dist</span>=<span class="string">&quot;0.15&quot;</span> <span class="attr">backup_speed</span>=<span class="string">&quot;0.025&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RoundRobin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ReactiveFallback</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最上层的父级 <code>ReactiveFallback</code> 控制系统范围内其余恢复之间的流，并异步检查是否已接收到新目标。如果目标在任何时候被更新，这个子树将停止所有子树并返回SUCCESS。这允许对新目标做出快速反应，并抢占当前执行的恢复。</p>
<p>如果目标从未更新，行为树将继续到 <code>RoundRobin</code> 节点。BT中默认的四种系统级恢复是:</p>
<ul>
<li>A sequence that clears both costmaps (local, and global)</li>
<li><code>Spin</code> Action</li>
<li><code>Wait</code> action</li>
<li><code>BackUp</code> action</li>
</ul>
<p>当 <code>RoundRobin</code> 的四个子节点中的任何一个成功时，机器人将尝试在导航子树中重新导航。如果这个导航不成功，round bin的下一个子节点将被选中。</p>
<p>例如，假设机器人卡住了，Navigation 子树返回 FAILURE:(本例中，假设 goal 从未更新过)</p>
<ul>
<li>尝试恢复子树中的 Costmap 清除序列，并返回 SUCCESS。机器人现在再次移动到导航子树</li>
<li>假设清除两个 costmap 是不够的，并且 Navigation 子树再次返回 FAILURE。机器人现在 tick 了恢复子树</li>
<li>在恢复子树中，旋转(<code>Spin</code>)动作将被 ticked。如果返回 SUCCESS，那么机器人将返回到主导航子树，但是假设 <code>Spin</code> 动作返回FAILURE。在这种情况下，树将保留在 Recovery 子树中</li>
<li>假设 Recovery 子树中 <code>Wait</code> 返回 SUCCESS，则机器人将再次返回 Navigation 子树中</li>
<li>假设 Navigation 子树又一次返回 FAILTURE，(清除 Costmap、尝试 <code>Spin</code> 和 <code>Wait</code> 仍然不足以恢复系统)。机器人将移动到恢复子树并尝试 <code> BackUp</code> 操作。假设机器人尝试执行 <code>BackUp</code> 操作，并且能够成功完成该操作。 <code>BackUp</code> 操作节点返回SUCCESS，因此现在再次转到 Navigation 子树</li>
<li>在这个假设的场景中，假设 <code>BackUp</code> 操作允许机器人成功地在 Navigation 子树中导航，并且机器人到达了目标。在这种情况下，整个 BT 仍将返回 SUCCESS</li>
</ul>
<p>如果 <code>BackUp</code> 操作不足以让机器人摆脱卡住，则上述逻辑将无限期地继续下去，直到超过导航子树和恢复子树的父树中的 <code>number_of_retries</code>，或者恢复子树中的所有系统级恢复返回 FAILURE。</p>
<h2 id="Navigate-to-pose"><a href="#Navigate-to-pose" class="headerlink" title="Navigate to pose"></a>Navigate to pose</h2><p>该行为树实现了一个导航行为，从一个起点，导航到指定的目标点。</p>
<h2 id="Navigate-through-poses"><a href="#Navigate-through-poses" class="headerlink" title="Navigate through poses"></a>Navigate through poses</h2><p>该行为树实现了一个导航行为，从一个起点，通过许多中间硬姿态约束，到达自由空间中的最终目标。它既包含在特定子上下文中用于恢复的自定义行为，也包含用于系统级故障的全局恢复子树。它还为用户提供了在返回失败状态之前多次重试任务的机会。</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/nav2_bt/navigate_through_poses-1726568419725-25.png" class="" title="navigate_through_poses.png">

<h2 id="Navigate-to-pose-and-Pause-near-goal-obstacle"><a href="#Navigate-to-pose-and-Pause-near-goal-obstacle" class="headerlink" title="Navigate to pose and Pause near goal-obstacle"></a>Navigate to pose and Pause near goal-obstacle</h2><p>该行为树是 navigate to pose 的软扩展。除了 navigate to pose 的功能外，该行为树允许机器人通过暂停机器人的导航并等待用户指定的时间来检查障碍物是否已清除，从而有效地处理靠近目标的障碍物(例如叉车，人或其他临时障碍物)。如果在等待时间内障碍物已经移动，机器人将选择较短的路径继续到达目标。如果障碍物在等待时间内没有移动或等待时间结束，则机器人将使用更长的路径到达最终目标位置。最终，对于给定的任务，这种行为树有助于解决周期时间长的问题，这是由于在目标位置附近存在临时障碍物而产生的长路径所导致的。</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/nav2_bt/patience_and_recovery-1726568430871-27.png" class="" title="patience_and_recovery.png">

<p>从图中，可以看到导航子树中有一个额外的分支，称为 <code>MonitorAndFollowPath</code>。该分支的目的是让用户执行他们的机器人应该显示的任何类型的监视行为。在这种特殊的 BT 中， <code>PathLongerOnApproach</code> BT 节点专门利用 monitor 分支来检查全局规划器是否决定在接近用户指定的目标接近度时为机器人规划一条明显更长的路径。如果没有明显较长的路径，则监视节点进入 FollowPath 恢复节点，然后该节点生成必要的控制命令。</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/nav2_bt/nav2_patience_near_goal_and_go_around-1726568443235-29.gif" class="" title="nav2_patience_near_goal_and_go_around.gif"><img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/nav2_bt/nav2_patience_near_goal_and_clear_obstacle-1726568460021-31.gif" class="" title="nav2_patience_near_goal_and_clear_obstacle.gif">

<h2 id="Navigate-to-pose-路径无效时重新规划"><a href="#Navigate-to-pose-路径无效时重新规划" class="headerlink" title="Navigate to pose(路径无效时重新规划)"></a>Navigate to pose(路径无效时重新规划)</h2><p>从起始点导航到自由空间中的单点目标。它既包含在特定子上下文中使用自定义恢复，也包含针对系统级故障的全局恢复子树。它还为用户提供了在返回失败状态之前多次重试任务的机会。</p>
<h2 id="Follow-Dynamic-Point"><a href="#Follow-Dynamic-Point" class="headerlink" title="Follow Dynamic Point"></a>Follow Dynamic Point</h2><p>此行为树从一个起点实现导航行为，试图随时间跟随一个动态点。这个“动态点”可以是一个人，另一个机器人，一个虚拟的胡萝卜，任何东西。唯一的要求是想要遵循的姿态被发布到 <code>GoalUpdater</code> BT节点中概述的主题。</p>
<h2 id="Odometry-Calibration"><a href="#Odometry-Calibration" class="headerlink" title="Odometry Calibration"></a>Odometry Calibration</h2><p>该行为树使用 <code>DriveOnHeading</code> 和 <code>Spin</code> 行为驱动机器人在 CCW 正方形中运行三次。机器人将以 0.2m&#x2F;s 的速度遍行广场的每边 2 米，然后进行 90 度转弯。这是测量里程计精度的原始实验，可以使用和重复调整与里程计相关的参数以提高质量。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">main_tree_to_execute</span>=<span class="string">&quot;MainTree&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BehaviorTree</span> <span class="attr">ID</span>=<span class="string">&quot;MainTree&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Repeat</span> <span class="attr">num_cycles</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Sequence</span> <span class="attr">name</span>=<span class="string">&quot;Drive in a square&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DriveOnHeading</span> <span class="attr">dist_to_travel</span>=<span class="string">&quot;2.0&quot;</span> <span class="attr">speed</span>=<span class="string">&quot;0.2&quot;</span> <span class="attr">time_allowance</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Spin</span> <span class="attr">spin_dist</span>=<span class="string">&quot;1.570796&quot;</span> <span class="attr">is_recovery</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DriveOnHeading</span> <span class="attr">dist_to_travel</span>=<span class="string">&quot;2.0&quot;</span> <span class="attr">speed</span>=<span class="string">&quot;0.2&quot;</span> <span class="attr">time_allowance</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Spin</span> <span class="attr">spin_dist</span>=<span class="string">&quot;1.570796&quot;</span> <span class="attr">is_recovery</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DriveOnHeading</span> <span class="attr">dist_to_travel</span>=<span class="string">&quot;2.0&quot;</span> <span class="attr">speed</span>=<span class="string">&quot;0.2&quot;</span> <span class="attr">time_allowance</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Spin</span> <span class="attr">spin_dist</span>=<span class="string">&quot;1.570796&quot;</span> <span class="attr">is_recovery</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DriveOnHeading</span> <span class="attr">dist_to_travel</span>=<span class="string">&quot;2.0&quot;</span> <span class="attr">speed</span>=<span class="string">&quot;0.2&quot;</span> <span class="attr">time_allowance</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Spin</span> <span class="attr">spin_dist</span>=<span class="string">&quot;1.570796&quot;</span> <span class="attr">is_recovery</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Repeat</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">BehaviorTree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>行为树</category>
      </categories>
      <tags>
        <tag>行为树</tag>
        <tag>状态机</tag>
      </tags>
  </entry>
  <entry>
    <title>BT 示例代码</title>
    <url>/2024/09/07/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ACTION_CLIENT_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACTION_CLIENT_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> bt_tutorials</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">ActionT</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ActionClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> BaseClass  = RosActionNode&lt;ActionT&gt;;</span><br><span class="line">    <span class="keyword">using</span> ActionClientType = actionlib::SimpleActionClient&lt;ActionT&gt;;</span><br><span class="line">    <span class="keyword">using</span> ActionType = ActionT;</span><br><span class="line">    <span class="keyword">using</span> GoalType   = <span class="keyword">typename</span> ActionT::_action_goal_type::_goal_type;</span><br><span class="line">    <span class="keyword">using</span> ResultType = <span class="keyword">typename</span> ActionT::_action_result_type::_result_type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ActionClient</span>(<span class="type">const</span> std::string&amp; name)</span><br><span class="line">        : <span class="built_in">action_client_</span>(name, <span class="literal">true</span>), <span class="built_in">action_name_</span>(name) <span class="comment">// 实例化 action client</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">ActionClient</span>()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">sendGoal</span><span class="params">(cost GoalType&amp; goal)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// if server not running, fail after 20ms</span></span><br><span class="line">        <span class="keyword">if</span> (!action_client_.<span class="built_in">waitForServer</span>(<span class="built_in">rosDuration</span>(<span class="number">0.02</span>))) &#123;</span><br><span class="line">            <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;%s not running.&quot;</span>, action_name_.<span class="built_in">c_str</span>());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        action_client_.<span class="built_in">sendGoal</span>(goal);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">actionlib::SimpleClientGoalState <span class="title">getState</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> action_client_.<span class="built_in">getState</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ResultType <span class="title">getResult</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">// waitForResult();</span></span><br><span class="line">        <span class="keyword">return</span> action_client_.<span class="built_in">getResult</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cancelGoal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        action_client_.<span class="built_in">cancelAllGoal</span>(); <span class="comment">// or cancelGoal()</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ActionClientType action_client_;</span><br><span class="line">    std::string action_name_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ASYNC_ACTION_INTERFACE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  ASYNC_ACTION_INTERFACE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ACTION_INTERFACE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACTION_INTERFACE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;behaviortree_cpp/action_node.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;behaviortree_cpp/bt_factory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;actionlib/client/simple_action_client.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> BT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> narwal_behavior_tree</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">ActionT</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AsyncActionInterfaceNode</span>: <span class="keyword">public</span> AsyncActionNode</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> BaseClass  = RosActionNode&lt;ActionT&gt;;</span><br><span class="line">    <span class="keyword">using</span> ActionClientType = actionlib::SimpleActionClient&lt;ActionT&gt;;</span><br><span class="line">    <span class="keyword">using</span> ActionType = ActionT;</span><br><span class="line">    <span class="keyword">using</span> GoalType   = <span class="keyword">typename</span> ActionT::_action_goal_type::_goal_type;</span><br><span class="line">    <span class="keyword">using</span> ResultType = <span class="keyword">typename</span> ActionT::_action_result_type::_result_type;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AsyncActionInterface</span>(ros::NodeHandle&amp; nh, <span class="type">const</span> std::string&amp; name, <span class="type">const</span> BT::NodeConfiguration&amp; config)</span><br><span class="line">        : <span class="built_in">AsyncActionNode</span>(name, config), <span class="built_in">node_</span>(nh)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> std::string server_name = <span class="built_in">getInput</span>&lt;std::string&gt;(<span class="string">&quot;server_name&quot;</span>).<span class="built_in">value</span>();</span><br><span class="line">        action_client_ = std::<span class="built_in">make_shared</span>&lt;ActionClientType&gt;(node_, server_name, <span class="literal">true</span> ); <span class="comment">// 实例化 action client</span></span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">AsyncActionInterface</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> BT::PortsList <span class="title">providedPorts</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123; BT::<span class="built_in">InputPort</span>&lt;Pose2D&gt;(<span class="string">&quot;goal&quot;</span>) &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 异步行为，会创建线程执行，不会阻塞主流程，执行过程中该行为返回 RUNNING 状态</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> BT::NodeStatus <span class="title">tick</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!action_client_-&gt;<span class="built_in">waitForServer</span>(ros::<span class="built_in">Duration</span>(<span class="number">2.0</span>))) &#123;</span><br><span class="line">            <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;Server not running.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> BT::NodeStatus::FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Pose2D goal;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">getInput</span>&lt;Pose2D&gt;(<span class="string">&quot;goal&quot;</span>, goal)) &#123;</span><br><span class="line">            <span class="comment">// if I can&#x27;t get this, there is something wrong with your BT.</span></span><br><span class="line">            <span class="comment">// For this reason throw an exception instead of returning FAILURE</span></span><br><span class="line">            <span class="keyword">throw</span> BT::<span class="built_in">RuntimeError</span>(<span class="string">&quot;missing required input [goal]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        aborted_ = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Send goal...&quot;</span>);</span><br><span class="line">        <span class="comment">// GoalType msg;</span></span><br><span class="line">        action_client_-&gt;<span class="built_in">sendGoal</span>(msg);</span><br><span class="line">        <span class="keyword">while</span> (!aborted_ &amp;&amp; !action_client_.<span class="built_in">waitForResult</span>(ros::<span class="built_in">Duration</span>(<span class="number">0.02</span>))) &#123;</span><br><span class="line">            <span class="comment">// 等待结果</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (aborted_) &#123;</span><br><span class="line">            <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;Goal aborted&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> BT::NodeStatus::FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (action_client_-&gt;<span class="built_in">getState</span>() != actionlib::SimpleClientGoalState::SUCCEEDED) &#123;</span><br><span class="line">            <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;Action Server failed.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> BT::NodeStatus::FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Goal reached.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> BT::NodeStatus::SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">halt</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        aborted_ = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;ActionClientType&gt; action_client_;</span><br><span class="line">    ros::NodeHandle node_;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> aborted_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MOVE_BASE_CLIENT_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOVE_BASE_CLIENT_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pose2D</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x, y, quaternion_z, quaternion_w;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BT</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt; <span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function">Pose2D <span class="title">convertFromString</span><span class="params">(StringView key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// three real numbers separated by semicolons</span></span><br><span class="line">    <span class="keyword">auto</span> parts = BT::<span class="built_in">splitString</span>(key, <span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (parts.<span class="built_in">size</span>() != <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> BT::<span class="built_in">RuntimeError</span>(<span class="string">&quot;invalid input)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Pose2D output;</span><br><span class="line">        output.x     = <span class="built_in">convertFromString</span>&lt;<span class="type">double</span>&gt;(parts[<span class="number">0</span>]);</span><br><span class="line">        output.y     = <span class="built_in">convertFromString</span>&lt;<span class="type">double</span>&gt;(parts[<span class="number">1</span>]);</span><br><span class="line">        output.quaternion_z = <span class="built_in">convertFromString</span>&lt;<span class="type">double</span>&gt;(parts[<span class="number">2</span>]);</span><br><span class="line">        output.quaternion_w = <span class="built_in">convertFromString</span>&lt;<span class="type">double</span>&gt;(parts[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">// end namespace BT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> bt_tutorials</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MoveBaseClient</span>: <span class="keyword">public</span> ActionClient, BT::AsyncActionNode</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MoveBaseClient</span>(<span class="type">const</span> std::string&amp; action_name, <span class="type">const</span> std::string&amp; node_name,</span><br><span class="line">                    <span class="type">const</span> BT::NodeConfiguration&amp; config)</span><br><span class="line">        : <span class="built_in">ActionClient</span>(<span class="string">&quot;move_base&quot;</span>), <span class="built_in">AsyncActionNode</span>(node_name, config)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">MoveBaseClient</span>()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> BT::PortsList <span class="title">providedPorts</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123; BT::<span class="built_in">InputPort</span>&lt;Pose2D&gt;(<span class="string">&quot;goal&quot;</span>) &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> BT::NodeStatus <span class="title">tick</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Pose2D goal;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">getInput</span>&lt;Pose2D&gt;(<span class="string">&quot;goal&quot;</span>, goal)) &#123;</span><br><span class="line">            <span class="comment">// 读取不到目标点参数，则抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> BT::<span class="built_in">RuntimeError</span>(<span class="string">&quot;missing required input [goal]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        aborted_ = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">sendGoal</span>(goal)) &#123;</span><br><span class="line">            <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;Maybe action server not running.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> BT::NodeStatus::FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!aborted_ &amp;&amp; !<span class="built_in">waitForResult</span>(ros::<span class="built_in">Duration</span>(<span class="number">0.02</span>))) &#123; <span class="comment">// timeout: 20ms</span></span><br><span class="line"></span><br><span class="line">        &#125;       </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (aborted_) &#123;</span><br><span class="line">            <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;MoveBase aborted&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> BT::NodeStatus::FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getState</span>() != actionlib::SimpleClientGoalState::SUCCEEDED) &#123;</span><br><span class="line">            <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;MoveBase failed&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> BT::NodeStatus::FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Goal reached&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> BT::NodeStatus::SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">halt</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        aborted_ = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">bool</span> aborted_;</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="comment">// namespace bt_tutorials</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>



<p>这些方法都是一个 Action 类对应一个行为。若需要在一个类中定义多个异步行为，例如：机械臂控制类中定义移动到指定位置和移动到预定义位姿两类行为，而两类行为通过同一个 action client 进行通信时，可使用依赖注入方式。</p>
]]></content>
      <categories>
        <category>行为树</category>
      </categories>
      <tags>
        <tag>行为树</tag>
        <tag>状态机</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/21/Robot/Map/cartographer/BBS/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Real-Time Correlative Scan Matching</title>
    <url>/2024/09/21/Robot/Map/cartographer/Real-Time%20Correlative%20Scan%20Matching/</url>
    <content><![CDATA[<p>介绍了三种几率概率网格的 2D scan matching 算法：Brute Force、Computing 2D Slices、Multi-Level Resolution。</p>
<p><a href="https://www.cnblogs.com/mafuqiang/p/10885616.html">cartographer 3D scan matching 理解</a></p>
]]></content>
  </entry>
  <entry>
    <title>SPA</title>
    <url>/2024/09/21/Robot/Map/cartographer/SPA/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>cartographer (一)</title>
    <url>/2024/09/21/Robot/Map/cartographer/cartographer%20(%E4%B8%80)/</url>
    <content><![CDATA[<p>cartographer加了后端做闭环，大范围的回环也可以实现，但是对开阔的场景并不适用。</p>
<p>单纯看二维slam的话，没有里程计数据，没有imu数据，只有单独的scan matching.</p>
<p><strong>cartographer内部并未直接使用 sensor_msgs&#x2F;Imu 中的角度数据(即:四元数)，而是使用角加速度和线加速度</strong>。  </p>
<h2 id="bag包检测"><a href="#bag包检测" class="headerlink" title="bag包检测"></a>bag包检测</h2><p>Cartographer ROS 中提供了 cartographer_rosbag_validate 来自动分析bag 包中的数据。 该工具可发现 bag 包中常见的错误，例如：如果检测到 sensor_msgs&#x2F;Imu 主题，则将确保 Imu 中包含重力矢量(gravity vector)，因为 cartographer 使用重力范数(gravity norm)来确定地面的方向。</p>
<p>该工具还可以提供如何提高数据质量的提示。例如，对于 Velodyne 激光雷达，该工具会建议传感器发出的UDP包使用一个 sensor_msgs&#x2F;PointCloud2 消息，而不是每转一圈发布一个消息。 凭借这种消息粒度，Cartographer可以解除由机器人运动引起的点云变形，从而实现更好的重建。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun cartographer_ros cartographer_rosbag_validate -bag_filename your_bag.bag</span><br></pre></td></tr></table></figure>

<p><img src="/../images/cartographer_rosbag_validate.png" alt="cartographer_rosbag_validate">  </p>
<p>使用bag包重建地图时，既可以使用 bag 包中的tf，也可以在 .urdf 中定义机器人模型。 但是，如果机器人与 IMU link 或 Lidar link 之间存在偏移，则可能导致不一致的重建效果，cartographer可以纠正小的位姿错误，但不能纠正所有。   </p>
<h2 id="cartographer-算法架构"><a href="#cartographer-算法架构" class="headerlink" title="cartographer 算法架构"></a>cartographer 算法架构</h2><p><img src="/../images/cartographer_system.png" alt="cartographer_system"><br>cartographer 可分为两个独立但相关的子系统：<code>Local SLAM</code> 和 <code>Global SLAM</code>。  </p>
<p>**Local SLAM 有时也称为 frontend(前端) 或 本地轨迹生成器(local trajectory builder)**。 其工作是构建一系列 submap。 每个 submap 都是本地一致的，但是 local SLAM 随着时间的推移而漂移。</p>
<p>**Global SLAM 也称为 后端(backend)**。 运行在后台线程中，主要工作是找到 <code>loop closure constraints</code>。 通过 scans 与 submap 匹配来实现。 它还结合了其他传感器数据，以获得更高级别的视图，并确定最一致的全局解决方案。 在3D中，它还试图找到重力方向。  </p>
<p>总的来说，Local SLAM 主要是构建更好的 submaps; Global SLAM 主要是将这些 submaps 更好的结合起来。  </p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>测距传感器(例如: Lidars)提供多个方向的深度信息。但是并不是所有信息都是有用的。 例如：传感器表面有灰尘或者扫描到机器人自身，类似这些测量值可以视为 SLAM 的噪声。 cartographer 首先使用<strong>带通滤波器(bandpass filter)</strong>, 过滤(TRAJECTORY_BUILDER_nD.<strong>min_range</strong>,TRAJECTORY_BUILDER_nD.<strong>max_range</strong>) 范围外的数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRAJECTORY_BUILDER_nD.min_range</span><br><span class="line"># 对于大于max_range的激光点，将用TRAJECTORY_BUILDER_2D.missing_data_ray_length 来替代它的距离，</span><br><span class="line"># 这样的做法是为了不让建图时因点探测过远出现近距离数据丢失的问题</span><br><span class="line">TRAJECTORY_BUILDER_nD.max_range</span><br></pre></td></tr></table></figure>

<p>距离是在一段时间内测量的(激光扫描一圈需要一定的时间)，而机器人实际上正在移动。 但是，距离是由大型 ROS 消息中的“批量”传感器提供的。 <strong>cartographer 可以独立考虑每个消息的时间戳，以考虑机器人运动引起的变形</strong>。 cartographer 获取到的测量数据的频率越高，就越好地将测量结果组合成一个可以立即捕获的单个相干扫描。 因此，强烈建议尽可能多的提供 scan 数据（ROS消息）。  </p>
<p><strong>使用 laserscan 获取数据时，近处的物体被扫描到并提供更多的点，而远处的物体，则通常不能被扫描到或者被扫描到但是提供很少的点</strong>。因此，为了减少点处理的计算权重，通常需要对点云进行降采样。 然而，简单的随机抽样将从已经具有低密度的测量区域移除点，而高密度区域仍将具有比所需的更多的点。 为了解决这个密度问题，可以使用一个体素过滤器(<strong>voxel filter</strong>)，将原始点降采样为一个恒定大小的立方体，并且只保留每个立方体的质心。<br>voxel 越小，数据越密集，需要的计算量也就越大；voxel 越大，则可能会导致数据丢失，但计算会越快。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRAJECTORY_BUILDER_nD.voxel_filter_size # 默认为 0.025</span><br></pre></td></tr></table></figure>

<p>cartographer 不仅提供了固定大小的 voxel filter，也提供了 <strong>adaptive(自适应) voxel filter</strong>。 该过滤器尝试确定最佳 voxel 大小（在 TRAJECTORY_BUILDER_nD.*adaptive_voxel_filter.max_length 下）以获取期望的点数。 在3D中，两个自适应 voxel filter 用于生成高分辨率和低分辨率点云。 相关参数：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRAJECTORY_BUILDER_nD.*adaptive_voxel_filter.max_length # 采样最大间隔</span><br><span class="line">TRAJECTORY_BUILDER_nD.*adaptive_voxel_filter.min_num_points # 采样后最小点云数量</span><br></pre></td></tr></table></figure>

<h2 id="Local-SLAM"><a href="#Local-SLAM" class="headerlink" title="Local SLAM"></a>Local SLAM</h2><p>一旦scan数据经过合并及过滤之后，就可以用于 local SLAM 算法。 <strong>Local SLAM 使用来自 pose extrapolator 的初始猜测，通过 scan matching 将新的 scan 数据插入当前的 submap</strong>。 pose extrapolator 的背后思想是：使用除测距传感器之外的其它传感器的数据来预测下一次扫描应该插入 submap 的位置。  </p>
<h2 id="Scan-Matching"><a href="#Scan-Matching" class="headerlink" title="Scan Matching"></a>Scan Matching</h2><p>有两种 scan matching 策略：  </p>
<h4 id="CeresScanMatcher"><a href="#CeresScanMatcher" class="headerlink" title="CeresScanMatcher"></a>CeresScanMatcher</h4><p>将初始猜测作为先验，并找到 scan 与 submap 匹配的最佳位置。它通过插入子图和 sub-pixel 对齐扫描来实现。速度很快，但<strong>无法修复明显大于 submap 分辨率的错误</strong>。如果传感器设置和时序合理，那么仅使用 CeresScanMatcher 通常是最佳选择。    </p>
<p>CeresScanMatcher 的名字来源于 google 的 Ceres Solver 库，该库用于解决非线性最小二乘(non-linear least squares)问题。 scan match 被建模为非线性最小二乘问题，其中两个扫描数据 scan 之间的运动(即:变换矩阵)是待确定的参数。Ceres使用下降算法(descent algorithm)针对给定的迭代次数优化运动。 Ceres可以根据需要调整收敛速度。 例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRAJECTORY_BUILDER_nD.ceres_scan_matcher.ceres_solver_options.use_nonmonotonic_steps # 默认 false</span><br><span class="line">TRAJECTORY_BUILDER_nD.ceres_scan_matcher.ceres_solver_options.max_num_iterations # 默认 20</span><br><span class="line">TRAJECTORY_BUILDER_nD.ceres_scan_matcher.ceres_solver_options.num_threads # 默认 1</span><br></pre></td></tr></table></figure>

<p><code>CeresScanMatcher</code> 可以为每个输入配置为为每个输入源配置一个权重。 权重是衡量对数据的信任度，可以将其视为静态协方差。 权重参数的单位是无量纲的数量，不能在彼此之间进行比较。 数据源的权重越大，cartographer 在进行 scan match 时就会越强调这个数据源。 数据来源包括占用空间（扫描点）以及 来自 pose extrapolator（RealTimeCorrelativeScanMatcher）的平移和旋转 等。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRAJECTORY_BUILDER_nD.ceres_scan_matcher.translation_weight # 默认 10.</span><br><span class="line">TRAJECTORY_BUILDER_nD.ceres_scan_matcher.rotation_weight # 默认 40.</span><br><span class="line">TRAJECTORY_BUILDER_nD.ceres_scan_matcher.occupied_space_weight # 默认1.</span><br><span class="line">TRAJECTORY_BUILDER_3D.ceres_scan_matcher.occupied_space_weight_0</span><br><span class="line">TRAJECTORY_BUILDER_3D.ceres_scan_matcher.occupied_space_weight_1</span><br></pre></td></tr></table></figure>

<h4 id="RealTimeCorrelativeScanMatcher"><a href="#RealTimeCorrelativeScanMatcher" class="headerlink" title="RealTimeCorrelativeScanMatcher"></a>RealTimeCorrelativeScanMatcher</h4><p><strong>如果没有其它传感器，或者不信任其它传感器的数据时</strong>，则可以使用 RealTimeCorrelativeScanMatcher。 它使用的方法类似于在循环闭包中将扫描与 submaps 匹配的方式(即与循环闭包中的每个 submap 进行匹配)，不同的是它与当前 submap 匹配。 <strong>然后将最佳匹配用作 <code>CeresScanMatcher</code> 的先验</strong>。 这种 <code>scan matcher</code> 非常耗费资源，并且基本上会覆盖来自除了测距传感器的其它传感器的数据，但它在特征丰富的环境中非常强大。<br>其工作原理是：在指定的<strong>搜索窗口</strong>中搜索类似的 scans ，<strong>搜索窗口由最大距离半径和最大角度半径定义</strong>。 当与该窗口中找到的 scans 进行 scan matching 时，可以为平移和旋转组件选择不同的权重。 例如，如果知道机器人不会旋转很多，则可以改变对应的权重值。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRAJECTORY_BUILDER_nD.use_online_correlative_scan_matching # 默认 false</span><br><span class="line">TRAJECTORY_BUILDER_nD.real_time_correlative_scan_matcher.linear_search_window # 默认 0.1</span><br><span class="line">TRAJECTORY_BUILDER_nD.real_time_correlative_scan_matcher.angular_search_window # 默认 math.rad(20.)</span><br><span class="line">TRAJECTORY_BUILDER_nD.real_time_correlative_scan_matcher.translation_delta_cost_weight # 默认 1e-1</span><br><span class="line">TRAJECTORY_BUILDER_nD.real_time_correlative_scan_matcher.rotation_delta_cost_weight # 默认 1e-1</span><br></pre></td></tr></table></figure>

<h3 id="motion-filter"><a href="#motion-filter" class="headerlink" title="motion filter"></a>motion filter</h3><p>为避免每个子图插入太多 scans，一旦 scan matcher 找到两次扫描之间的运动(即：匹配成功)，就会通过 motion filter 进行过滤。 如果得到的运动不够明显，则丢弃该 scan 。 <strong>仅当扫描的运动高于特定距离、角度或时间的阈值时，才会将扫描插入到当前 submap 中</strong>。对应参数为：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRAJECTORY_BUILDER_nD.motion_filter.max_time_seconds # 默认 5.0s</span><br><span class="line">TRAJECTORY_BUILDER_nD.motion_filter.max_distance_meters # 默认 0.2m</span><br><span class="line">TRAJECTORY_BUILDER_nD.motion_filter.max_angle_radians # 默认 math.rad(1.0)</span><br></pre></td></tr></table></figure>

<h3 id="Submap"><a href="#Submap" class="headerlink" title="Submap"></a>Submap</h3><p>Local SLAM 接收到指定数量(TRAJECTORY_BUILDER_nD.submaps.num_range_data)的测距数据之后，才认为一个 submap 构建完成。随着时间的推移，Local SLAM 会出现漂移，Global SLAM 就是用于解决该漂移问题。<strong>一方面，submaps 必须足够小，以使其内部漂移低于分辨率，确保局部基本正确；另一方面，submaps 又应该足够大，以使回环能够正常工作</strong>。<br>submap 可以将其 scan 数据存储在几种不同的数据结构中：使用最多的是 <code>probability grids</code>。但是在 2D 建图中，还可以选用 <code>TSDF(Truncated Signed Distance Fields)</code>。对应参数为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRAJECTORY_BUILDER_2D.submaps.grid_options_2d.grid_type</span><br></pre></td></tr></table></figure>

<p><code>Probability grids</code> 将空间划分为 2D 或 3D 网格，每个单元格大小固定，且包含占用概率。根据 <code>hits</code> 和 <code>misses</code>（传感器与测量点之间的自由空间）更新占用率(odds - 也即赔率)。 在占用率计算中，<code>hits</code> 和 <code>misses</code> 可以具有不同的权重。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRAJECTORY_BUILDER_2D.submaps.range_data_inserter.probability_grid_range_data_inserter.hit_probability</span><br><span class="line">TRAJECTORY_BUILDER_2D.submaps.range_data_inserter.probability_grid_range_data_inserter.miss_probability</span><br><span class="line">TRAJECTORY_BUILDER_3D.submaps.range_data_inserter.hit_probability</span><br><span class="line">TRAJECTORY_BUILDER_3D.submaps.range_data_inserter.miss_probability</span><br></pre></td></tr></table></figure>

<p>2D 地图中，每个 submap 只需存储一个 probability grid。而在 3D 地图中，出于扫描匹配性能的原因，使用了两个混合概率网格(hybrid probability grids):   </p>
<ul>
<li>一个针对较远测量的低分辨率的 hybrid grid</li>
<li>一个针对较近测量的高分辨率的 hybrid grid</li>
</ul>
<p>scan match 首先将较远测量点云与低分辨率的 hybrid grid 对齐，然后通过较近测量点云与高分辨率 hybrid grid 对齐来细化 pose。</p>
<h2 id="Global-SLAM"><a href="#Global-SLAM" class="headerlink" title="Global SLAM"></a>Global SLAM</h2><p>Local SLAM 构建连续的 submaps 的同时，全局优化（通常称为 <code>the optimization problem</code> 或 <code>sparse pose adjustment-稀疏位姿调整</code>）任务在后台运行。 它的作用是重新排列相邻的 submaps，以形成一个连贯的 global map。  </p>
<p><strong>一旦插入了一定数量的轨迹节点，就会分批运行优化</strong>。 可根据运行优化的频率来调整这个批次的数量。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POSE_GRAPH.optimize_every_n_nodes</span><br></pre></td></tr></table></figure>

<p>将该参数设置为 0 就意味着关闭 Global SLAM。 (在调试 cartographer 时，通常会先关闭 Global SLAM，先集中研究 Local SLAM)  </p>
<p>Global SLAM 采用的是<strong>图优化</strong>的方式。 本质上是一种 <code>pose graph optimization</code>，它<strong>通过在轨迹节点和 submaps 之间构建约束，然后优化结果约束图来工作</strong>。 <code>Sparse pose adjustment</code> 的结果称为：<code>pose graph</code>。 约束也可在 RViz 中显示，因此，调试 global SLAM 也很方便。还可以切换 <code>POSE_GRAPH.constraint_builder.log_matches</code> 以获取格式化为直方图的约束生成器的常规报告。  </p>
<h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h3><p>约束分为：<strong>非全局约束</strong>和<strong>全局约束</strong>。  </p>
<ul>
<li><p>1）非全局约束<br>也即：<code>inter submaps constraints</code>(submaps间的约束)。 在轨迹上的相邻节点之间自动构建。直观地说，那些“非全局性的绳索”使轨迹的局部结构保持连贯。  </p>
</li>
<li><p>2）全局约束<br>通常也称为：<code>loop closure constraints</code> 或者 <code>intra submaps constraints</code>。 在新的 submap 和空间中被认为”足够近”的 previous nodes 以及 strong fit(良好匹配) 之间定期搜索全局约束。直观地说，那些“全局绳索”在结构中引入了结，并牢牢地使两股更接近。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POSE_GRAPH.constraint_builder.max_constraint_distance</span><br><span class="line">POSE_GRAPH.fast_correlative_scan_matcher.linear_search_window</span><br><span class="line">POSE_GRAPH.fast_correlative_scan_matcher_3d.linear_xy_search_window</span><br><span class="line">POSE_GRAPH.fast_correlative_scan_matcher_3d.linear_z_search_window</span><br><span class="line">POSE_GRAPH.fast_correlative_scan_matcher*.angular_search_window</span><br></pre></td></tr></table></figure></li>
</ul>
<p>为了限制约束的数量(及计算量)。cartographer 对这些节点进行了下采样.通过 <code>POSE_GRAPH.constraint_builder.sampling_ratio</code> 参数控制。采样结果过少的话会导致可能错过约束而使得闭环检测失效；过多的话会导致全局 SLAM 的运行效率过低而达不到实时的闭环检测.  </p>
<h3 id="FastCorrelativeScanMatcher"><a href="#FastCorrelativeScanMatcher" class="headerlink" title="FastCorrelativeScanMatcher"></a>FastCorrelativeScanMatcher</h3><p><strong>用于构建 node 和 submap 之间的约束</strong>。该扫描匹配器专为 Cartographer 设计，可实现实时 loop closures 扫描匹配。依靠 <code>Branch and bound</code> 机制,使得其可以在不同分辨率的栅格上进行工作,并且可以有效的消除误匹配.这个机制适用于深度可控的搜索树。相关参数有：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POSE_GRAPH.constraint_builder.fast_correlative_scan_matcher.branch_and_bound_depth</span><br><span class="line">POSE_GRAPH.constraint_builder.fast_correlative_scan_matcher_3d.branch_and_bound_depth</span><br><span class="line">POSE_GRAPH.constraint_builder.fast_correlative_scan_matcher_3d.full_resolution_depth</span><br></pre></td></tr></table></figure>

<p>一旦 FastCorrelativeScanMatcher 的分数大于设定的<code>POSE_GRAPH.constraint_builder.min_score</code>，就会被送入 <code>Ceres Scan Matcher</code> 以优化位姿。相关参数：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POSE_GRAPH.constraint_builder.min_score</span><br><span class="line">POSE_GRAPH.constraint_builder.ceres_scan_matcher_3d</span><br><span class="line">POSE_GRAPH.constraint_builder.ceres_scan_matcher</span><br></pre></td></tr></table></figure>

<p>当 Cartographer 运行优化问题时，Ceres 用于根据多个残差(residual)重新排列 submaps。 残差使用加权成本函数计算。 全局优化具有考虑大量数据源的成本函数：全局（loop closure）约束，非全局（matcher）约束，IMU加速和旋转量，局部SLAM粗略姿态估计，测距源或 fixed frame（如GPS系统）。 可以按照 Local SLAM 部分中的说明配置权重和Ceres选项。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POSE_GRAPH.constraint_builder.loop_closure_translation_weight</span><br><span class="line">POSE_GRAPH.constraint_builder.loop_closure_rotation_weight</span><br><span class="line">POSE_GRAPH.matcher_translation_weight</span><br><span class="line">POSE_GRAPH.matcher_rotation_weight</span><br><span class="line">POSE_GRAPH.optimization_problem.*_weight</span><br><span class="line">POSE_GRAPH.optimization_problem.ceres_solver_options</span><br></pre></td></tr></table></figure>

<p>通过 <code>POSE_GRAPH.max_num_final_iterations</code> 参数可获得残差的信息</p>
<h3 id="全局优化时对-IMU-数据的处理"><a href="#全局优化时对-IMU-数据的处理" class="headerlink" title="全局优化时对 IMU 数据的处理"></a>全局优化时对 IMU 数据的处理</h3><p>Global optimization 对 imu 的 pose 信息提供了更多的灵活性.默认的 Ceres 会优化 IMU 和 tracking frame 之间的 <code>extrinsic calibration</code>。如果你不信任你的 imu 的数据的话, Ceres’ global optimization 的结果可以被 logged 来用来优化它俩之间的 <code>extrinsic calibration</code>(外部校准)。 如果不信任 IMU 位姿，可以记录 Ceres 全局优化的结果并用于改进 <code>extrinsic calibration</code>。 如果 Ceres 没有正确优化你的 IMU 姿态并且你完全相信你的<code>extrinsic calibration</code>，则可以使此位姿保持不变。   </p>
<p>在 residuals 中，异常值的影响被 <code>Huber loss function</code> 所处理, huber loss function 受参数 huber_scale 所影响。<strong>huber_scale 越大,(潜在)异常值的影响就越大</strong>。<br><code>POSE_GRAPH.optimization_problem.huber_scale</code></p>
<p>一旦轨迹完成，cartographer 经常会运行一个新的全局优化，迭代次数通常比之前的要多得多。这样做的原因是：尽可能的去优化最终的建图效果，并且，如果没有实时性的要求的话，尽量设置一个大的迭代次数。<code>POSE_GRAPH.max_num_final_iterations</code>  </p>
<h2 id="cartographer-调优"><a href="#cartographer-调优" class="headerlink" title="cartographer 调优"></a><a href="https://google-cartographer-ros.readthedocs.io/en/latest/tuning.html">cartographer 调优</a></h2><h2 id="cartographer利用-pbstream-文件离线生成的地图"><a href="#cartographer利用-pbstream-文件离线生成的地图" class="headerlink" title="cartographer利用 pbstream 文件离线生成的地图"></a>cartographer利用 pbstream 文件离线生成的地图</h2><p>随着传感器数据的传入，诸如 cartographer 之类的 SLAM 算法的状态发展为保存机器人轨迹和周围环境的当前最佳估计。 因此，cartographer 可以提供的最精确的定位和mapping是在算法完成时获得的(cartographer在结束时，例如通过ctrl+c停止时，仍会继续执行全局优化直到结束)。 cartographer 可以将其内部状态序列化并存储在 .pbstream 文件中，该文件本质上是一个压缩的 protobuf 文件，包含 cartographer 内部使用的数据结构的快照。<br>为了实时有效的运行，cartographer 会丢弃大部分传感器数据，只使用其中的一小部分，内部使用的 mapping (并保存在 pbstream 文件中)非常粗糙。 然而，当算法完成并生成了最佳轨迹时，可以将其与完整的传感器数据后验的重新组合以创建高分辨率地图。  </p>
<p>cartographer 使用 cartographer_assets_writer 来进行这种重组。 参考： <a href="https://github.com/WH-0501/Notes/blob/master/Robot/Map/cartographer/cartographer%20-%20assets%20writer.md">cartographer - assets writer</a></p>
<h2 id="主题及服务"><a href="#主题及服务" class="headerlink" title="主题及服务"></a>主题及服务</h2><h3 id="订阅主题"><a href="#订阅主题" class="headerlink" title="订阅主题"></a>订阅主题</h3><p>cartographer必须提供如下数据源之一：  </p>
<ul>
<li>scan (sensor_msgs&#x2F;LaserScan)</li>
<li>echoes (sensor_msgs&#x2F;MultiEchoLaserScan)</li>
<li>points2 (sensor_msgs&#x2F;PointCloud2)</li>
</ul>
<p>可选主题数据有：  </p>
<ul>
<li>imu (sensor_msgs&#x2F;Imu)</li>
<li>odom (nav_msgs&#x2F;Odometry)</li>
<li>fix</li>
<li>landmark</li>
</ul>
<h3 id="发布主题"><a href="#发布主题" class="headerlink" title="发布主题"></a>发布主题</h3><ul>
<li><p>scan_matched_points2 (sensor_msgs&#x2F;PointCloud2)</p>
</li>
<li><p>submap_list (cartographer_ros_msgs&#x2F;SubmapList)</p>
</li>
<li><p>trajectory_node_list</p>
</li>
<li><p>landmark_poses_list</p>
</li>
<li><p>constraint_list</p>
</li>
</ul>
<h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><ul>
<li>submap_query (cartographer_ros_msgs&#x2F;SubmapQuery)<ul>
<li>获取请求的 submap</li>
</ul>
</li>
<li>trajectory_query<ul>
<li>获取当前轨迹每一帧的位姿</li>
</ul>
</li>
<li>start_trajectory (cartographer_ros_msgs&#x2F;StartTrajectory)<ul>
<li>通过将其传感器主题和轨迹选项指定为二进制编码 proto 来启动另一个轨迹。 返回指定的轨迹ID。 start_trajectory可执行文件提供了一个方便的 wrapper 来使用此服务。</li>
</ul>
</li>
<li><strong>finish_trajectory</strong> (cartographer_ros_msgs&#x2F;FinishTrajectory)<ul>
<li>运行最终的优化，得到最佳轨迹</li>
</ul>
</li>
<li>write_state (cartographer_ros_msgs&#x2F;WriteState)<ul>
<li>将当前内部状态写入文件中。该文件通常位于 ~&#x2F;.ros 目录中。</li>
</ul>
</li>
<li>get_trajectory_states (cartographer_ros_msgs&#x2F;GetTrajectoryStates)<ul>
<li>获取轨迹的ID和状态。</li>
</ul>
</li>
<li>read_metrics (cartographer_ros_msgs&#x2F;ReadMetrics)<ul>
<li>返回 cartographer 中所有内部指标的最新值。 运行时度量标准的集合是可选的，必须使用节点中的**–collect_metrics**命令行标志激活。</li>
</ul>
</li>
</ul>
<h2 id="sensor-type"><a href="#sensor-type" class="headerlink" title="sensor type"></a>sensor type</h2><p><img src="/../images/sensor_type.png" alt="sensor_type"></p>
<h2 id="cartographer-模块说明"><a href="#cartographer-模块说明" class="headerlink" title="cartographer 模块说明"></a>cartographer 模块说明</h2><h3 id="cartographer-ros"><a href="#cartographer-ros" class="headerlink" title="cartographer_ros"></a>cartographer_ros</h3><p>sensor_bridge：将 ROS 消息转换为 cartographer 消息。  </p>
<p>MapBuilderBridge：   </p>
<p>TfBridge：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LookupToTracking(const::cartographer::common::Time time,const std::string&amp; frame_id)： 返回 time 时刻 frame_id -&gt; tracking_frame 之间的转换</span><br></pre></td></tr></table></figure>

<h3 id="cartographer"><a href="#cartographer" class="headerlink" title="cartographer"></a>cartographer</h3><ul>
<li><p><strong>CollatedTrajectoryBuilder</strong>：Collates sensor data using a sensor::CollatorInterface, then passes it on to a mapping::TrajectoryBuilderInterface which is common for 2D and 3D.  </p>
</li>
<li><p><strong>CollatorInterface</strong>：  </p>
</li>
<li><p><strong>sensor::TrajectoryCollator</strong>：等待查看订阅的传感器，知道至少有一个是有数据的，并按合并排序顺序调度数据。与 “Collator” 相反，它不会等待其它轨迹，且输出是确定性的，调度数据的顺序是无序的，因此非确定性输入序列将导致非确定性输出。    </p>
</li>
<li><p><strong>sensor::Collator</strong>：</p>
</li>
<li><p><strong>PoseGraph2D</strong>： 实现了闭环检测算法 SPA(Sparse Pose Adjustment)。算法对应论文为&lt;Efficient sparse pose adjustment for 2d mapping.&gt;。 被扩展用于 submapping：每个节点已经与一个或多个 submaps 匹配(为每个匹配添加约束)，节点和submaps的位姿都需要进行优化。所有约束都在submap i 和 节点 j 之间。  </p>
</li>
<li><p><strong>PoseGraph3D</strong>：与 PoseGraph2D 一样。只是扩展使用于 3D submapping。  </p>
</li>
<li><p><strong>LocalTrajectoryBuilder2D</strong>：Wires up the local SLAM stack (i.e. pose extrapolator, scan matching, etc.) without loop closure   </p>
</li>
<li><p><strong>LocalTrajectoryBuilder3D</strong>：  </p>
</li>
<li><p><strong>RangeDataCollator</strong>:同步来自不同传感器(即:不同主题)的激光数据(TimedPointCloudData)。 每个传感器最多只缓存一帧数据，因此会引入最慢传感器的周期延迟(即:以最慢的传感器的周期来进行同步，因此对发布速率快的传感器会存在数据丢失或延迟处理的问题)，可以通过来 subdivisions 减轻该延迟 </p>
</li>
<li><p><strong>GlobalTrajectoryBuilder</strong>:<br>该类中包含了 local_trajectory_builder 和 pose_graph、局部SLAM结果的回调函数  </p>
</li>
<li><p><strong>FastCorrelativeScanMatcher2D</strong>：是”Real-Time Correlative Scan Matching”中描述的算法的实现。 类似于 RealTimeCorrelativeScanMatcher，但有不同的权衡(trade-off)：扫描匹配更快，因为为给定的地图执行了更多的预计算。但是，这会导致这个地图在构件好之后无法再改变。    </p>
</li>
<li><p><strong>FastCorrelativeScanMatcher3D</strong>：是 3D branch-and-bound 算法(BBS)的实现，类似于 FastCorrelativeScanMatcher2D。  </p>
</li>
<li><p><strong>ActiveSubmaps2D</strong>：在插入第一帧激光数据时创建第一个 active submap。除了在初始化期间没有或只有单个 submap 存在时，总是有两个子图，其中插入了范围数据：一个用于 matching 的旧 submap，另一个用于下一次 matching 的 submap。<br>一旦插入了指定数量的激光数据，则初始化新的 submap：<strong>旧的 submap 不会再改变</strong>，该新 submap 会被用于后续的 scan-to-map matching。</p>
</li>
</ul>
<h2 id="消息类型"><a href="#消息类型" class="headerlink" title="消息类型"></a>消息类型</h2><p><strong>TimedPointCloud</strong><br><code>using TimedPointCloud = std::vector&lt;TimedRangefinderPoint&gt;;</code><br>其中：<strong>TimedRangefinderPoint</strong> 存储3D位姿及其相对测量时间  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct TimedRangefinderPoint &#123; </span><br><span class="line">  Eigen::Vector3f position; // typedef Matrix&lt;float, 3, 1&gt; Vector3f; 每个激光束点的坐标</span><br><span class="line">  float time;  // 每个激光束点对应的时间戳,根据 time_increment 进行计算</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>TimedPointCloud用于存储点的3D位姿及其相对测量时间。时间以秒为单位，相对于收到的最后一个点的。因此，最后一个点的第四项(即: time) 为 0.f。 如果没有可用的时间，则所有的 time 都为 0.f。 对于2D点，第三项为 0.f(即:position中最后一个表示高度的元素)。  </p>
<p><strong>TimedPointCloudData</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct TimedPointCloudData &#123;</span><br><span class="line">  common::Time time;</span><br><span class="line">  Eigen::Vector3f origin;</span><br><span class="line">  TimedPointCloud ranges;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>PointCloudWithIntensities</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct PointCloudWithIntensities &#123;</span><br><span class="line">  TimedPointCloud points;</span><br><span class="line">  std::vector&lt;float&gt; intensities;  // 每个激光点的强度信息</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>TimedPointCloudOriginData</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct TimedPointCloudOriginData &#123;</span><br><span class="line">  struct RangeMeasurement &#123;</span><br><span class="line">    TimedRangefinderPoint point_time;</span><br><span class="line">    size_t origin_index;</span><br><span class="line">  &#125;;</span><br><span class="line">  common::Time time;</span><br><span class="line">  std::vector&lt;Eigen::Vector3f&gt; origins;</span><br><span class="line">  std::vector&lt;RangeMeasurement&gt; ranges;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>通过 RangeDataCollator::AddRangeData 同步后的数据类型即为：TimedPointCloudOriginData  </p>
<p><strong>sensor::RangeData</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct RangeData &#123;</span><br><span class="line">  Eigen::Vector3f origin;</span><br><span class="line">  PointCloud returns; // 检测到的障碍物的坐标,相对于全局</span><br><span class="line">  PointCloud misses;  // 未检测到障碍物的方向的点的坐标(根据missing_data_ray_length)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>TrajectoryNodePose</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct TrajectoryNodePose &#123;</span><br><span class="line">  struct ConstantPoseData &#123;</span><br><span class="line">    common::Time time;</span><br><span class="line">    transform::Rigid3d local_pose;</span><br><span class="line">  &#125;;</span><br><span class="line">  // The node pose in the global SLAM frame.</span><br><span class="line">  transform::Rigid3d global_pose; // node 在全局坐标系位姿</span><br><span class="line"></span><br><span class="line">  absl::optional&lt;ConstantPoseData&gt; constant_pose_data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>TrajectoryNode 及 TrajectoryNode::Data</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct TrajectoryNode &#123;</span><br><span class="line">  struct Data &#123;</span><br><span class="line">    common::Time time;</span><br><span class="line"></span><br><span class="line">    // Transform to approximately gravity align the tracking frame as</span><br><span class="line">    // determined by local SLAM.</span><br><span class="line">    Eigen::Quaterniond gravity_alignment;</span><br><span class="line"></span><br><span class="line">    // Used for loop closure in 2D: voxel filtered returns in the</span><br><span class="line">    // &#x27;gravity_alignment&#x27; frame. 经过 voxel filter 过滤后的重力对齐数据</span><br><span class="line">    sensor::PointCloud filtered_gravity_aligned_point_cloud;</span><br><span class="line"></span><br><span class="line">    // Used for loop closure in 3D.</span><br><span class="line">    sensor::PointCloud high_resolution_point_cloud;</span><br><span class="line">    sensor::PointCloud low_resolution_point_cloud;</span><br><span class="line">    Eigen::VectorXf rotational_scan_matcher_histogram;</span><br><span class="line"></span><br><span class="line">    // The node pose in the local SLAM frame.</span><br><span class="line">    // node 在局部坐标系中的位姿, 即:当前 scan 经过 scan matching 优化后在当前submap中的位姿</span><br><span class="line">    transform::Rigid3d local_pose;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  common::Time time() const &#123; return constant_data-&gt;time; &#125;</span><br><span class="line"></span><br><span class="line">  // This must be a shared_ptr. If the data is used for visualization while the</span><br><span class="line">  // node is being trimmed, it must survive until all use finishes.</span><br><span class="line">  std::shared_ptr&lt;const Data&gt; constant_data;</span><br><span class="line"></span><br><span class="line">  // The node pose in the global SLAM frame.</span><br><span class="line">  transform::Rigid3d global_pose; // node 在全局坐标系中的位姿</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>InsertionResult</strong><br>scan 插入 submap 操作的返回类型。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct InsertionResult &#123;</span><br><span class="line">  std::shared_ptr&lt;const TrajectoryNode::Data&gt; constant_data;</span><br><span class="line">  std::vector&lt;std::shared_ptr&lt;const Submap2D&gt;&gt; insertion_submaps;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>MatchingResult</strong><br>local trajectory builder 返回结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct MatchingResult &#123;</span><br><span class="line">  common::Time time;</span><br><span class="line">  transform::Rigid3d local_pose; // 经过 scan matching 校准后的位姿</span><br><span class="line">  sensor::RangeData range_data_in_local; // 该帧激光点云各点在 local map 中的坐标</span><br><span class="line">  // &#x27;nullptr&#x27; if dropped by the motion filter.</span><br><span class="line">  std::unique_ptr&lt;const InsertionResult&gt; insertion_result; // scan 插入结果</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>InternalSubmapData</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct InternalSubmapData &#123;</span><br><span class="line">  std::shared_ptr&lt;const Submap&gt; submap;</span><br><span class="line">  SubmapState state = SubmapState::kNoConstraintSearch;</span><br><span class="line"></span><br><span class="line">  // IDs of the nodes that were inserted into this map together with</span><br><span class="line">  // constraints for them. They are not to be matched again when this submap</span><br><span class="line">  // becomes &#x27;kFinished&#x27;.</span><br><span class="line">  std::set&lt;NodeId&gt; node_ids;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>PoseGraphData</strong>    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct PoseGraphData &#123;</span><br><span class="line">  // Submaps get assigned an ID and state as soon as they are seen, even</span><br><span class="line">  // before they take part in the background computations.</span><br><span class="line">  MapById&lt;SubmapId, InternalSubmapData&gt; submap_data;</span><br><span class="line"></span><br><span class="line">  // Global submap poses currently used for displaying data. 用于rviz显示,优化后的位姿</span><br><span class="line">  MapById&lt;SubmapId, optimization::SubmapSpec2D&gt; global_submap_poses_2d;</span><br><span class="line">  MapById&lt;SubmapId, optimization::SubmapSpec3D&gt; global_submap_poses_3d;</span><br><span class="line"></span><br><span class="line">  // Data that are currently being shown.</span><br><span class="line">  MapById&lt;NodeId, TrajectoryNode&gt; trajectory_nodes;</span><br><span class="line"></span><br><span class="line">  // Global landmark poses with all observations.</span><br><span class="line">  std::map&lt;std::string /* landmark ID */, PoseGraphInterface::LandmarkNode&gt;</span><br><span class="line">      landmark_nodes;</span><br><span class="line"></span><br><span class="line">  // How our various trajectories are related. 各轨迹之间的关联</span><br><span class="line">  TrajectoryConnectivityState trajectory_connectivity_state;</span><br><span class="line">  int num_trajectory_nodes = 0;</span><br><span class="line">  // 各轨迹的状态</span><br><span class="line">  std::map&lt;int, InternalTrajectoryState&gt; trajectories_state;</span><br><span class="line"></span><br><span class="line">  // Set of all initial trajectory poses. 各轨迹的初始位姿</span><br><span class="line">  std::map&lt;int, PoseGraph::InitialTrajectoryPose&gt; initial_trajectory_poses;</span><br><span class="line"></span><br><span class="line">  // 约束条件列表</span><br><span class="line">  std::vector&lt;PoseGraphInterface::Constraint&gt; constraints;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>PoseGraphInterface::SubmapData</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct SubmapData &#123;</span><br><span class="line">  std::shared_ptr&lt;const Submap&gt; submap;</span><br><span class="line">  transform::Rigid3d pose;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>包含 submap 及其全局位姿。  </p>
<p><strong>PoseGraphInterface::Constraint</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct Constraint &#123;</span><br><span class="line">  struct Pose &#123;</span><br><span class="line">    transform::Rigid3d zbar_ij;</span><br><span class="line">    double translation_weight;</span><br><span class="line">    double rotation_weight;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  SubmapId submap_id;  // &#x27;i&#x27; in the paper.</span><br><span class="line">  NodeId node_id;      // &#x27;j&#x27; in the paper.</span><br><span class="line"></span><br><span class="line">  // Pose of the node &#x27;j&#x27; relative to submap &#x27;i&#x27;.</span><br><span class="line">  Pose pose;</span><br><span class="line"></span><br><span class="line">  // Differentiates between intra-submap (where node &#x27;j&#x27; was inserted into</span><br><span class="line">  // submap &#x27;i&#x27;) and inter-submap constraints (where node &#x27;j&#x27; was not inserted</span><br><span class="line">  // into submap &#x27;i&#x27;).</span><br><span class="line">  enum Tag &#123; INTRA_SUBMAP, INTER_SUBMAP &#125; tag;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>PoseGraphInterface::Constraint</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct Constraint &#123;</span><br><span class="line">  struct Pose &#123;</span><br><span class="line">    transform::Rigid3d zbar_ij; // 相对位姿</span><br><span class="line">    double translation_weight;</span><br><span class="line">    double rotation_weight;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  SubmapId submap_id;  // &#x27;i&#x27; in the paper. submap 索引</span><br><span class="line">  NodeId node_id;      // &#x27;j&#x27; in the paper. TrajectoryNode 索引</span><br><span class="line"></span><br><span class="line">  // Pose of the node &#x27;j&#x27; relative to submap &#x27;i&#x27;.</span><br><span class="line">  Pose pose; // Node j 相对于 submap i 的位姿</span><br><span class="line"></span><br><span class="line">  // Differentiates between intra-submap (where node &#x27;j&#x27; was inserted into</span><br><span class="line">  // submap &#x27;i&#x27;) and inter-submap constraints (where node &#x27;j&#x27; was not inserted</span><br><span class="line">  // into submap &#x27;i&#x27;).</span><br><span class="line">  enum Tag &#123; INTRA_SUBMAP, INTER_SUBMAP &#125; tag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>cartographer - ImuTracker</title>
    <url>/2024/09/21/Robot/Map/cartographer/cartographer%20-%20ImuTracker/</url>
    <content><![CDATA[<p>ImuTracker：根据 IMU 的<strong>角速度和线加速度</strong>来计算机器人的姿态(方向)。  </p>
<p>当 IMU 不处于重力水平面上时，重力加速度会在水平轴(x、y轴)上产生加速度分量。  </p>
<p>通过各轴的加速度，可以计算出各轴加速度计的倾斜角：<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=pitch = \theta=\frac{180}{PI} * atan(\frac{a_x}{\sqrt{a_y^2 %2B a_z^2}})" style="border:none;"><br><img src="http://chart.googleapis.com/chart?cht=tx&chl=roll = \varphi=\frac{180}{PI} * atan(\frac{a_y}{\sqrt{a_x^2 %2B a_z^2}})" style="border:none;"><br><img src="http://chart.googleapis.com/chart?cht=tx&chl=\psi=\frac{180}{PI} * atan(\frac{\sqrt{a_x^2 %2B a_y^2}}{a_z})" style="border:none;">  </p>
<p><strong>ImuTracker::Advance</strong><br>根据 IMU 角速度计算姿态，若没有 IMU 数据，则使用从 pose或odom 得到的角速度来计算姿态。并通过该姿态得到各个轴的重力分量 gravity_vector_。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void ImuTracker::Advance(const common::Time time) &#123;</span><br><span class="line">  CHECK_LE(time_, time);</span><br><span class="line">  const double delta_t = common::ToSeconds(time - time_);</span><br><span class="line">  // 根据 imu 角速度(当没有imu数据时,使用从pose或odom计算的角速度代替)计算方向</span><br><span class="line">  const Eigen::Quaterniond rotation =</span><br><span class="line">      transform::AngleAxisVectorToRotationQuaternion(</span><br><span class="line">          Eigen::Vector3d(imu_angular_velocity_ * delta_t)); // 陀螺仪积分得到的姿态</span><br><span class="line">  // 角度方向 : 当前姿态 * 姿态偏转</span><br><span class="line">  orientation_ = (orientation_ * rotation).normalized();</span><br><span class="line">  // 得到各个轴向的重力分量</span><br><span class="line">  gravity_vector_ = rotation.conjugate()/*共轭矩阵*/ * gravity_vector_;</span><br><span class="line">  time_ = time;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ImuTracker::AddImuLinearAccelerationObservation</strong><br>该函数只有在存在有效 IMU 数据时才会实际生效。 根据 IMU 线加速度 imu_linear_acceleration 计算姿态，采用<strong>滑动平均</strong>与前面计算得到的 grivaty_vector_ 进行融合；并修正最终姿态。  </p>
]]></content>
  </entry>
  <entry>
    <title>cartographer - LocalTrajectoryBuilder2D</title>
    <url>/2024/09/21/Robot/Map/cartographer/cartographer%20-%20LocalTrajectoryBuilder2D/</url>
    <content><![CDATA[<p>LocalTrajectoryBuilder2D 激光数据处理过程：<br>1）同步多个 scan 传感器的数据，得到同步后的数据</p>
<p>2）若未使能 IMU ，则在 <code>LocalTrajectoryBuilder2D::AddRangeData</code> 中调用 <code>InitializeExtrapolator(time)</code> 来初始化 PoseExtrapolator; 若使能 IMU ，则在 <code>LocalTrajectoryBuilder2D::AddIMUData</code> 中初始化。  </p>
<p>若 PoseExtrapolator 未初始化完，则丢弃当前scan帧。   </p>
<p>3）调用 <code>ExtrapolatePose()</code> 推算当前scan帧中，每个 scan point 对应的机器人位姿，并存入 <code>range_data_poses</code> 中</p>
<p>4）scan过滤，去除小于 min_range 的点，并将大于 max_range 的点标记为 misses  </p>
<p>5）累积 num_accumulated_range_data 帧数据，并进行重力对齐及 <code>VoxelFilter</code> 过滤</p>
<p>6）调用 <code>AddAccumulatedRangeData</code> 对累积的数据进行处理, 在该方法中，调用 <code>extrapolator_-&gt;ExtrapolatePose()</code> 获取当前时刻的预测位姿，并进行重力对齐  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const transform::Rigid3d non_gravity_aligned_pose_prediction =</span><br><span class="line">  extrapolator_-&gt;ExtrapolatePose(time);</span><br><span class="line">const transform::Rigid2d pose_prediction = transform::Project2D(</span><br><span class="line">  non_gravity_aligned_pose_prediction * gravity_alignment.inverse());</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">7）将激光数据进行 AdaptiveVoxelFilter 过滤，并转换为 PointCloud 类型，然后调用 `ScanMatch` 进行匹配，得到校准后的位姿 `pose_estimate_2d`  </span><br><span class="line"></span><br><span class="line">8）将激光匹配得到的位姿进行重力对齐后，添加到 extrapolator 中，用于下次位姿预估     </span><br></pre></td></tr></table></figure>
<p>const transform::Rigid3d pose_estimate &#x3D;<br>  transform::Embed3D(*pose_estimate_2d) * gravity_alignment;<br>&#x2F;&#x2F; 将激光匹配优化后的位姿添加到 extrapolator 中, 用于预估后续的位姿<br>extrapolator_-&gt;AddPose(time, pose_estimate);</p>
<pre><code>AddPose 只在累积 num_accumulated_range_data 帧 scan 数据，进行匹配得到校准后的位姿后才会执行。  

9）将累积的点云数据转换到 local_trajectory 坐标系下，然后插入到 submap 中
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>cartographer - Pose extrapolator</title>
    <url>/2024/09/21/Robot/Map/cartographer/cartographer%20-%20Pose%20extrapolator/</url>
    <content><![CDATA[<p>PoseExtrapolator 类：将 pose 保持一定时间以估计线速度和角速度。使用速度来推断运动。 如果有IMU&#x2F;Odometry，则使用IMU和&#x2F;或odometry数据来改进该推断(extrapolation)。  </p>
<p>(旧版本cartographer使用UKF来进行数据融合来估计位姿)  </p>
<p>如果没有 imu，则在第一帧 scan 数据处理时初始化 extrapolator，若有 imu，则在每帧 imu 数据处理时都调用 InitializeExtrapolator，但因为该接口中对 extrapolator_ 进行判断，因此不会每次都重新初始化 extrapolator。 若使用 scan + odometery 建图，也只在第一帧 scan 处理时初始化 extrapolator，在处理 odom 数据时，只是将该数据添加到 extrapolator 中。  </p>
<p><strong>timed_pose_queue_</strong>: 缓存经过匹配校准后的位姿点。该队列不会一直缓存，会删除间隔超过 pose_queue_duration_ 的点<br><strong>cached_extrapolated_pose_</strong>: 缓存根据 odom&#x2F;imu&#x2F;历史位姿点(timed_pose_queue_) 推断出的位姿。该队列不会清除   </p>
<p>odometry_imu_tracker_、extrapolation_imu_tracker_: 都指向 imu_tracker_    </p>
<p>ImuTracker:使用来自IMU的角速度和线加速度来跟踪方向。 因为平均线性加速度（假设慢速运动）是重力的直接测量，所以滚动&#x2F;俯仰虽然会导致yaw角偏离，但不会出现漂移。  </p>
<p><strong>AddPose：</strong><br>AddPose 只在累积 <code>num_accumulated_range_data</code> 帧 scan 数据，进行匹配得到校准后的位姿后才会执行。将校准后的位姿存入 <code>timed_pose_queue_</code> 缓存中：   </p>
<ul>
<li>若 <code>imu_tracker_</code> 为空, 则创建并初始化 </li>
<li>将匹配校准或的位姿点存入 timed_pose_queue_ 缓存中</li>
<li>删除 timed_pose_queue_ 中距当前时间超过 <code>kExtrapolationEstimationTimeSec</code>(0.001s) 的点(前提是当前缓存中点数&gt;2,确保删除后还有至少两个点)  </li>
<li>根据 timed_pose_queue_ 中的 pose 点及点之间的时间间隔计算线速度和角速度  </li>
<li>更新 imu_tracker_ - AdvanceImuTracker  </li>
<li>TrimImuData() - 删除 imu_data_ 中的无用数据(过期数据)</li>
<li>TrimOdometryData() - 删除 odometry_data_ 中的无用数据</li>
<li>构建 odometry_imu_tracker_ 及 extrapolation_imu_tracker_ 指针(每次执行 AddPose 都会重新 make_unique 构建)</li>
</ul>
<p><strong>ExtrapolatePose：推算位姿</strong>  </p>
<ul>
<li>调用 <code>ExtrapolateTranslation</code> 方法计算偏移量  <ul>
<li>若有里程计数据，则根据从里程计数据得到的线速度 <code>linear_velocity_from_odometry_</code> 及时间间隔 来计算偏移量  </li>
<li>若没有里程计数据，则根据从缓存的两点计算得到的线速度 <code>linear_velocity_from_poses_</code> 及时间间隔 来计算偏移量</li>
</ul>
</li>
</ul>
<p>计算得到的偏移量 + 上一点的位置信息，得到预估的点的坐标信息    </p>
<ul>
<li>调用 <code>ExtrapolateRotation</code> 方法计算旋转量(即:偏转角度)  <ul>
<li>调用 <code>AdvanceImuTracker</code>  </li>
<li>根据 imu_tracker 获取上次的方向 <code>imu_tracker_-&gt;orientation()</code> </li>
<li>计算偏转角 <code>last_orientation.inverse() * imu_tracker-&gt;orientation()</code></li>
</ul>
</li>
</ul>
<p>根据计算得到的偏转角及上一次时机器人的方位，得到预估的点的方位信息    </p>
<ul>
<li>将预估的位姿点存入 <code>cached_extrapolated_pose_</code> 中</li>
</ul>
<p><strong>AdvanceImuTracker：</strong>  </p>
<ul>
<li>若IMU为空，或IMU时间戳异常，若有 odom 数据，则使用从 odom 得到的角速度 <code>angular_velocity_from_odometry_</code> 来更新位姿，若没有 odom ，则根据缓存的历史位姿点计算得到的角速度 <code>angular_velocity_from_poses_</code> 来更新方向。<br><strong>注意：<code>angular_velocity_from_odometry_</code>并不是直接取 odom 主题中的角速度，而是根据 <code>odometry_data_</code> 队列中首尾元素之间的变换矩阵中的 <code>rotation/dt</code> 得到</strong>       </li>
<li>有可用的IMU数据, 则根据 IMU 数据中的 <code>linear_acceleration</code> 及 <code>angular_velocity</code> 来更新方向   <ul>
<li><code>AddImuLinearAccelerationObservation</code>: 线加速度用于更新 gravity_vector_, 然后使用 gravity_vector_ 来更新姿态</li>
<li></li>
<li><code>AddImuAngularVelocityObservation</code></li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>cartographer - assets writer</title>
    <url>/2024/09/21/Robot/Map/cartographer/cartographer%20-%20assets%20writer/</url>
    <content><![CDATA[<p>SLAM的目的是通过一个度量空间来计算单个传感器的轨迹。在更高的层面上，SLAM的输入是传感器的数据，输出的是对轨迹到目前为止的最佳估计。为了实时和高效，Cartographer 将大部分传感器数据立即扔掉。  </p>
<p>轨迹单独没有什么作用，但是一旦估计出了最佳轨迹，就可以用全部的传感器数据来推导和显示周围环境的信息。  </p>
<p>Cartographer提供assets writer来完成该功能。 assets writer 的输入内容：  </p>
<ul>
<li>原始传感器数据(例如：bag文件)  </li>
<li>使用原始传感器数据执行 SLAM 得到的 pbstream 文件  </li>
<li>传感器外部参数(例如：来自bag包或urdf模型的tf数据)  </li>
<li>配置文件，.lua 文件</li>
</ul>
<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p>1）、生成 pbstream 文件<br><code>roslaunch cartographer_ros offline_backpack_3d.launch bag_filenames:=$&#123;HOME&#125;/Downloads/b3-2016-04-05-14-14-00.bag</code><br>该指令会加载 cartographer_offline_node 节点。 该指令运行结束之后，会生成 b3-2016-04-05-14-14-00.bag.pbstream 文件。    </p>
<p>当运行为 online node 时，cartographer 并不知道 bag 什么时候结束，因此需要主动调用如下服务来显式的完成当前轨迹，并使 cartographer 序列化其当前状态：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Finish the first trajectory. No further data will be accepted on it.</span><br><span class="line">rosservice call /finish_trajectory 0</span><br><span class="line"></span><br><span class="line"># Ask Cartographer to serialize its current state.</span><br><span class="line"># (press tab to quickly expand the parameter syntax)</span><br><span class="line">rosservice call /write_state &quot;&#123;filename: &#x27;$&#123;HOME&#125;/Downloads/b3-2016-04-05-14-14-00.bag.pbstream&#x27;, include_unfinished_submaps: &#x27;true&#x27;&#125;&quot;  </span><br><span class="line">```   </span><br><span class="line">（注意：若不指定路径，默认写入 $&#123;HOME&#125;.ros 目录下）  </span><br><span class="line">![assets_writer](../images/assets_writer_path.png)</span><br><span class="line"></span><br><span class="line">2）、调用 assets writer 生成地图  </span><br></pre></td></tr></table></figure>
<p>roslaunch cartographer_ros assets_writer_backpack_3d.launch <br>   bag_filenames:&#x3D;${HOME}&#x2F;Downloads&#x2F;b3-2016-04-05-14-14-00.bag <br>   pose_graph_filename:&#x3D;${HOME}&#x2F;Downloads&#x2F;b3-2016-04-05-14-14-00.bag.pbstream</p>
<pre><code>可通过 `--output_file_prefix` 来指定输出文件前缀，若不指定，则默认为第一个 bag 包的名字。 例如：若指定 `--output_file_prefix=point.ply`，则此例中输出文件名为：`$&#123;HOME&#125;/Downloads/b3-2016-04-05-14-14-00.bag_points.ply`  
  
### 配置  
Assets writer被建模为一个pipeline。由 PointProcessors 和流过它的 [PointsBatchs](https://github.com/googlecartographer/cartographer/blob/30f7de1a325d6604c780f2f74d9a345ec369d12d/cartographer/io/points_batch.h) 组成。数据从第一个处理器流向下一个处理器，每个处理器都有机会在传递之前修改PointsBatch（点流）。  

例如：assets_writer_backpack_3d.lua 使用 min_max_range_filter 来过滤离传感器太近或太远的点。然后，写 X-Rays，再根据传感器坐标系ID重新着色这个 PointBatch，并使用这些新的颜色来写另一组 X-Rays。  
  
所有的 PointsProcessor 都在 [cartographer/io](https://github.com/googlecartographer/cartographer/tree/30f7de1a325d6604c780f2f74d9a345ec369d12d/cartographer/io) 子目录下，并记录在他们各自的头文件中。

### 点云数据第一人称视角可视化  
一般情况下，通过点生成 fly 需要两个步骤：  
    ①、将想要显示的点写入 PLY 文件  
    ②、使用[point_cloud_viewer](https://github.com/googlecartographer/point_cloud_viewer)  

第一步通常通过使用 [IntensityToColorPointsProcessor](https://github.com/googlecartographer/cartographer/blob/30f7de1a325d6604c780f2f74d9a345ec369d12d/cartographer/io/intensity_to_color_points_processor.cc) 将点设置为非白色的颜色，然后使用 [PlyWritingPointsProcessor](https://github.com/googlecartographer/cartographer/blob/30f7de1a325d6604c780f2f74d9a345ec369d12d/cartographer/io/ply_writing_points_processor.h) 将这些点写入 PLY中。例如：assets_writer_backpack_2d.lua。  

一旦有了PLY文件，按照 point_cloud_viewer 的README文档来生成一个存储在磁盘上的 octree 数据。  
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>cartographer - RangeDataCollator</title>
    <url>/2024/09/21/Robot/Map/cartographer/cartographer%20-%20RangeDataCollator/</url>
    <content><![CDATA[<p>该类同步来自不同传感器的 TimedPointCloudData 数据。 每个传感器最多只缓存一帧数据，因此会引入最慢传感器的周期延迟(即:以最慢的传感器的周期来进行同步，因此对发布速率快的传感器会存在数据丢失或延迟处理的问题)，可以通过来 subdivisions 减轻该延迟。  </p>
]]></content>
  </entry>
  <entry>
    <title>cartographer - 全局优化</title>
    <url>/2024/09/21/Robot/Map/cartographer/cartographer%20-%20%E5%85%A8%E5%B1%80%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>trajectory 状态：ACTIVE, FINISHED, FROZEN, DELETED。  </p>
<p>FastCorrelativeScanMatcher2D (Real-Time Correlative Scan Matching) 构建 node 和 submap 之间的约束。<br>FastCorrelativeScanMatcher3D (BBS算法)。  </p>
<h2 id="Closing-Loops"><a href="#Closing-Loops" class="headerlink" title="Closing Loops"></a>Closing Loops</h2><p>通过 Sparse Pose Adjustment(SPA) 算法优化所有 scan 和 submap 的位姿，来实现全局优化。  </p>
<p>LocalTrajectorBuilder 中，构建了一个个 submap，也记录了每帧 scan 插入到 submap 中的 pose。 由于传感器测量值存在误差，虽然在局部范围内(即 submap 中)误差影响不大，但由于建图是一个增量式的过程，第 n 个 pose 的预估值依赖于前面 n-1 个 pose 的估计值，因而，会导致误差的累积。因此需要 loop closure 来消除这种误差累积。  </p>
<p>一旦局部 scan-to-submap 成功，就将该 scan 的 pose 作为节点添加到优化问题中。   </p>
<h3 id="optimization-problem"><a href="#optimization-problem" class="headerlink" title="optimization problem"></a>optimization problem</h3><p>与 scan matching 一样，回环优化也被公式化为<strong>非线性最小二乘问题</strong>(nonlinear least squares problem)，每隔几秒钟，就会使用 Ceres 来计算结果：<br><img src="/../images/spa.png" alt="SPA"></p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Xi^m = \left\{ \xi^m_i\right\}_{i=1,\cdots,m}" style="border:none;"> 所有 submap 的绝对位姿<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Xi^s = \left\{ \xi^s_j\right\}_{j=1,\cdots,n}" style="border:none;"> 所有 scan 的绝对位姿<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=\xi^m_i" style="border:none;"> 第 i 个 submap 相对于世界坐标系的位姿，上表 m 表示 submap<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=\xi^s_j" style="border:none;"> 第 j 帧 scan 相对于世界坐标系的位姿，上表 s 表示 scan<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=\xi_{i,j}" style="border:none;"> 第 j 帧 scan 插入第 i 个 submap 的相对位姿<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Sigma_{i,j}" style="border:none;"> 协方差矩阵。表示 第 j 帧 scan 插入第 i 个 submap 的质量，即 scan matching 的评分。<br>约束残差 E 的计算方式：<br><img src="/../images/residual-E.png" alt="residual-E"><br>其中 <img src="http://chart.googleapis.com/chart?cht=tx&chl=\rho" style="border:none;"> 为 loss function (目前使用的是 Huber loss)，用于减少当扫描匹配为优化问题添加不正确约束时可能出现在（SPA）中的异常值的影响(即:<strong>减少异常值outliers对优化结果的影响</strong>)。 例如：诸如办公室隔间等局部对称的环境。 异常值的可选方法参考：&gt; Robust map optimization using dynamic covariance scaling<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=t_{\xi^m_i}" style="border:none;"> 和 <img src="http://chart.googleapis.com/chart?cht=tx&chl=t_{\xi^s_j}" style="border:none;"> 分别表示 submap 和 scan 位姿中的 translation 部分。<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=t_{\xi^m_i} - t_{\xi^s_j}" style="border:none;"> 则表示了 scan 在 submap 中的相对位姿在世界坐标系下的表示。<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=R_{\xi^m_i}" style="border:none;"> 表示 submap 在全局坐标系下的位姿<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=R^{-1}_{\xi^m_i}" style="border:none;"> 逆矩阵，表示 submap 局部坐标系到全局坐标系之间的变换关系<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=R^{-1}_{\xi^m_i} \left( t_{\xi^m_i} - t_{\xi^s_j} \right)" style="border:none;"> 表示 scan 在 submap 中的相对位姿<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=\xi^m_{i;\theta}" style="border:none;"> 表示 scan 的姿态<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=\xi^s_{j;\theta}" style="border:none;"> 表示 submap 的姿态  </p>
<p>全局优化（loop closure）的目的就是优化 <img src="http://chart.googleapis.com/chart?cht=tx&chl=\xi^m_i" style="border:none;"> 和 <img src="http://chart.googleapis.com/chart?cht=tx&chl=\xi^s_j" style="border:none;">，使误差值尽可能的小。   </p>
<p>每次局部匹配成功，则该时刻的位姿点都会作为一个节点。  </p>
<p>约束分为全局约束和局部约束。  </p>
<p>intra constraints<br>intra residuals<br>inter constraints, same trajectory<br>inter residuals, same trajectory<br>inter constraints, different trajectory (无)<br>inter residuals, different trajectory (无)  </p>
<p>1、scan 数据<br>订阅激光数据 <code>Node::HandleLaserScanMessage</code>，并最终调用 <code>GlobalTrajectoryBuilder::AddSensorData</code> 来处理激光数据。    </p>
<p><code>GlobalTrajectoryBuilder::AddSensorData</code><br> -&gt; <code>local_trajectory_builder_-&gt;AddRangeData</code> 局部 scan-to-submap 匹配,将scan数据插入 submap，并返回局部匹配结果 matching_result<br> -&gt; 调用 <code>pose_graph_-&gt;AddNode</code> 根据局部匹配结果，添加节点及约束<br> -&gt; 调用 <code>local_slam_result_callback_</code> 即 <code>MapBuilderServer::OnLocalSlamResult</code> 更新日志  </p>
<p>2、IMU 数据<br>订阅激光数据 <code>Node::HandleImuMessage</code>，并最终调用 <code>GlobalTrajectoryBuilder::AddSensorData</code> 来处理IMU数据。  </p>
<p><code>GlobalTrajectoryBuilder::AddSensorData</code><br> -&gt; <code>local_trajectory_builder_-&gt;AddImuData</code><br> -&gt; <code>pose_graph_-&gt;AddImuData</code></p>
<p>3、Odometry 数据<br>订阅激光数据 <code>Node::HandleOdometryMessage</code>，并最终调用 <code>GlobalTrajectoryBuilder::AddSensorData</code> 来处理IMU数据。  </p>
<p><code>GlobalTrajectoryBuilder::AddSensorData</code><br> -&gt; <code>local_trajectory_builder_-&gt;AddOdometryData</code><br> -&gt; <code>pose_graph_-&gt;AddOdometryData</code></p>
]]></content>
  </entry>
  <entry>
    <title>cartographer - 官方论文</title>
    <url>/2024/09/21/Robot/Map/cartographer/cartographer%20-%20%E5%AE%98%E6%96%B9%E8%AE%BA%E6%96%87/</url>
    <content><![CDATA[<p><a href="https://storage.googleapis.com/pub-tools-public-publication-data/pdf/45466.pdf">Real-Time Loop Closure in 2D LIDAR SLAM</a><br>该论文主要描述的是 cartographer 2D 建图。  </p>
<p>为了实现实时的闭环，使用 branch-and-bound(分支定界法)算法来计 scan-to-submap 的匹配作为约束。  </p>
<p><strong>scan-to-scan</strong> 匹配算法经常用于在基于激光的SLAM方法中计算相对位姿变化。 但 scan-to-scan 的匹配会迅速累积误差。  </p>
<p><strong>scan-to-map</strong> 的匹配有助于限制误差的累积。(本文使用的方法)  </p>
<p><strong>Pixel-accurate</strong> 扫描匹配算法，进一步减少本地误差的累积。该算法虽然计算量大，但对回环检测也很有用。 用于回环检测的其它算法包括：基于直方图(histogram-based)的匹配、扫描数据中的特征检测、以及使用机器学习。  </p>
<p>有两种常用算法可以<strong>解决局部误差累积问题</strong>：<strong>粒子滤波</strong>和<strong>graph-based SLAM</strong>。(本文使用后者)。<br>粒子滤波必须维持每个粒子的完整系统状态的表示(即：每个粒子都需要维护整个系统的状态,如对每个粒子保存一个完整的系统地图等)。对于 grid-based SLAM，随着地图越来越大，会变得非常消耗资源。<br>Graph-based 方法工作于表示位姿和特征的节点的集合之上。图的边(edges)是由观察产生的约束。有多重算法算法可以用来最小化由所有约束引入的误差。<br><strong>对于大地图，基于粒子滤波的 gmapping 算法比 cartographer 算法消耗的内存会更多。</strong></p>
<p>cartographer 提供了一种室内实时建图方法，该方法基于激光雷达。 激光扫描数据(scan)会插入到最佳位姿估计的 submap 中，这个最佳的位置假设在短时间内是很准确的。 scan match 发生在最近的 submap 上，因此只和最近的扫描数据有关。</p>
<p>综合考虑硬件资源和性能，该SLAM算法不使用粒子滤波器，而使用 pose optimization 来处理误差累积。 当一个 submap 完成后，就不会再在该 submap 中插入新的 scan 数据，该 submap 会用作 loop closure 的 scan matching 的一部分。 所有构建完成的 submap 和 scan 数据都会被用来进行 loop closure。 如果它们在当前的位姿估计上足够接近，则扫描匹配器尝试在 submap 中查找 scan。 如果在当前估计的位姿周围的搜索窗口中找到足够好的匹配，则将其作为 loop closing 约束添加到优化问题中。 每隔几秒就进行闭环检测，一个位姿点被重复访问就算达到闭环了。 这导致了软实时约束(soft real-time constraint)，即：要求闭环检测必须在新的 scan 被加入到 submap 中之前完成，否则可能会导致失败。 通过使用 branch-and-bound 算法以及对每个完成的 submap 的几个预计算的网格 来实现这一点。  </p>
<p>BBS 算法，即：branch-and-bound scan matching 算法 (分支定界法扫描匹配)  – FastCorrelativeScanMatcher3D<br><img src="/../images/BBS.png" alt="BBS"></p>
<p>SPA 算法，即：Sparse Pose Adjustment 算法 (稀疏位姿调整)。PoseGraph2D 及 PoseGraph3D。</p>
]]></content>
  </entry>
  <entry>
    <title>cartographer Constraints</title>
    <url>/2024/09/21/Robot/Map/cartographer/cartographer%20Constraints/</url>
    <content><![CDATA[<p>约束类型：</p>
<ul>
<li>Intra constraints：</li>
<li>Intra residuals：</li>
<li>Inter constraints：RViz 中黄色连线</li>
<li>Inter residuals：</li>
</ul>
<p>(Intra：表示在内部；Inter：表示相互之间，在外部)</p>
<p>RViz 中可查看约束类型</p>
<p>旧图、新图。insertion_submaps 存储着某个点云会画到的子图，最多两张，旧图指front，新图指back。</p>
<ul>
<li>INTER_SUBMAP：节点和其它子图之间的约束</li>
<li>INTRA_SUBMAP：节点和它画到的子图(即:所属子图)之间的约束</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>cartographer参数</title>
    <url>/2024/09/21/Robot/Map/cartographer/cartographer%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>cartographer 官方调参教程参考：<a href="https://google-cartographer-ros.readthedocs.io/en/latest/tuning.html">Tuning methodology</a></p>
<h2 id="cartographer-ros-配置"><a href="#cartographer-ros-配置" class="headerlink" title="cartographer_ros 配置"></a>cartographer_ros 配置</h2><p><strong>tracking_frame</strong>: SLAM算法跟随坐标系. 若使用了 IMU, 则应该是 IMU 的位置(尽管可能转动). 常用的选择是: “imu_link”  </p>
<p><strong>published_frame</strong>: 发布位姿的子坐标系. 例如: 若系统中有其它模块发布了 odom 坐标系, 则为 odom. 此时, odom 在 “map_frame” 中的位姿将被发布, 否则设置为 “base_link” .  </p>
<p><strong>odom_frame</strong>: 仅在 provide_odom_frame 为 true 时有效. 使能时, carto 发布的tf 树为: publishd_frame -&gt; odom_frame -&gt; map_frame.  </p>
<p><strong>use_odometry</strong>: 若使能, 将订阅 “odom” 主题的 odometry 消息.  </p>
<p><strong>use_nav_sat</strong>: 若使能, 将订阅 “fix” 主题的 NavSatFix (GPS)数据.  </p>
<p><strong>use_landmarks</strong>: 若使能, 将订阅 “landmarks” 主题消息.   </p>
<p><strong>num_laser_scans</strong>: 要订阅的 laser scan 主题 “scan” 的数目. 若有多个时, 可为 “scan_1”、”scan_2”  </p>
<p><strong>num_multi_echo_laser_scans</strong>: 要订阅的 multi-echo laser scan 主题 “echoes” 的数目. 若有多个时, 可为 “echoes_1”、”echoes_2”  </p>
<p>Laser scan 与 multi-echo laser scan:<br>标准的 laser scan 消息只包括每个激光脉冲的单个深度和强度值(intensity). 通常是强度最强的.<br>multi-echo: 多回波传感器能够为激光器发出的每个脉冲返回几个回波. 例如, 拾取到从玻璃以及其后面墙壁的回波, 或者在不同距离的两个物体的边界处接收到两个用于表示每个物体距离的回波.  </p>
<p><strong>num_subdivisions_per_laser_scan</strong>: 将每个接收到的（多回波）激光扫描分割成的点云数. <strong>分割 scan 能保证激光设备移动过程中 scans 不会弯曲变形</strong>. 有相应的轨迹生成器选项可以将分离的scans累积到点云中, 用来进行scan matching. 用于 SensorBridge 类中，将激光点云数据按该参数分段。 </p>
<p><strong>num_point_clouds</strong>: 订阅的点云主题 “points2” 的个数. 若有多个时, 可为 “points2_1”、”points2_2”  </p>
<p><strong>lookup_transform_timeout_sec</strong>: 使用 tf2 查找transforms时的超时时间.  </p>
<h3 id="Fixed-ratio"><a href="#Fixed-ratio" class="headerlink" title="Fixed ratio:"></a>Fixed ratio:</h3><p><strong>rangefinder_sampling_ratio</strong>: 测距仪消息的固定采样率.<br><strong>odometry_sampling_ratio</strong>: 里程计消息的固定采样率.<br><strong>fixed_frame_sampling_ratio</strong>: 固定坐标系消息的固定采样率.<br><strong>imu_sampling_ratio</strong>: IMU消息的固定采样率.<br><strong>landmarks_sampling_ratio</strong>: landmarks消息的固定采样率<br>基于 FixedRatioSampler 实现按固定频率均匀采样.  </p>
<h2 id="cartographer-配置"><a href="#cartographer-配置" class="headerlink" title="cartographer 配置"></a>cartographer 配置</h2><h3 id="1、-CeresSolverOptions"><a href="#1、-CeresSolverOptions" class="headerlink" title="1、 CeresSolverOptions"></a>1、 CeresSolverOptions</h3><p>use_nonmonotonic_steps  </p>
<p>max_num_iterations  </p>
<p>num_threads  </p>
<h3 id="2、trajectory-builder"><a href="#2、trajectory-builder" class="headerlink" title="2、trajectory builder"></a>2、trajectory builder</h3><p><strong>min_range、max_range</strong>：测距有效范围，超过该范围的会被丢弃。<br>例如:<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRAJECTORY_BUILDER_2D.min_range = 0.3  </span><br><span class="line">TRAJECTORY_BUILDER_2D.min_range = 8</span><br></pre></td></tr></table></figure></p>
<p><strong>min_z、max_z</strong>： 高度范围<br>例如：<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRAJECTORY_BUILDER_2D.min_z = -0.8  </span><br><span class="line">TRAJECTORY_BUILDER_2D.min_z = 2</span><br></pre></td></tr></table></figure></p>
<p><strong>missing_data_ray_length</strong>: 超出’max_range’的点将以此长度作为空白空间插入。(即:超出最大范围时，会清除该指定范围内的数据)<br>例如：<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRAJECTORY_BUILDER_2D.missing_data_ray_length = 1</span><br></pre></td></tr></table></figure></p>
<p><strong>use_imu_data</strong>: 是否使用 imu。（或者修改 trajectory_builder_2d.lua 文件）<br>例如:<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRAJECTORY_BUILDER_2D.use_imu_data = false</span><br></pre></td></tr></table></figure></p>
<p><strong>num_accumulated_range_data</strong>：累积指定帧数的激光数据作为一个unwarped(未扭曲)的联合帧，去进行scan matching（即:num_accumulated_range_data帧进行一次激光匹配）。<br>例如：<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRAJECTORY_BUILDER_3D.num_accumulated_range_data = 160</span><br></pre></td></tr></table></figure><br>指定累加 160 帧激光数据作为一帧，有些激光雷达将一帧扫描数据分批次发布，因此需要累加起来，方便去除运动畸变。<br>如果有两个测距传感器（例如，两个LIDAR）同时提供完整扫描(例如：前后各一个)，则应将此变量设置为2。 </p>
<p><strong>voxel_filter_size</strong>：<br>距离机器人较近的地方通常扫描到的点更多，远处的物体的扫描点较少。为了降低计算量，需对点云进行降采样，但简单的随机采样会导致低密度区的点变少，而高密度区的点仍然较多。因而，cartographer中采用了 <a href="../../PCL/%E9%87%87%E6%A0%B7%E7%AE%97%E6%B3%95/VoxelGridFilter.md">voxel filter</a>(<strong>使用体素化网格实现降采样</strong>)。 voxel_filter_size 越小，过滤后的点云更密集，计算量越大；voxel_filter_size越大，数据量越小，计算速度越快，但可能会导致数据丢失。  </p>
<p><strong>use_online_correlative_scan_matching</strong>： 是否首先使用 correlative scan matcher 来解决在线 scan match 问题，从而为Ceres生成一个良好的起点。（即:使用RealTimeCorrelativeScanMatcher对数据源进行预处理）。开启之后的对应配置参数参考： RealTimeCorrelativeScanMatcherOptions、  CeresScanMatcherOptions、 MotionFilterOptions。  </p>
<p><strong>imu_gravity_time_constant</strong>：IMU重力时间常数。 基于通过IMU观察到的重力方向的移动平均值的时间常数（以秒为单位）。 应该选择使得误差：<br>1.来自加速度测量误差不影响重力方向（当常数减小时变得更糟）<br>2.来自角速度的积分（当常数增加时变得更糟）误差得到平衡。  </p>
<p><strong>rotational_histogram_size</strong>： 旋转匹配器的 histogram(直方图) buckets 数</p>
<h3 id="3、-SubmapsOptions"><a href="#3、-SubmapsOptions" class="headerlink" title="3、 SubmapsOptions"></a>3、 SubmapsOptions</h3><p><strong>num_range_data</strong>：每个 submap 包含点云的帧数。</p>
<h3 id="4、adaptive-voxel-filter-options"><a href="#4、adaptive-voxel-filter-options" class="headerlink" title="4、adaptive_voxel_filter_options"></a>4、adaptive_voxel_filter_options</h3><p>voxel_filter_size 指定了定长的 voxel 边长，cartographer另外还提供了自适应voxel边长的参数类adaptive_voxel_filter_options。  </p>
<p><strong>max_length</strong>:voxel边的最大长度  </p>
<p><strong>max_num_points</strong>: 如果存在很多的点，且至少不少于’max_num_points’数目，则减小voxel边长，以尝试获得该最少点数</p>
<p><strong>max_range</strong>:距离原点超过该范围的点直接丢弃  </p>
<p>TRAJECTORY_BUILDER_2D.*adaptive_voxel_filter.max_length的限制下确定最佳的voxel_filter_size来实现</p>
<h3 id="5、loop-closure-adaptive-voxel-filter-options"><a href="#5、loop-closure-adaptive-voxel-filter-options" class="headerlink" title="5、loop_closure_adaptive_voxel_filter_options"></a>5、loop_closure_adaptive_voxel_filter_options</h3><h3 id="6、CeresScanMatcherOptions"><a href="#6、CeresScanMatcherOptions" class="headerlink" title="6、CeresScanMatcherOptions"></a>6、CeresScanMatcherOptions</h3><p><strong>occupied_space_weight</strong>: Scaling parameters for each cost functor.<br><strong>translation_weight</strong><br><strong>rotation_weight</strong> </p>
<p>还包括 CeresSolverOptions 参数。在 3D 建图中，还包括 occupied_space_weight_0、occupied_space_weight_1 参数，分别配置经过 voxel filter 过滤后的高分辨率和低分辨率的点云。</p>
<h3 id="FastCorrelativeScanMatcherOptions"><a href="#FastCorrelativeScanMatcherOptions" class="headerlink" title="FastCorrelativeScanMatcherOptions"></a>FastCorrelativeScanMatcherOptions</h3><p><strong>linear_search_window</strong>(默认:7)：  </p>
<p><strong>angular_search_window</strong>(默认:30 rad)：  </p>
<p><strong>branch_and_bound_depth</strong>(默认:7)：</p>
<h3 id="RealTimeCorrelativeScanMatcherOptions"><a href="#RealTimeCorrelativeScanMatcherOptions" class="headerlink" title="RealTimeCorrelativeScanMatcherOptions"></a>RealTimeCorrelativeScanMatcherOptions</h3><p><strong>linear_search_window</strong>:最小线性搜索窗口，其中将找到最佳扫描对齐    </p>
<p><strong>angular_search_window</strong>:最小角度搜索窗口，其中将找到最佳扫描对齐。</p>
<p><strong>translation_delta_cost_weight</strong>:  </p>
<p><strong>rotation_delta_cost_weight</strong>  </p>
<p>例如：<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRAJECTORY_BUILDER_2D.use_online_correlative_scan_matching = true</span><br><span class="line">TRAJECTORY_BUILDER_2D.real_time_correlative_scan_matcher.linear_search_window = 0.1</span><br><span class="line">TRAJECTORY_BUILDER_2D.real_time_correlative_scan_matcher.translation_delta_cost_weight = 10.</span><br><span class="line">TRAJECTORY_BUILDER_2D.real_time_correlative_scan_matcher.rotation_delta_cost_weight = 1e-1</span><br></pre></td></tr></table></figure></p>
<h3 id="MotionFilterOptions"><a href="#MotionFilterOptions" class="headerlink" title="MotionFilterOptions"></a>MotionFilterOptions</h3><p><strong>max_time_seconds</strong>：插入 submap 中的 scan 数据的时间阈值, 超过该时间间隔则插入    </p>
<p><strong>max_distance_meters</strong>：若移动距离超过该阈值, 则插入 submap  </p>
<p><strong>max_angle_radians</strong>：若旋转角度超过该阈值, 则插入 submap</p>
<h3 id="ceres-solver-options"><a href="#ceres-solver-options" class="headerlink" title="ceres_solver_options"></a>ceres_solver_options</h3><h3 id="RangeDataInserterOptions"><a href="#RangeDataInserterOptions" class="headerlink" title="RangeDataInserterOptions"></a>RangeDataInserterOptions</h3><p><strong>hit_probability</strong>：hit 点的概率值（必须大于0.5）。  </p>
<p><strong>miss_probability</strong>：miss 点的概率值（必须小于0.5）  </p>
<p><strong>num_free_space_voxels</strong>：最多可更新多少个空闲 voxels 以进行扫描匹配。 0禁用空闲空间  </p>
<h3 id="PoseGraphOptions"><a href="#PoseGraphOptions" class="headerlink" title="PoseGraphOptions"></a>PoseGraphOptions</h3><p><strong>optimize_every_n_nodes</strong>: 每隔指定数目的node就进行一次全局优化。  </p>
<p><strong>matcher_translation_weight</strong>: 优化问题中，非 loop closure 扫描匹配约束的平移分量的权重。即：局部约束的平移分量的权重。</p>
<p><strong>max_num_final_iterations</strong>：最后一次图优化的迭代次数  </p>
<p><strong>matcher_rotation_weight</strong>: 局部约束的旋转分量的权重。</p>
<p><strong>global_sampling_ratio</strong>:</p>
<p><strong>log_residual_histograms</strong>:</p>
<p><strong>global_constraint_search_after_n_seconds</strong>(默认为 10): 如果在此选项指定的持续时间内没有在两个轨迹之间添加全局约束，则将在全局范围而不是在较小的搜索窗口中执行 loop closure searches。 即：   </p>
<p><strong>SPARSE_POSE_GRAPH.optimization_problem.huber_scale</strong> &#x3D; 1e2  该参数为激光匹配的权重(即闭环权重)  </p>
<p><strong>optimize_every_n_scans</strong>：积多少帧点云后执行一次全局图优化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RAJECTORY_BUILDER_2D.use_online_correlative_scan_matching = false TRAJECTORY_BUILDER_2D.ceres_scan_matcher.translation_weight = 10. TRAJECTORY_BUILDER_2D.ceres_scan_matcher.rotation_weight = 0.01</span><br></pre></td></tr></table></figure>

<h3 id="ConstraintBuilderOptions"><a href="#ConstraintBuilderOptions" class="headerlink" title="ConstraintBuilderOptions"></a>ConstraintBuilderOptions</h3><p><strong>sampling_ratio</strong>：ConstraintBuilder2D中采样器的频率。主要影响 ConstraintBuilder2D::MaybeAddConstraint 方法，达到控制约束数量的目的。 数值越小，约束数量越大。    </p>
<p><strong>max_constraint_distance</strong>(默认：15)：称为约束的最大距离阈值，若距离超过该值，则不作为约束条件。  </p>
<p><strong>min_score</strong>(默认：0.55)：约束的最低分数，数值越大，计算速度越快，约束数量也越少。在sampling_ratio较小的情况下，很可能会造成约束过少而导致建图失败。   </p>
<p><strong>global_localization_min_score</strong>(默认：0.6)：  </p>
<p><strong>loop_closure_translation_weight</strong>(默认：1.1e4)：   </p>
<p><strong>loop_closure_rotation_weight</strong>(默认：1e5)：   </p>
<p><strong>log_matches</strong>(默认：true)：   </p>
<p>FastCorrelativeScanMatcherOptions<br>CeresScanMatcherOptions  </p>
<h2 id="launch-配置"><a href="#launch-配置" class="headerlink" title="launch 配置"></a>launch 配置</h2><p><strong>load_state_filename</strong>  </p>
<p><strong>upload_load_state_file</strong>  </p>
<p><strong>load_frozen_state</strong></p>
<p><strong>client_id</strong></p>
<p><strong>collect_metrics</strong>： 激活运行时度量标准(metrics)的集合。 如果激活，则可以通过ROS服务访问度量标准。 可通过 read_metrics 服务来读取。  </p>
<p><strong>server_address</strong>:  </p>
<p><strong>start_trajectory_with_default_topics</strong>: </p>
<p><strong>save_map_filename</strong>: 若非空，则序列化 state，并在关闭前写入磁盘。  </p>
<p><img src="/../images/cartographer_launch_params.png" alt="cartographer_launch_params">  </p>
]]></content>
  </entry>
  <entry>
    <title>cartographer安装测试</title>
    <url>/2024/09/21/Robot/Map/cartographer/cartographer%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>##、安装<br><img src="/../images/cartographer_libglog.png" alt="libglog_err"></p>
<p>libglog.so.0: cannot open shared object file: No such file or directory<br>apt-get  install  gflags*    （安装libgflags2）<br>sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</p>
<p>error while loading shared libraries: libf77blas.so.3: cannot open shared object file: No such file or directory<br>sudo apt-get install libatlas-base-dev</p>
<p>libspqr.so.1.3.1: cannot open shared object file: No such file or directory<br>sudo apt-get install libsuitesparse-dev</p>
<p><a href="https://google-cartographer-ros.readthedocs.io/en/latest/">https://google-cartographer-ros.readthedocs.io/en/latest/</a><br><a href="https://google-cartographer.readthedocs.io/en/latest/">https://google-cartographer.readthedocs.io/en/latest/</a>  </p>
<p>1、环境准备  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Install the required libraries that are available as debs.</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y \ </span><br><span class="line">    cmake \</span><br><span class="line">    g++ \</span><br><span class="line">    git \</span><br><span class="line">    google-mock \</span><br><span class="line">    libboost-all-dev \</span><br><span class="line">    libcairo2-dev \</span><br><span class="line">    libeigen3-dev \</span><br><span class="line">    libgflags-dev \</span><br><span class="line">    libgoogle-glog-dev \</span><br><span class="line">    liblua5.2-dev \</span><br><span class="line">    libprotobuf-dev \</span><br><span class="line">    libsuitesparse-dev \</span><br><span class="line">    libwebp-dev \</span><br><span class="line">    ninja-build \</span><br><span class="line">    protobuf-compiler \</span><br><span class="line">    python-sphinx</span><br><span class="line"></span><br><span class="line">sudo apt-get install libceres-dev</span><br></pre></td></tr></table></figure>
<p>2、安装ceres-resolver  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Build and install Ceres.</span><br><span class="line">git clone https://ceres-solver.googlesource.com/ceres-solver</span><br><span class="line">cd ceres-solver</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake .. -G Ninja</span><br><span class="line">ninja</span><br><span class="line">ninja test</span><br><span class="line">sudo ninja install</span><br></pre></td></tr></table></figure>
<p>（ceres-solver.googlesource.com需要翻墙，因此可用github地址代替：<a href="https://github.com/ceres-solver/ceres-solver.git">https://github.com/ceres-solver/ceres-solver.git</a> ）<br>注意:<br><img src="/../images/cartographer_install_err.png" alt="ceres_err"><br>该问题无需理会.</p>
<p>3、安装cartographer  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Build and install Cartographer.</span><br><span class="line">cd cartographer</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake .. -G Ninja</span><br><span class="line">ninja</span><br><span class="line">ninja test</span><br><span class="line">sudo ninja install</span><br></pre></td></tr></table></figure>
<p>4、安装cartographer_ros及cartographer_turtlebot  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Install wstool and rosdep.</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y python-wstool python-rosdep ninja-build</span><br><span class="line"># Create a new workspace in &#x27;catkin_ws&#x27;.</span><br><span class="line">mkdir catkin_ws</span><br><span class="line">cd catkin_ws</span><br><span class="line">wstool init src</span><br><span class="line"># Merge the cartographer_ros.rosinstall file and fetch code for dependencies.若已下载cartographer_turtlebot则无需这两步操作</span><br><span class="line">wstool merge -t src https://raw.githubusercontent.com/googlecartographer/cartographer_ros/master/cartographer_ros.rosinstall</span><br><span class="line">wstool update -t src</span><br><span class="line"># Install deb dependencies. 注意：rosdep不能在root用户下使用，否则会出错</span><br><span class="line">rosdep init</span><br><span class="line">rosdep update</span><br><span class="line">rosdep install --from-paths src --ignore-src --rosdistro=$&#123;ROS_DISTRO&#125; -y</span><br><span class="line"># Build and install.</span><br><span class="line">catkin_make_isolated --install --use-ninja (该过程速度慢)</span><br><span class="line">source install_isolated/setup.bash</span><br></pre></td></tr></table></figure>
<p>二、测试<br>先下载测试数据：<br>2D bag包；3D bag包  </p>
<p>cartographer有自己的地图保存方法：<br>rosservice call &#x2F;finish_trajectory “map”<br>(默认会保存在.ros文件夹中)</p>
<p>roslaunch cartographer_ros demo_backpack_2d.launch bag_filename:&#x3D;2D_bag_file</p>
<p>roslaunch cartographer_ros demo_backpack_3d.launch bag_filename:&#x3D;3D_bag_file</p>
<p>3D建图过程中显示的是 submap_lists，建图完成后会生成并在 &#x2F;map主题发布 map 数据</p>
<h1 id="下载基于PR2平台的示例包"><a href="#下载基于PR2平台的示例包" class="headerlink" title="下载基于PR2平台的示例包"></a>下载基于PR2平台的示例包</h1><p>wget -P ~&#x2F;Downloads <a href="https://storage.googleapis.com/cartographer-public-data/bags/pr2/2011-09-15-08-32-46.bag">https://storage.googleapis.com/cartographer-public-data/bags/pr2/2011-09-15-08-32-46.bag</a> </p>
<p>roslaunch cartographer_ros demo_pr2.launch bag_filename:&#x3D;${HOME}&#x2F;Downloads&#x2F;2011-09-15-08-32-46.bag</p>
<h1 id="下载基于Revo-LDS平台的示例包"><a href="#下载基于Revo-LDS平台的示例包" class="headerlink" title="下载基于Revo LDS平台的示例包"></a>下载基于Revo LDS平台的示例包</h1><p>wget -P ~&#x2F;Downloads <a href="https://storage.googleapis.com/cartographer-public-data/bags/revo_lds/cartographer_paper_revo_lds.bag">https://storage.googleapis.com/cartographer-public-data/bags/revo_lds/cartographer_paper_revo_lds.bag</a> </p>
<p>roslaunch cartographer_ros demo_revo_lds.launch bag_filename:&#x3D;${HOME}&#x2F;Downloads&#x2F;cartographer_paper_revo_lds.bag</p>
<p>三、注意事项<br>1、发布的occupancy地图只支持2D<br>3D建图时，实时发布submap_list，建图完成后生成并在&#x2F;map主题发布2D的occupancy地图数据。rviz中展示的是3D submap数据投影到2D平面的效果，我们将这称之为：x-ray。<br>cartographer中并没有编写代码用于在cartographer的submaps表示中进行导航或推理、实现轨迹规划和避障。在短期内，可以通过保存轨迹以及创建地图（使用 rosservice call &#x2F;finish_trajectory），并使用map_server来加载该地图来实现导航。</p>
<p>cartographer目前的形式，相比未知环境下的自主导航，更适合用于建图。因为目前还没有路径规划算法可以根据cartographer的submap来进行规划。</p>
]]></content>
  </entry>
  <entry>
    <title>调试说明</title>
    <url>/2024/09/21/Robot/Map/cartographer/%E8%B0%83%E8%AF%95%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h2 id="1、不闭合"><a href="#1、不闭合" class="headerlink" title="1、不闭合"></a>1、不闭合</h2><p>若闭合点很难完全闭合，可尝试调整costraint_builder.min_score评分值。SPARSE_POSE_GRAPH.constraint_builder.min_score<br>该值越小越容易闭合,即要求精度变低。  </p>
<h2 id="2、IMU"><a href="#2、IMU" class="headerlink" title="2、IMU"></a>2、IMU</h2><p>建议IMU的角速度和线加速度都要发布。并根据IMU数据的准确性调整IMU的估计位姿的方差（方差越大则越不信任该数据）。也可调整IMU的相关权重：（trajectory_builder_2d.lua文件中）<br>orientation_model_variance  角速度权重<br>position_model_variance<br>velocity_model_variance  线加速度权重<br>（因此，<strong>IMU主题数据中的方差信息填不填写没影响</strong>）</p>
<h2 id="3、odom数据方差"><a href="#3、odom数据方差" class="headerlink" title="3、odom数据方差"></a>3、odom数据方差</h2><p><strong>cartographer中odom的方差并不是从&#x2F;odom主题中读取，而是从配置文件的constant_odometry_translational_variance和constant_odometry_rotational_variance参数获取，因此&#x2F;odom中的方差信息填不填写不影响</strong>:(astra_camera_2d.lua文件中)  </p>
<p>（走廊长度变长或变短时需要增加里程计的权重；平行环境变成交叉的，多半是数据角度问题，此时应该提高IMU的权重，减少配置文件中其方差值）  </p>
<h2 id="4、num-laser-fans参数"><a href="#4、num-laser-fans参数" class="headerlink" title="4、num_laser_fans参数"></a>4、num_laser_fans参数</h2><p>影响全局匹配和局部匹配的权衡。越小说明传感器累计误差比较大，要更注重全局匹配。  </p>
<h2 id="5、地图提前闭合问题"><a href="#5、地图提前闭合问题" class="headerlink" title="5、地图提前闭合问题"></a>5、地图提前闭合问题</h2><p>建图时离应该闭合的时候还有距离就闭合了。是因为环境相似，此时可继续再往前走，由于它提前闭环，前面肯定会出现不能闭环的情况，这时候就会自己发现闭环错误，从而修正了。<br>三种解决方法：<br>①、继续往前走，走到下一个特征明显的地方，等待重新闭环<br>②、增大里程计权重(前提是里程计准确)，修改odom中的方差值（协方差值若全写0，则表示odom完全没误差）<br>③、减小cartographer里面的配置文件astra_camera_2d.lua里面的huber_scale(该参数为激光匹配的权重(即闭环权重))<br>注意：减少闭环权重会使得闭环变慢。  </p>
<p>里程计还要融合其它数据之后得出的数据(如：IMU等)才是真正跟激光对比的数据。若将里程计的方差都写0，则表示里程计完全没误差，建图时理论上就会忽略里程计之外的其他数据。（但是单个数据的方差为零，不能使得融合出来的数据方差为零）  </p>
<h2 id="6、SPARSE-PISE-GRAPH-optimize-every-n-scans"><a href="#6、SPARSE-PISE-GRAPH-optimize-every-n-scans" class="headerlink" title="6、SPARSE_PISE_GRAPH.optimize_every_n_scans"></a>6、SPARSE_PISE_GRAPH.optimize_every_n_scans</h2><p>指定每多少帧闭环一次，增大该值会减少闭环次数。减少闭环压力，不用过于频繁的匹配，传感器的误差不会瞬间增大的很快。<br>（30改为75）  </p>
<h2 id="7、real-time-correlative-scan-matcher中的rotation-delta-cost-weight"><a href="#7、real-time-correlative-scan-matcher中的rotation-delta-cost-weight" class="headerlink" title="7、real_time_correlative_scan_matcher中的rotation_delta_cost_weight"></a>7、real_time_correlative_scan_matcher中的rotation_delta_cost_weight</h2><p>（1e-1改为2e-1）<br>提高局部闭环的时候对odom的角度置信度，局部闭环的时候odom还是挺准的，也是为了解决当时工厂的错误闭环，但要说到减少闭环压力的话，主要还是30改为75，不用过于频繁的匹配，传感器的误差不会瞬间增大得很快  </p>
<h2 id="8、ceres-scan-matching-初值"><a href="#8、ceres-scan-matching-初值" class="headerlink" title="8、ceres scan matching 初值"></a>8、ceres scan matching 初值</h2><p>好的初始 pose 对 ceres scan matching 求解有很大的影响。 因此，可用 IMU 来提供 pose 初值的旋转量。 在没有 IMU 时，可通过提高 scan match 频率或匹配精度来进行优化。  </p>
]]></content>
  </entry>
  <entry>
    <title>问题记录</title>
    <url>/2024/09/21/Robot/Map/cartographer/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="1、建图时跳动"><a href="#1、建图时跳动" class="headerlink" title="1、建图时跳动"></a>1、建图时跳动</h2><p><img src="/../images/carto%E5%BB%BA%E5%9B%BE%E8%B7%B3%E5%8F%98.png" alt="carto建图跳变"><br>建图时 map-&gt;base_link 跳变较大。（未使用 odom 和 imu）  </p>
<h2 id="2、LaserScan-message-warning"><a href="#2、LaserScan-message-warning" class="headerlink" title="2、LaserScan message warning"></a>2、LaserScan message warning</h2><p>W0529 07:18:06.000000 10156 sensor_bridge.cc:207] Ignored subdivision of a LaserScan message from sensor scan because previous subdivision time 636944599764771023 is not before current subdivision time 636944599764771023  </p>
<p>检查 scan 数据的 time_increment 是否正确设置<br>检查 num_accumulated_range_data 参数设置是否正确</p>
<h2 id="3、IMU-message-warning"><a href="#3、IMU-message-warning" class="headerlink" title="3、IMU message warning"></a>3、IMU message warning</h2><p>W0622 12:16:01.567340 5175 rosbag_validate_main.cc:103] frame_id imu_link time 737749000000: IMU linear acceleration is 0 m&#x2F;s^2, expected is [3, 30] m&#x2F;s^2. (It should include gravity and be given in m&#x2F;s^2.) linear_acceleration 0 0 0  </p>
<p>IMU 数据异常</p>
<h2 id="4、SPARSE-POSE-GRAPH-vs-POSE-GRAPH"><a href="#4、SPARSE-POSE-GRAPH-vs-POSE-GRAPH" class="headerlink" title="4、SPARSE_POSE_GRAPH vs POSE_GRAPH"></a>4、SPARSE_POSE_GRAPH vs POSE_GRAPH</h2><h2 id="5、机器人运动导致点云变形"><a href="#5、机器人运动导致点云变形" class="headerlink" title="5、机器人运动导致点云变形"></a>5、机器人运动导致点云变形</h2><p>激光雷达扫描一圈需要一定的时间，而机器人是运动的，因此会导致同一帧scan数据中，不同扫描点对应的机器人位姿不同。从而导致机器人变形。 通过 subdivision(num_subdivisions_per_laser_scan) 可以降低该变形的影响。  </p>
<h2 id="6、重力对齐-gravity-alignment"><a href="#6、重力对齐-gravity-alignment" class="headerlink" title="6、重力对齐(gravity alignment)???"></a>6、重力对齐(gravity alignment)???</h2><p>重力矢量(gravity vector)  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const double alpha = 1. - std::exp(-delta_t /  imu_gravity_time_constant_);</span><br><span class="line">gravity_vector_ =</span><br><span class="line">      (1. - alpha) * gravity_vector_ + alpha * imu_linear_acceleration;</span><br></pre></td></tr></table></figure>

<p>此处使用 滑动平均算法：用来估计变量的局部均值，使得变量的更新与一段时间内的历史取值有关。滑动平均得到的值更平滑、抖动性更小。  </p>
<h2 id="7、消息频率相关日志分析"><a href="#7、消息频率相关日志分析" class="headerlink" title="7、消息频率相关日志分析"></a>7、消息频率相关日志分析</h2><p><img src="/../images/scan_rate_log.png" alt="scan_rate_log.png"><br>kSensorDataRatesLoggingPeriodSecond变量指明每秒期望处理的scan数据帧数(cartographer中目前设置为15)，当主题数据超过该帧率就会输出该信息。</p>
<h2 id="8、score-histogram-日志"><a href="#8、score-histogram-日志" class="headerlink" title="8、score histogram 日志"></a>8、score histogram 日志</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[I0703 08:26:46.000000 20966 constraint_builder_2d.cc:282] 10 computations resulted in 7 additional constraints.</span><br></pre></td></tr></table></figure>

<p>10 次计算导致 1 个额外约束。<br>（这表明有 10 个候选的 <code>loop closure</code> 估计，其中只有 7 个满足 <code>POSE_GRAPH.constraint_builder.Min_score</code>，因此作为约束添加）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[I0703 08:26:46.000000 20966 constraint_builder_2d.cc:284] Score histogram:</span><br><span class="line">Count: 12  Min: 0.555694  Max: 0.762069  Mean: 0.660244</span><br><span class="line">[0.555694, 0.576331)             ##    Count: 1 (8.33333%)     Total: 1 (8.33333%)</span><br><span class="line">[0.576331, 0.596969)            ###    Count: 2 (16.6667%)     Total: 3 (25%)</span><br><span class="line">[0.596969, 0.617607)            ###    Count: 2 (16.6667%)     Total: 5 (41.6667%)</span><br><span class="line">[0.617607, 0.638244)                   Count: 0 (0%)           Total: 5 (41.6667%)</span><br><span class="line">[0.638244, 0.658882)                   Count: 0 (0%)           Total: 5 (41.6667%)</span><br><span class="line">[0.658882, 0.679519)            ###    Count: 2 (16.6667%)     Total: 7 (58.3333%)</span><br><span class="line">[0.679519, 0.700157)             ##    Count: 1 (8.33333%)     Total: 8 (66.6667%)</span><br><span class="line">[0.700157, 0.720794)                   Count: 0 (0%)           Total: 8 (66.6667%)</span><br><span class="line">[0.720794, 0.741432)          #####    Count: 3 (25%)          Total: 11 (91.6667%)</span><br><span class="line">[0.741432, 0.762069]             ##    Count: 1 (8.33333%)     Total: 12 (100%)</span><br></pre></td></tr></table></figure>

<p>以直方图形式显示 score分布。例如，上图表示： 总共 12 个 score(即：累计共 12 个 constraint), 其中最小值：0.555694、最大值：0.762069、均值：0.660244； 分数在 [0.555694, 0.576331) 之间的有一个，占比 8.333333%，以此类推。  </p>
<p>score_histogram_.ToString(10) ： 将 score 根据最大值和最小值分为 10 等份。  </p>
<p>对应源码 <code>cartographer/mapping/internal/constraints/constraint_builder_2d.cc</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void ConstraintBuilder2D::RunWhenDoneCallback() &#123;</span><br><span class="line">  Result result;</span><br><span class="line">  std::unique_ptr&lt;std::function&lt;void(const Result&amp;)&gt;&gt; callback;</span><br><span class="line">  &#123;</span><br><span class="line">    absl::MutexLock locker(&amp;mutex_);</span><br><span class="line">    CHECK(when_done_ != nullptr);</span><br><span class="line">    for (const std::unique_ptr&lt;Constraint&gt;&amp; constraint : constraints_) &#123;</span><br><span class="line">      if (constraint == nullptr) continue;</span><br><span class="line">      result.push_back(*constraint);</span><br><span class="line">    &#125;</span><br><span class="line">    if (options_.log_matches()) &#123;</span><br><span class="line">      LOG(INFO) &lt;&lt; constraints_.size() &lt;&lt; &quot; computations resulted in &quot;</span><br><span class="line">                &lt;&lt; result.size() &lt;&lt; &quot; additional constraints.&quot;;</span><br><span class="line">      LOG(INFO) &lt;&lt; &quot;Score histogram:\n&quot; &lt;&lt; score_histogram_.ToString(10);</span><br><span class="line">    &#125;</span><br><span class="line">    constraints_.clear();</span><br><span class="line">    callback = std::move(when_done_);</span><br><span class="line">    when_done_.reset();</span><br><span class="line">    kQueueLengthMetric-&gt;Set(constraints_.size());</span><br><span class="line">  &#125;</span><br><span class="line">  (*callback)(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9、Node-日志"><a href="#9、Node-日志" class="headerlink" title="9、Node 日志"></a>9、Node 日志</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I1214 09:57:51.000000 15236 constraint_builder_2d.cc:275] Node (0, 30) with 200 points on submap (0, 5) differs by translation 0.24 rotation 0.006 with score 76.5%.</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li>(0, 30)：Node id</li>
<li>200：<code>constant_data-&gt;filtered_gravity_aligned_point_cloud.size()</code> 即：体素过滤后，并根据重力方向校正过的点云数据的大小</li>
<li>(0, 5)：Submap id</li>
</ul>
<h2 id="10、Submap-RViz"><a href="#10、Submap-RViz" class="headerlink" title="10、Submap RViz"></a>10、Submap RViz</h2><p><img src="/../images/submap_rviz.png" alt="submap_rviz"></p>
<p>显示 submap list。包含所有 submap 在 map 坐标系下的位姿。已经完成构建的子图，不再改变，<code>submap_version</code> 的值也不改变了。 每一次激光数据到达的时候会修改最新的两个子图，例如：<code>submap_index</code> 的 4 和 5 的 <code>submap_version</code> 的还会继续更新，直到<code>submap_index</code> 为 4 的地图不再修改而增添新的子图。可通过 <code>submap_list</code> 主题查看每个 <code>submap</code> 的位姿。</p>
<p>其中：</p>
<ul>
<li>0.70：表示 submap_id.submap_version.</li>
</ul>
<h2 id="11、Constraints-RViz"><a href="#11、Constraints-RViz" class="headerlink" title="11、Constraints RViz"></a>11、Constraints RViz</h2><p><img src="/../images/constraints_rviz.png" alt="constraints_rviz"></p>
<p>显示约束信息。共有六种类型的约束：</p>
<ul>
<li><p>Intra constraints：内部子图约束, 非全局约束, rviz中显示的最多的约束</p>
</li>
<li><p>Intra residuals：内部残差约束，非全局约束，如上图中红色的虚线段</p>
</li>
<li><p>Inter constraints,same trajectory：外部子图约束，回环约束，全局约束</p>
</li>
<li><p>Inter residuals,same trajectory：外部残差约束</p>
</li>
<li><p>Inter constraints,different trajectoies：</p>
</li>
<li><p>Inter residuals,same trajectory：</p>
</li>
</ul>
<p>上图中，只有单一轨迹，因此不存在后两种约束。    </p>
<p>最终发布的 <code>constraints_list</code> 中，<code>constraint_marker(ns：Intra constraints)</code> 为子图位姿和子图内 node 之间的约束；同样 <code>residual_marker(ns：Intra residuals)</code> 为约束位姿 <code>constraint_pose</code> 和 node 位姿 <code>trajectory_node_pose</code> 之间的残差（rviz 中残差约束的红色线段为 <code>constraint_pose</code> 与 <code>trajectory_node_pose</code> 连线）。</p>
<h2 id="11、Huber-robust-error-function？？？"><a href="#11、Huber-robust-error-function？？？" class="headerlink" title="11、Huber robust error function？？？"></a>11、Huber robust error function？？？</h2><p><a href="https://blog.csdn.net/xiaoma_bk/article/details/80000933">Huber robust error function</a>  </p>
<p>ceres 根据 点云、translation、rotation 构建三个 cost function，使用这三个 cost function 作为条件来求解最优解。具体过程？？？</p>
<p>ProbabilityGrid 与 TSDF ？？？  </p>
<p>pose extrapolator 中如何融合由 IMU、odom、scan match 三者得到的位姿？？？ 为何删除了旧版中的 UKF 算法？？？</p>
<p>在预估位姿的方向时，使用了IMU(IMU存在时)的<strong>线加速度和角速度</strong>来进行计算。计算方向只需要角速度，为何还用到线加速度？？<br>对2D建图，作用不大，前提是IMU重力水平。若 IMU 不是重力水平的，则线加速度可用于与角速度进行融合修正，得到更精确的角度值。  </p>
]]></content>
  </entry>
  <entry>
    <title>ceres scan matching</title>
    <url>/2024/09/21/Robot/Map/cartographer/ceres%20scan%20matching/</url>
    <content><![CDATA[<p>cartographer 中，将求解 pose 的问题转换为求解非线性最小二乘问题，并使用 ceres 进行求解。  </p>
<p>最小二乘问题是一个局部最优问题，好的初始 pose 对求解有很大的影响。 因此，可用 IMU 来提供 pose 初值的旋转量。 在没有 IMU 时，可通过提高 scan match 频率或匹配精度来进行优化。  </p>
<p>匹配过程：<br>1、构建成本函数<br>分别构建 point_cloud、translation、rotation 相关的三个 cost function。<br>1）构建点云相关的 cost function<br>CreateOccupiedSpaceCostFunction2D 或 CreateTSDFMatchCostFunction2D<br>CreateOccupiedSpaceCostFunction2D：将点云与grid进行匹配。随着grid与点云的较差对应,匹配成本将增加。<br>CreateTSDFMatchCostFunction2D：在 pose 处进行点云与 grid 的匹配。 成本随着 grid 中匹配点位置的 signed 距离而增加。  </p>
<p>2）构建 translation 相关的 cost function  </p>
<p>3）构建 rotation 相关的 cost function  </p>
<p>2、构建 Problem  </p>
<p>3、配置参数及求解<br>ceres::Solve  </p>
]]></content>
  </entry>
  <entry>
    <title>controller_manager</title>
    <url>/2024/10/16/Robot/ROS/ros_control/controller_manager/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，密码不对，请重试" data-whm="抱歉，该文章无法校验">
  <script id="hbeData" type="hbeData" data-hmacdigest="5ce1a1d08e9a84df71b7a2976eff294b99306b46b3f7fefb098abd2be91797c8"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Robot</category>
        <category>ROS</category>
        <category>ros_control</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>ros_control</tag>
      </tags>
  </entry>
  <entry>
    <title>hardware_interface</title>
    <url>/2024/10/17/Robot/ROS/ros_control/hardware_interface/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，密码不对，请重试" data-whm="抱歉，该文章无法校验">
  <script id="hbeData" type="hbeData" data-hmacdigest="5ea77ece599758c89e656a2e9fef7865753fe7ec47cc3de642bf3634062d0ee5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Robot</category>
        <category>ROS</category>
        <category>ros_control</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>ros_control</tag>
      </tags>
  </entry>
  <entry>
    <title>joint_trajectory_controller</title>
    <url>/2024/10/16/Robot/ROS/ros_control/joint_trajectory_controller/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，密码不对，请重试" data-whm="抱歉，该文章无法校验">
  <script id="hbeData" type="hbeData" data-hmacdigest="835b8ac096a2ccf32a23de40273492d71bf5270f1683d1b0c3dd5f4e21d2c1b1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Robot</category>
        <category>ROS</category>
        <category>ros_control</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>ros_control</tag>
      </tags>
  </entry>
  <entry>
    <title>ros_control</title>
    <url>/2024/10/17/Robot/ROS/ros_control/ros_control/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，密码不对，请重试" data-whm="抱歉，该文章无法校验">
  <script id="hbeData" type="hbeData" data-hmacdigest="e954f4dde652b63a0af1dfa255c698c2a76a40294a400e4017fdd4d4a4be011a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Robot</category>
        <category>ROS</category>
        <category>ros_control</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>ros_control</tag>
      </tags>
  </entry>
  <entry>
    <title>使用</title>
    <url>/2024/10/17/Robot/ROS/ros_control/%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，密码不对，请重试" data-whm="抱歉，该文章无法校验">
  <script id="hbeData" type="hbeData" data-hmacdigest="2a7c0e4581cf592960db3ab9ada75b3701868697e3f384e8e63070429e2a9f9b"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Robot</category>
        <category>ROS</category>
        <category>ros_control</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>ros_control</tag>
      </tags>
  </entry>
  <entry>
    <title>示例</title>
    <url>/2024/10/16/Robot/ROS/ros_control/%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，密码不对，请重试" data-whm="抱歉，该文章无法校验">
  <script id="hbeData" type="hbeData" data-hmacdigest="5ac013fddee5baac41fa49af88b6c63e271dc602469b89e120697d136a6eb262"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Robot</category>
        <category>ROS</category>
        <category>ros_control</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>ros_control</tag>
      </tags>
  </entry>
  <entry>
    <title>ExternalProject</title>
    <url>/2024/09/16/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/CMake/modules/ExternalProject/</url>
    <content><![CDATA[<p>用于添加外部项目到本地 cmake 项目。</p>
<h1 id="外部项目定义"><a href="#外部项目定义" class="headerlink" title="外部项目定义"></a>外部项目定义</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 必须，否则会出现 Unknown CMake command &quot;ExternalProject_Add&quot;. 错误 </span></span><br><span class="line"><span class="keyword">include</span>(ExternalProject)</span><br><span class="line"></span><br><span class="line">ExternalProject_Add(&lt;name&gt; [&lt;<span class="keyword">option</span>&gt;...])              </span><br></pre></td></tr></table></figure>



<h2 id="目录选项"><a href="#目录选项" class="headerlink" title="目录选项"></a>目录选项</h2><p>大部分情况下，默认目录布局就足够了。主要是通常不需要更改主项目的实施细节。但是，在某些情况下，控制目录布局可能是有用的或必要的。</p>
<table>
<thead>
<tr>
<th>PREFIX</th>
<th align="left">外部项目的根目录</th>
</tr>
</thead>
<tbody><tr>
<td>TMP_DIR</td>
<td align="left">存储零时文件的目录</td>
</tr>
<tr>
<td>STAMP_DIR</td>
<td align="left">存储每一步的 timestamps.除非被 LOG_DIR，否则还会在此创建每个步骤的日志文件</td>
</tr>
<tr>
<td>LOG_DIR</td>
<td align="left">存储每一步的日志文件的目录</td>
</tr>
<tr>
<td>DOWNLOAD_DIR</td>
<td align="left">存放下载的文件(解压前).<strong>该参数只有在使用URL下载时有效</strong>，其它的下载方法直接使用 SOURCE_DIR</td>
</tr>
<tr>
<td>SOURCE_DIR</td>
<td align="left">下载的源码目录</td>
</tr>
<tr>
<td>BINARY_DIR</td>
<td align="left">编译目录位置。若指定了 BUILD_IN_SOURCE,则该参数失效</td>
</tr>
<tr>
<td>INSTALL_DIR</td>
<td align="left">安装路径</td>
</tr>
</tbody></table>
<p>若未指定上面的目录选项，则使用如下默认路径(假设指定了 <code>PREFIX</code> 选项或设置了 <code>EP_PREFIX</code> 属性)：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">TMP_DIR      = &lt;prefix&gt;/tmp</span><br><span class="line">STAMP_DIR    = &lt;prefix&gt;/src/&lt;name&gt;-stamp</span><br><span class="line">DOWNLOAD_DIR = &lt;prefix&gt;/src</span><br><span class="line">SOURCE_DIR   = &lt;prefix&gt;/src/&lt;name&gt;</span><br><span class="line">BINARY_DIR   = &lt;prefix&gt;/src/&lt;name&gt;-build</span><br><span class="line">INSTALL_DIR  = &lt;prefix&gt;</span><br><span class="line">LOG_DIR      = &lt;STAMP_DIR&gt;</span><br></pre></td></tr></table></figure>

<p>否则，如果设置了 <code>EP_BASE</code> 属性：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">TMP_DIR      = &lt;base&gt;/tmp/&lt;name&gt;</span><br><span class="line">STAMP_DIR    = &lt;base&gt;/Stamp/&lt;name&gt;</span><br><span class="line">DOWNLOAD_DIR = &lt;base&gt;/Download/&lt;name&gt;</span><br><span class="line">SOURCE_DIR   = &lt;base&gt;/Source/&lt;name&gt;</span><br><span class="line">BINARY_DIR   = &lt;base&gt;/Build/&lt;name&gt;</span><br><span class="line">INSTALL_DIR  = &lt;base&gt;/<span class="keyword">Install</span>/&lt;name&gt;</span><br><span class="line">LOG_DIR      = &lt;STAMP_DIR&gt;</span><br></pre></td></tr></table></figure>

<p>若既未设置 <code>PREFIX</code>、<code>EP_PREFIX</code>，也未设置 <code>EP_BASE</code>，则设置默认的 <code>PREFIX</code> 为：<code>&lt;name&gt;-prefix</code>。例如：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CGAL_VERSION <span class="number">4.14</span>.<span class="number">1</span>)</span><br><span class="line">ExternalProject_Add(cgal</span><br><span class="line">  URL https://github.com/CGAL/cgal/archive/releases/CGAL-<span class="variable">$&#123;CGAL_VERSION&#125;</span>.tar.gz</span><br><span class="line">  UPDATE_COMMAND <span class="string">&quot;&quot;</span></span><br><span class="line">  CMAKE_ARGS</span><br><span class="line">    -DCMAKE_INSTALL_PREFIX=<span class="variable">$&#123;CATKIN_DEVEL_PREFIX&#125;</span></span><br><span class="line">    -DWITH_CGAL_Qt5:BOOL=<span class="keyword">OFF</span></span><br><span class="line">    -DWITH_CGAL_ImageIO:BOOL=<span class="keyword">OFF</span></span><br><span class="line">    -DCMAKE_BUILD_TYPE:<span class="keyword">STRING</span>=Release</span><br><span class="line">  <span class="keyword">BUILD_COMMAND</span> $(MAKE)</span><br><span class="line">  INSTALL_COMMAND $(MAKE) <span class="keyword">install</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>未指定 <code>PREFIX</code>、<code>EP_PREFIX</code>、<code>EP_BASE</code> 时，其下载路径为 <code>&lt;name&gt;-prefix</code>，即: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">catkin_ws/build/&lt;package_name&gt;/&lt;name&gt;-prefix/src</span><br></pre></td></tr></table></figure>

<p>此例中，package name 为 cgal_catkin， 为 ExternalProject_Add 第一个参数 cgal。因此其下载路径为：catkin_ws&#x2F;build&#x2F;cgal&#x2F;cgal-prefix&#x2F;src&#x2F;CGAL-4.14.1.tar.gz</p>
<h2 id="下载选项"><a href="#下载选项" class="headerlink" title="下载选项"></a>下载选项</h2><p>如果使用 <strong>SOURCE_DIR 指定了本地的非空目录，则会忽略指定的下载方法</strong>。否则必须指定下载方法(不能指定多个下载方法)。下载方法包括指定下载指令(DOWNLOAD_COMMAND)、URL下载、Git下载、SVN下载、Mercurial下载、CVS下载等：</p>
<table>
<thead>
<tr>
<th><code>DOWNLOAD_COMMAND</code></th>
<th>覆盖下载步骤的指令(支持 generator expressions)。<strong>若指定了该选项，则会忽略所有其它下载选项。将该选项设置为空，可以有效的禁用下载步骤</strong></th>
</tr>
</thead>
</table>
<h3 id="URL-下载"><a href="#URL-下载" class="headerlink" title="URL 下载"></a>URL 下载</h3><table>
<thead>
<tr>
<th><code>URL &lt;url1&gt;  [&lt;url2&gt;......]</code></th>
<th>外部项目源的路径。指定多个URL时，会依次尝试直到成功。URL可以是本地文件系统中的普通路径(此时URL必须是唯一的)或file命令支持的任何可下载URL。使用本地文件系统路径时可以引用现有的目录或压缩文件。使用压缩文件时，除非设置DOWNLOAD_NO_EXTRACT选项防止解压，<strong>否则将自动解压</strong>。压缩格式通过检查实际内容而不是通过扩展名来确定</th>
</tr>
</thead>
<tbody><tr>
<td><code>URL_HASH &lt;algo&gt;=&lt;hashvalue&gt;</code></td>
<td>algo为hashing算法名，例如:MD5等。</td>
</tr>
</tbody></table>
<h3 id="GIT-下载"><a href="#GIT-下载" class="headerlink" title="GIT 下载"></a>GIT 下载</h3><h3 id="SVN-下载"><a href="#SVN-下载" class="headerlink" title="SVN 下载"></a>SVN 下载</h3><h3 id="Mercurial-下载"><a href="#Mercurial-下载" class="headerlink" title="Mercurial 下载"></a>Mercurial 下载</h3><h3 id="CVS-下载"><a href="#CVS-下载" class="headerlink" title="CVS 下载"></a>CVS 下载</h3><h2 id="update-patch-步骤选项"><a href="#update-patch-步骤选项" class="headerlink" title="update&#x2F;patch 步骤选项"></a>update&#x2F;patch 步骤选项</h2><p>每当重新运行CMake时，如果下载方法支持更新，则默认情况下将更新外部项目的源</p>
<table>
<thead>
<tr>
<th>UPDATE_COMMAND …</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>UPDATE_DISCONNECTED</td>
<td></td>
</tr>
<tr>
<td>PATCH_COMMAND …</td>
<td></td>
</tr>
</tbody></table>
<h2 id="configure-步骤选项"><a href="#configure-步骤选项" class="headerlink" title="configure 步骤选项"></a>configure 步骤选项</h2><p>configure 步骤在下载和更新步骤之后。默认情况下，假设外部项目也是一个 cmake 项目，但可根据需要进行配置</p>
<h2 id="Build-步骤选项"><a href="#Build-步骤选项" class="headerlink" title="Build 步骤选项"></a>Build 步骤选项</h2><p>根据 configure 步骤确定默认的编译指令为 cmake 还是普通的 Makefile</p>
<table>
<thead>
<tr>
<th>BUILD_COMMAND …</th>
<th>重载默认的编译指令。将该选项设置为空字符串，可以使编译步骤不做任何处理</th>
</tr>
</thead>
<tbody><tr>
<td>BUILD_IN_SOURCE</td>
<td>在外部项目源码目录进行编译。</td>
</tr>
<tr>
<td>BUILD_ALWAYS</td>
<td>强制每次都编译</td>
</tr>
<tr>
<td>BUILD_BYPRODUCTS …</td>
<td>指定将由build指令生成的文件，但是其修改时间可能会或可能不会由后续的构建更新。</td>
</tr>
</tbody></table>
<h2 id="Install-步骤选项"><a href="#Install-步骤选项" class="headerlink" title="Install 步骤选项"></a>Install 步骤选项</h2><table>
<thead>
<tr>
<th>INSTALL_COMMAND …</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="Test-步骤选项"><a href="#Test-步骤选项" class="headerlink" title="Test 步骤选项"></a>Test 步骤选项</h2><table>
<thead>
<tr>
<th>TEST_COMMAND …</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>TEST_BEFORE_INSTALL</td>
<td>在 install 之前执行测试步骤</td>
</tr>
<tr>
<td>TEST_AFTER_INSTALL</td>
<td></td>
</tr>
<tr>
<td>TEST_EXCLUDE_FROM_MAIN</td>
<td></td>
</tr>
</tbody></table>
<h2 id="输出日志选项"><a href="#输出日志选项" class="headerlink" title="输出日志选项"></a>输出日志选项</h2><table>
<thead>
<tr>
<th>LOG_DOWNLOAD</th>
<th>使能下载日志</th>
</tr>
</thead>
<tbody><tr>
<td>LOG_UPDATE</td>
<td>使能更新日志</td>
</tr>
<tr>
<td>LOG_PATCH</td>
<td>使能Patch日志</td>
</tr>
<tr>
<td>LOG_CONFIGURE</td>
<td>使能configure日志</td>
</tr>
<tr>
<td>LOG_BULD</td>
<td>使能编译日志</td>
</tr>
<tr>
<td>LOG_INSTALL</td>
<td>使能安装日志</td>
</tr>
<tr>
<td>LOG_TEST</td>
<td>使能测试日志</td>
</tr>
<tr>
<td>LOG_MERGED_STDOUTERR</td>
<td>合并stdout和stderr</td>
</tr>
<tr>
<td>LOG_OUTPUT_ONFAILURE</td>
<td>该选项只有在上面的选项中至少使能一项时有效。若设置为 True，则各步骤的错误日志输出到对应文件的同时，也会输出到终端显示。</td>
</tr>
</tbody></table>
<h2 id="终端访问选项"><a href="#终端访问选项" class="headerlink" title="终端访问选项"></a>终端访问选项</h2><p>在某些情况下，各个步骤可以直接访问终端。</p>
<table>
<thead>
<tr>
<th>USES_TERMINAL_DOWNLOAD</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>USES_TERMINAL_UPDATE</td>
<td></td>
</tr>
<tr>
<td>USES_TERMINAL_CONFIGURE</td>
<td></td>
</tr>
<tr>
<td>USES_TERMINAL_BUILD</td>
<td></td>
</tr>
<tr>
<td>USES_TERMINAL_INSTALL</td>
<td></td>
</tr>
<tr>
<td>USES_TERMINAL_TEST</td>
<td></td>
</tr>
</tbody></table>
<h2 id="Target-选项"><a href="#Target-选项" class="headerlink" title="Target 选项"></a>Target 选项</h2><table>
<thead>
<tr>
<th>DEPENDS …</th>
<th>指定该外部项目依赖的一起目标</th>
</tr>
</thead>
<tbody><tr>
<td>EXCLUDE_FROM_ALL</td>
<td>将该外部项目排除在 ALL 目标之外</td>
</tr>
<tr>
<td>STEP_TARGETS …</td>
<td>为指定的步骤生成自定义的目标</td>
</tr>
<tr>
<td>INDEPENDENT_STEP_TARGETS …</td>
<td>为指定的步骤生成自定义目标，并防止这些目标具有通常的依赖项</td>
</tr>
</tbody></table>
<h2 id="Miscellaneous-选项"><a href="#Miscellaneous-选项" class="headerlink" title="Miscellaneous 选项"></a>Miscellaneous 选项</h2><table>
<thead>
<tr>
<th>LIST_SEPARATOR</th>
<th>将所有 …_COMMAND 选项的 ‘;’ 替换为</th>
</tr>
</thead>
<tbody><tr>
<td>COMMAND …</td>
<td></td>
</tr>
</tbody></table>
<h1 id="获取项目属性"><a href="#获取项目属性" class="headerlink" title="获取项目属性"></a>获取项目属性</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">ExternalProject_Get_Property(&lt;name&gt; &lt;prop1&gt; [&lt;prop2&gt;...])</span><br></pre></td></tr></table></figure>



<h1 id="Explicit-Step-Management"><a href="#Explicit-Step-Management" class="headerlink" title="Explicit Step Management"></a><a href="https://cmake.org/cmake/help/latest/module/ExternalProject.html#explicit-step-management">Explicit Step Management</a></h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">ExternalProject_Add_Step(&lt;name&gt; &lt;step&gt; [&lt;<span class="keyword">option</span>&gt;...])</span><br><span class="line"></span><br><span class="line">ExternalProject_Add_StepTargets(&lt;name&gt; [NO_DEPENDS] &lt;step1&gt; [&lt;step2&gt;...])</span><br><span class="line"></span><br><span class="line">ExternalProject_Add_StepDependencies(&lt;name&gt; &lt;step&gt; &lt;target1&gt; [&lt;target2&gt;...])</span><br></pre></td></tr></table></figure>



<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="例一：从-github-下载并编译-FooBar-项目"><a href="#例一：从-github-下载并编译-FooBar-项目" class="headerlink" title="例一：从 github 下载并编译 FooBar 项目"></a>例一：从 github 下载并编译 FooBar 项目</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(ExternalProject)</span><br><span class="line">ExternalProject_Add(foobar</span><br><span class="line">  GIT_REPOSITORY    git@github.com:FooCo/FooBar.git</span><br><span class="line">  GIT_TAG           origin/release/<span class="number">1.2</span>.<span class="number">3</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h2 id="例二：从-web-服务器下载-SecretSauce-包"><a href="#例二：从-web-服务器下载-SecretSauce-包" class="headerlink" title="例二：从 web 服务器下载 SecretSauce 包"></a>例二：从 web 服务器下载 SecretSauce 包</h2><p>此例指定了两个 URL，以便选择更快的网络。该项目是一个 Makefile 项目，无需 configure 步骤，因此清空默认指令 CONFIGURE_COMMAND 。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_program</span>(MAKE_EXE NAMES gmake nmake make)</span><br><span class="line">ExternalProject_Add(secretsauce</span><br><span class="line">  URL               http://intranet.somecompany.com/artifacts/sauce-<span class="number">2.7</span>.tgz</span><br><span class="line">                    https://www.somecompany.com/downloads/sauce-<span class="number">2.7</span>.zip</span><br><span class="line">  URL_HASH          MD5=d41d8cd98f00b204e9800998ecf8427e</span><br><span class="line">  CONFIGURE_COMMAND <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">BUILD_COMMAND</span>     <span class="variable">$&#123;MAKE_EXE&#125;</span> sauce</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h2 id="例三"><a href="#例三" class="headerlink" title="例三"></a>例三</h2><p>假设 secretsauce 依赖于 foobar</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">ExternalProject_Add_StepDependencies(secretsauce build foobar)</span><br></pre></td></tr></table></figure>

<p>​              </p>
<p>另一种选择是 foobar 编译生成一个自定义目标，并使 secretsauce 依赖于该目标，而不是整个 foobar 项目。这意味着，foobar 只需要编译，而无需执行 install 及 test 步骤。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">ExternalProject_Add_StepTargets(foobar build)</span><br><span class="line">ExternalProject_Add(secretsauce</span><br><span class="line">  URL               http://intranet.somecompany.com/artifacts/sauce-<span class="number">2.7</span>.tgz</span><br><span class="line">                    https://www.somecompany.com/downloads/sauce-<span class="number">2.7</span>.zip</span><br><span class="line">  URL_HASH          MD5=d41d8cd98f00b204e9800998ecf8427e</span><br><span class="line">  CONFIGURE_COMMAND <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">BUILD_COMMAND</span>     <span class="variable">$&#123;MAKE_EXE&#125;</span> sauce</span><br><span class="line">  DEPENDS           foobar-build</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>也可在 foobar 项目中定义，而不使用 <code>ExternalProject_Add_StepTargets()</code>:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">ExternalProject_Add(foobar</span><br><span class="line">  GIT_REPOSITORY git@github.com:FooCo/FooBar.git</span><br><span class="line">  GIT_TAG        origin/release/<span class="number">1.2</span>.<span class="number">3</span></span><br><span class="line">  STEP_TARGETS   build</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h2 id="例四"><a href="#例四" class="headerlink" title="例四"></a>例四</h2><p>假设 secretsauce 提供了 makedoc 脚本用于生成其文档，且该脚本要求 输出目录 作为唯一参数，并且应从 secretsauce 源目录运行该脚本：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">ExternalProject_Add_Step(secretsauce docs</span><br><span class="line">  <span class="keyword">COMMAND</span>           &lt;SOURCE_DIR&gt;/makedoc &lt;BINARY_DIR&gt;</span><br><span class="line">  WORKING_DIRECTORY &lt;SOURCE_DIR&gt;</span><br><span class="line">  COMMENT           <span class="string">&quot;Building secretsauce docs&quot;</span></span><br><span class="line">  ALWAYS            <span class="keyword">TRUE</span></span><br><span class="line">  EXCLUDE_FROM_MAIN <span class="keyword">TRUE</span></span><br><span class="line">)</span><br><span class="line">ExternalProject_Add_StepTargets(secretsauce docs)</span><br></pre></td></tr></table></figure>

<p>可通过 <strong><code>cmake --build . --target secretsauce-docs</code></strong>  指令触发该步骤</p>
<h2 id="例五"><a href="#例五" class="headerlink" title="例五"></a>例五</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CGAL_VERSION <span class="number">4.14</span>.<span class="number">1</span>)</span><br><span class="line"> <span class="number">14</span> ExternalProject_Add(cgal</span><br><span class="line"> <span class="number">15</span>   URL https://github.com/CGAL/cgal/archive/releases/CGAL-<span class="variable">$&#123;CGAL_VERSION&#125;</span>.tar.gz</span><br><span class="line"> <span class="number">16</span>   UPDATE_COMMAND <span class="string">&quot;&quot;</span></span><br><span class="line"> <span class="number">17</span>   CMAKE_ARGS</span><br><span class="line"> <span class="number">18</span>     -DCMAKE_INSTALL_PREFIX=<span class="variable">$&#123;CATKIN_DEVEL_PREFIX&#125;</span></span><br><span class="line"> <span class="number">19</span>     -DWITH_CGAL_Qt5:BOOL=<span class="keyword">OFF</span></span><br><span class="line"> <span class="number">20</span>     -DWITH_CGAL_ImageIO:BOOL=<span class="keyword">OFF</span></span><br><span class="line"> <span class="number">21</span>     -DCMAKE_BUILD_TYPE:<span class="keyword">STRING</span>=Release</span><br><span class="line"> <span class="number">22</span>   <span class="keyword">BUILD_COMMAND</span> $(MAKE)</span><br><span class="line"> <span class="number">23</span>   INSTALL_COMMAND $(MAKE) <span class="keyword">install</span></span><br><span class="line"> <span class="number">24</span> )</span><br></pre></td></tr></table></figure>



<h2 id="例六：使用本地压缩文件"><a href="#例六：使用本地压缩文件" class="headerlink" title="例六：使用本地压缩文件"></a>例六：使用本地压缩文件</h2><p>假设 package 路径为 catkin_ws&#x2F;src&#x2F;smach_test，预先将 SDL2-2.0.8.tar.gz 放置到 catkin_ws&#x2F;<strong>build</strong>&#x2F;smach_test&#x2F;smach-prefix&#x2F;src&#x2F;smach 目录下</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">ExternalProject_Add(smach</span><br><span class="line"><span class="comment">#  URL &quot;https://www.libsdl.org/release/SDL2-2.0.8.tar.gz&quot;</span></span><br><span class="line">  URL <span class="string">&quot;SDL2-2.0.8.tar.gz&quot;</span></span><br><span class="line">  UPDATE_COMMAND <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">#  CMAKE_ARGS</span></span><br><span class="line"><span class="comment">#    -DCMAKE_INSTALL_PREFIX=$&#123;CATKIN_DEVEL_PREFIX&#125;</span></span><br><span class="line"><span class="comment">#    -DWITH_CGAL_Qt5:BOOL=OFF</span></span><br><span class="line"><span class="comment">#    -DWITH_CGAL_ImageIO:BOOL=OFF</span></span><br><span class="line"><span class="comment">#    -DCMAKE_BUILD_TYPE:STRING=Release</span></span><br><span class="line"><span class="comment">#  BUILD_COMMAND $(MAKE)</span></span><br><span class="line"><span class="comment">#  INSTALL_COMMAND $(MAKE) install</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>执行 catkin_make 编译时，会读取指定的压缩文件，并解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src=&#x27;/home/ros/test/catkin/catkin_ws/build/smach_test/smach-prefix/src/SDL2-2.0.8.tar.gz&#x27;</span><br><span class="line">dst=&#x27;/home/ros/test/catkin/catkin_ws/build/smach_test/smach-prefix/src/smach&#x27;</span><br></pre></td></tr></table></figure>

<p>注意：URL 若给定的是相对路径，则始终是相对于 catkin_ws&#x2F;build&#x2F;smach_test&#x2F;smach-prefix&#x2F;src&#x2F; 。</p>
]]></content>
      <categories>
        <category>编译工具</category>
        <category>CMake</category>
        <category>modules</category>
      </categories>
      <tags>
        <tag>编译工具</tag>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>configure_file</title>
    <url>/2024/09/15/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/CMake/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/properties%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<p>[target properties</p>
<p><a href="https://cmake.org/cmake/help/latest/manual/cmake-properties.7.html#target-properties"></a></p>
<h1 id="SET-TARGET-PROPERTIES"><a href="#SET-TARGET-PROPERTIES" class="headerlink" title="SET_TARGET_PROPERTIES"></a>SET_TARGET_PROPERTIES</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置目标属性。可使用任意想要的 Properties 键值对，然后使用</span></span><br><span class="line"><span class="comment"># get_property/get_target_property 获取这些属性。</span></span><br><span class="line"><span class="keyword">set_target_properties</span>(&lt;targets&gt; ...</span><br><span class="line">                      PROPERTIES &lt;prop1&gt; &lt;value1&gt;</span><br><span class="line">                      [&lt;prop2&gt; &lt;value2&gt;] ...)</span><br></pre></td></tr></table></figure>

<p>常用属性包括：</p>
<ul>
<li><code>CXX_STANDARD/C_STANDARD</code> : 设置 C&#x2F;C++ 版本</li>
<li><code>CXX_EXTENSIONS/C_EXTENSIONS</code> : 设置是否启用 C&#x2F;C++ 标准库扩展</li>
<li><code>OUTPUT_NAME</code> : 设置生成的文件的名称</li>
<li><code>RUNTIME_OUTPUT_DIRECTORY</code> : 设置文件运行时的输出目录  </li>
<li><code>INCLUDE_DIRECTORIES</code> : 设置目标的包含目录</li>
<li><code>COMPILE_DEFINITIONS</code> : 为目标设置编译时宏定义</li>
</ul>
<h1 id="GET-TARGET-PROPERTY"><a href="#GET-TARGET-PROPERTY" class="headerlink" title="GET_TARGET_PROPERTY"></a>GET_TARGET_PROPERTY</h1><p>从 target 获取属性。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET_TARGET_PROPERTY</span>(&lt;VAR&gt; <span class="keyword">target</span> property)</span><br></pre></td></tr></table></figure>

<p>该属性的值存储在变量 <code>&lt;var&gt;</code> 中。如果没有找到目标属性，则行为取决于它是否被定义为 <code>INHERITED</code> 属性(参见 <a href="https://cmake.org/cmake/help/latest/command/define_property.html#command:define_property">define_property()</a>)。非继承属性将 <code>&lt;var&gt;</code> 设置为 <code>&lt;var&gt;-NOTFOUND</code>，而继承属性将按照 <code>define_property()</code> 命令的描述搜索相关的父范围，如果仍然无法找到该属性，则将 <code>&lt;var&gt;</code> 设置为空字符串。</p>
<p>使用 <code>set_target_properties()</code> 设置 target 属性值。属性通常用于控制如何构建 target，但有些则用于查询 target。该命令可以获取到目前为止创建的任何 target 的属性。target 不需要在当前的 CMakeLists.txt 文件中。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET_TARGET_PROPERTY</span>(CAT_CUTIFIER_PUBLIC_HEADER_DIR CatCutifier INTERFACE_INCLUDE_DIRECTORIES)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编译工具</category>
        <category>CMake</category>
        <category>基础指令</category>
      </categories>
      <tags>
        <tag>编译工具</tag>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>configure_file</title>
    <url>/2024/09/15/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/CMake/%E8%84%9A%E6%9C%AC%E6%8C%87%E4%BB%A4/configure_file/</url>
    <content><![CDATA[<h1 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">configure_file</span>(&lt;input&gt; &lt;output&gt;</span><br><span class="line">               [NO_SOURCE_PERMISSIONS | USE_SOURCE_PERMISSIONS |</span><br><span class="line">                FILE_PERMISSIONS &lt;permissions&gt;...]</span><br><span class="line">               [COPYONLY] [ESCAPE_QUOTES] [@ONLY]</span><br><span class="line">               [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])</span><br></pre></td></tr></table></figure>

<p>configure_file 主要作用：</p>
<ul>
<li>将 <code>&lt;input&gt;</code> 文件内容复制到 <code>&lt;output&gt;</code></li>
<li>根据参数规则，替换 <code>@VAR@</code> 及 <code>$&#123;VAR&#125;</code> 变量</li>
</ul>
<p>此外，会对 <strong>cmakedefine</strong> 进行替换</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cmakedefine VAR ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 被替换为</span></span><br><span class="line"><span class="comment">#define VAR ...  </span></span><br><span class="line">或</span><br><span class="line">/* <span class="comment">#undef VAR*/</span></span><br></pre></td></tr></table></figure>

<p>取决于是否在 CMake 中将 VAR 设置为任何未被 if() 命令视为 false 常量的值。即：cmakedefine 会根据变量是否为真来变换。</p>
<p>与 <em><code>#cmakedefine VAR ...</code></em> 形式不同，在 <em><code>#cmakedefine01 VAR</code></em> 形式中，VAR 本身将扩展为 VAR 0 或 VAR 1 而不是被赋值 … 因此：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cmakedefine01 VAR</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 将被替换为</span></span><br><span class="line"><span class="comment">#define VAR 0</span></span><br><span class="line">或</span><br><span class="line"><span class="comment">#define VAR 1</span></span><br></pre></td></tr></table></figure>



<p><em><code>#cmakedefine01 VAR ...</code></em> 形式的输入行将扩展为 <em><code>#cmakedefine01 VAR ... 0</code></em> 或 *#<code>cmakedefine01 VAR ... 0</code>*，这可能会导致未定义的行为。 </p>
<p>3.10 版中的新功能：结束行（#undef 注释除外）可以在 # 字符和 cmakedefine 或 cmakedefine01 单词之间使用空格或制表符进行缩进。 此空白缩进将保留在输出行中：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  cmakedefine VAR</span></span><br><span class="line"><span class="comment">#  cmakedefine01 VAR</span></span><br><span class="line"></span><br><span class="line">若定义了 VAR, 则将被替换为：</span><br><span class="line"><span class="comment">#  define VAR</span></span><br><span class="line"><span class="comment">#  define VAR 1</span></span><br></pre></td></tr></table></figure>

<p>如果输入文件被修改，构建系统将重新运行 CMake 以重新配置文件并再次生成构建系统。生成的文件会被修改，并且只有在其内容发生更改时才会在后续 cmake 运行时更新其时间戳。</p>
<h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a><strong>参数</strong></h1><ul>
<li><strong>input</strong>：input 文件路径。相对路径是根据 CMAKE_CURRENT_SOURCE_DIR 进行处理。 路径必须是文件，不能是目录</li>
<li><strong>output</strong>：输出文件或路径。相对路径是根据 CMAKE_CURRENT_BINARY_DIR 进行处理</li>
<li><strong>NO_SOURCE_PERMISSIONS</strong>: V 3.19 新增。不保留  文件的权限。默认为 644(即: -rw-r–r–)</li>
<li><strong>USE_SOURCE_PERMISSIONS</strong>: V 3.20 新增。保留  文件的权限。当不指定三个权限相关参数时，默认执行改选项</li>
<li><strong>FILE_PERMISSIONS</strong> : V 3.20 新增。忽略  文件的权限，并设置为 permissions 指定的权限</li>
<li><strong>COPY</strong>: 仅拷贝  文件的内容到  文件，不进行变量替换</li>
<li><strong>ESCAPE_QUOTES</strong>: 使用反斜杠来进行转义</li>
<li><strong>@ONLY</strong>: 限制替换，仅替换 @VAR@ 变量，不替换 ${VAR} 变量</li>
<li>**<code>NEWLINE_STYLE &lt;style&gt;</code>**：指定  文件的新行格式，如：Unix 中使用 <code>\n</code>，windows 中使用 <code>\r\n</code></li>
</ul>
<p>注意: <strong><code>COPYONLY</code> 和 <code>NEWLINE_STYLE</code> 冲突，不能同时使用</strong>。</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h2><p>假设源码目录中包含 foo.h.in 文件：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cmakedefine FOO_ENABLE</span></span><br><span class="line"><span class="comment">#cmakedefine FOO_STRING &quot;@FOO_STRING@&quot;</span></span><br></pre></td></tr></table></figure>

<p>CMakeLists.txt 中使用 <code>configure_file</code> 来配置该头文件：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">option</span>(FOO_ENABLE <span class="string">&quot;Enable Foo&quot;</span> <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">if</span>(FOO_ENABLE)</span><br><span class="line">  <span class="keyword">set</span>(FOO_STRING <span class="string">&quot;foo&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">configure_file</span>(foo.h.in foo.h @ONLY)</span><br></pre></td></tr></table></figure>

<p>若 <code>FOO_ENABLE</code> 设置为 ON，则输出的 foo.h 内容为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* #undef FOO_ENABLE */</span></span><br><span class="line"><span class="comment">/* #undef FOO_STRING */</span></span><br></pre></td></tr></table></figure>



<h2 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKEDEFINE_VAR1 <span class="number">1</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKEDEFINE_VAR2 <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(DEFINE_VAR1 <span class="number">1</span>)</span><br><span class="line"><span class="keyword">set</span>(DEFINE_VAR2 <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">configure_file</span> (</span><br><span class="line">  <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/Config.h.in&quot;</span></span><br><span class="line">  <span class="string">&quot;$&#123;PROJECT_BINARY_DIR&#125;/Config.h&quot;</span></span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p>Config.h.in 内容为：             </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * cmakedefine 会根据变量的值是否为真（类似 if）</span></span><br><span class="line"><span class="comment"> * 来变换为 #define VAR ... 或  #undef VAR </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#cmakedefine CMAKEDEFINE_VAR1 @CMAKEDEFINE_VAR1@</span></span><br><span class="line"><span class="meta">#cmakedefine CMAKEDEFINE_VAR2 @CMAKEDEFINE_VAR2@</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFINE_VAR1 @DEFINE_VAR1@</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFINE_VAR2 $&#123;DEFINE_VAR2&#125;</span></span><br></pre></td></tr></table></figure>

<p>输出 Config.h 内容为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CMAKEDEFINE_VAR1 1</span></span><br><span class="line"><span class="comment">/* #undef CMAKEDEFINE_VAR2 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFINE_VAR1 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFINE_VAR2 0</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编译工具</category>
        <category>CMake</category>
        <category>脚本指令</category>
      </categories>
      <tags>
        <tag>编译工具</tag>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>configure_file</title>
    <url>/2024/09/15/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/CMake/%E8%84%9A%E6%9C%AC%E6%8C%87%E4%BB%A4/file/</url>
    <content><![CDATA[<p>文件操作命令。专门用于需要访问文件系统的文件和路径操作。 </p>
<p>对于其他仅处理语法方面(syntactic aspects)的路径操作，请查看 <code>cmake_path()</code> 命令。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reading  </span></span><br><span class="line"><span class="keyword">file</span>(READ &lt;filename&gt; &lt;out-var&gt; [...])  <span class="comment"># 从&lt;filename&gt;中读取内容</span></span><br><span class="line"><span class="keyword">file</span>(STRINGS &lt;filename&gt; &lt;out-var&gt; [...])  <span class="comment"># 解析&lt;filename&gt;中的ASCII字符串列表</span></span><br><span class="line"><span class="keyword">file</span>(&lt;HASH&gt; &lt;filename&gt; &lt;out-var&gt;)  <span class="comment"># 计算&lt;filename&gt;内容的加密hash</span></span><br><span class="line"><span class="keyword">file</span>(TIMESTAMP &lt;filename&gt; &lt;out-var&gt; [...])  <span class="comment"># 计算&lt;filename&gt;修改时间的字符串表示时间</span></span><br><span class="line"><span class="keyword">file</span>(GET_RUNTIME_DEPENDENCIES [...]) <span class="comment"># 递归地获取给定文件所依赖的库列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing  </span></span><br><span class="line"><span class="keyword">file</span>(&#123;WRITE | APPEND&#125; &lt;filename&gt; &lt;content&gt;...)  <span class="comment"># :将&lt;content&gt;写入&lt;filename&gt;文件</span></span><br><span class="line"><span class="keyword">file</span>(&#123;TOUCH | TOUCH_NOCREATE&#125; [&lt;<span class="keyword">file</span>&gt;...])  <span class="comment"># 如果&lt;file&gt;不存在，则创建一个不包含任何内容的&lt;file&gt;</span></span><br><span class="line"><span class="keyword">file</span>(GENERATE OUTPUT &lt;output-<span class="keyword">file</span>&gt; [...])  <span class="comment"># 为当前CMake Generator支持的每个构建配置(build configuration)生成一个输出文件</span></span><br><span class="line"><span class="keyword">file</span>(CONFIGURE OUTPUT &lt;output-<span class="keyword">file</span>&gt; CONTENT &lt;content&gt; [...]) <span class="comment"># 使用CONTENT给出的输入生成一个输出文件，并替换其中包含的@VAR@或$&#123;VAR&#125;变量值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Filesystem  </span></span><br><span class="line"><span class="keyword">file</span>(&#123;GLOB | GLOB_RECURSE&#125; &lt;out-var&gt; [...] [&lt;globbing-expr&gt;...])  <span class="comment"># 生成与&lt;globbing-expr&gt;匹配的文件列表</span></span><br><span class="line"><span class="keyword">file</span>(<span class="keyword">MAKE_DIRECTORY</span> [&lt;dir&gt;...])  <span class="comment"># 根据需要创建给定的目录及其父目录</span></span><br><span class="line"><span class="keyword">file</span>(&#123;<span class="keyword">REMOVE</span> | REMOVE_RECURSE &#125; [&lt;files&gt;...])  <span class="comment"># 删除指定文件</span></span><br><span class="line"><span class="keyword">file</span>(RENAME &lt;oldname&gt; &lt;newname&gt; [...])  <span class="comment"># 文件/目录重命名</span></span><br><span class="line"><span class="keyword">file</span>(COPY_FILE &lt;oldname&gt; &lt;newname&gt; [...])  <span class="comment"># 文件拷贝.不支持目录拷贝.符号链接被忽略</span></span><br><span class="line"><span class="keyword">file</span>(&#123;COPY | <span class="keyword">INSTALL</span>&#125; &lt;<span class="keyword">file</span>&gt;... DESTINATION &lt;dir&gt; [...])  <span class="comment"># 将文件、目录和符号链接拷贝到目标文件夹</span></span><br><span class="line"><span class="keyword">file</span>(SIZE &lt;filename&gt; &lt;out-var&gt;)  <span class="comment"># 获取文件大小</span></span><br><span class="line"><span class="keyword">file</span>(READ_SYMLINK &lt;linkname&gt; &lt;out-var&gt;)  <span class="comment"># 查询符号链接&lt;linkname&gt;并将其指向的路径存储在&lt;out-var&gt;中</span></span><br><span class="line"><span class="keyword">file</span>(CREATE_LINK &lt;original&gt; &lt;linkname&gt; [...])  <span class="comment"># 创建指向&lt;original&gt;的链接&lt;linkname&gt;</span></span><br><span class="line"><span class="keyword">file</span>(CHMOD &lt;files&gt;... &lt;directories&gt;... PERMISSIONS &lt;permissions&gt;... [...])  <span class="comment"># 为&lt;files&gt;和&lt;directories&gt;指定权限</span></span><br><span class="line"><span class="keyword">file</span>(CHMOD_RECURSE &lt;files&gt;... &lt;directories&gt;... PERMISSIONS &lt;permissions&gt;... [...]) <span class="comment"># 递归修改权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path Conversion  </span></span><br><span class="line"><span class="keyword">file</span>(REAL_PATH &lt;path&gt; &lt;out-var&gt; [BASE_DIRECTORY &lt;dir&gt;] [EXPAND_TILDE])  <span class="comment"># 获取现有文件或目录的绝对路径,并解析符号链接</span></span><br><span class="line"><span class="keyword">file</span>(RELATIVE_PATH &lt;out-var&gt; &lt;directory&gt; &lt;<span class="keyword">file</span>&gt;)  <span class="comment"># 获取从&lt;directory&gt;到&lt;file&gt;的相对路径</span></span><br><span class="line"><span class="keyword">file</span>(&#123;TO_CMAKE_PATH | TO_NATIVE_PATH&#125; &lt;path&gt; &lt;out-var&gt;) <span class="comment"># 将native &lt;path&gt;转换为正斜杠(/)的cmake-style路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Transfer  </span></span><br><span class="line"><span class="keyword">file</span>(DOWNLOAD &lt;url&gt; [&lt;<span class="keyword">file</span>&gt;] [...])  <span class="comment"># 下载指定的&lt;url&gt;到本地的&lt;file&gt;</span></span><br><span class="line"><span class="keyword">file</span>(UPLOAD &lt;<span class="keyword">file</span>&gt; &lt;url&gt; [...]) <span class="comment"># 上传本地的&lt;file&gt;到指定的&lt;url&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Locking. 如果不存在DIRECTORY选项，则锁定由&lt;path&gt;指定的文件，否则锁定&lt;path&gt;/cmake.lock文件  </span></span><br><span class="line"><span class="keyword">file</span>(LOCK &lt;path&gt; [...])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Archiving  </span></span><br><span class="line"><span class="keyword">file</span>(ARCHIVE_CREATE OUTPUT &lt;archive&gt; PATHS &lt;paths&gt;... [...])  <span class="comment"># 用&lt;paths&gt;中列出的文件和目录创建指定的&lt;archive&gt;文件</span></span><br><span class="line"><span class="keyword">file</span>(ARCHIVE_EXTRACT INPUT &lt;archive&gt; [...]) <span class="comment"># 提取或列出指定的&lt;archive&gt;的内容</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>编译工具</category>
        <category>CMake</category>
        <category>脚本指令</category>
      </categories>
      <tags>
        <tag>编译工具</tag>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>find</title>
    <url>/2024/09/16/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/CMake/%E8%84%9A%E6%9C%AC%E6%8C%87%E4%BB%A4/find/</url>
    <content><![CDATA[<h1 id="FIND-PATH"><a href="#FIND-PATH" class="headerlink" title="FIND_PATH"></a>FIND_PATH</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_path</span> (&lt;VAR&gt; name1 [path1 path2 ...])</span><br><span class="line"><span class="keyword">find_path</span> (</span><br><span class="line">          &lt;VAR&gt;</span><br><span class="line">          name | NAMES name1 [name2 ...]</span><br><span class="line">          [HINTS path1 [path2 ... ENV var]]</span><br><span class="line">          [PATHS path1 [path2 ... ENV var]]</span><br><span class="line">          [PATH_SUFFIXES suffix1 [suffix2 ...]]</span><br><span class="line">          [DOC <span class="string">&quot;cache documentation string&quot;</span>]</span><br><span class="line">          [NO_DEFAULT_PATH]</span><br><span class="line">          [NO_PACKAGE_ROOT_PATH]</span><br><span class="line">          [NO_CMAKE_PATH]</span><br><span class="line">          [NO_CMAKE_ENVIRONMENT_PATH]</span><br><span class="line">          [NO_SYSTEM_ENVIRONMENT_PATH]</span><br><span class="line">          [NO_CMAKE_SYSTEM_PATH]</span><br><span class="line">          [CMAKE_FIND_ROOT_PATH_BOTH |</span><br><span class="line">           ONLY_CMAKE_FIND_ROOT_PATH |</span><br><span class="line">           NO_CMAKE_FIND_ROOT_PATH]</span><br><span class="line">         )</span><br></pre></td></tr></table></figure>

<p><code>&lt;var&gt;</code> 变量用于存储搜索结果。若未找到，则结果为 <code>&lt;var&gt;-NOTFOUND</code></p>
<h1 id="FIND-PACKAGE"><a href="#FIND-PACKAGE" class="headerlink" title="FIND_PACKAGE"></a>FIND_PACKAGE</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>( &lt;package&gt; [version] [EXACT] [QUIET] \</span><br><span class="line">    [MODULE][[REQUIRED|COMPONENTS] [components...]]    \</span><br><span class="line">    [OPTIONAL_COMPONENTS components...][NO_POLICY_SCOPE])</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>该函数会设置 <code>&lt;package&gt;_FOUND</code> 变量来指明是否找到该 。若找到了指定 package，则会设置该 package 的相关变量，通过这些变量及相应的 <a href="https://cmake.org/cmake/help/v3.0/manual/cmake-buildsystem.7.html#imported-targets">Imported Targets</a> 可获得该 package 的相关信息。</p>
<p>参数说明：</p>
<ul>
<li><strong>QUIET</strong> 选项将会关闭包未找到时的警告信息；</li>
<li><strong>REQUIRED</strong> 选项表示：如果包未找到，则 cmake 的过程会终止，并输出警告信息；</li>
<li><strong>EXACT</strong> 选项表示版本号必须精确匹配；</li>
<li><strong>COMPONENTS</strong> 选项(或未指定 REQUIRED 时)表示可以列出一些与包相关的部件清单；</li>
<li><strong>version</strong> 参数为版本信息，格式为: <code>major[.minor[.patch[.tweak]]]</code></li>
</ul>
<h2 id="module-与-config-模式"><a href="#module-与-config-模式" class="headerlink" title="module 与 config 模式"></a>module 与 config 模式</h2><p>find_package 在搜索 package 时，有两种模式：”<strong>Module</strong>“ 模式和 “<strong>Config</strong>“ 模式</p>
<img src="/2024/09/16/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/CMake/%E8%84%9A%E6%9C%AC%E6%8C%87%E4%BB%A4/find/image-20240916112611108.png" class="" title="image-20240916112611108">

<ul>
<li><p><strong>Module 模式</strong>：该模式下，cmake 搜索所有名为 <strong>Find.cmake</strong> 的文件（例如：FindProtobuf.cmake）。这些文件的路径由 <strong>CMAKE_MODULE_PATH</strong> 变量指定。若找到该文件，则读取并处理。该模式负责查找 package、检查版本并生成必要的信息。许多模块都只提供了有限的信息，而没有版本化相关的信息。<strong>若未找到任何模块，且未明确指定 MOUDLE 选项，则进入 Config 模式</strong></p>
</li>
<li><p><strong>Config 模式</strong>：完整的 Config 模式的命令格式为：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(&lt;package&gt; [version] [EXACT] [QUIET]</span><br><span class="line">       [REQUIRED] [[COMPONENTS] [components...]]</span><br><span class="line">       [CONFIG|NO_MODULE]</span><br><span class="line">       [NO_POLICY_SCOPE]</span><br><span class="line">       [NAMES name1 [name2 ...]]</span><br><span class="line">       [CONFIGS config1 [config2 ...]]</span><br><span class="line">       [HINTS path1 [path2 ... ]]</span><br><span class="line">       [PATHS path1 [path2 ... ]]</span><br><span class="line">       [PATH_SUFFIXES suffix1 [suffix2 ...]]</span><br><span class="line">       [NO_DEFAULT_PATH]</span><br><span class="line">       [NO_CMAKE_ENVIRONMENT_PATH]</span><br><span class="line">       [NO_CMAKE_PATH]</span><br><span class="line">       [NO_SYSTEM_ENVIRONMENT_PATH]</span><br><span class="line">       [NO_CMAKE_PACKAGE_REGISTRY]</span><br><span class="line">       [NO_CMAKE_BUILDS_PATH] <span class="comment"># Deprecated; does nothing.</span></span><br><span class="line">       [NO_CMAKE_SYSTEM_PATH]</span><br><span class="line">       [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY]</span><br><span class="line">       [CMAKE_FIND_ROOT_PATH_BOTH |</span><br><span class="line">        ONLY_CMAKE_FIND_ROOT_PATH |</span><br><span class="line">        NO_CMAKE_FIND_ROOT_PATH])</span><br></pre></td></tr></table></figure>

<p><strong>CONFIG</strong> 选项可用于明确指定跳过 Module 模式，直接进入 Config 模式，<strong>NO_MODULE</strong> 选项与 CONFIG 选项类似。Config 模式尝试查找一个由待查找的包提供的配置文件的位置。包含该文件的路径会被存储在名为 <strong>_DIR</strong> 的缓存变量中。默认情况下，该命令搜索名为  的包。若指定了 NAMES 选项，则其后的 names 参数会替代 。该指令为每个指定的 name 参数搜索名为 <strong>Config.cmake</strong> 或 <strong>-config.cmake</strong> 的文件。<strong>可通过 CONFIGS 选项改变可能的配置文件的名字</strong>。如果找到了配置文件，它将会被 CMake 读取并处理。由于该文件是由包自身提供的，它已经知道包中内容的位置。配置文件的完整路径存储在 cmake 的 <strong>_CONFIG</strong> 变量中。所有 CMake 要处理的配置文件将会搜索对应包的安装信息，并且将该安装匹配的 appropriate version 存储在 cmake 变量 _CONSIDERED_CONFIGS 中，与之相关的版本号（associated version）将被存储在 _CONSIDERED_VERSIONS 中。</p>
<p>若未找到 package 的配置文件，cmake 会生成一个错误描述文件（除非指定了 QUIET 选项）。若设置了 <strong>_DIR</strong> 变量，但是该变量所指的路径下并没有包含配置文件信息，则会直接忽略该变量，并重新开始查找。</p>
<p>CMake3.12 新增了 <strong>_ROOT</strong> 变量，可通过设置 CMP0074 Policy 来关闭。若定义了 <strong>_DIR</strong> 变量，那么 <strong>_ROOT</strong> 不起作用。</p>
</li>
</ul>
<p>版本相关变量</p>
<table>
<thead>
<tr>
<th>PACKAGE_FIND_NAME</th>
<th>名字。</th>
</tr>
</thead>
<tbody><tr>
<td>PACKAGE_FIND_VERSION</td>
<td>请求的完整版本字符串</td>
</tr>
<tr>
<td>PACKAGE_FIND_VERSION_MAJOR</td>
<td>如果被请求了，那么它是major版本号，否则是0。</td>
</tr>
<tr>
<td>PACKAGE_FIND_VERSION_MINOR</td>
<td>如果被请求了，那么它是minor版本号，否则是0。</td>
</tr>
<tr>
<td>PACKAGE_FIND_VERSION_PATCH</td>
<td>如果被请求了，那么它是patch版本号，否则是0。</td>
</tr>
<tr>
<td>PACKAGE_FIND_VERSION_TWEAK</td>
<td>如果被请求了，那么它是tweak版本号，否则是0。</td>
</tr>
<tr>
<td>PACKAGE_FIND_VERSION_COUNT</td>
<td>版本号包含几部分，0到4。</td>
</tr>
</tbody></table>
<p>版本匹配规则</p>
<table>
<thead>
<tr>
<th>PACKAGE_VERSION</th>
<th>提供的完整的版本字符串。</th>
</tr>
</thead>
<tbody><tr>
<td>PACKAGE_VERSION_EXACT</td>
<td>如果版本号精确匹配，返回true。</td>
</tr>
<tr>
<td>PACKAGE_VERSION_COMPATIBLE</td>
<td>如果版本号相兼容，返回true。</td>
</tr>
<tr>
<td>PACKAGE_VERSION_UNSUITABLE</td>
<td>如果不适合任何版本，返回true。</td>
</tr>
</tbody></table>
<p>find_package 指令会使用上面的这些变量来检查版本是否可接受。在find_package 返回之后，上面这些变量就不再可用。若版本可接受，则会设置下面的变量：</p>
<table>
<thead>
<tr>
<th>_VERSION</th>
<th>提供的完整的版本字符串</th>
</tr>
</thead>
<tbody><tr>
<td>_VERSION_MAJOR</td>
<td>major版本号，否则是0</td>
</tr>
<tr>
<td>_VERSION_MINOR</td>
<td>minor版本号，否则是0</td>
</tr>
<tr>
<td>_VERSION_PATCH</td>
<td>patch版本号，否则是0</td>
</tr>
<tr>
<td>_VERSION_TWEAK</td>
<td>tweak版本号，否则是0</td>
</tr>
<tr>
<td>_VERSION_COUNT</td>
<td>版本号包含几部分，0到4</td>
</tr>
</tbody></table>
<p>当有多个版本满足要求时，选择使用哪个包是不确定的。此时可以使用 <strong>CMAKE_FIND_PACKAGE_SORT_ORDER</strong> 和 <strong>CMAKE_FIND_PACKAGE_SORT_DIRECTION</strong> 指令来设置选择顺序。例如，如下指令可以设置优先选择最高版本（需写在 find_package 之前，且 cmake 3 之前的版本未必支持该指令）：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span>(CMAKE_FIND_PACKAGE_SORT_ORDER NATURAL)</span><br><span class="line"><span class="keyword">SET</span>(CMAKE_FIND_PACKAGE_SORT_DIRECTION DEC)</span><br></pre></td></tr></table></figure>

<p>Config 模式提供了精细的接口和搜索过程。提供的大部分接口都是为了完整性，并由 Module 模式加载的 find-modules 内部使用。大多数用户代码应该只是调用：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(&lt;package&gt; [major[.minor]] [EXACT] [REQUIRED|QUIET])</span><br></pre></td></tr></table></figure>

<p>（建议提供 CMake 软件包配置文件的软件包维护者命名和安装它们，以便下面列出的过程可以找到它们而无需使用其他选项）</p>
<h2 id="package-前缀及查找路径"><a href="#package-前缀及查找路径" class="headerlink" title="package 前缀及查找路径"></a>package 前缀及查找路径</h2><p>CMake 为 package 构造了一组可能的安装前缀。在每个前缀下，多个目录会被搜索，用来查找配置文件。下述的表格展示了待搜索的路径。每个条目都是专门为Windows(W)，UNIX(U)或者Apple(A)约定的安装树指定的：</p>
<table>
<thead>
<tr>
<th>路径</th>
<th>OS</th>
</tr>
</thead>
<tbody><tr>
<td><prefix>&#x2F;</td>
<td>(W)</td>
</tr>
<tr>
<td><prefix>&#x2F;(cmake|CMake)&#x2F;</td>
<td>(W)</td>
</tr>
<tr>
<td><prefix>&#x2F;<name>*&#x2F;</td>
<td>(W)</td>
</tr>
<tr>
<td><strong>&lt;<strong><strong>prefix</strong><strong>&gt;&#x2F;&lt;****name****&gt;*&#x2F;</strong></strong>(cmake**</strong>|<strong><strong>CMake)</strong></strong>&#x2F;**</td>
<td>(W)</td>
</tr>
<tr>
<td><strong>&lt;<strong><strong>prefix</strong><strong>&gt;&#x2F;</strong></strong>(lib**</strong>&#x2F;&lt;***<em>arch****&gt;|<strong><strong>lib</strong></strong>|<strong><strong>share)</strong></strong>&#x2F;<strong><strong>cmake</strong></strong>&#x2F;&lt;****name****&gt;*&#x2F;</em>*</td>
<td>(U)</td>
</tr>
<tr>
<td><strong>&lt;<strong><strong>prefix</strong><strong>&gt;&#x2F;</strong></strong>(lib**</strong>&#x2F;&lt;***<em>arch****&gt;|<strong><strong>lib</strong></strong>|<strong><strong>share)</strong></strong>&#x2F;&lt;****name****&gt;*&#x2F;</em>*</td>
<td>(U)</td>
</tr>
<tr>
<td><strong>&lt;<strong><strong>prefix</strong><strong>&gt;&#x2F;</strong></strong>(lib**</strong>&#x2F;&lt;<strong><strong>arch</strong>**&gt;|<strong><strong>lib</strong></strong>|<strong><strong>share)</strong></strong>&#x2F;&lt;**<strong>name****&gt;*&#x2F;</strong></strong>(cmake****|<strong><strong>CMake)</strong></strong>&#x2F;**</td>
<td>(U)</td>
</tr>
<tr>
<td><prefix>&#x2F;<name><em>&#x2F;(lib&#x2F;<arch>|lib|share)&#x2F;cmake&#x2F;<name></em>&#x2F;</td>
<td>(W&#x2F;U)</td>
</tr>
<tr>
<td><prefix>&#x2F;<name><em>&#x2F;(lib&#x2F;<arch>|lib|share)&#x2F;<name></em>&#x2F;</td>
<td>(W&#x2F;U)</td>
</tr>
<tr>
<td><prefix>&#x2F;<name><em>&#x2F;(lib&#x2F;<arch>|lib|share)&#x2F;<name></em>&#x2F;(cmake|CMake)&#x2F;</td>
<td>(W&#x2F;U)</td>
</tr>
<tr>
<td>&#x2F;.framework&#x2F;Resources&#x2F;</td>
<td>(A)</td>
</tr>
<tr>
<td>&#x2F;.framework&#x2F;Resources&#x2F;CMake&#x2F;</td>
<td>(A)</td>
</tr>
<tr>
<td>&#x2F;.framework&#x2F;Versions&#x2F;*&#x2F;Resources&#x2F;</td>
<td>(A)</td>
</tr>
<tr>
<td>&#x2F;.framework&#x2F;Versions&#x2F;*&#x2F;Resources&#x2F;CMake&#x2F;</td>
<td>(A)</td>
</tr>
<tr>
<td>&#x2F;.app&#x2F;Contents&#x2F;Resources&#x2F;</td>
<td>(A)</td>
</tr>
<tr>
<td>&#x2F;.app&#x2F;Contents&#x2F;Resources&#x2F;CMake&#x2F;</td>
<td>(A)</td>
</tr>
</tbody></table>
<p>安装前缀  通过以下步骤构建，若指定了 <strong>NO_DEFAULT_PATH</strong> 选项，所有 NO_* 选项都会被激活：</p>
<p>①、搜索 cmake-specific 缓存变量指定的路径。这些变量是为了在命令行中用 -DVAR&#x3D;value 选项而设计的。通过指定 NO_CMAKE_PATH 选项可以跳过该搜索路径。搜索路径还包括：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">CMAKE_PREFIX_PATH</span><br><span class="line">CMAKE_FRAMEWORK_PATH</span><br><span class="line">CMAKE_APPBUNDLE_PATH</span><br></pre></td></tr></table></figure>

<p>②、搜索 cmake-specific 环境变量指定的路径。这些变量是为了用户在 shell 中进行配置而设计的。通过指定NO_CMAKE_ENVIRONMENT_PATH选项可以跳过该路径。搜索的路径包括：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">&lt;package&gt;_DIR</span><br><span class="line">CMAKE_PREFIX_PATH</span><br><span class="line">CMAKE_FRAMEWORK_PATH</span><br><span class="line">CMAKE_APPBUNDLE_PATH</span><br></pre></td></tr></table></figure>

<p>③、搜索 <strong>HINTS</strong> 选项指定的路径。</p>
<p>④、搜索**标准的系统环境变量(eg.PATH)**。可通过设置 NO_SYSTEM_ENVIRONMENT_PATH 选项跳过该路径。PATH 中以 “&#x2F;bin” 或 “&#x2F;sbin” 结尾的路径会被自动转换为它们的父路径。例如：PATH 中包含 &#x2F;usr&#x2F;bin，则cmake会自动到 &#x2F;usr&#x2F;(lib&#x2F;|lib|share)&#x2F;cmake&#x2F;&#x2F; 目录下进行搜索</p>
<p>⑤、搜索在 CMake GUI 中最新配置过的工程的构建树。可通过 NO_CMAKE_BUILDS_PATH 跳过该路径</p>
<p>⑥、搜索存储在 CMake <a href="https://cmake.org/cmake/help/v3.0/manual/cmake-packages.7.html#user-package-registry">User Package Registry</a> 中的路径。可通过 NO_CMAKE_PACKAGE_REGISTRY 跳过该路径</p>
<p>⑦、搜索当前系统中定义的 cmake 变量指定的路径。可通过 NO_CMAKE_SYSTEM_PATH 跳过该路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMAKE_SYSTEM_PREFIX_PATH</span><br><span class="line">CMAKE_SYSTEM_FRAMEWORK_PATH</span><br><span class="line">CMAKE_SYSTEM_APPBUNDLE_PATH</span><br></pre></td></tr></table></figure>

<p>⑧、搜索存储在 CMake System Package Registry 中的路径。可通过 NO_CMAKE_SYSTEM_PACKAGE_REGISTRY 跳过该路径</p>
<p>⑨、搜索 PATHS 选项指定的路径</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(PCL REQUIRED</span><br><span class="line">             PATHS /home/xxx/<span class="number">3</span>rdlibs/pcl/pcl-<span class="number">1.8</span> <span class="comment"># look here</span></span><br><span class="line">             NO_DEFAULT_PATH)</span><br><span class="line">             </span><br><span class="line"><span class="comment"># 指定路径，同时通过 EXACT 来匹配特定版本      </span></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV <span class="number">3.1</span> EXACT REQUIRED PATHS /usr/local/opencv3.<span class="number">1</span>)             </span><br></pre></td></tr></table></figure>



<p>总结：根据上面描述，主要包括以下几个重要查找目录：</p>
<ul>
<li><p><code>&lt;package&gt;_DIR</code></p>
</li>
<li><p><code>CMAKE_PREFIX_PATH</code></p>
</li>
<li><p>&#96;&#96;CMAKE_FRAMEWORK_PATH&#96;</p>
</li>
<li><p><code>CMAKE_APPBUNDLE_PATH PATH</code></p>
</li>
</ul>
<p>优先级最高的是 <code>&lt;package&gt;_DIR</code> 路径。该路径可在调用 cmake 时传入。</p>
<p>例如：假设在 &#x2F;usr&#x2F;local&#x2F;share 目录下编译了 OpenCV3.3.4:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">OpenCV_DIR=/usr/local/share/opencv-3.3.4/build/ cmake</span></span><br></pre></td></tr></table></figure>

<p>也可在 CMakeLists.txt 中通过 <strong><code>set(OpenCV_DIR &quot;/usr/local/share/opencv-3.3.4/build&quot;)</code></strong> 语句指定 <strong>_DIR 可解决系统中包含不同版本的包的问题</strong> </p>
<p>由于 &#x2F;usr&#x2F;bin 通常都包含在环境变量 PATH 之中，因此 cmake 会自动到 &#x2F;usr&#x2F;(lib&#x2F;|lib|share)&#x2F;cmake&#x2F;&#x2F; 目录下查找模块，因而大部分通过 apt-get 安装的库都可以被找到</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># VTK_DIR是一个缓存变量，它在CMake调用中保持其状态。</span></span><br><span class="line"><span class="keyword">SET</span>(VTK_DIR <span class="string">&quot;/usr/include/vtk-5.8&quot;</span> CACHE PATH <span class="string">&quot;VTK directory override&quot;</span> FORCE)  </span><br></pre></td></tr></table></figure>



<p>module 模式下，首先会在模块路径中寻找 Find.cmake，这是查找库的一个典型方式。具体查找路径依次为CMake：</p>
<ul>
<li>变量 ${CMAKE_MODULE_PATH} 中的所有目录。</li>
<li>如果没有，然后再查看它自己的模块目录&#x2F;share&#x2F;cmake-x.y&#x2F;Modules&#x2F;（可通过 CMAKE_ROOT 变量查看. 例如：ubuntu上为 &#x2F;usr&#x2F;share&#x2F;cmake-3.5&#x2F;Modules&#x2F;）。</li>
</ul>
<p>(可通过 <strong>SET(CMAKE_MODULE_PATH dir)</strong> 设置查找路径)</p>
<p>示例：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span> (&lt;package&gt; PATHS paths... NO_DEFAULT_PATH)</span><br><span class="line"><span class="comment"># eg. </span></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV <span class="number">3.1</span> EXACT REQUIRED PATHS /usr/local/opencv3.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(OpenCV_DIR /usr/local/opencv-<span class="number">4.5</span>.<span class="number">5</span>/lib/cmake/opencv4)</span><br><span class="line"><span class="keyword">find_package</span>( OpenCV <span class="number">4.5</span>.<span class="number">5</span> REQUIRED )</span><br><span class="line"><span class="comment">#set(OpenCV_DIR /opt/ros/kinetic/share/OpenCV-3.3.1-dev)</span></span><br><span class="line"><span class="comment">#find_package( OpenCV 3.3.1 REQUIRED )</span></span><br></pre></td></tr></table></figure>



<p>总结：</p>
<ul>
<li><p>判断 find_package() 执行的是 module 模式还是 config 模式</p>
<ul>
<li><p>要看 CMAKE_MODULE_PATH 或 cmake 安装路径下是否有 Find.cmake 脚本存在，并且这个脚本能否正确找到包；如果不存在，或这个脚本执行失败，则进入 config 模式</p>
</li>
<li><p>通过 CONFIG、NO_MODULE、CONFIG 模式特有字段设定 config 模式</p>
</li>
</ul>
</li>
<li><p><strong>_DIR</strong> 是 config 模式特有的缓存变量</p>
<ul>
<li><p>可在 find_package() 前设定 _DIR，指向包含Config.cmake 或 -config.cmake 的目录</p>
</li>
<li><p>module 模式下在 find_package() 前设定 _DIR，并不能用来帮助 find_package() 找到包；并且在 find_package() 后，也没有 _DIR 变量自动存在</p>
</li>
</ul>
</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="protobuf-版本"><a href="#protobuf-版本" class="headerlink" title="protobuf 版本"></a><strong>protobuf 版本</strong></h3><p>假设系统中有两个版本的 protobuf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. apt 安装</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install libprotobuf-dev protobuf-compiler</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 源码编译</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/home/test/thirdlibs/protobuf-3.14.0</span></span><br></pre></td></tr></table></figure>



<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(Protobuf_PREFIX_PATH</span><br><span class="line">    <span class="string">&quot;/home/zz/soft/protobuf-3.8.0/include&quot;</span></span><br><span class="line">    <span class="string">&quot;/home/zz/soft/protobuf-3.8.0/lib&quot;</span></span><br><span class="line">    <span class="string">&quot;/home/zz/soft/protobuf-3.8.0/bin&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">list</span>(APPEND CMAKE_PREFIX_PATH <span class="string">&quot;$&#123;Protobuf_PREFIX_PATH&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">find_package</span>(Protobuf REQUIRED)</span><br></pre></td></tr></table></figure>



<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 错误示例</span></span><br><span class="line"><span class="keyword">set</span>(Protobuf_DIR <span class="string">&quot;/home/zz/soft/protobuf-3.8.0/lib/cmake/protobuf&quot;</span>)</span><br><span class="line"><span class="keyword">find_package</span>(Protobuf REQUIRED)</span><br></pre></td></tr></table></figure>



<p>需注意 find_package 工作在 module 还是 config 模式。当 cmake 安装路径下提供了 FindProtobuf.cmake 时，工作在 module 模式；而不设定 CMAKE_PREFIX_PATH 等预定义变量，仅设置 Protobuf_DIR 的情况下，并不能进入 config 模式，此时 Protobuf_DIR 并未起作用。</p>
<h1 id="FIND-LIBRARY"><a href="#FIND-LIBRARY" class="headerlink" title="FIND_LIBRARY"></a>FIND_LIBRARY</h1>]]></content>
      <categories>
        <category>编译工具</category>
        <category>CMake</category>
        <category>脚本指令</category>
      </categories>
      <tags>
        <tag>编译工具</tag>
        <tag>cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>list</title>
    <url>/2024/09/16/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/CMake/%E8%84%9A%E6%9C%AC%E6%8C%87%E4%BB%A4/list/</url>
    <content><![CDATA[<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">list</span>(LENGTH &lt;<span class="keyword">list</span>&gt; &lt;output variable&gt;)</span><br><span class="line"><span class="keyword">list</span>(GET &lt;<span class="keyword">list</span>&gt; &lt;element index&gt; [&lt;element index&gt; ...]</span><br><span class="line">     &lt;output variable&gt;)</span><br><span class="line"><span class="keyword">list</span>(APPEND &lt;<span class="keyword">list</span>&gt; [&lt;element&gt; ...])</span><br><span class="line"><span class="keyword">list</span>(FIND &lt;<span class="keyword">list</span>&gt; &lt;value&gt; &lt;output variable&gt;)</span><br><span class="line"><span class="keyword">list</span>(INSERT &lt;<span class="keyword">list</span>&gt; &lt;element_index&gt; &lt;element&gt; [&lt;element&gt; ...])</span><br><span class="line"><span class="keyword">list</span>(REMOVE_ITEM &lt;<span class="keyword">list</span>&gt; &lt;value&gt; [&lt;value&gt; ...])</span><br><span class="line"><span class="keyword">list</span>(REMOVE_AT &lt;<span class="keyword">list</span>&gt; &lt;index&gt; [&lt;index&gt; ...])</span><br><span class="line"><span class="keyword">list</span>(REMOVE_DUPLICATES &lt;<span class="keyword">list</span>&gt;)</span><br><span class="line"><span class="keyword">list</span>(REVERSE &lt;<span class="keyword">list</span>&gt;)</span><br><span class="line"><span class="keyword">list</span>(SORT &lt;<span class="keyword">list</span>&gt;)</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>LENGTH</th>
<th>返回list的长度</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>返回list中index的element到value中</td>
</tr>
<tr>
<td>APPEND</td>
<td>添加新element到list中</td>
</tr>
<tr>
<td>FIND</td>
<td>返回list中element的index,未找到返回-1</td>
</tr>
<tr>
<td>INSERT</td>
<td>将新element插入到list中index的位置</td>
</tr>
<tr>
<td>REMOVE_ITEM</td>
<td>从list中删除某个element</td>
</tr>
<tr>
<td>REMOVE_AT</td>
<td>从list中删除指定index的element</td>
</tr>
<tr>
<td>REMOVE_DUPLICATES</td>
<td>从list中删除重复的element</td>
</tr>
<tr>
<td>REVERSE</td>
<td>将list的内容反转</td>
</tr>
<tr>
<td>SORT</td>
<td>将list按字母顺序排序</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>编译工具</category>
        <category>CMake</category>
        <category>脚本指令</category>
      </categories>
      <tags>
        <tag>编译工具</tag>
        <tag>cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>target</title>
    <url>/2024/09/16/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/CMake/%E8%84%9A%E6%9C%AC%E6%8C%87%E4%BB%A4/target/</url>
    <content><![CDATA[<h1 id="target-include-directories"><a href="#target-include-directories" class="headerlink" title="target_include_directories"></a>target_include_directories</h1><p>指定编译参数给定的 target 时需要包含的目录。该 target 必须经过 <code>add_executable</code> 或 <code>add_library</code> 命令编译，不能是 <code>IMPORTED target</code>。</p>
<h2 id="与-include-dirctories-区别"><a href="#与-include-dirctories-区别" class="headerlink" title="与 include_dirctories 区别"></a>与 include_dirctories 区别</h2><p><strong><code>include_directories</code></strong> 影响目录范围。该 CMakeLists.txt 中的所有 targets，以及在其调用点之后添加的所有子目录中的目标，均会将 <code>include_directories</code> 指定的目录包含到其路径中</p>
<p><strong><code>target_include_directories(target x/y)</code></strong> 则具有目标范围，将目录 x&#x2F;y 添加到目标 target 的包含路径。</p>
<p>如果所有目标使用相关的包含目录，则需要用 <code>include_directories</code>，如果路径特定于某个目标，或想更好地控制路径的可见性，则需要 <code>target_include_directories</code>。</p>
<h1 id="target-sources"><a href="#target-sources" class="headerlink" title="target_sources"></a>target_sources</h1><p>指定编译给定 target 时用到的源文件。其中 target 必须由 <code>add_executable</code> 或 <code>add_library</code> 之类的命令创建，不能为 <code>ALIASA</code> 目标。</p>
<h2 id="ADD-CUSTOM-TARGET"><a href="#ADD-CUSTOM-TARGET" class="headerlink" title="ADD_CUSTOM_TARGET"></a>ADD_CUSTOM_TARGET</h2><p>增加一个没有输出的目标，使得它总是被构建</p>
<h2 id="ADD-CUSTOM-COMMAND"><a href="#ADD-CUSTOM-COMMAND" class="headerlink" title="ADD_CUSTOM_COMMAND"></a>ADD_CUSTOM_COMMAND</h2><p>向生成的构建系统添加自定义构建规则。</p>
<p><code>ADD_CUSTOM_COMMAND</code> 有两个限制：</p>
<ul>
<li>只有在相同的 CMakeLists.txt 中，指定了所有依赖于其输出的目标时才有效</li>
<li>对于不同的独立目标，使用 <code>ADD_CUSTOM_COMMAND</code>的输出可以重新执行定制命令。这可能会导致冲突，应该避免这种情况的发生</li>
</ul>
<p>只有当构建的目标以 <code>ADD_CUSTOM_COMMAND</code> 生成的OUTPUT文件为源代码的情况下，<code>ADD_CUSTOM_COMMAND</code> 中指定的命令才会才会执行。</p>
<p><a href="https://www.jianshu.com/p/dcb26b24806b">https://www.jianshu.com/p/dcb26b24806b</a></p>
<p>该命令主要用于两种场景下。</p>
<h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><p>添加自定义命令来生成文件。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_custom_command</span>(OUTPUT output1 [output2 ...]</span><br><span class="line">                   <span class="keyword">COMMAND</span> command1 [ARGS] [args1...]</span><br><span class="line">                   [<span class="keyword">COMMAND</span> command2 [ARGS] [args2...] ...]</span><br><span class="line">                   [MAIN_DEPENDENCY depend]</span><br><span class="line">                   [DEPENDS [depends...]]</span><br><span class="line">                   [BYPRODUCTS [files...]]</span><br><span class="line">                   [IMPLICIT_DEPENDS &lt;lang1&gt; depend1</span><br><span class="line">                                    [&lt;lang2&gt; depend2] ...]</span><br><span class="line">                   [WORKING_DIRECTORY dir]</span><br><span class="line">                   [COMMENT comment]</span><br><span class="line">                   [DEPFILE depfile]</span><br><span class="line">                   [VERBATIM] [APPEND] [USES_TERMINAL]</span><br><span class="line">                   [COMMAND_EXPAND_LISTS])</span><br></pre></td></tr></table></figure>

<p>定义了一个命令来生成指定的 OUTPUT 文件。在 CMakeLists.txt 同一目录中创建的目标(该目标指定自定义命令的任何输出作为源文件)将获得一个规则，以便在构建时使用该命令生成该文件。不要在多个可能并行构建的独立目标中列出输出，或者规则的两个实例可能冲突(而是使用add_custom_target()命令来驱动该命令，并使其他目标依赖于该命令)。在 makefile 术语中，这会以以下形式创建一个新目标:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">OUTPUT: MAIN_DEPENDENCY DEPENDS</span></span><br><span class="line">        COMMAND</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_custom_command</span>(OUTPUT COPY_RES</span><br><span class="line">  <span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> -E copy_directory <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/config <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/etc</span><br><span class="line">  <span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> -E copy <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/log.txt <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/etc</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_custom_target</span>(CopyTask ALL DEPENDS COPY_RES)</span><br></pre></td></tr></table></figure>

<p><code>add_custom_target</code>：生成一个目标 CopyTask，该目标依赖 COPY_RES。而 COPY_RES 实际上是用来复制文件夹或复制文件，也就是 COMMAND 中定义的操作。</p>
<p><strong>options</strong>：</p>
<ul>
<li><strong>APPEND</strong>：将 COMMAND 和 DEPENDS 选项值附加到指定的第一个输出的自定义命令。之前必须已经调用过具有相同输出的此命令</li>
<li><strong>BYPRODUCTS</strong>：指定命令预期生成的文件。如果副产品(byproduct)名是相对路径，它将相对于当前源目录相对应的构建树目录进行解释。每个副产品文件都将自动标记为GENERATED源文件属性</li>
<li><strong>COMMAND</strong>：指定要执行的命令。如果指定了多个 COMMAND，它们将按顺序执行，但不一定组成有状态的 shell 或 batch 脚本。可选的 ARGS 参数是为了向后兼容。</li>
<li><strong>COMMENT</strong>：在构建时执行命令之前显示给定的消息</li>
<li><strong>DEPENDS</strong>：指定命令所依赖的文件。每个参数都转换为依赖项。如果未指定 DEPENDS，则只要缺少 OUTPUT，该命令就会运行；如果该命令实际上并未创建 OUTPUT，则该规则将始终运行</li>
<li><strong>COMMAND_EXPAND_LISTS</strong>：</li>
<li><strong>IMPLICIT_DEPENDS</strong>：请求扫描输入文件的隐式依赖项。给定的语言指定应使用其相应依赖扫描器的编程语言(programming language).目前仅支持C和CXX语言扫描器。必须为IMPLICIT_DEPENDS列表中的每个文件指定语言。IMPLICIT_DEPENDS选项目前仅支持Makefile生成器，其它生成器将忽略该选项。此选项<strong>不能与DEPFILE选项同时指定</strong>。</li>
<li><strong>JOB_POOL</strong>：为 Ninja 生成器指定一个 pool。不能与 USES_TERMINAL 一起使用(暗含 console pool)。</li>
<li><strong>MAIN_DEPENDENCY</strong>：指定命令的主要输入源文件。每个源文件最多可以有一个命令将其指定为其主要依赖项。编译命令(即用于库或可执行文件)算作隐式主要依赖项，它会被自定义命令规范覆盖</li>
<li><strong>OUTPUT</strong>：指定命令预期生成的输出文件。每个输出文件将自动标记为生成的源文件属性。如果自定义命令的输出实际上没有作为磁盘上的文件创建，则应该使用 SYMBOLIC 源文件属性对其进行标记。如果输出名称是相对路径，则其绝对路径将解析为相对于与当前源目录对应的构建树目录(<a href="https://cmake.org/cmake/help/latest/variable/CMAKE_CURRENT_BINARY_DIR.html#variable:CMAKE_CURRENT_BINARY_DIR"><strong>CMAKE_CURRENT_BINARY_DIR</strong></a>)或当前源目录(<a href="https://cmake.org/cmake/help/latest/variable/CMAKE_CURRENT_SOURCE_DIR.html#variable:CMAKE_CURRENT_SOURCE_DIR"><strong>CMAKE_CURRENT_SOURCE_DIR</strong></a>)。3.20 版本以后，输出参数可使用一组受限的生成器表达式</li>
<li>USES_TERMINAL：如果可能，该命令将被授予直接访问终端(terminal)的权限</li>
<li>VERBATIM：命令的所有参数都将为构建工具正确转义(escaped),以便调用的命令接收每个参数不变。建议使用VERBATIM，因为它可以实现正确的行为。当没有给出VERBATIM时，行为是特定于平台的</li>
<li>WORKING_DIRECTORY：使用给定的当前工作目录执行命令。如果是相对路径，会被解释为相对于当前源目录对应的构建树目录</li>
<li>DEPFILE：指定一个包含自定义命令依赖项的depfile。它通常由自定义命令本身发出。这个关键字只能在生成器支持的情况下使用</li>
</ul>
<p>例一</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加自定义命令来运行 someTool 以生产 out.c 文件，然后将该文件编译为库。当 in.txt 文件发生变化时，会自动重新运行该生成规则。</span></span><br><span class="line"><span class="keyword">add_custom_command</span>(</span><br><span class="line">  OUTPUT out.c</span><br><span class="line">  <span class="keyword">COMMAND</span> someTool -i <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/in.txt</span><br><span class="line">                   -o out.c</span><br><span class="line">  DEPENDS <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/in.txt</span><br><span class="line">  VERBATIM)</span><br><span class="line"><span class="keyword">add_library</span>(myLib out.c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.20 版本可以使用生成器表达式来指定每个配置的输出。例如</span></span><br><span class="line"><span class="keyword">add_custom_command</span>(</span><br><span class="line">  OUTPUT <span class="string">&quot;out-$&lt;CONFIG&gt;.c&quot;</span></span><br><span class="line">  <span class="keyword">COMMAND</span> someTool -i <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/in.txt</span><br><span class="line">                   -o <span class="string">&quot;out-$&lt;CONFIG&gt;.c&quot;</span></span><br><span class="line">                   -c <span class="string">&quot;$&lt;CONFIG&gt;&quot;</span></span><br><span class="line">  DEPENDS <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/in.txt</span><br><span class="line">  VERBATIM)</span><br><span class="line"><span class="keyword">add_library</span>(myLib <span class="string">&quot;out-$&lt;CONFIG&gt;.c&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>运行 someTool 指令生成 out-.c 文件，config 是编译选项。</p>
<p>例二：为多个 targets 生成文件</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果多个独立 targets 需要相同的自定义命令输出，则必须将其附加到它们都依赖的单个自定义 target</span></span><br><span class="line"><span class="keyword">add_custom_command</span>(</span><br><span class="line">  OUTPUT table.csv</span><br><span class="line">  <span class="keyword">COMMAND</span> makeTable -i <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/input.dat</span><br><span class="line">                    -o table.csv</span><br><span class="line">  DEPENDS <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/input.dat</span><br><span class="line">  VERBATIM)</span><br><span class="line"><span class="keyword">add_custom_target</span>(generate_table_csv DEPENDS table.csv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_custom_command</span>(</span><br><span class="line">  OUTPUT foo.cxx</span><br><span class="line">  <span class="keyword">COMMAND</span> genFromTable -i table.csv -case foo -o foo.cxx</span><br><span class="line">  DEPENDS table.csv           <span class="comment"># file-level dependency</span></span><br><span class="line">          generate_table_csv  <span class="comment"># target-level dependency</span></span><br><span class="line">  VERBATIM)</span><br><span class="line"><span class="keyword">add_library</span>(foo foo.cxx)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_custom_command</span>(</span><br><span class="line">  OUTPUT bar.cxx</span><br><span class="line">  <span class="keyword">COMMAND</span> genFromTable -i table.csv -case bar -o bar.cxx</span><br><span class="line">  DEPENDS table.csv           <span class="comment"># file-level dependency</span></span><br><span class="line">          generate_table_csv  <span class="comment"># target-level dependency</span></span><br><span class="line">  VERBATIM)</span><br><span class="line"><span class="keyword">add_library</span>(bar bar.cxx)</span><br></pre></td></tr></table></figure>

<p>foo.cxx 只被 foo 使用，bar.cxx 只被 bar 使用。但两个 target 都需要 table.csv。由于 foo 和 bar 是可以并发构建的独立目标，因此通过将其自定义命令放在单独的目标 generate_table_csv 中来防止它们竞相生成 table.csv。生成 foo.cxx 和 bar.cxx 的自定义指令均指定 target-level 依赖 generate_table_csv。</p>
<h3 id="Build-Events"><a href="#Build-Events" class="headerlink" title="Build Events"></a>Build Events</h3><p>将自定义命令添加到 target，如库或可执行文件。这对于在构建 target 之前或之后执行操作非常有用。该命令将成为 target 的一部分，并且仅在构建 target 本身时执行。如果 target 已构建，则不会执行该命令。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_custom_command</span>(<span class="keyword">TARGET</span> &lt;<span class="keyword">target</span>&gt;</span><br><span class="line">                   PRE_BUILD | PRE_LINK | POST_BUILD</span><br><span class="line">                   <span class="keyword">COMMAND</span> command1 [ARGS] [args1...]</span><br><span class="line">                   [<span class="keyword">COMMAND</span> command2 [ARGS] [args2...] ...]</span><br><span class="line">                   [BYPRODUCTS [files...]]</span><br><span class="line">                   [WORKING_DIRECTORY dir]</span><br><span class="line">                   [COMMENT comment]</span><br><span class="line">                   [VERBATIM] [USES_TERMINAL])</span><br></pre></td></tr></table></figure>

<p>这将定义一个新命令，该命令将与构建指定的 <code>&lt;target&gt;</code> 关联。 必须在当前目录中定义；不能指定在其它目录中定义的 target。</p>
<p>命令何时执行由以下指定的选项决定:</p>
<ul>
<li><strong>PRE_BUILD</strong>：在 Visual Studio Generators 上，在 target 中执行任何其它规则之前运行。在其它生成器(generator)上,在 PRE_LINK 命令之前运行</li>
<li><strong>PRE_LINK</strong>：在编译源代码之后但在链接二进制文件(binary)或运行静态库的库管理员(librarian)或存档器工具(archiver tool)之前运行。这不是为 add_custom_target 命令创建的 target 定义的</li>
<li><strong>POST_BUILD</strong>：在执行 target 中的所有其它规则后运行</li>
</ul>
<p>使用 TARGET 格式时，project 应始终指定上述三个关键字之一。出于向后兼容性(backward compatibility)的原因，如果没有给出这样的关键字，则假定为 POST_BUILD，但 project 应明确提供其中一个关键字以明确他们期望的行为。</p>
<p>例一</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># POST_BUILD 事件可用于在链接后对二进制文件进行后处理,例如</span></span><br><span class="line"><span class="keyword">add_executable</span>(myExe myExe.c)</span><br><span class="line"><span class="keyword">add_custom_command</span>(</span><br><span class="line">  <span class="keyword">TARGET</span> myExe POST_BUILD</span><br><span class="line">  <span class="keyword">COMMAND</span> someHasher -i <span class="string">&quot;$&lt;TARGET_FILE:myExe&gt;&quot;</span></span><br><span class="line">                     -o <span class="string">&quot;$&lt;TARGET_FILE:myExe&gt;.hash&quot;</span></span><br><span class="line">  VERBATIM)</span><br><span class="line"><span class="comment"># 在链接后，将会运行 someHasher 来生成 .hash 文件</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 3.20 版本</span></span><br><span class="line"><span class="keyword">add_library</span>(myPlugin MODULE myPlugin.c)</span><br><span class="line"><span class="keyword">add_custom_command</span>(</span><br><span class="line">  <span class="keyword">TARGET</span> myPlugin POST_BUILD</span><br><span class="line">  <span class="keyword">COMMAND</span> someHasher -i <span class="string">&quot;$&lt;TARGET_FILE:myPlugin&gt;&quot;</span></span><br><span class="line">                     --as-code <span class="string">&quot;myPlugin-hash-$&lt;CONFIG&gt;.c&quot;</span></span><br><span class="line">  BYPRODUCTS <span class="string">&quot;myPlugin-hash-$&lt;CONFIG&gt;.c&quot;</span></span><br><span class="line">  VERBATIM)</span><br><span class="line"><span class="keyword">add_executable</span>(myExe myExe.c <span class="string">&quot;myPlugin-hash-$&lt;CONFIG&gt;.c&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编译工具</category>
        <category>CMake</category>
        <category>脚本指令</category>
      </categories>
      <tags>
        <tag>编译工具</tag>
        <tag>cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>motion planning</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/motion%20planning/</url>
    <content><![CDATA[<p>MoveIt 中，motion planners 是使用插件加载的。<strong>允许 MoveIt 在运行时加载 motion planners</strong>。</p>
<h1 id="Planning-Pipeline"><a href="#Planning-Pipeline" class="headerlink" title="Planning Pipeline"></a>Planning Pipeline</h1><p>MoveIt 中，motion planners 用于规划路径。然而，很多时候可能需要对<strong>运动规划请求进行预处理</strong>，或者对<strong>规划路径进行后处理</strong>(例如，时间参数化)。在这种情况下，使用 <strong>planning pipeline，将 motion planners 与预处理和后处理阶段连接起来</strong>。**预处理和后处理阶段称为 planning request adapters(规划请求适配器)**，可以从 ROS 参数服务器按名称配置。</p>
<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/motion%20planning/image-20240917205013991.png" class="" title="image-20240917205013991">

<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/motion%20planning/image-20240917205121451.png" class="" title="image-20240917205121451">

<p>move_group 发送运动规划请求给 OMPL，可以指定一些约束条件。请求包括关节位置约束、姿态约束、可见性约束、关节约束、用户自定义约束等。</p>
<p>规划请求适配器（Plan Request Adapters）能够对规划请求做预处理（pre-processing）、对规划响应做后处理（post-processing）。</p>
<p>Moveit!提供了一组默认的运动规划适配器，其中每个适配器都具有特定的功能：</p>
<p>FixStartStateBound：修复joint的初始极限</p>
<p>FixWorkspaceBound：设置默认尺寸的工作空间</p>
<p>FixStartStateCollision：如果已有的joint配置文件会导致碰撞，则adapter可以采样新的碰撞配置文件，并且根据jiggle-factor因子修改已有的配置文件</p>
<p>FixStartStatePathConstraint：如果机器人的初始姿态不满足路径约束，则adapter可以找到附近满足约束的姿态作为机器人的初始姿态</p>
<p>AddTimeParameterization（重点掌握）：为OMPL生成的点序列添加速度和加速度等信息（按距等分）</p>
<h1 id="Planner"><a href="#Planner" class="headerlink" title="Planner"></a>Planner</h1><h2 id="motion-planner-结构"><a href="#motion-planner-结构" class="headerlink" title="motion planner 结构"></a><strong>motion planner 结构</strong></h2><p>在 MoveIt 中，motion planner 用于规划路径。但是，有时可能希望<strong>对运动规划请求进行预处理</strong>或<strong>对规划路径进行后处理</strong>（例如，用于时间参数化）。在这种情况下，使用 planning pipeline 将运动规划器与预处理和后处理阶段(pre and pose-processing stages)连接起来。预处理和后处理阶段，称为 <strong>planning request adapters</strong>，可以通过 ROS 参数服务器进行配置。</p>
<p>约束条件：</p>
<ul>
<li>位置约束：限制 link 的运动区域</li>
<li>方向约束：限制 link 的运动方向</li>
<li>可见性约束：限制 link 上某点在某区域内的可见性(通过视觉传感器)</li>
<li>joint 约束：限制 joint 的运动范围</li>
<li>用户自定义约束：用户通过回调函数自定义所需的约束条件</li>
</ul>
<p>适配器：</p>
<ul>
<li><strong>FixStartStateBounds</strong>：修复 joint 的初始限制</li>
<li><strong>FixWorkspaceBounds</strong>：设置一个默认尺寸的工作空间</li>
<li><strong>FixStartStateCollision</strong>：修复碰撞配置文件。如果已有的joint配置文件会导致碰撞，则adapter可以采样新的碰撞配置文件，并且根据jiggle-factor因子修改已有的配置文件</li>
<li><strong>FixStartStatePathConstraints</strong>：找到满足约束的姿态作为机器人的初始位姿</li>
<li><strong>AddTimeParameterization</strong>：为空间轨迹进行速度、加速度约束，为每个轨迹点加入速度、加速度、时间等参数</li>
</ul>
<h2 id="STOMP、CHOMP-及-OMPL-差异"><a href="#STOMP、CHOMP-及-OMPL-差异" class="headerlink" title="STOMP、CHOMP 及 OMPL 差异"></a><strong>STOMP、CHOMP 及 OMPL 差异</strong></h2><p>在本节中，对从 <strong>STOMP</strong>、<strong>CHOMP</strong> 和 <strong>OMPL</strong> 获得的路径进行了区分。 一些 moveIt planner 往往会产生不稳定的轨迹，并可能引入不必要的机器人运动。通常需要后处理平滑步骤。相比之下，由于 STOMP 倾向于在短时间内生成平滑且表现良好的运动计划，因此不需要像其他一些 motion planner 所要求的后处理平滑步骤。 CHOMP 基于协变和函数梯度方法优化给定的初始初始轨迹。CHOMP 完全基于轨迹优化。OMPL 是一个开源库，用于基于采样&#x2F;随机运动规划算法。基于采样的算法在概率上是完整的：如果存在解决方案，最终将找到解决方案，但无法报告不存在解决方案。这些算法是高效的，通常可以快速找到解决方案。现在对以下这些 planner 进行定性分析：</p>
<ul>
<li><strong>Local Minima Handling</strong>：由于其随机特性，STOMP 可以避免局部极小值。然而，CHOMP 很容易并经常陷入局部最小值，从而错过最优解决方案。根据 STOMP 和 CHOMP 论文，STOMP 性能更好。然而，CHOMP 由于其基于梯度的性质，会陷入局部最小值，往往无法找到解决方案或返回次优解</li>
<li><strong>Time requirements</strong>：尽管 CHOMP 比 STOMP 需要更多的迭代才能获得成功，但执行时间是可以比较的。这主要是因为 STOMP 的每次迭代都需要进行多个轨迹代价的评估，但与 CHOMP 梯度更新规则相比，可以实现更大的步长且更稳定。OMPL 算法是有效的，通常可以快速找到解决方案</li>
<li><strong>Parameter tuning</strong>：为了获得成功的解决方案，CHOMP 通常需要比 STOMP 更多的参数调优。OMPL 不需要很多参数调优，默认参数在大多数情况下都很好</li>
<li><strong>Obstacle Handling</strong>：对于包含障碍的场景，由于其随机性，STOMP 通常能够成功避开障碍。然而，CHOMP 通过在机器人的动力学量(如加速度、速度)的代价函数中添加一些噪声(ridge_factor)来生成不喜欢平滑轨迹的路径。OMPL 还可以在存在障碍物的情况下生成无碰撞的平滑路径</li>
</ul>
<p><strong>STOMP 只能用于机械臂关节空间的路径规划</strong>,不能用于空间末端的运动轨迹规划；CHOMP 可以用作 STOMP 获得的计划的后处理优化技术；STOMP 为 CHOMP 生成初始路径。然后 CHOMP 采用这条初始路径并进一步优化这一轨迹</p>
<h1 id="Planning-adapter"><a href="#Planning-adapter" class="headerlink" title="Planning adapter"></a>Planning adapter</h1><p>规划请求适配器可用于修改运动规划器的轨迹（预处理和&#x2F;或后处理）。MoveIt! 中现有规划适配器的一些示例包括：</p>
<ul>
<li><strong>AddTimeParameterization</strong></li>
<li><strong>FixWorkspaceBounds</strong></li>
<li><strong>FixStartBounds</strong></li>
<li><strong>FixStartStateCollision</strong></li>
<li><strong>FixStartStatePathConstraints</strong></li>
<li><strong>CHOMPOptimizerAdapter</strong></li>
</ul>
<p>使用规划适配器的概念，可以在管道中使用多种运动规划算法来生成稳健的轨迹。例如，简单的运动规划管道可能包括由 OMPL 生成的初始计划，然后可以由 CHOMP 优化以生成可能比单独由 OMPL 或 CHOMP 生成的路径更好的运动规划。同样，使用规划适配器的概念，其他运动规划器可以根据机器人运行的环境进行混合和匹配。</p>
<p>使用规划请求适配器概念可能的其他运动规划管道包括：</p>
<ul>
<li><strong>CHOMP + STOMP</strong></li>
<li><strong>OMPL + STOMP</strong></li>
<li><strong>STOMP + CHOMP</strong></li>
<li><strong>OMPL + CHOMP</strong></li>
</ul>
<p>其中前两个涉及使用 <strong>STOMP Smoothing Planning Request</strong>，后两个使用 <strong>CHOMP Optimization Adapter</strong>。这些规划请求适配器的使用方式很简单，并记录在 moveit_tutorials 存储库中的计划请求适配器教程页面中。</p>
<p>注意：kinetic 版本需要通过源码安装 moveit! 才能使用 CHOMP 和 STOMP。</p>
<h2 id="OMPL-CHOMP"><a href="#OMPL-CHOMP" class="headerlink" title="OMPL + CHOMP"></a><strong>OMPL + CHOMP</strong></h2><p>该节证明了 CHOMP 可以作为其他规划算法得到的规划的后处理优化技术。即：一些随机规划算法产生了 CHOMP 的初始猜测。CHOMP 根据这个最初的猜测，进一步优化轨迹。要做到这一点，请遵循以下步骤:</p>
<p>① ompl_planning_pipeline.launch，将 planning_adapters 修改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;planning_adapters&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;default_planner_request_adapters/AddTimeParameterization</span></span></span><br><span class="line"><span class="string"><span class="tag">           default_planner_request_adapters/FixWorkspaceBounds</span></span></span><br><span class="line"><span class="string"><span class="tag">           default_planner_request_adapters/FixStartStateBounds</span></span></span><br><span class="line"><span class="string"><span class="tag">           default_planner_request_adapters/FixStartStateCollision</span></span></span><br><span class="line"><span class="string"><span class="tag">           default_planner_request_adapters/FixStartStatePathConstraints</span></span></span><br><span class="line"><span class="string"><span class="tag">           default_planner_request_adapters/CHOMPOptimizerAdapter&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>即：在最后添加 CHOMP 适配器</p>
<p>② planning_adapters 的值是上述适配器被调用的顺序。顺序很重要。在 CHOMP 适配器内部，在调用 CHOMP 优化求解器之前调用 OMPL，因此 CHOMP 将 OMPL 计算的初始路径作为进一步优化的起点。</p>
<p>③ 在 launch 文件(通常为 ompl_planning_pipeline.launch.xml)中 ompl_planning.yaml 后面添加 chomp_planning.yaml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_moveit_config)/config/ompl_planning.yaml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_moveit_config)/config/chomp_planning.yaml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p>④ 确保 move_group.launch 文件中默认 planner 是 ompl</p>
<p>⑤ chomp_planning.yaml 文件中，添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">trajectory_initialization_method: &quot;fillTrajectory&quot;  </span><br></pre></td></tr></table></figure>



<p>在 RViz motion planning 面板 Context 下选择 OMPL。</p>
<h2 id="STOMP-CHOMP"><a href="#STOMP-CHOMP" class="headerlink" title="STOMP + CHOMP"></a><strong>STOMP + CHOMP</strong></h2><p>CHOMP 作为 STOMP 得到的方案的后处理优化技术。</p>
<p>使用步骤：</p>
<p>① stomp_planning_pipeline.launch 中，修改 planning_adapter 为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;planning_adapters&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;default_planner_request_adapters/AddTimeParameterization</span></span></span><br><span class="line"><span class="string"><span class="tag">           default_planner_request_adapters/FixWorkspaceBounds</span></span></span><br><span class="line"><span class="string"><span class="tag">           default_planner_request_adapters/FixStartStateBounds</span></span></span><br><span class="line"><span class="string"><span class="tag">           default_planner_request_adapters/FixStartStateCollision</span></span></span><br><span class="line"><span class="string"><span class="tag">           default_planner_request_adapters/FixStartStatePathConstraints</span></span></span><br><span class="line"><span class="string"><span class="tag">           default_planner_request_adapters/CHOMPOptimizationAdapter&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<p>② 同样，也是顺序调用，因此顺序也很重要</p>
<p>③ 在 stomp_planning_pipeline.launch.xml 中 stomp_planning.yaml 后面添加 chomp_planning.yaml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_moveit_config)/config/stomp_planning.yaml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_moveit_config)/config/chomp_planning.yaml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p>④ 确保 move_group.launch 文件中默认 planner 是 stomp</p>
<p>⑤ chomp_planning.yaml 文件中，添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">trajectory_initialization_method: &quot;fillTrajectory&quot;</span><br></pre></td></tr></table></figure>



<h2 id="OMPL-STOMP"><a href="#OMPL-STOMP" class="headerlink" title="OMPL + STOMP"></a><strong>OMPL + STOMP</strong></h2><p>STOMP 作为 OMPL 得到的方案的后处理优化技术。</p>
<p>① ompl_planning_pipeline.launch，将 planning_adapters 修改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;planning_adapters&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;default_planner_request_adapters/AddTimeParameterization</span></span></span><br><span class="line"><span class="string"><span class="tag">           default_planner_request_adapters/FixWorkspaceBounds</span></span></span><br><span class="line"><span class="string"><span class="tag">           default_planner_request_adapters/FixStartStateBounds</span></span></span><br><span class="line"><span class="string"><span class="tag">           default_planner_request_adapters/FixStartStateCollision</span></span></span><br><span class="line"><span class="string"><span class="tag">           default_planner_request_adapters/FixStartStatePathConstraints</span></span></span><br><span class="line"><span class="string"><span class="tag">           default_planner_request_adapters/STOMPSmoothingAdapter&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>即：在最后添加 STOMP 适配器</p>
<p>② planning_adapters 的值是上述适配器被调用的顺序。顺序很重要</p>
<p>③ 在 launch 文件(通常为 ompl_planning_pipeline.launch.xml)中 ompl_planning.yaml 后面添加 stomp_planning.yaml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_moveit_config)/config/ompl_planning.yaml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_moveit_config)/config/stomp_planning.yaml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p>④ 确保 move_group.launch 文件中默认 planner 是 ompl</p>
<p>⑤ stomp_planning.yaml 文件中，添加以下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">initialization_method:</span> <span class="number">1</span> <span class="comment"># [ 1 : LINEAR_INTERPOLATION, </span></span><br><span class="line">                         <span class="comment">#   2 : CUBIC_POLYNOMIAL, </span></span><br><span class="line">                         <span class="comment">#   3 : MININUM_CONTROL_COST,</span></span><br><span class="line">                         <span class="comment">#   4 : FILL_TRACJECTORY]</span></span><br><span class="line"><span class="comment"># 替换为</span></span><br><span class="line"><span class="attr">initialization_method:</span> <span class="number">4</span>                         </span><br></pre></td></tr></table></figure>



<h2 id="CHOMP-STOMP"><a href="#CHOMP-STOMP" class="headerlink" title="CHOMP + STOMP"></a><strong>CHOMP + STOMP</strong></h2><p>注意：STOMP 平滑适配器是一项正在进行中的工作。</p>
<p>STOMP 作为 CHOMP 得到的方案的后处理优化技术。CHOMP 可用于生成路径，然后 STOMP 可用于平滑路径。这有助于摆脱在存在障碍物的情况下单独由 CHOMP 产生的轨迹的不稳定运动。</p>
<p>① chom_planning_pipeline.launch，将 planning_adapters 修改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;planning_adapters&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;default_planner_request_adapters/STOMPSmoothingAdapter&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;request_adapters&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg planning_adapters)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        </p>
<p>② planning_adapters 的值是上述适配器被调用的顺序。顺序很重要</p>
<p>③ 在 launch 文件(通常为chomp_planning_pipeline.launch.xml)中 chomp_planning.yaml 后面添加 stomp_planning.yaml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_moveit_config)/config/chomp_planning.yaml&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_moveit_config)/config/stomp_planning.yaml&quot;</span>/&gt;</span> </span><br></pre></td></tr></table></figure>

<p>​      </p>
<p>④ 确保 move_group.launch 文件中默认 planner 是 chomp</p>
<p>⑤ stomp_planning.yaml 文件中，添加以下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">initialization_method:</span> <span class="number">1</span> <span class="comment"># [ 1 : LINEAR_INTERPOLATION, </span></span><br><span class="line">                         <span class="comment">#   2 : CUBIC_POLYNOMIAL, </span></span><br><span class="line">                         <span class="comment">#   3 : MININUM_CONTROL_COST,</span></span><br><span class="line">                         <span class="comment">#   4 : FILL_TRACJECTORY]</span></span><br><span class="line"><span class="comment"># 替换为</span></span><br><span class="line"><span class="attr">initialization_method:</span> <span class="number">4</span>                         </span><br></pre></td></tr></table></figure>



<h2 id="planner-选择"><a href="#planner-选择" class="headerlink" title="planner 选择"></a>planner 选择</h2><p>本节将深入了解何时使用哪个规划器，以及如何在某个管道中使用某个规划请求适配器，从而生成健壮的总体路径。这里考虑分别使用 OMPL、STOMP、CHOMP 及一起使用来生成鲁棒的平滑优化路径。</p>
<ul>
<li><a href="https://github.com/ros-planning/moveit_tutorials/blob/kinetic-devel/doc/chomp_planner/chomp_planner_tutorial.html"><strong>CHOMP</strong></a>: <strong>是一种优化算法，对给定的初始轨迹进行优化</strong>。基于所处的环境，CHOMP 会迅速尝试将初始轨迹从碰撞中拉出。但是这里需要注意的一点是，为了避开障碍物，参数 <strong>ridge_factor</strong> 需要大于或等于 0.001。使用 CHOMP 可以在避开障碍物的同时找到路径。这里需要指出的是，尽管 CHOMP 可以成功地避开障碍，但它<strong>不能提供平滑的路径</strong>，<strong>在存在障碍的情况下往往会导致路径不稳定。对于 CHOMP 来说，避免碰撞是以轨迹的速度平滑为代价的</strong>。</li>
<li><a href="https://github.com/ros-planning/moveit_tutorials/blob/kinetic-devel/doc/stomp_planner/stomp_planner_tutorial.html"><strong>STOMP</strong></a>: 在合理的时间内产生光滑的表现良好的无碰撞路径。该方法依赖于生成噪声轨迹来探索初始(可能不可行)轨迹周围的空间，然后结合这些轨迹生成成本更低的更新轨迹。</li>
<li><a href="https://github.com/ros-planning/moveit_tutorials/blob/kinetic-devel/doc/ompl_interface/ompl_interface_tutorial.html"><strong>OMPL</strong></a>: 是一个开源库，用于<strong>基于采样&#x2F;随机化</strong>的运动规划算法。基于抽样的算法是<strong>概率完整的</strong>: 如果存在解，则一定能求解到，但不会报告不存在的解决方案。这些算法是有效的，通常能很快找到解决方案。</li>
</ul>
<p>组合使用：</p>
<ul>
<li><strong>OMPL + CHOMP</strong>：OMPL 可以作为 base planner 来产生一个初始运动规划，该规划可以作为 CHOMP 的初始猜测。然后 CHOMP 可以生成优化的路径。在大多数情况下，这样生成的路径的质量应该优于单独 OMPL 或单独 CHOMP 生成的路径</li>
<li><strong>OMPL + STOMP</strong>：由于 STOMP 可以作为一种平滑算法，它可以用来平滑其他运动规划器生成的计划。OMPL 首先生成一个路径，然后 STOMP 可以生成该路径的平滑版本。在大多数情况下，这样的路径应该比仅由 OMPL 或 STOMP 生成的路径更好</li>
<li><strong>STOMP + CHOMP</strong>：在这种情况下，STOMP 可以初始生成一条路径，CHOMP 可以将其作为初始猜测，并生成 STOMP 生成的平滑路径的优化版本</li>
<li><strong>CHOMP + STOMP</strong>：CHOMP 可用于生成路径，然后 STOMP 可用于平滑路径。这有助于摆脱由 CHOMP 单独在障碍物存在时产生的轨迹的颠簸运动</li>
</ul>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>MotionPlanning</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>使用近似约束流形进行规划</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/%E4%BD%BF%E7%94%A8%E8%BF%91%E4%BC%BC%E7%BA%A6%E6%9D%9F%E6%B5%81%E5%BD%A2%E8%BF%9B%E8%A1%8C%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p>Planning with Approximated Constraint Manifolds。即：使用近似约束流形进行规划。</p>
<p>OMPL 支持自定义约束，以支持遵循期望行为的规划轨迹。约束可以在关节空间和笛卡尔空间中定义，后者基于方向或位置。在规划轨迹时，每个关节状态都需要遵循所有设置的约束，默认情况下通过拒绝采样(rejection sampling)来执行。然而，这可能会导致规划时间过长，特别是当约束非常严格并且拒绝率相应较高时。</p>
<p>Sucan 等人提出了一种方法，<strong>预先计算约束流形(constraint manifold)的近似值</strong>并在其中执行轨迹规划。OMPL 插件包含针对给定约束集执行此操作并将其保存在数据库中的功能。在以后的实例中，可以加载数据库以使用任何 OMPL 规划器进行受限规划，从而大大减少规划时间。</p>
<p>有关如何规划路径约束的更多信息，请查看<a href="http://docs.ros.org/en/melodic/api/moveit_tutorials/html/doc/move_group_interface/move_group_interface_tutorial.html#planning-with-path-constraints">此处</a>。</p>
<h1 id="创建-constraints-database"><a href="#创建-constraints-database" class="headerlink" title="创建 constraints database"></a><strong>创建 constraints database</strong></h1><p>在 demo_construct_state_database.cpp 中可以找到一个关于如何从一个约束构造一个近似数据库的示例。</p>
<p>主要功能在 ConstraintsLibrary 类中。</p>
<p>通过调用 <strong>addConstraintsApproximation(</strong>) 方法添加 Constraints，可多次调用添加多个约束。该函数参数：</p>
<ul>
<li>constraints message(moveit_msgs::Constraints)</li>
<li>robot description</li>
<li>planning scene(planning_scene::PlanningScenePtr)</li>
<li>constraints options</li>
</ul>
<h2 id="定义-constraints"><a href="#定义-constraints" class="headerlink" title="定义 constraints"></a><strong>定义 constraints</strong></h2><p>generate_state_database 从 ROS 参数服务器中的  &#x2F;constraints上读取约束。</p>
<p>可以在 rosparam 中定义这些，以便将它们一起加载到一个文件中。例如：X_moveit_config&#x2F;config&#x2F;constraints.yaml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">path_constraint:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">some_constraints</span></span><br><span class="line">  <span class="attr">constraints:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">orientation</span></span><br><span class="line">    <span class="attr">frame_id:</span> <span class="string">world</span></span><br><span class="line">    <span class="comment"># etc, as described below</span></span><br></pre></td></tr></table></figure>

<p>​            </p>
<h3 id="JointConstraint"><a href="#JointConstraint" class="headerlink" title="JointConstraint"></a><strong>JointConstraint</strong></h3><p>限制关节位置。有三种方法可以简洁地指定这个参数</p>
<ul>
<li>position + a single tolerance</li>
<li>position + lower an upper tolerance</li>
<li>upper and lower bound</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">joint</span></span><br><span class="line">  <span class="attr">joint_name:</span> <span class="string">first_joint</span></span><br><span class="line">  <span class="attr">position:</span> <span class="number">0.1</span></span><br><span class="line">  <span class="attr">tolerance:</span> <span class="number">0.2</span></span><br><span class="line">  <span class="attr">weight:</span> <span class="number">1.0</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">joint</span></span><br><span class="line">  <span class="attr">joint_name:</span> <span class="string">second_joint</span></span><br><span class="line">  <span class="attr">position:</span> <span class="number">0.1</span></span><br><span class="line">  <span class="attr">tolerances:</span> [<span class="number">0.1</span>, <span class="number">0.2</span>]</span><br><span class="line">  <span class="attr">weight:</span> <span class="number">1.0</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">joint</span></span><br><span class="line">  <span class="attr">joint_name:</span> <span class="string">third_joint</span></span><br><span class="line">  <span class="attr">bounds:</span> [<span class="number">-0.5</span>, <span class="number">1.0</span>]</span><br><span class="line">  <span class="attr">weight:</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure>

<p>​         </p>
<h3 id="PoseConstraints"><a href="#PoseConstraints" class="headerlink" title="PoseConstraints"></a><strong>PoseConstraints</strong></h3><p>约束 link 的允许位置。</p>
<p>target_offset 是一个 link 的相对位置。例如，末端执行器的尖端相对于它的安装点或其他原点定义。通过沿着每个轴指定上界和下界，这个区域(仅在这个紧凑定义中为方框)是紧凑定义的。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">position</span></span><br><span class="line">  <span class="attr">frame_id:</span> <span class="string">base_link</span></span><br><span class="line">  <span class="attr">link_name:</span> <span class="string">gripper_link</span></span><br><span class="line">  <span class="attr">target_offset:</span> [<span class="number">0.01</span>, <span class="number">0.01</span>, <span class="number">0.01</span>]</span><br><span class="line">  <span class="attr">region:</span></span><br><span class="line">    <span class="attr">x:</span> [<span class="number">0</span>, <span class="number">1.0</span>] <span class="comment"># [start, end]</span></span><br><span class="line">    <span class="attr">y:</span> [<span class="number">0</span>, <span class="number">1.0</span>] <span class="comment"># [start, end]</span></span><br><span class="line">    <span class="attr">z:</span> [<span class="number">0</span>, <span class="number">1.0</span>] <span class="comment"># [start, end]</span></span><br><span class="line">  <span class="attr">weight:</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure>

<p>​           </p>
<h3 id="OrientationConstraints"><a href="#OrientationConstraints" class="headerlink" title="OrientationConstraints"></a><strong>OrientationConstraints</strong></h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">orientation</span></span><br><span class="line">  <span class="attr">frame_id:</span> <span class="string">base_link</span></span><br><span class="line">  <span class="attr">link_name:</span> <span class="string">gripper_link</span></span><br><span class="line">  <span class="attr">orientation:</span> [<span class="number">-3.1415269</span>, <span class="number">-1.57079632</span>, <span class="number">0</span>] <span class="comment">#RPY</span></span><br><span class="line">  <span class="attr">tolerances:</span> [<span class="number">6.28318531</span>, <span class="number">0.2</span>, <span class="number">6.28318531</span>]</span><br><span class="line">  <span class="attr">weight:</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure>

<p>​           </p>
<h3 id="VisibilityConstraints"><a href="#VisibilityConstraints" class="headerlink" title="VisibilityConstraints"></a><strong>VisibilityConstraints</strong></h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">visibility</span></span><br><span class="line">  <span class="attr">target_radius:</span> <span class="number">0.5</span></span><br><span class="line">  <span class="attr">target_pose:</span></span><br><span class="line">    <span class="attr">frame_id:</span> <span class="string">&#x27;base_link&#x27;</span></span><br><span class="line">    <span class="attr">position:</span> [<span class="number">1.2</span>, <span class="number">3.4</span>, <span class="number">5.6</span>]</span><br><span class="line">    <span class="attr">orientation:</span> [<span class="number">-3.1415269</span>, <span class="number">-1.57079632</span>, <span class="number">0</span>] <span class="comment">#RPY</span></span><br><span class="line">  <span class="attr">cone_sides:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">sensor_pose:</span></span><br><span class="line">    <span class="attr">frame_id:</span> <span class="string">&#x27;gripper_cam_link&#x27;</span></span><br><span class="line">    <span class="attr">position:</span> [<span class="number">1.2</span>, <span class="number">3.4</span>, <span class="number">5.6</span>]</span><br><span class="line">    <span class="attr">orientation:</span> [<span class="number">-3.1415269</span>, <span class="number">-1.57079632</span>, <span class="number">0</span>] <span class="comment">#RPY</span></span><br><span class="line">  <span class="attr">max_view_angle:</span> <span class="number">1.1</span></span><br><span class="line">  <span class="attr">max_range_angle:</span> <span class="number">0.55</span></span><br><span class="line">  <span class="attr">weight:</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure>



<h2 id="运行-database-generator"><a href="#运行-database-generator" class="headerlink" title="运行 database generator"></a><strong>运行 database generator</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需先启动 demo.launch</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch ompl_interface generate_state_database.launch \</span></span><br><span class="line"><span class="language-bash">    constraints_file:=$(rospack find X_moveit_config)/config/constraints.yaml \</span></span><br><span class="line"><span class="language-bash">    planning_group:=arm</span></span><br></pre></td></tr></table></figure>

<p>​              </p>
<h2 id="Internals"><a href="#Internals" class="headerlink" title="Internals"></a><strong>Internals</strong></h2><p>约束是通过调用 <strong>addConstraintApproximation()</strong> 来添加的，后续可以调用它来在近似中包含多个约束。该函数需要四个参数:</p>
<ul>
<li>constraints message</li>
<li>robot description(std::string)</li>
<li>planning scene(planning_scene::PlanningScenePtr)</li>
<li>construction options</li>
</ul>
<h2 id="Constraints-message"><a href="#Constraints-message" class="headerlink" title="Constraints message"></a><strong>Constraints message</strong></h2><p>约束消息对象可以像往常一样以任何类型和所需的容差(tolerances)初始化。关键的一点是，消息的名称应该是描述性的，并且对约束是唯一的。稍后在规划使用近似数据库时，将使用该名称来引用相应的约束。</p>
<h2 id="Constraints-options"><a href="#Constraints-options" class="headerlink" title="Constraints options"></a><strong>Constraints options</strong></h2><p>ompl_interface::constraintationconstructionoptions 对象指定了近似流形(approximation manifold)的各种特征，例如：实例大小、密度、空间参数化类型等。以下是每个选项的概述:</p>
<ul>
<li>unsigned int <strong>samples</strong> - 近似图的大小</li>
<li>unsigned int <strong>edges_per_sample</strong> - 近似图的度</li>
<li>double <strong>max_edge_length</strong> - 边缘插入的距离阈值</li>
<li>bool <strong>explicit_motions</strong> - 定义边界是否应遵循约束</li>
<li>double <strong>explicit_points_resolution</strong> - 边缘插值分辨率的约束检查</li>
<li>unsigned int <strong>max_explicit_points</strong> - edge 要检查的最大点数</li>
</ul>
<h3 id="Graph-size"><a href="#Graph-size" class="headerlink" title="Graph size"></a><strong>Graph size</strong></h3><p>显然，稳定的规划结果需要详细的近似，因此 samples 越高，性能越可靠。然而，较高的值会导致数据库的构建时间线性增加。找到一个合适的流形大小是一个高度依赖于约束有多严格的问题。对于大多数约束，使用范围在 1000 到 10000 之间的值就足够了。</p>
<h3 id="Edges"><a href="#Edges" class="headerlink" title="Edges"></a><strong>Edges</strong></h3><p>向流形(manifold)添加边是可选的，可以通过将 edges_per_sample 设置为 0 来禁用。在大多数情况下，轨迹规划在没有边的情况下也可以正常工作，因为采样过程只需要状态来运行。<strong>max_edge_length</strong> 定义允许添加边的两个状态的最大距离。通过将 explicit_motions 设置为 true，还可以强制边缘匹配约束，使它们表示相邻状态之间的有效路径。这在具有许多难以到达的区域非常稀疏的近似值中是尤其有利的，因为绝对距离不是可达性的度量。通过测试状态对之间的线性插值点来检查边是否匹配约束。这些插值点的数量设置为 <strong>explicit_points_resolution 乘以边缘长度</strong>，<strong>并受max_explicit_points 限制</strong>。</p>
<p>添加边会极大地增加数据库的构建时间，而增加显式运动检查甚至会对此产生额外的影响。在测试边缘时，请记住应调整 edges_per_sample 和 max_edge_length 值，以便始终有足够接近的状态可以连接。这需要根据密度和适应状态之间的实际距离来分析近似空间的大小。</p>
<h2 id="Database-Construction"><a href="#Database-Construction" class="headerlink" title="Database Construction"></a><strong>Database Construction</strong></h2><p>在将约束添加到 ConstraintsLibrary 对象之后，数据库可以通过调用 saveApproximationConstraints() 来构建，它只接受数据库应该保存的相对目录。</p>
<h1 id="数据库加载和使用"><a href="#数据库加载和使用" class="headerlink" title="数据库加载和使用"></a><strong>数据库加载和使用</strong></h1><p>约束数据库必须在启动 move group 节点时通过设置 ros 参数来加载:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;move_group/constraint_approximations_path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;path_to_database&gt;&quot;</span>/&gt;</span>   </span><br></pre></td></tr></table></figure>

<p>​           </p>
<p>要验证是否找到了数据库，请检查是否在日志中显示了命名的约束。</p>
<p>为了进行规划，只需像往常一样初始化约束消息，并将消息名称设置为用于构建数据库的确切名称。另外，需要再次指定相同的值和公差，因为默认情况下规划器只是在状态上采样，但在路径规划插值期间没有必要遵循约束。没有初始化约束的正确命名的约束消息将使用数据库，但因此可能导致无效的轨迹。</p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>MotionPlanning</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>Multiple robto arms</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E5%8F%8C%E8%87%82%E6%8E%A7%E5%88%B6/Multiple%20robto%20arms/</url>
    <content><![CDATA[<p>使用 MoveIt 运动规划设置多臂环境的步骤如下:</p>
<ul>
<li>构建多臂 xacro&#x2F;URDF 模型</li>
<li>使用 MoveIt Setup Assistant 生成 moveit config 包</li>
<li>编写多臂的 ros controllers 配置及 launch 文件</li>
<li>集成仿真环境</li>
<li>规划机械臂运动</li>
</ul>
<h1 id="构建-xacro-URDF"><a href="#构建-xacro-URDF" class="headerlink" title="构建 xacro&#x2F;URDF"></a>构建 xacro&#x2F;URDF</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">robot name is: panda_multiple_arms</span><br><span class="line">---------- Successfully Parsed XML ---------------</span><br><span class="line">root Link: world has 1 child(ren)</span><br><span class="line">    child(1):  base</span><br><span class="line">        child(1):  left_arm_link0</span><br><span class="line">            child(1):  left_arm_link1</span><br><span class="line">                child(1):  left_arm_link2</span><br><span class="line">                    child(1):  left_arm_link3</span><br><span class="line">                        child(1):  left_arm_link4</span><br><span class="line">                            child(1):  left_arm_link5</span><br><span class="line">                                child(1):  left_arm_link6</span><br><span class="line">                                    child(1):  left_arm_link7</span><br><span class="line">                                        child(1):  left_arm_link8</span><br><span class="line">                                            child(1):  left_arm_hand</span><br><span class="line">                                                child(1):  left_arm_leftfinger</span><br><span class="line">                                                child(2):  left_arm_rightfinger</span><br><span class="line">                                                child(3):  left_arm_hand_sc</span><br><span class="line">                                                child(4):  left_arm_hand_tcp</span><br><span class="line">                                        child(2):  left_arm_link7_sc</span><br><span class="line">                                    child(2):  left_arm_link6_sc</span><br><span class="line">                                child(2):  left_arm_link5_sc</span><br><span class="line">                            child(2):  left_arm_link4_sc</span><br><span class="line">                        child(2):  left_arm_link3_sc</span><br><span class="line">                    child(2):  left_arm_link2_sc</span><br><span class="line">                child(2):  left_arm_link1_sc</span><br><span class="line">            child(2):  left_arm_link0_sc</span><br><span class="line">        child(2):  right_arm_link0</span><br><span class="line">            child(1):  right_arm_link1</span><br><span class="line">                child(1):  right_arm_link2</span><br><span class="line">                    child(1):  right_arm_link3</span><br><span class="line">                        child(1):  right_arm_link4</span><br><span class="line">                            child(1):  right_arm_link5</span><br><span class="line">                                child(1):  right_arm_link6</span><br><span class="line">                                    child(1):  right_arm_link7</span><br><span class="line">                                        child(1):  right_arm_link8</span><br><span class="line">                                            child(1):  right_arm_hand</span><br><span class="line">                                                child(1):  right_arm_leftfinger</span><br><span class="line">                                                child(2):  right_arm_rightfinger</span><br><span class="line">                                                child(3):  right_arm_hand_sc</span><br><span class="line">                                                child(4):  right_arm_hand_tcp</span><br><span class="line">                                        child(2):  right_arm_link7_sc</span><br><span class="line">                                    child(2):  right_arm_link6_sc</span><br><span class="line">                                child(2):  right_arm_link5_sc</span><br><span class="line">                            child(2):  right_arm_link4_sc</span><br><span class="line">                        child(2):  right_arm_link3_sc</span><br><span class="line">                    child(2):  right_arm_link2_sc</span><br><span class="line">                child(2):  right_arm_link1_sc</span><br><span class="line">            child(2):  right_arm_link0_sc</span><br></pre></td></tr></table></figure>



<h1 id="MoveIt-config-包"><a href="#MoveIt-config-包" class="headerlink" title="MoveIt config 包"></a>MoveIt config 包</h1><img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E5%8F%8C%E8%87%82%E6%8E%A7%E5%88%B6/Multiple%20robto%20arms/image-20240917201538357.png" class="" title="image-20240917201538357">

<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E5%8F%8C%E8%87%82%E6%8E%A7%E5%88%B6/Multiple%20robto%20arms/image-20240917201550345.png" class="" title="image-20240917201550345">



<h1 id="配置-controllers-及-launch"><a href="#配置-controllers-及-launch" class="headerlink" title="配置 controllers 及 launch"></a>配置 controllers 及 launch</h1><p>需要两种类型的 controllers：</p>
<ul>
<li>joint state controller：发布所有关节状态</li>
<li>joint trajectory controller：执行关节空间轨迹</li>
</ul>
<p>此例中，controllers 包括：joint_state_controller、right_arm_trajectory_controller 和 left_arm_trajectory_controller（未考虑夹持器）。</p>
<p>创建 joint_state_controller.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">joint_state_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">joint_state_controller/JointStateController</span></span><br><span class="line">    <span class="attr">publish_rate:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure>

<p>创建 trajectory_controller.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">right_arm_trajectory_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&quot;position_controllers/JointTrajectoryController&quot;</span></span><br><span class="line">    <span class="attr">joints:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">right_arm_joint1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">right_arm_joint2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">right_arm_joint3</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">right_arm_joint4</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">right_arm_joint5</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">right_arm_joint6</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">right_arm_joint7</span></span><br><span class="line">    <span class="attr">constraints:</span></span><br><span class="line">        <span class="attr">goal_time:</span> <span class="number">0.6</span></span><br><span class="line">        <span class="attr">stopped_velocity_tolerance:</span> <span class="number">0.05</span></span><br><span class="line">        <span class="attr">right_arm_joint1:</span> &#123;<span class="attr">trajectory:</span> <span class="number">0.1</span>, <span class="attr">goal:</span> <span class="number">0.1</span>&#125;</span><br><span class="line">        <span class="attr">right_arm_joint2:</span> &#123;<span class="attr">trajectory:</span> <span class="number">0.1</span>, <span class="attr">goal:</span> <span class="number">0.1</span>&#125;</span><br><span class="line">        <span class="attr">right_arm_joint3:</span> &#123;<span class="attr">trajectory:</span> <span class="number">0.1</span>, <span class="attr">goal:</span> <span class="number">0.1</span>&#125;</span><br><span class="line">        <span class="attr">right_arm_joint4:</span> &#123;<span class="attr">trajectory:</span> <span class="number">0.1</span>, <span class="attr">goal:</span> <span class="number">0.1</span>&#125;</span><br><span class="line">        <span class="attr">right_arm_joint5:</span> &#123;<span class="attr">trajectory:</span> <span class="number">0.1</span>, <span class="attr">goal:</span> <span class="number">0.1</span>&#125;</span><br><span class="line">        <span class="attr">right_arm_joint6:</span> &#123;<span class="attr">trajectory:</span> <span class="number">0.1</span>, <span class="attr">goal:</span> <span class="number">0.1</span>&#125;</span><br><span class="line">        <span class="attr">right_arm_joint7:</span> &#123;<span class="attr">trajectory:</span> <span class="number">0.1</span>, <span class="attr">goal:</span> <span class="number">0.1</span>&#125;</span><br><span class="line">    <span class="attr">stop_trajectory_duration:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">state_publish_rate:</span>  <span class="number">25</span></span><br><span class="line">    <span class="attr">action_monitor_rate:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">left_arm_trajectory_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&quot;position_controllers/JointTrajectoryController&quot;</span></span><br><span class="line">    <span class="attr">joints:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">left_arm_joint1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">left_arm_joint2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">left_arm_joint3</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">left_arm_joint4</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">left_arm_joint5</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">left_arm_joint6</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">left_arm_joint7</span></span><br><span class="line">    <span class="attr">constraints:</span></span><br><span class="line">        <span class="attr">goal_time:</span> <span class="number">0.6</span></span><br><span class="line">        <span class="attr">stopped_velocity_tolerance:</span> <span class="number">0.05</span></span><br><span class="line">        <span class="attr">left_arm_joint1:</span> &#123;<span class="attr">trajectory:</span> <span class="number">0.1</span>, <span class="attr">goal:</span> <span class="number">0.1</span>&#125;</span><br><span class="line">        <span class="attr">left_arm_joint2:</span> &#123;<span class="attr">trajectory:</span> <span class="number">0.1</span>, <span class="attr">goal:</span> <span class="number">0.1</span>&#125;</span><br><span class="line">        <span class="attr">left_arm_joint3:</span> &#123;<span class="attr">trajectory:</span> <span class="number">0.1</span>, <span class="attr">goal:</span> <span class="number">0.1</span>&#125;</span><br><span class="line">        <span class="attr">left_arm_joint4:</span> &#123;<span class="attr">trajectory:</span> <span class="number">0.1</span>, <span class="attr">goal:</span> <span class="number">0.1</span>&#125;</span><br><span class="line">        <span class="attr">left_arm_joint5:</span> &#123;<span class="attr">trajectory:</span> <span class="number">0.1</span>, <span class="attr">goal:</span> <span class="number">0.1</span>&#125;</span><br><span class="line">        <span class="attr">left_arm_joint6:</span> &#123;<span class="attr">trajectory:</span> <span class="number">0.1</span>, <span class="attr">goal:</span> <span class="number">0.1</span>&#125;</span><br><span class="line">        <span class="attr">left_arm_joint7:</span> &#123;<span class="attr">trajectory:</span> <span class="number">0.1</span>, <span class="attr">goal:</span> <span class="number">0.1</span>&#125;</span><br><span class="line">    <span class="attr">stop_trajectory_duration:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">state_publish_rate:</span>  <span class="number">25</span></span><br><span class="line">    <span class="attr">action_monitor_rate:</span> <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">#notice that the grippers joint2 mimics joint1</span></span><br><span class="line">  <span class="comment">#this is why it is not listed under the hand controllers</span></span><br><span class="line">  <span class="attr">right_hand_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&quot;effort_controllers/JointTrajectoryController&quot;</span></span><br><span class="line">    <span class="attr">joints:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">right_arm_finger_joint1</span></span><br><span class="line">    <span class="attr">gains:</span></span><br><span class="line">        <span class="attr">right_arm_finger_joint1:</span>  &#123;<span class="attr">p:</span> <span class="number">50.0</span>, <span class="attr">d:</span> <span class="number">1.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">i_clamp:</span> <span class="number">1.0</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="attr">left_hand_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&quot;effort_controllers/JointTrajectoryController&quot;</span></span><br><span class="line">    <span class="attr">joints:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">left_arm_finger_joint1</span></span><br><span class="line">    <span class="attr">gains:</span></span><br><span class="line">        <span class="attr">left_arm_finger_joint1:</span>  &#123;<span class="attr">p:</span> <span class="number">50.0</span>, <span class="attr">d:</span> <span class="number">1.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">i_clamp:</span> <span class="number">1.0</span>&#125;    </span><br></pre></td></tr></table></figure>

<p>创建 control_utils.launch</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Robot state publisher --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;publish_frequency&quot;</span> <span class="attr">type</span>=<span class="string">&quot;double&quot;</span> <span class="attr">value</span>=<span class="string">&quot;50.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;tf_prefix&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Joint state controller --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_multiple_arms)/config/joint_state_controller.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_controller_spawner&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;controller_manager&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;spawner&quot;</span> <span class="attr">args</span>=<span class="string">&quot;joint_state_controller&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Joint trajectory controller --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_multiple_arms)/config/trajectory_controller.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;arms_trajectory_controller_spawner&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;controller_manager&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;spawner&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">args</span>=<span class="string">&quot;right_arm_trajectory_controller left_arm_trajectory_controller </span></span></span><br><span class="line"><span class="string"><span class="tag">            right_hand_controller left_hand_controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>joint state controller 在 &#x2F;joint_states 主题发布关节状态信息。robot state publisher 使用该主题数据来计算正运动学并发布机器人 link 的姿态&#x2F;变换。joint trajectory controller 能够在一组关节上执行关节空间轨迹。</p>
<h1 id="集成-gazebo-仿真"><a href="#集成-gazebo-仿真" class="headerlink" title="集成 gazebo 仿真"></a>集成 gazebo 仿真</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install ros-noetic-ros-control ros-noetic-ros-controllers \</span></span><br><span class="line"><span class="language-bash">    ros-noetic-joint-state-controller ros-noetic-effort-controllers \</span></span><br><span class="line"><span class="language-bash">    ros-noetic-position-controllers ros-noetic-velocity-controllers \</span></span><br><span class="line"><span class="language-bash">    ros-noetic-gazebo-ros ros-noetic-gazebo-ros-control \</span></span><br><span class="line"><span class="language-bash">    ros-noetic-moveit-ros-control-interface \</span></span><br><span class="line"><span class="language-bash">    ros-noetic-moveit-simple-controller-manager \</span></span><br><span class="line"><span class="language-bash">    ros-noetic-moveit-fake-controller-manager ros-noetic-moveit-planners</span></span><br></pre></td></tr></table></figure>

<p>启动 gazebo 并加载模型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Launch empty Gazebo world --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find gazebo_ros)/launch/empty_world.launch&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;use_sim_time&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;gui&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;paused&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Find my robot Description--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro  &#x27;$(find panda_multiple_arms)/robot_description/panda_multiple_arms.xacro&#x27;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spawn The robot over the robot_description param--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;urdf_spawner&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;gazebo_ros&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawn_model&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-urdf -param robot_description -model panda_multiple_arms&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动 moveit</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Run the main MoveIt executable with trajectory execution --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_multiple_arms_moveit_config)/launch/move_group.launch&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;allow_trajectory_execution&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;moveit_controller_manager&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ros_control&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;fake_execution_type&quot;</span> <span class="attr">value</span>=<span class="string">&quot;interpolate&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;pipeline&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ompl&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;load_robot_description&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Start the simulated robot in an empty Gazebo world --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_multiple_arms)/launch/panda_multiple_arms_empty_world.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Start the controllers and robot state publisher--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_multiple_arms)/launch/control_utils.launch&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Start moveit_rviz with the motion planning plugin --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_multiple_arms_moveit_config)/launch/moveit_rviz.launch&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;rviz_config&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(find panda_multiple_arms_moveit_config)/launch/moveit.rviz&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>双臂控制</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>双臂控制</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E5%8F%8C%E8%87%82%E6%8E%A7%E5%88%B6/%E5%8F%8C%E8%87%82%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">&quot;a_bot&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;a_bot_shoulder_pan_joint&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;a_bot_shoulder_lift_joint&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;a_bot_elbow_joint&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;a_bot_wrist_1_joint&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;a_bot_wrist_2_joint&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;a_bot_wrist_3_joint&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chain</span> <span class="attr">base_link</span>=<span class="string">&quot;a_bot_base_link&quot;</span> <span class="attr">tip_link</span>=<span class="string">&quot;a_bot_gripper_tip_link&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">&quot;b_bot&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;b_bot_shoulder_pan_joint&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;b_bot_shoulder_lift_joint&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;b_bot_elbow_joint&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;b_bot_wrist_1_joint&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;b_bot_wrist_2_joint&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;b_bot_wrist_3_joint&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chain</span> <span class="attr">base_link</span>=<span class="string">&quot;b_bot_base_link&quot;</span> <span class="attr">tip_link</span>=<span class="string">&quot;b_bot_robotiq_85_tip_link&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">&quot;both_bots&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">&quot;a_bot&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">&quot;b_bot&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>保留了多个 end-effector 信息，因此，可以如下设置多个目标</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c++</span></span><br><span class="line">group.<span class="built_in">setPoseTarget</span>(home1, ee_link_a);  </span><br><span class="line">group.<span class="built_in">setPoseTarget</span>(targetpose, ee_link_b);</span><br><span class="line">success_plan = group.<span class="built_in">plan</span>(myplan);</span><br><span class="line"></span><br><span class="line"><span class="meta"># python</span></span><br><span class="line">self.both_move_group.<span class="built_in">set_pose_target</span>(front_wpose, self.front_eef_link)</span><br><span class="line">self.both_move_group.<span class="built_in">set_pose_target</span>(rear_wpose, self.rear_eef_link)</span><br><span class="line">plan = self.both_move_group.<span class="built_in">go</span>(wait=True)</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dual_arm_plan</span>(<span class="params">self, scale=<span class="number">1</span></span>):</span><br><span class="line">    front_wpose = <span class="variable language_">self</span>.front_move_group.get_current_pose().pose</span><br><span class="line">    rear_wpose = <span class="variable language_">self</span>.rear_move_group.get_current_pose().pose</span><br><span class="line"></span><br><span class="line">    front_wpose.position.z -= scale * <span class="number">0.1</span>  <span class="comment"># First move up (z)</span></span><br><span class="line">    front_wpose.position.y += scale * <span class="number">0.2</span></span><br><span class="line"></span><br><span class="line">    rear_wpose.position.z += scale * <span class="number">0.1</span>  <span class="comment"># First move up (z)</span></span><br><span class="line">    rear_wpose.position.y -= scale * <span class="number">0.2</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">self</span>.both_move_group.set_pose_target(front_wpose, <span class="variable language_">self</span>.front_eef_link)</span><br><span class="line">    <span class="variable language_">self</span>.both_move_group.set_pose_target(rear_wpose, <span class="variable language_">self</span>.rear_eef_link)</span><br><span class="line">    plan = <span class="variable language_">self</span>.both_move_group.go(wait=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># Calling `stop()` ensures that there is no residual movement</span></span><br><span class="line">    <span class="variable language_">self</span>.both_move_group.stop()</span><br><span class="line">    <span class="variable language_">self</span>.both_move_group.clear_pose_targets()</span><br></pre></td></tr></table></figure>





<p>注意：computeCartesianPath 不支持指定 EEF，因此，可以为每个手臂分别生成笛卡尔路径，然后<a href="https://pastebin.com/embed_js/sqPdMPzU">合并轨迹</a>。</p>
<p>当有新轨迹要执行时，用户需要对该轨迹与当前正在执行的轨迹进行碰撞检测。检测方法</p>
<ul>
<li><p>简单方法</p>
</li>
<li><ul>
<li>创建一个新的 merged 机器人轨迹，仅用于碰撞检查</li>
<li>该 merged 轨迹许包含当前轨迹的剩余部分和新的轨迹</li>
<li>merged 轨迹可通过 PlanningScene 中的 <a href="http://docs.ros.org/en/api/moveit_core/html/classplanning__scene_1_1PlanningScene.html#a6970c04a1d7bcaebcc64f7221ac343e7">isPathValid</a> 方法来进行碰撞检测</li>
</ul>
</li>
<li><p>只对轨迹上每个点进行碰撞检测，所以不能严格保证安全。(Bullet 提供连续碰撞检查)。应该使用 padding</p>
</li>
<li><p>由于每个控制器和物理执行的延迟，执行轨迹的机器人的位置不会完全准确。这是使用 padding 的另一个原因</p>
</li>
<li><p>padding 可能会导致与环境的碰撞，即使进入的轨迹应该已经检查过了。可以通过修改 PlanningScene 对象的 <strong>AllowedCollisionMatrix</strong> 来忽略环境碰撞(这里的“环境”指的是固定的机器人链接)</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// declare type aliases</span></span><br><span class="line"><span class="keyword">using</span> ExecStatus = moveit_controller_manager::ExecutionStatus;</span><br><span class="line"></span><br><span class="line"><span class="comment">// declare and initialize moveitcpp</span></span><br><span class="line"> moveit::planning_interface::MoveItCppPtr planning_interface_ = ... ; <span class="comment">// MoveItCpp is only used to gain access to the robot model and planning scene monitor</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// declare trajectories and controller names</span></span><br><span class="line">std::vector&lt;moveit_msgs::RobotTrajectory&gt; trajectories = ...</span><br><span class="line">std::vector&lt;std::string&gt; controller_name = &#123;<span class="string">&quot;fake_arm1_controller&quot;</span>, <span class="string">&quot;fake_arm2_controller&quot;</span>, ...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// declare vector for storing futures</span></span><br><span class="line">std::vector&lt;std::shared_future&lt;ExecStatus&gt;&gt; exec_futures;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(std::<span class="type">size_t</span> i =<span class="number">0</span>; i &lt; trajectories.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> traj = trajectories[i];</span><br><span class="line">std::string controller_name = controller_names[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">// instantiate controller</span></span><br><span class="line">trajectory_execution_manager::TrajectoryExecutionManagerPtr traj_exec_mngr = std::<span class="built_in">make_shared</span>&lt; trajectory_execution_manager::TrajectoryExecutionManager&gt;(</span><br><span class="line">            planning_interface_-&gt;<span class="built_in">getRobotModel</span>(), planning_interface_-&gt;<span class="built_in">getPlanningSceneMonitorNonConst</span>()-&gt;<span class="built_in">getStateMonitorNonConst</span>(), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// create packaged task with lambda that executes the trajectory</span></span><br><span class="line"><span class="function">std::packaged_task&lt; <span class="title">ExecStatus</span> <span class="params">()</span>&gt; <span class="title">async_task</span> <span class="params">([traj_exec_mngr, traj, controller_name]() -&gt; ExecStatus&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  traj_exec_mngr-&gt;push(traj.joint_trajectory, controller_name);</span></span></span><br><span class="line"><span class="params"><span class="function">  traj_exec_mngr-&gt;execute([](<span class="type">const</span> moveit_controller_manager::ExecutionStatus&amp; st)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    ROS_INFO_COND(st,<span class="string">&quot;&gt;&gt;&gt;&gt; Trajectory completed&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">    ROS_ERROR_COND(!st,<span class="string">&quot;Trajectory failed&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;);</span></span></span><br><span class="line"><span class="params"><span class="function">  moveit_controller_manager::ExecutionStatus st = traj_exec_mngr-&gt;waitForExecution();</span></span></span><br><span class="line"><span class="params"><span class="function">  traj_exec_mngr-&gt;stopExecution(<span class="literal">true</span>); <span class="comment">// don&#x27;t know if this is necessary</span></span></span></span><br><span class="line"><span class="params"><span class="function">  traj_exec_mngr-&gt;clear();</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">return</span> st;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get shared future and store </span></span><br><span class="line">exec_futures.<span class="built_in">push_back</span>(std::<span class="built_in">shared_future</span>&lt;ExecStatus&gt;(async_task.<span class="built_in">get_future</span>()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// move task into new thread</span></span><br><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(std::move(async_task))</span></span>;</span><br><span class="line">t.<span class="built_in">detach</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// wait for threads to complete</span></span><br><span class="line"><span class="keyword">while</span>(ros::<span class="built_in">ok</span>() &amp;&amp; loop_pause.<span class="built_in">sleep</span>())</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(std::<span class="built_in">all_of</span>(exec_futures.<span class="built_in">begin</span>(), exec_futures.<span class="built_in">end</span>(),[](std::shared_future&lt;ExecStatus&gt;&amp; f)&#123;</span><br><span class="line">    std::future_status st = f.<span class="built_in">wait_for</span>(std::chrono::<span class="built_in">duration</span>&lt;<span class="type">double</span>&gt;(<span class="number">0.01</span>));</span><br><span class="line">    <span class="keyword">return</span> st == std::future_status::ready;</span><br><span class="line">  &#125;))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>参考：</p>
<ul>
<li><a href="http://wiki.ros.org/Robots/TIAGo%2B%2B/Tutorials/MoveIt/Planning_joint_space">TIAGo++ Planning in joint space</a></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch tiago_dual_gazebo tiago_dual_gazebo.launch public_sim:=<span class="literal">true</span> end_effector_left:=pal-gripper end_effector_right:=pal-gripper</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分别控制左右臂</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun tiago_dual_moveit_tutorial plan_dual_arm_torso_fk left 0.15 1.5 0.58 0.06 1.0 -1.70 0.0 0.0</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun tiago_dual_moveit_tutorial plan_dual_arm_torso_fk right 0.15 1.5 0.58 0.06 1.0 -1.70 0.0 0.0</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://github.com/pablomalvido/Advanced_manipulation_moveit">Advanced_manipulation_moveit</a></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">未连接机械臂</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch motoman_sda10f_moveit_config demo_no_gripper.launch</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若连接了机械臂</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch motoman_sda10f_moveit_config moveit_planning_execution_no_gripper.launch</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 Dual-arm/left arm/right arm</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch advanced_manipulation_pkg plot_dual_arm_speeds.launch</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch advanced_manipulation_pkg plot\left_arm_speed.launch</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch advanced_manipulation_pkg plot\left_arm_angular_speed.launch</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最后启动</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch advanced_manipulation_pkg advanced_manipulation.launch</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://answers.ros.org/question/370136/planning-for-a-dual-arm-robot-in-moveit/">Planning for a dual arm robot in MoveIt</a></li>
<li><a href="https://github.com/cambel/dual_ur3e.git">dual_ur3e</a></li>
<li><a href="https://github.com/Infinity8sailor/multiple_arm_setup">multiple_arm_setup</a></li>
<li><a href="https://github.com/ros-planning/moveit/pull/2810">Draft: Simultaneous execution of trajectories</a></li>
</ul>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>双臂控制</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>MoveitSimpleControllerManager</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MoveitSimpleControllerManager/</url>
    <content><![CDATA[<p>读取 controller_list 参数，若参数不存在，则异常退出。注意：每个 controller 需包含 name、joints(关节列表，数组类型)、action_ns 及 type 参数，否则跳过。</p>
<p>遍历 controller_list</p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>trajectory_execution_manager</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/trajectory_execution_manager/</url>
    <content><![CDATA[<p>订阅 trajectory_execution_event 主题消息</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">event_topic_subscriber_ =</span><br><span class="line">      root_node_handle_.<span class="built_in">subscribe</span>(EXECUTION_EVENT_TOPIC, <span class="number">100</span>, </span><br><span class="line">                  &amp;TrajectoryExecutionManager::receiveEvent, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>

<p><img src="D:\workspace\my-notes\blog\source_posts\机械臂\MoveIt\源码分析\trajectory_execution_manager\image-20240917203858720.png" alt="image-20240917203858720"></p>
<p>receiveEvent 函数处理接收到的事件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">TrajectoryExecutionManager::receiveEvent</span><span class="params">(<span class="type">const</span> std_msgs::StringConstPtr&amp; event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">ROS_INFO_STREAM_NAMED</span>(name_, <span class="string">&quot;Received event &#x27;&quot;</span> &lt;&lt; event-&gt;data &lt;&lt; <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">  <span class="built_in">processEvent</span>(event-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">TrajectoryExecutionManager::processEvent</span><span class="params">(<span class="type">const</span> std::string&amp; event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event == <span class="string">&quot;stop&quot;</span>)</span><br><span class="line">    <span class="built_in">stopExecution</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">ROS_WARN_STREAM_NAMED</span>(name_, <span class="string">&quot;Unknown event type: &#x27;&quot;</span> &lt;&lt; event &lt;&lt; <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若接收到 stop 事件，则调佣 stopExecution(true) 停止执行轨迹。</p>
<p>stopExecution 函数中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">TrajectoryExecutionManager::stopExecution</span><span class="params">(<span class="type">bool</span> auto_clear)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  stop_continuous_execution_ = <span class="literal">true</span>;</span><br><span class="line">  continuous_execution_condition_.<span class="built_in">notify_all</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!execution_complete_)</span><br><span class="line">  &#123;</span><br><span class="line">    execution_state_mutex_.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span> (!execution_complete_)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// we call cancel for all active handles; we know these are not being modified as we loop through them because of</span></span><br><span class="line">      <span class="comment">// the lock</span></span><br><span class="line">      <span class="comment">// we mark execution_complete_ as true ahead of time. Using this flag, executePart() will know that an external</span></span><br><span class="line">      <span class="comment">// trigger to stop has been received</span></span><br><span class="line">      execution_complete_ = <span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">stopExecutionInternal</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// we set the status here; executePart() will not set status when execution_complete_ is true ahead of time</span></span><br><span class="line">      last_execution_status_ = moveit_controller_manager::ExecutionStatus::PREEMPTED;</span><br><span class="line">      execution_state_mutex_.<span class="built_in">unlock</span>();</span><br><span class="line">      <span class="built_in">ROS_INFO_NAMED</span>(name_, <span class="string">&quot;Stopped trajectory execution.&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// wait for the execution thread to finish</span></span><br><span class="line">      boost::<span class="function">mutex::scoped_lock <span class="title">lock</span><span class="params">(execution_thread_mutex_)</span></span>;</span><br><span class="line">      <span class="keyword">if</span> (execution_thread_)</span><br><span class="line">      &#123;</span><br><span class="line">        execution_thread_-&gt;<span class="built_in">join</span>();</span><br><span class="line">        execution_thread_.<span class="built_in">reset</span>();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (auto_clear)</span><br><span class="line">        <span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      execution_state_mutex_.<span class="built_in">unlock</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (execution_thread_)  <span class="comment">// just in case we have some thread waiting to be joined from some point in the past, we</span></span><br><span class="line">                               <span class="comment">// join it now</span></span><br><span class="line">  &#123;</span><br><span class="line">    boost::mutex::scoped_lock <span class="built_in">lock</span>(execution_thread_mutex_);</span><br><span class="line">    <span class="keyword">if</span> (execution_thread_)</span><br><span class="line">    &#123;</span><br><span class="line">      execution_thread_-&gt;<span class="built_in">join</span>();</span><br><span class="line">      execution_thread_.<span class="built_in">reset</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>continuousExecutionThread</code> 函数</p>
<p>负责执行任务的线程。当 stop_continuous_execution_ 为 false，即：未停止任务时，循环判断 continuous_execution_queue_ 是否为空，同时线程是否仍在执行，即：run_continuous_execution_thread_ 为 true，则阻塞等待条件变量 continuous_execution_condition_</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!stop_continuous_execution_)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function">boost::unique_lock&lt;boost::mutex&gt; <span class="title">ulock</span><span class="params">(continuous_execution_mutex_)</span></span>;</span><br><span class="line">  <span class="keyword">while</span> (continuous_execution_queue_.<span class="built_in">empty</span>() <span class="comment">// 任务队列为空,则表示任务执行完</span></span><br><span class="line">          &amp;&amp; run_continuous_execution_thread_ <span class="comment">// 线程仍在执行</span></span><br><span class="line">          &amp;&amp; !stop_continuous_execution_) <span class="comment">// 接收到 stop 事件</span></span><br><span class="line">    <span class="comment">// 阻塞等待条件变量      </span></span><br><span class="line">    continuous_execution_condition_.<span class="built_in">wait</span>(ulock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>若接收到 stop 事件，或条件变量 continuous_execution_condition_ 触发，同时线程退出(即 run_continuous_execution_thread_ 为 false) 则清空轨迹队列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (stop_continuous_execution_ || !run_continuous_execution_thread_)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> moveit_controller_manager::MoveItControllerHandlePtr&amp; used_handle : used_handles)</span><br><span class="line">    <span class="comment">// 上一次执行状态，即: last_execution_status_. </span></span><br><span class="line">    <span class="comment">// 若有任务正在执行,则先取消当前执行</span></span><br><span class="line">    <span class="keyword">if</span> (used_handle-&gt;<span class="built_in">getLastExecutionStatus</span>() == moveit_controller_manager::ExecutionStatus::RUNNING)</span><br><span class="line">      used_handle-&gt;<span class="built_in">cancelExecution</span>();</span><br><span class="line">  used_handles.<span class="built_in">clear</span>();</span><br><span class="line">  <span class="comment">// 清空 continous_execution_queue_ 队列</span></span><br><span class="line">  <span class="keyword">while</span> (!continuous_execution_queue_.<span class="built_in">empty</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    TrajectoryExecutionContext* context = continuous_execution_queue_.<span class="built_in">front</span>();</span><br><span class="line">    continuous_execution_queue_.<span class="built_in">pop_front</span>();</span><br><span class="line">    <span class="keyword">delete</span> context;</span><br><span class="line">  &#125;</span><br><span class="line">  stop_continuous_execution_ = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>若未接收到 stop 事件，线程正常运行，且 continuous_execution_queue_ 队列不为空，则开始执行轨迹</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (!continuous_execution_queue_.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">  TrajectoryExecutionContext* context = <span class="literal">nullptr</span>;</span><br><span class="line">  &#123;</span><br><span class="line">    boost::<span class="function">mutex::scoped_lock <span class="title">slock</span><span class="params">(continuous_execution_mutex_)</span></span>;</span><br><span class="line">    <span class="comment">// 若队列为空则直接退出</span></span><br><span class="line">    <span class="keyword">if</span> (continuous_execution_queue_.<span class="built_in">empty</span>())</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    context = continuous_execution_queue_.<span class="built_in">front</span>();</span><br><span class="line">    continuous_execution_queue_.<span class="built_in">pop_front</span>();</span><br><span class="line">    <span class="comment">// 若队列执行完，触发 continuous_execution_condition_ 条件变量</span></span><br><span class="line">    <span class="keyword">if</span> (continuous_execution_queue_.<span class="built_in">empty</span>())</span><br><span class="line">      continuous_execution_condition_.<span class="built_in">notify_all</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove handles we no longer need</span></span><br><span class="line">  std::set&lt;moveit_controller_manager::MoveItControllerHandlePtr&gt;::iterator uit = used_handles.<span class="built_in">begin</span>();</span><br><span class="line">  <span class="keyword">while</span> (uit != used_handles.<span class="built_in">end</span>())</span><br><span class="line">    <span class="comment">// 删除已结束的 handles</span></span><br><span class="line">    <span class="keyword">if</span> ((*uit)-&gt;<span class="built_in">getLastExecutionStatus</span>() != moveit_controller_manager::ExecutionStatus::RUNNING)</span><br><span class="line">    &#123;</span><br><span class="line">      std::set&lt;moveit_controller_manager::MoveItControllerHandlePtr&gt;::iterator to_erase = uit;</span><br><span class="line">      ++uit;</span><br><span class="line">      used_handles.<span class="built_in">erase</span>(to_erase);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      ++uit;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// now send stuff to controllers</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// first make sure desired controllers are active.</span></span><br><span class="line">  <span class="comment">// 首先确保对应的 controller 运行正常</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">areControllersActive</span>(context-&gt;controllers_))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// get the controller handles needed to execute the new trajectory</span></span><br><span class="line">    <span class="function">std::vector&lt;moveit_controller_manager::MoveItControllerHandlePtr&gt; <span class="title">handles</span><span class="params">(context-&gt;controllers_.size())</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; context-&gt;controllers_.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      moveit_controller_manager::MoveItControllerHandlePtr h;</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">        h = controller_manager_-&gt;<span class="built_in">getControllerHandle</span>(context-&gt;controllers_[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">catch</span> (std::exception&amp; ex)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">ROS_ERROR_NAMED</span>(name_, <span class="string">&quot;%s caught when retrieving controller handle&quot;</span>, ex.<span class="built_in">what</span>());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!h)</span><br><span class="line">      &#123;</span><br><span class="line">        last_execution_status_ = moveit_controller_manager::ExecutionStatus::ABORTED;</span><br><span class="line">        <span class="built_in">ROS_ERROR_NAMED</span>(name_, <span class="string">&quot;No controller handle for controller &#x27;%s&#x27;. Aborting.&quot;</span>,</span><br><span class="line">                        context-&gt;controllers_[i].<span class="built_in">c_str</span>());</span><br><span class="line">        handles.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      handles[i] = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 过程中接收到 stop 事件或线程停止运行,则中断执行</span></span><br><span class="line">    <span class="keyword">if</span> (stop_continuous_execution_ || !run_continuous_execution_thread_)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">delete</span> context;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// push all trajectories to all controllers simultaneously</span></span><br><span class="line">    <span class="keyword">if</span> (!handles.<span class="built_in">empty</span>())</span><br><span class="line">      <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; context-&gt;trajectory_parts_.<span class="built_in">size</span>(); ++i)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">          ok = handles[i]-&gt;<span class="built_in">sendTrajectory</span>(context-&gt;trajectory_parts_[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">catch</span> (std::exception&amp; ex)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">ROS_ERROR_NAMED</span>(name_, <span class="string">&quot;Caught %s when sending trajectory to controller&quot;</span>, ex.<span class="built_in">what</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ok)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">for</span> (std::<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">              handles[j]-&gt;<span class="built_in">cancelExecution</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">catch</span> (std::exception&amp; ex)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="built_in">ROS_ERROR_NAMED</span>(name_, <span class="string">&quot;Caught %s when canceling execution&quot;</span>, ex.<span class="built_in">what</span>());</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="built_in">ROS_ERROR_NAMED</span>(name_, <span class="string">&quot;Failed to send trajectory part %zu of %zu to controller %s&quot;</span>, i + <span class="number">1</span>,</span><br><span class="line">                          context-&gt;trajectory_parts_.<span class="built_in">size</span>(), handles[i]-&gt;<span class="built_in">getName</span>().<span class="built_in">c_str</span>());</span><br><span class="line">          <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">ROS_ERROR_NAMED</span>(name_, <span class="string">&quot;Cancelling previously sent trajectory parts&quot;</span>);</span><br><span class="line">          last_execution_status_ = moveit_controller_manager::ExecutionStatus::ABORTED;</span><br><span class="line">          handles.<span class="built_in">clear</span>();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">delete</span> context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remember which handles we used</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> moveit_controller_manager::MoveItControllerHandlePtr&amp; handle : handles)</span><br><span class="line">      used_handles.<span class="built_in">insert</span>(handle);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">ROS_ERROR_NAMED</span>(name_, <span class="string">&quot;Not all needed controllers are active. Cannot push and execute. You can try &quot;</span></span><br><span class="line">                           <span class="string">&quot;calling ensureActiveControllers() before pushAndExecute()&quot;</span>);</span><br><span class="line">    last_execution_status_ = moveit_controller_manager::ExecutionStatus::ABORTED;</span><br><span class="line">    <span class="keyword">delete</span> context;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>executeThread 接口</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">TrajectoryExecutionManager::executeThread</span><span class="params">(<span class="type">const</span> ExecutionCompleteCallback&amp; callback,</span></span></span><br><span class="line"><span class="params"><span class="function">                                               <span class="type">const</span> PathSegmentCompleteCallback&amp; part_callback, <span class="type">bool</span> auto_clear)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// if we already got a stop request before we even started anything, we abort</span></span><br><span class="line">  <span class="keyword">if</span> (execution_complete_)</span><br><span class="line">  &#123;</span><br><span class="line">    last_execution_status_ = moveit_controller_manager::ExecutionStatus::ABORTED;</span><br><span class="line">    <span class="keyword">if</span> (callback)</span><br><span class="line">      <span class="built_in">callback</span>(last_execution_status_);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ROS_DEBUG_NAMED</span>(name_, <span class="string">&quot;Starting trajectory execution ...&quot;</span>);</span><br><span class="line">  <span class="comment">// assume everything will be OK</span></span><br><span class="line">  last_execution_status_ = moveit_controller_manager::ExecutionStatus::SUCCEEDED;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// execute each trajectory, one after the other (executePart() is blocking) or until one fails.</span></span><br><span class="line">  <span class="comment">// on failure, the status is set by executePart(). Otherwise, it will remain as set above (success)</span></span><br><span class="line">  std::<span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; trajectories_.<span class="built_in">size</span>(); ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 最终调用 MoveItControllerHandlePtr 中的 sendTrajectory </span></span><br><span class="line">    <span class="comment">//     -&gt; FollowJointTrajectoryControllerHandle::sendTrajectory 通过</span></span><br><span class="line">    <span class="comment">//     follow_joint_trajectory actionlib 发布 goal</span></span><br><span class="line">    <span class="type">bool</span> epart = <span class="built_in">executePart</span>(i);</span><br><span class="line">    <span class="keyword">if</span> (epart &amp;&amp; part_callback)</span><br><span class="line">      <span class="built_in">part_callback</span>(i);</span><br><span class="line">    <span class="keyword">if</span> (!epart || execution_complete_)</span><br><span class="line">    &#123;</span><br><span class="line">      ++i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// only report that execution finished successfully when the robot actually stopped moving</span></span><br><span class="line">  <span class="keyword">if</span> (last_execution_status_ == moveit_controller_manager::ExecutionStatus::SUCCEEDED)</span><br><span class="line">    <span class="built_in">waitForRobotToStop</span>(*trajectories_[i - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ROS_INFO_NAMED</span>(name_, <span class="string">&quot;Completed trajectory execution with status %s ...&quot;</span>, last_execution_status_.<span class="built_in">asString</span>().<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// notify whoever is waiting for the event of trajectory completion</span></span><br><span class="line">  execution_state_mutex_.<span class="built_in">lock</span>();</span><br><span class="line">  execution_complete_ = <span class="literal">true</span>;</span><br><span class="line">  execution_state_mutex_.<span class="built_in">unlock</span>();</span><br><span class="line">  execution_complete_condition_.<span class="built_in">notify_all</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// clear the paths just executed, if needed</span></span><br><span class="line">  <span class="keyword">if</span> (auto_clear)</span><br><span class="line">    <span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// call user-specified callback</span></span><br><span class="line">  <span class="keyword">if</span> (callback)</span><br><span class="line">    <span class="built_in">callback</span>(last_execution_status_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>源码分析</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="MoveIt-软件结构"><a href="#MoveIt-软件结构" class="headerlink" title="MoveIt! 软件结构"></a>MoveIt! 软件结构</h1><p>主要包括：</p>
<ul>
<li><p><a href="https://github.com/ros-planning/moveit">moveit</a>：</p>
</li>
<li><ul>
<li><strong>moveit_core</strong>：核心功能，包括了 MoveIt 中用于运动学，规划场景，约束，运动规划，碰撞检查和插件界面的核心组件</li>
<li><strong>moveit_ros_planning</strong>：规划组件，执行管理器，插件加载器</li>
<li><strong>moveit_ros_move_group</strong>：move_group 主节点，用于通过 ROS 消息使用 MoveIt</li>
<li><strong>moveit_ros_planning_interface</strong>：与 move_group 通信的 Python 及 ROS 消息接口</li>
<li><strong>moveit_ros_perception</strong>：Octomap 和其它感知插件</li>
<li><strong>moveit_ros_manipulation</strong>：高级 pick and place pipeline</li>
<li><strong>moveit_ros_robot_interaction</strong>：Interactive marker tools for Rviz</li>
<li><strong>moveit_ros_visualization</strong>：Rviz tools</li>
<li><strong>moveit_ros_warehouse</strong>：用于存储场景和配置数据的数据库插件</li>
<li><strong>moveit_ros_benchmarks</strong>：使用 PlannerArena 进行压测</li>
<li><strong>moveit_ros</strong>：Metapackage</li>
<li><strong>moveit_planners</strong>：Metapackage</li>
<li><strong>moveit_planners_ompl</strong>：OMPL 插件</li>
<li><strong>moveit_commander</strong>：终端控制接口</li>
<li><strong>moveit_setup_assistant</strong>：</li>
<li><strong>moveit_plugins</strong>：controller managers 插件</li>
<li><strong>chomp_motion_planner</strong>：高效运动规划的梯度优化技术</li>
<li><strong>chomp_interface</strong>：用于在 MoveIt! 中使用 CHOMP 的adapter</li>
</ul>
</li>
<li><p><a href="https://github.com/ros-planning/moveit_msgs">moveit_msgs</a>：</p>
</li>
<li><p><a href="https://github.com/ros-planning/moveit_task_constructor">moveit_task_constructor</a>：一种分层、多阶段操作规划方法</p>
</li>
<li><p><a href="https://github.com/ros-planning/moveit_grasps">moveit_grasps</a>：A geometric-based grasp generation library for manipulation</p>
</li>
<li><p><a href="https://github.com/ros-planning/moveit_visual_tools">moveit_visual_tools</a>：RViz 插件</p>
</li>
<li><p><a href="https://github.com/ros-planning/moveit_resources">moveit_resources</a>：大型文件资产，如测试机器人</p>
</li>
<li><p><a href="https://github.com/ros-planning/moveit_calibration">moveit_calibration</a>：手眼标定程序</p>
</li>
<li><p><a href="https://github.com/ros-planning/moveit_advanced">moveit_advanced</a>：实验性先进功能</p>
</li>
<li><p><a href="https://github.com/ros-planning/moveit_ci">moveit_ci</a>：script to run with Travis for continuous integration</p>
</li>
<li><p><a href="https://github.com/ros-visualization/rqt_moveit/">rqt_moveit</a>：</p>
</li>
<li><p><a href="https://github.com/ros-planning/srdfdom">srdfdom</a>：</p>
</li>
</ul>
<p>由 ros-planning MoveIt 团队维护的依赖项:</p>
<ul>
<li><a href="https://github.com/ros-planning/warehouse_ros">warehouse_ros</a>：Abstract interface for persisting ROS message data</li>
<li><a href="https://github.com/ros-planning/random_numbers">random_numbers</a>：package for generating random numbers</li>
</ul>
<p>其它代码仓库：</p>
<ul>
<li><a href="https://github.com/ros-planning/moveit_tutorials">moveit_tutorials</a> - step by step examples for learning MoveIt</li>
<li><a href="https://github.com/ros-planning/moveit_example_apps">moveit_example_apps</a> - sandbox of example high level application code</li>
</ul>
<p><img src="D:\workspace\my-notes\blog\source_posts\机械臂\MoveIt\源码分析\源码分析\image-20240917203345782.png" alt="image-20240917203345782"></p>
<p>提供四个 API：</p>
<ul>
<li><p>Move Group Interface：包括</p>
</li>
<li><ul>
<li><a href="http://docs.ros.org/en/noetic/api/moveit_ros_planning/html/classmoveit__cpp_1_1MoveItCpp.html">MoveItCpp class</a>：主要的，新的，更快的 C++ 接口。推荐使用这个接口给需要更多实时控制的高级用户或工业应用程序</li>
<li><a href="http://docs.ros.org/noetic/api/moveit_ros_planning_interface/html/classmoveit_1_1planning__interface_1_1MoveGroupInterface.html">MoveGroupInterface class</a>：move_group_node 的 main  c++ 接口。MoveGroupInterface 是旧版本中 MoveGroup 类的继承者，现在已弃用</li>
<li><a href="http://docs.ros.org/noetic/api/moveit_ros_planning_interface/html/classmoveit_1_1planning__interface_1_1PlanningSceneInterface.html">PlanningSceneInterface class</a>：</li>
<li><a href="http://docs.ros.org/noetic/api/moveit_commander/html/index.html">MoveIt commander</a>：</li>
</ul>
</li>
<li><p>MoveIt ROS：适用于高级开发人员</p>
</li>
<li><ul>
<li><a href="http://docs.ros.org/noetic/api/moveit_ros_planning/html">Planning</a>：planning 组件，特别是规划场景、运动学和监视器</li>
<li><a href="http://docs.ros.org/noetic/api/moveit_ros_move_group/html">Move Group</a>：<em>move_group_node</em></li>
<li><a href="http://docs.ros.org/noetic/api/moveit_ros_perception/html">Perception</a>：感知组件</li>
<li><a href="http://docs.ros.org/noetic/api/moveit_ros_robot_interaction/html">Robot Interaction</a>：交互组件</li>
</ul>
</li>
<li><p>MoveIt Core：适用于高级开发人员</p>
</li>
<li><ul>
<li><a href="http://docs.ros.org/noetic/api/moveit_core/html">Core</a>：MoveIt 的核心组件为运动学，规划场景，约束，运动规划，碰撞检查和插件接口</li>
</ul>
</li>
<li><p>MoveIt OMPL Interface：适用于高级开发人员</p>
</li>
<li><ul>
<li><a href="http://docs.ros.org/noetic/api/moveit_planners_ompl/html">OMPL Interface</a>：允许MoveIt与OMPL对话的类集</li>
</ul>
</li>
</ul>
<h1 id="发送轨迹"><a href="#发送轨迹" class="headerlink" title="发送轨迹"></a>发送轨迹</h1><p><code>FollowJointTrajectoryControllerHandle::sendTrajectory</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">FollowJointTrajectoryControllerHandle::sendTrajectory</span><span class="params">(<span class="type">const</span> moveit_msgs::RobotTrajectory&amp; trajectory)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">ROS_DEBUG_STREAM_NAMED</span>(LOGNAME, <span class="string">&quot;new trajectory to &quot;</span> &lt;&lt; name_);</span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  <span class="keyword">if</span> (!controller_action_client_)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!trajectory.multi_dof_joint_trajectory.points.<span class="built_in">empty</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">ROS_WARN_NAMED</span>(LOGNAME, <span class="string">&quot;%s cannot execute multi-dof trajectories.&quot;</span>, name_.<span class="built_in">c_str</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (done_)</span><br><span class="line">    <span class="built_in">ROS_DEBUG_STREAM_NAMED</span>(LOGNAME, <span class="string">&quot;sending trajectory to &quot;</span> &lt;&lt; name_);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">ROS_DEBUG_STREAM_NAMED</span>(LOGNAME, <span class="string">&quot;sending continuation for the currently executed trajectory to &quot;</span> &lt;&lt; name_);</span><br><span class="line"></span><br><span class="line">  control_msgs::FollowJointTrajectoryGoal goal = goal_template_;</span><br><span class="line">  goal.trajectory = trajectory.joint_trajectory;</span><br><span class="line">  <span class="comment">// 通过 follow_joint_trajectory actionlib 发送 goal</span></span><br><span class="line">  controller_action_client_-&gt;<span class="built_in">sendGoal</span>(</span><br><span class="line">      goal, boost::<span class="built_in">bind</span>(&amp;FollowJointTrajectoryControllerHandle::controllerDoneCallback, <span class="keyword">this</span>, _1, _2),</span><br><span class="line">      boost::<span class="built_in">bind</span>(&amp;FollowJointTrajectoryControllerHandle::controllerActiveCallback, <span class="keyword">this</span>),</span><br><span class="line">      boost::<span class="built_in">bind</span>(&amp;FollowJointTrajectoryControllerHandle::controllerFeedbackCallback, <span class="keyword">this</span>, _1));</span><br><span class="line">  done_ = <span class="literal">false</span>;</span><br><span class="line">  last_exec_ = moveit_controller_manager::ExecutionStatus::RUNNING;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>机械臂驱动程序(如：kinova_driver 包中的 joint_trajectory_action_server.cpp)中实现 follow_joint_trajectory action server。此处还注册了轨迹执行完成回调函数及轨迹执行过程 feedback 回调函数。</p>
<p>轨迹执行完成(成功&#x2F;失败)回调函数 controllerDoneCallback：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FollowJointTrajectoryControllerHandle::controllerDoneCallback</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> actionlib::SimpleClientGoalState&amp; state, <span class="type">const</span> control_msgs::FollowJointTrajectoryResultConstPtr&amp; result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// Output custom error message for FollowJointTrajectoryResult if necessary</span></span><br><span class="line">  <span class="keyword">if</span> (!result)</span><br><span class="line">    <span class="built_in">ROS_WARN_STREAM_NAMED</span>(LOGNAME, <span class="string">&quot;Controller &quot;</span> &lt;&lt; name_ &lt;&lt; <span class="string">&quot; done, no result returned&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (result-&gt;error_code == control_msgs::FollowJointTrajectoryResult::SUCCESSFUL)</span><br><span class="line">    <span class="built_in">ROS_INFO_STREAM_NAMED</span>(LOGNAME, <span class="string">&quot;Controller &quot;</span> &lt;&lt; name_ &lt;&lt; <span class="string">&quot; successfully finished&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">ROS_WARN_STREAM_NAMED</span>(LOGNAME, <span class="string">&quot;Controller &quot;</span> &lt;&lt; name_ &lt;&lt; <span class="string">&quot; failed with error &quot;</span></span><br><span class="line">                                                 &lt;&lt; <span class="built_in">errorCodeToMessage</span>(result-&gt;error_code) &lt;&lt; <span class="string">&quot;: &quot;</span></span><br><span class="line">                                                 &lt;&lt; result-&gt;error_string);</span><br><span class="line">  <span class="comment">// 结束轨迹执行                                               </span></span><br><span class="line">  <span class="built_in">finishControllerExecution</span>(state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>finishControllerExecution</code> 接口中设置 <code>last_exec_</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">finishControllerExecution</span><span class="params">(<span class="type">const</span> actionlib::SimpleClientGoalState&amp; state)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">ROS_DEBUG_STREAM_NAMED</span>(<span class="string">&quot;ActionBasedController&quot;</span>, <span class="string">&quot;Controller &quot;</span> &lt;&lt; name_ &lt;&lt; <span class="string">&quot; is done with state &quot;</span> &lt;&lt; state.<span class="built_in">toString</span>()</span><br><span class="line">                                                                  &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; state.<span class="built_in">getText</span>());</span><br><span class="line">    <span class="keyword">if</span> (state == actionlib::SimpleClientGoalState::SUCCEEDED)</span><br><span class="line">      last_exec_ = moveit_controller_manager::ExecutionStatus::SUCCEEDED;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state == actionlib::SimpleClientGoalState::ABORTED)</span><br><span class="line">      last_exec_ = moveit_controller_manager::ExecutionStatus::ABORTED;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state == actionlib::SimpleClientGoalState::PREEMPTED)</span><br><span class="line">      last_exec_ = moveit_controller_manager::ExecutionStatus::PREEMPTED;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      last_exec_ = moveit_controller_manager::ExecutionStatus::FAILED;</span><br><span class="line">    done_ = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>并通过 <code>getLastExecutionStatus</code> 方法为上层调用(如：trajectory_execution_manager.cpp 中的 <code>continuousExecutionThread</code> 接口)返回轨迹执行状态。</p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>Deep Grasps</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E7%A4%BA%E4%BE%8B/Deep%20Grasps/</url>
    <content><![CDATA[<p>演示在 MoveIt Task Constructor 中使用 <a href="https://github.com/atenpas/gpd">GPD(Grasp Pose Detection)</a> 和 <a href="https://berkeleyautomation.github.io/dex-net/">Dex-Net</a> 进行抓取。</p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>示例</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>Grasps</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E7%A4%BA%E4%BE%8B/Grasps/</url>
    <content><![CDATA[<p><a href="https://github.com/ros-planning/moveit_grasps.git">MoveIt Grasps </a>是一个 grasp generator。可以用作 MoveIt pick and place 的替代品。MoveIt Grasps 提供了基于可达性和笛卡尔式的接近、提升和撤退运动的抓取过滤功能。</p>
<p>抓取生成算法<strong>基于简单的长方体形状</strong>，不考虑摩擦锥或其他抓取动态。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> -b <span class="variable">$ROS_DISTRO</span>-devel https://github.com/ros-planning/moveit_grasps.git</span>   </span><br></pre></td></tr></table></figure>

<p>​           </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行 demos 前，需启动 rviz.launch.默认使用两指夹持器,也可切换为 suction 夹持器</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch moveit_grasps rviz.launch roslaunch moveit_grasps rviz.launch gripper:=suction</span></span><br></pre></td></tr></table></figure>

<p>注意：panda_moveit_config 的发布版本可能会滞后。如果 demo 运行有问题，可下载 panda_moveit_config 源码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完整demo.需修改 launch 文件中的 ee_group_name 为 panda_hand</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch moveit_grasps grasp_pipeline_demo.launch</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可视化 gripper 参数</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch moveit_grasps grasp_poses_visualizer_demo.launch</span> </span><br></pre></td></tr></table></figure>

<p>​             </p>
<p>Visualize Grasp Generation</p>
<p>该工具演示了在抓取生成过程中如何打分的几个概念。它基于所选择的抓取使用以下方法:</p>
<ul>
<li>Ideal TCP Grasp Pose：</li>
<li>Pose-Based Grasp Score Weighting：</li>
<li>Depth-Based Grasp Score Weighting：</li>
<li>Width-Based Grasp Score Weighting：</li>
<li>Overhange Grasp Score Weighting：</li>
</ul>
<p>Grasp Filter</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"> roslaunch moveit_grasps grasp_filter_demo.launch</span> </span><br></pre></td></tr></table></figure>

<p>​             </p>
<ul>
<li>RED：由ik过滤的抓取</li>
<li>PINK：碰撞过滤抓取</li>
<li>MAGENTA：cutting 平面过滤的抓取</li>
<li>YELLOW：方向过滤的抓取</li>
<li>BLUE：IK 过滤的预抓取</li>
<li>CYAN：碰撞过滤的预抓取</li>
<li>GGEEN：可用</li>
</ul>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>示例</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>Mobile Manipulation</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E7%A4%BA%E4%BE%8B/Mobile%20Manipulation/</url>
    <content><![CDATA[<p>参考：<a href="https://jderobot.github.io/RoboticsAcademy/exercises/IndustrialRobots/mobile_manipulation">Robotics-Academy Mobile Manipulation</a></p>
<p>两种运行方式：</p>
<ul>
<li>ROSNode Templates</li>
<li>Web Templates</li>
</ul>
<p>使用移动机械手(AGV+机械臂+夹持器)在一个传送带上拾取物体，并将其放置在其他三个传送带(<strong>conveyors</strong>)上。</p>
<p>本例使用 Neobotix：MMO-500。包含 MPO-500 移动底盘 + UR10 机械臂。</p>
<p>1、介绍</p>
<p>1）安装</p>
<p>windows 用户应选择 WSL2 backend Docker 安装，因为它的性能优于Hyper-V。</p>
<p>下载 Academy Docker Image</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull jderobot/robotics-academy:2.4.2</span></span><br></pre></td></tr></table></figure>

<p>为了获得最佳性能，Docker 应该使用多个 CPU 内核。</p>
<p>2）使能 GPU 加速</p>
<p>安装 <a href="https://virtualgl.org/">VirtualGL</a>，然后执行以下指令运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --<span class="built_in">rm</span> -it --device /dev/dri -p 8000:8000 -p 2303:2303 -p 1905:1905 -p 8765:8765 -p 6080:6080 -p 1108:1108 jderobot/robotics-academy:2.4.2 ./start.sh</span></span><br></pre></td></tr></table></figure>



<p>3）测试</p>
<p>后台启动新的 docker 容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --<span class="built_in">rm</span> -it -p 8000:8000 -p 2303:2303 -p 1905:1905 -p 8765:8765 -p 6080:6080 -p 1108:1108 jderobot/robotics-academy:2.4.2 ./start.sh</span></span><br></pre></td></tr></table></figure>

<p>本机浏览器进入 127.0.0.1：8000，连接。</p>
<p>2、ROSNode Templates</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-melodic-eband-local-planner</span><br><span class="line">sudo apt-get install ros-melodic-amcl</span><br><span class="line">sudo apt-get install ros-melodic-openslam-gmapping</span><br><span class="line">sudo apt-get install ros-melodic-navigation</span><br><span class="line"></span><br><span class="line">mkdir -p catkin_ws/src</span><br><span class="line">cd catkin_ws/src</span><br><span class="line">git clone https://github.com/JdeRobot/IndustrialRobotics.git -b melodic_devel</span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">rosdep update</span><br><span class="line">rosdep check --from-paths . --ignore-src --rosdistro melodic</span><br><span class="line">rosdep install --from-paths . --ignore-src --rosdistro melodic -y</span><br><span class="line"></span><br><span class="line">catkin build</span><br><span class="line"></span><br><span class="line">echo &#x27;source &#x27;$PWD&#x27;/devel/setup.bash&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &#x27;export GAZEBO_MODEL_PATH=$&#123;GAZEBO_MODEL_PATH&#125;:&#x27;$PWD&#x27;/src/IndustrialRobotics/assets/models&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>



<p>3、使用</p>
<p>进入 exercises 目录中的 mobile_manipulation 包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch mobile_manipulation.launch</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 mobile manupulator teleoprator</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch mobile_manipulation_gui.launch</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python MyAlgorithm.py</span></span><br></pre></td></tr></table></figure>

<p>该练习必须编辑 MyAlgorithm.py文件并在 <code>myalgorithm()</code> 函数中插入控制逻辑。在编写主要逻辑之前，应该实现 <code>move_to()</code> 函数来导航移动机器人并将其移动到给定的目标。</p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>示例</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>Pick and Place</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E7%A4%BA%E4%BE%8B/Pick%20and%20Place/</url>
    <content><![CDATA[<p>MoveIt 中，grasp 是使用 MoveGroup 接口完成的。为了抓住一个对象，需要创建 moveit_msgs::Grasp 消息，该消息允许定义抓取操作中涉及的各种姿势和姿势。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch panda_moveit_config demo.launch</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun moveit_tutorials pick_place_tutorial</span></span><br></pre></td></tr></table></figure>

<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E7%A4%BA%E4%BE%8B/Pick%20and%20Place/image-20240917202430106.png" class="" title="image-20240917202430106">

<p>创建 vector 用于存放在 rviz 上显示的三个目标(table1、table2 及 抓取目标)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;moveit_msgs::CollisionObject&gt; collision_objects;</span><br><span class="line">collision_objects.<span class="built_in">resize</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"># table1</span><br><span class="line">collision_objects[<span class="number">0</span>].id = <span class="string">&quot;table1&quot;</span>;</span><br><span class="line">collision_objects[<span class="number">0</span>].header.frame_id = <span class="string">&quot;panda_link0&quot;</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># table2</span><br><span class="line">collision_objects[<span class="number">1</span>].id = <span class="string">&quot;table2&quot;</span>;</span><br><span class="line">collision_objects[<span class="number">1</span>].header.frame_id = <span class="string">&quot;panda_link0&quot;</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 抓取目标</span><br><span class="line">collision_objects[<span class="number">2</span>].header.frame_id = <span class="string">&quot;panda_link0&quot;</span>;</span><br><span class="line">collision_objects[<span class="number">2</span>].id = <span class="string">&quot;object&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>其中，panda_link0 为 panda 机械臂的 base 坐标系。</p>
<p>Pick Pipeline</p>
<p>创建要尝试的 grasp 向量，当前仅创建单个 grasp。当使用 grasp 生成器生成和测试 multiple grasps 时很有用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;moveit_msgs::Grasp&gt; grasps;</span><br><span class="line">grasps.<span class="built_in">resize</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<p>设置 grasp 位姿</p>
<p>即：panda_link8(即:末端法兰 TCP) 的位姿。本例中，从 panda_link8 到 EEF(end effector) 的手掌的距离为 0.058， the cube starts 0.01 before 5.0 (half of the length of the cube - 立方体长度的一半)。</p>
<p>因此， panda_link8 的位置为：</p>
<p>panda_link8 &#x3D; 5 - (length of cube&#x2F;2 - distance b&#x2F;w panda_link8 and palm of eef - some extra padding)，即：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">panda_link8 = 5 - (立方体长度/2 - 距离b/w panda_link8 与 eef 手掌之间的裕度)</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">grasps[<span class="number">0</span>].grasp_pose.header.frame_id = <span class="string">&quot;panda_link0&quot;</span>;</span><br><span class="line">tf2::Quaternion orientation;</span><br><span class="line">orientation.<span class="built_in">setRPY</span>(-M_PI / <span class="number">2</span>, -M_PI / <span class="number">4</span>, -M_PI / <span class="number">2</span>);</span><br><span class="line">grasps[<span class="number">0</span>].grasp_pose.pose.orientation = tf2::<span class="built_in">toMsg</span>(orientation);</span><br><span class="line">grasps[<span class="number">0</span>].grasp_pose.pose.position.x = <span class="number">0.415</span>;</span><br><span class="line">grasps[<span class="number">0</span>].grasp_pose.pose.position.y = <span class="number">0</span>;</span><br><span class="line">grasps[<span class="number">0</span>].grasp_pose.pose.position.z = <span class="number">0.5</span>;</span><br></pre></td></tr></table></figure>



<p>设置 pre-grasp 方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Defined with respect to frame_id */</span></span><br><span class="line">grasps[<span class="number">0</span>].pre_grasp_approach.direction.header.frame_id = <span class="string">&quot;panda_link0&quot;</span>;</span><br><span class="line"><span class="comment">/* Direction is set as positive x axis */</span></span><br><span class="line">grasps[<span class="number">0</span>].pre_grasp_approach.direction.vector.x = <span class="number">1.0</span>;</span><br><span class="line">grasps[<span class="number">0</span>].pre_grasp_approach.min_distance = <span class="number">0.095</span>;</span><br><span class="line">grasps[<span class="number">0</span>].pre_grasp_approach.desired_distance = <span class="number">0.115</span>;</span><br></pre></td></tr></table></figure>



<p>设置 post-grasp retreat</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Defined with respect to frame_id */</span></span><br><span class="line">grasps[<span class="number">0</span>].post_grasp_retreat.direction.header.frame_id = <span class="string">&quot;panda_link0&quot;</span>;</span><br><span class="line"><span class="comment">/* Direction is set as positive z axis */</span></span><br><span class="line">grasps[<span class="number">0</span>].post_grasp_retreat.direction.vector.z = <span class="number">1.0</span>;</span><br><span class="line">grasps[<span class="number">0</span>].post_grasp_retreat.min_distance = <span class="number">0.1</span>;</span><br><span class="line">grasps[<span class="number">0</span>].post_grasp_retreat.desired_distance = <span class="number">0.25</span>;</span><br></pre></td></tr></table></figure>



<p>在抓取前设置 EEF 的 posture</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">openGripper</span>(grasps[<span class="number">0</span>].pre_grasp_posture);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Add both finger joints of panda robot. */</span></span><br><span class="line">posture.joint_names.<span class="built_in">resize</span>(<span class="number">2</span>);</span><br><span class="line">posture.joint_names[<span class="number">0</span>] = <span class="string">&quot;panda_finger_joint1&quot;</span>;</span><br><span class="line">posture.joint_names[<span class="number">1</span>] = <span class="string">&quot;panda_finger_joint2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set them as open, wide enough for the object to fit. */</span></span><br><span class="line">posture.points.<span class="built_in">resize</span>(<span class="number">1</span>);</span><br><span class="line">posture.points[<span class="number">0</span>].positions.<span class="built_in">resize</span>(<span class="number">2</span>);</span><br><span class="line">posture.points[<span class="number">0</span>].positions[<span class="number">0</span>] = <span class="number">0.04</span>;</span><br><span class="line">posture.points[<span class="number">0</span>].positions[<span class="number">1</span>] = <span class="number">0.04</span>;</span><br><span class="line">posture.points[<span class="number">0</span>].time_from_start = ros::<span class="built_in">Duration</span>(<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>示例</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>画圆弧</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E7%A4%BA%E4%BE%8B/%E7%94%BB%E5%9C%86%E5%BC%A7/</url>
    <content><![CDATA[<p>将圆弧轨迹微分为一段段的小直线段，作为 waypoint，再调用 compute_cartesian_path</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">geometry_msgs::Pose target_pose;</span><br><span class="line">target_pose.orientation.x = <span class="number">0.14858</span>;</span><br><span class="line">target_pose.orientation.y = <span class="number">0.73236</span>;</span><br><span class="line">target_pose.orientation.z = -<span class="number">0.03444</span>;</span><br><span class="line">target_pose.orientation.w = <span class="number">0.66362</span>;</span><br><span class="line"></span><br><span class="line">target_pose.position.x = -<span class="number">0.050308</span>;</span><br><span class="line">target_pose.position.y = -<span class="number">0.039851</span>;</span><br><span class="line">target_pose.position.z = <span class="number">0.78264</span>;</span><br><span class="line"></span><br><span class="line">arm.setPoseTarget(target_pose);</span><br><span class="line">arm.move();//首先运动到圆心的位置</span><br><span class="line"></span><br><span class="line">std::vector&lt;geometry_msgs::Pose&gt; waypoints;</span><br><span class="line">waypoints.push_back(target_pose); // 将初始位姿加入路点列表</span><br><span class="line"></span><br><span class="line">double centerA = target_pose.position.x;</span><br><span class="line">double centerB = target_pose.position.z;</span><br><span class="line">double radius = <span class="number">0.13</span>;</span><br><span class="line"><span class="keyword">for</span>(double th=<span class="number">0.0</span>; th&lt;<span class="number">6.28</span>; th=th+<span class="number">0.01</span>) // 圆心角间隔 <span class="number">0.01</span></span><br><span class="line">&#123;</span><br><span class="line">    target_pose.position.y = centerA + radius * cos(th);</span><br><span class="line">    target_pose.position.z = centerB + radius * sin(th);</span><br><span class="line">    waypoints.push_back(target_pose);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">moveit_msgs::RobotTrajectory trajectory;</span><br><span class="line">double fraction = <span class="number">0.0</span>;</span><br><span class="line"><span class="built_in">int</span> maxtries = <span class="number">100</span>;   //最大尝试规划次数</span><br><span class="line"><span class="built_in">int</span> attempts = <span class="number">0</span>;     //已经尝试规划次数</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(fraction &lt; <span class="number">1.0</span> &amp;&amp; attempts &lt; maxtries) &#123;</span><br><span class="line">    fraction = arm.computeCartesianPath(waypoints, <span class="number">0.01</span>, <span class="number">0.0</span>, trajectory);</span><br><span class="line">    attempts++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(attempts % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">        ROS_INFO(<span class="string">&quot;Still trying after %d attempts...&quot;</span>, attempts);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(fraction == <span class="number">1</span>) &#123;</span><br><span class="line">    moveit::planning_interface::MoveGroupInterface::Plan plan;</span><br><span class="line">    plan.trajectory_ = trajectory;</span><br><span class="line">    </span><br><span class="line">    // 可根据需要对要执行的轨迹进行其它处理,如: 轨迹插值等</span><br><span class="line">    </span><br><span class="line">    arm.execute(plan);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>参考：<a href="https://blog.csdn.net/huangjunsheng123/article/details/114760366">https://blog.csdn.net/huangjunsheng123/article/details/114760366</a></p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>双臂控制</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>API</title>
    <url>/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/API/</url>
    <content><![CDATA[<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/API/image-20240905213329902.png" class="" title="image-20240905213329902">

<p>BT::TheadedAction 会在 executeTick() 中创建线程(std::async)执行 tick()，通过 halt_requested_ 变量监控节点是否被终止。用户需在子类的 tick() 中周期检查 isHaltRequested() 返回值，以便及时终止执行</p>
<p>BT::StateFulActionNode 类似状态机运行方式。若节点为 IDLE 状态，调用 onStart()；若为 RUNNING 状态，则调用 onRunning()；若为 halt() 则调用 onHalted()。参考：reactive</p>
<h1 id="注册节点"><a href="#注册节点" class="headerlink" title="注册节点"></a>注册节点</h1><ul>
<li>静态注册</li>
<li>动态注册：从动态库(插件)加载节点</li>
</ul>
<p>相关接口</p>
<ul>
<li><code>registerBuilder</code></li>
<li><code>registerSimpleCondition</code></li>
<li><code>registerSimpleAction</code>：注册的是 <code>SyncActionNode</code>，此类节点不支持返回 <code>RUNNING</code></li>
<li><code>registerSimpleDecorator</code></li>
<li><code>registerFromPlugin</code></li>
<li><code>registerNodeType</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">BehaviorTreeFactory factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态注册，通过 BehaviorTreeFactory 相关接口一个个注册</span></span><br><span class="line">factory.<span class="built_in">registerNodeType</span>&lt;ApproachObject&gt;(<span class="string">&quot;ApproachObject&quot;</span>);</span><br><span class="line">factory.<span class="built_in">registerNodeType</span>&lt;Action_A&gt;(<span class="string">&quot;Action_A&quot;</span>, <span class="number">42</span>, <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">                                     std::<span class="built_in">ref</span>(non_copyable)); <span class="comment">// 支持传入参数</span></span><br><span class="line">factory.<span class="built_in">registerSimpleCondition</span>(<span class="string">&quot;CheckBattery&quot;</span>, [&amp;](TreeNode&amp;) &#123; <span class="keyword">return</span> <span class="built_in">CheckBattery</span>(); &#125;);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态注册</span></span><br><span class="line">factory.<span class="built_in">registerFromPlugin</span>(<span class="string">&quot;../sample_nodes/bin/libdummy_nodes_dyn.so&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="registerSimpleAction"><a href="#registerSimpleAction" class="headerlink" title="registerSimpleAction"></a><code>registerSimpleAction</code></h2><p>注册的是 <code>SyncActionNode</code>，此类节点不支持返回 <code>RUNNING</code>。<strong>实际是将其注册为回调函数 TickFunctor，然后在 SimpleActionNode::tick 中调用</strong>  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BehaviorTreeFactory::registerSimpleAction</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> std::string&amp; ID, <span class="type">const</span> SimpleActionNode::TickFunctor&amp; tick_functor,</span></span></span><br><span class="line"><span class="params"><span class="function">    PortsList ports)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 内部调用 registerBuilder</span></span><br><span class="line">  NodeBuilder builder = [tick_functor, ID](<span class="type">const</span> std::string&amp; name,</span><br><span class="line">                                           <span class="type">const</span> NodeConfig&amp; config) &#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">make_unique</span>&lt;SimpleActionNode&gt;(name, tick_functor, config);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  TreeNodeManifest manifest = &#123; NodeType::ACTION, ID, std::<span class="built_in">move</span>(ports), &#123;&#125; &#125;;</span><br><span class="line">  <span class="built_in">registerBuilder</span>(manifest, builder);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NodeStatus <span class="title">SimpleActionNode::tick</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  NodeStatus prev_status = <span class="built_in">status</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置运行状态为 RUNNING</span></span><br><span class="line">  <span class="keyword">if</span>(prev_status == NodeStatus::IDLE)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">setStatus</span>(NodeStatus::RUNNING);</span><br><span class="line">    prev_status = NodeStatus::RUNNING;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用注册的函数。当函数返回状态发生变化，则将更新节点状态</span></span><br><span class="line">  NodeStatus status = <span class="built_in">tick_functor_</span>(*<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">if</span>(status != prev_status)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">setStatus</span>(status);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">NodeStatus <span class="title">SyncActionNode::executeTick</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> stat = ActionNodeBase::<span class="built_in">executeTick</span>();</span><br><span class="line">  <span class="keyword">if</span>(stat == NodeStatus::RUNNING)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">LogicError</span>(<span class="string">&quot;SyncActionNode MUST never return RUNNING&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> stat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>使用方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test.h </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>: <span class="keyword">public</span> RosActionNode&lt;TestAction&gt; <span class="comment">// 使用 ROS action，消息类型为 TestAction</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">NodeStatus <span class="title">testFunc1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">NodeStatus <span class="title">testFunc2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">NodeStatus <span class="title">testFunc3</span><span class="params">(TreeNode&amp; self)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">RegisterManipulatorNode</span><span class="params">(BT::BehaviorTreeFactory&amp; factory, </span></span></span><br><span class="line"><span class="params"><span class="function">                                ros::NodeHandle&amp; node_handle, </span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="type">const</span> BT::NodeConfiguration &amp; config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 实例化 Test 类对象</span></span><br><span class="line">    <span class="function"><span class="type">static</span> Test <span class="title">test_singleton</span><span class="params">(node_handle, </span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="string">&quot;Test&quot;</span>, <span class="string">&quot;test_control&quot;</span>, config)</span></span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 注册 Test::testFunc1, 指定 bt action name 未 Test1</span></span><br><span class="line">    factory.<span class="built_in">registerSimpleAction</span>(<span class="string">&quot;Test1&quot;</span>, </span><br><span class="line">        std::<span class="built_in">bind</span>(&amp;Test::testFunc1, &amp;test_singleton));</span><br><span class="line">    factory.<span class="built_in">registerSimpleAction</span>(<span class="string">&quot;Test2&quot;</span>, [&amp;test_singleton](TreeNode&amp; self) -&gt; NodeStatus &#123;</span><br><span class="line">        <span class="keyword">return</span> test_singleton.<span class="built_in">testFunc2</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">	<span class="comment">// 指定 InputPort，xml 中可传入参数,例如 &lt;Test3 predef_pose=&quot;home&quot;/&gt;</span></span><br><span class="line">    factory.<span class="built_in">registerSimpleAction</span>(<span class="string">&quot;Test3&quot;</span>, </span><br><span class="line">        std::<span class="built_in">bind</span>(&amp;Test::testFunc3, &amp;test_singleton, std::placeholders::_1), </span><br><span class="line">        &#123; BT::<span class="built_in">InputPort</span>&lt;string&gt;(<span class="string">&quot;predef_pose&quot;</span>) &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="registerFromPlugin"><a href="#registerFromPlugin" class="headerlink" title="registerFromPlugin"></a><code>registerFromPlugin</code></h2><p>将行为节点编译为 so 库，然后通过 <strong><code>registerFromPlugin</code></strong> 进行注册。该方式调用 <strong><code>BT_REGISTER_NODES</code></strong> 进行注册。</p>
<p>例如：CrossDoor</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CrossDoor::registerNodes</span><span class="params">(BT::BehaviorTreeFactory&amp; factory)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// isDoorClosed 为 CrossDoor 类成员函数</span></span><br><span class="line">  factory.<span class="built_in">registerSimpleCondition</span>(<span class="string">&quot;IsDoorClosed&quot;</span>,</span><br><span class="line">                                  std::<span class="built_in">bind</span>(&amp;CrossDoor::isDoorClosed, <span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  factory.<span class="built_in">registerSimpleAction</span>(<span class="string">&quot;PassThroughDoor&quot;</span>,</span><br><span class="line">                               std::<span class="built_in">bind</span>(&amp;CrossDoor::passThroughDoor, <span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  factory.<span class="built_in">registerSimpleAction</span>(<span class="string">&quot;OpenDoor&quot;</span>, std::<span class="built_in">bind</span>(&amp;CrossDoor::openDoor, <span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  factory.<span class="built_in">registerSimpleAction</span>(<span class="string">&quot;PickLock&quot;</span>, std::<span class="built_in">bind</span>(&amp;CrossDoor::pickLock, <span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  factory.<span class="built_in">registerSimpleCondition</span>(<span class="string">&quot;SmashDoor&quot;</span>, std::<span class="built_in">bind</span>(&amp;CrossDoor::smashDoor, <span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 registerBuilder</span></span><br><span class="line">  factory.<span class="built_in">registerBuilder</span>&lt;SyncActionNode&gt;(<span class="string">&quot;OpenDoor&quot;</span>, </span><br><span class="line">        [&amp;robot](<span class="type">const</span> std::string&amp; name, <span class="type">const</span> NodeConfiguration&amp; config) &#123;</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">make_unique</span>&lt;SyncActionNode&gt;(</span><br><span class="line">                name, config, std::<span class="built_in">bind</span>(&amp;CrossDoor::openDoor, <span class="keyword">this</span>));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BT_REGISTER_NODES</span>(factory)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">static</span> CrossDoor cross_door;</span><br><span class="line">  cross_door.<span class="built_in">registerNodes</span>(factory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="BT-REGISTER-NODES"><a href="#BT-REGISTER-NODES" class="headerlink" title="BT_REGISTER_NODES"></a><code>BT_REGISTER_NODES</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BT_REGISTER_NODES(factory)  \</span></span><br><span class="line"><span class="meta"> 	BTCPP_EXPORT void BT_RegisterNodesFromPlugin(BT::BehaviorTreeFactory&amp; factory)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">const</span> <span class="type">char</span>* PLUGIN_SYMBOL = <span class="string">&quot;BT_RegisterNodesFromPlugin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BehaviorTreeFactory::registerFromPlugin</span><span class="params">(<span class="type">const</span> std::string&amp; file_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BT::SharedLibrary loader;</span><br><span class="line">    loader.<span class="built_in">load</span>(file_path);</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*Func)</span><span class="params">(BehaviorTreeFactory&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(loader.<span class="built_in">hasSymbol</span>(PLUGIN_SYMBOL))</span><br><span class="line">    &#123;</span><br><span class="line">        Func func = (Func)loader.<span class="built_in">getSymbol</span>(PLUGIN_SYMBOL);</span><br><span class="line">        <span class="built_in">func</span>(*<span class="keyword">this</span>); <span class="comment">// 即 BT_REGISTER_NODES 定义的函数 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ERROR loading library [&quot;</span> &lt;&lt; file_path &lt;&lt; <span class="string">&quot;]: can&#x27;t find symbol [&quot;</span></span><br><span class="line">           &lt;&lt; PLUGIN_SYMBOL &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用 <code>registerFromPlugin</code> 时，会执行 <code>BT_REGISTER_NODES</code> 定义的函数。</p>
<h1 id="创建-tree"><a href="#创建-tree" class="headerlink" title="创建 tree"></a>创建 tree</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> tree = factory.<span class="built_in">createTreeFromText</span>(xml_text);</span><br><span class="line"><span class="keyword">auto</span> tree = factory.<span class="built_in">createTreeFromFile</span>(xml_file);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载行为树,注意只加载不实例化</span></span><br><span class="line">factory.<span class="built_in">registerBehaviorTreeFromFile</span>(file);</span><br><span class="line"><span class="comment">// 实例化行为树</span></span><br><span class="line">tree = factory.<span class="built_in">createTree</span>(tree_id);</span><br></pre></td></tr></table></figure>











<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写 XML ⽂件</span></span><br><span class="line">BT::BehaviorTreeFactory factory;</span><br><span class="line">std::string xml_models = BT::<span class="built_in">writeTreeNodesModelXML</span>(factory);</span><br><span class="line"><span class="comment">// helper function to print the tree</span></span><br><span class="line">BT::<span class="built_in">printTreeRecursively</span>(tree.<span class="built_in">rootNode</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 blackboard 信息</span></span><br><span class="line">tree.<span class="built_in">rootBlackboard</span>()-&gt;<span class="built_in">debugMessage</span>()</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;\n------ First BB ------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">tree.subtrees[<span class="number">0</span>]-&gt;blackboard-&gt;<span class="built_in">debugMessage</span>();</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;\n------ Second BB------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">tree.subtrees[<span class="number">1</span>]-&gt;blackboard-&gt;<span class="built_in">debugMessage</span>();</span><br><span class="line"><span class="comment">// 遍历已注册的⾏为树</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> std::string&amp; bt_name : factory.<span class="built_in">registeredBehaviorTrees</span>())</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; bt_name &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使⽤ lambda 注册简单⾏为。只打印 name，并返回 SUCCESS</span></span><br><span class="line">factory.<span class="built_in">registerSimpleAction</span>(<span class="string">&quot;DummyAction&quot;</span>, [](BT::TreeNode&amp; self)&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;DummyAction substituting: &quot;</span>&lt;&lt; self.<span class="built_in">name</span>() &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">return</span> BT::NodeStatus::SUCCESS;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 BT::TreeObserver, 并打印 UID 及统计信息</span></span><br><span class="line"><span class="function">BT::TreeObserver <span class="title">observer</span><span class="params">(tree)</span></span>;</span><br><span class="line">std::map&lt;<span class="type">uint16_t</span>, std::string&gt; ordered_UID_to_path;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; [name, uid]: observer.<span class="built_in">pathToUID</span>()) &#123;</span><br><span class="line">	ordered_UID_to_path[uid] = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; [uid, name]: ordered_UID_to_path) &#123;</span><br><span class="line">	std::cout &lt;&lt; uid &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; name &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">tree.<span class="built_in">tickWhileRunning</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// getStatistics() ⽅法可使⽤ UID 或 path 获取统计信息</span></span><br><span class="line"><span class="comment">// last_action_stats = observer.getStatistics(&quot;last_action&quot;)</span></span><br><span class="line"><span class="comment">// print all the statistics</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; [uid, name]: ordered_UID_to_path) &#123;</span><br><span class="line">	<span class="type">const</span> <span class="keyword">auto</span>&amp; stats = observer.<span class="built_in">getStatistics</span>(uid); <span class="comment">// getStatistics() ⽅法</span></span><br><span class="line"> std::cout &lt;&lt; <span class="string">&quot;[&quot;</span> &lt;&lt; name</span><br><span class="line">    &lt;&lt; <span class="string">&quot;] \tT/S/F: &quot;</span> &lt;&lt; stats.transitions_count</span><br><span class="line">    &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; stats.success_count</span><br><span class="line">    &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; stats.failure_count</span><br><span class="line">    &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> visitor = [](TreeNode* node) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">auto</span> action_B_node = <span class="built_in">dynamic_cast</span>&lt;Action_B*&gt;(node))</span><br><span class="line">    &#123;</span><br><span class="line">      action_B_node-&gt;<span class="built_in">initialize</span>(<span class="number">69</span>, <span class="string">&quot;interesting_value&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="comment">// apply the visitor to all the nodes of the tree</span></span><br><span class="line">tree.<span class="built_in">applyVisitor</span>(visitor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以 uid -&gt; path 形式输出行为树</span></span><br><span class="line">std::map&lt;<span class="type">int</span>, std::string&gt; UID_to_path;  </span><br><span class="line">tree.<span class="built_in">applyVisitor</span>([&amp;UID_to_path](BT::TreeNode* node) &#123;</span><br><span class="line">    UID_to_path[node-&gt;<span class="built_in">UID</span>()] = node-&gt;<span class="built_in">fullPath</span>();</span><br><span class="line">    std::cout &lt;&lt; node-&gt;<span class="built_in">UID</span>() &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; node-&gt;<span class="built_in">fullPath</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">lifecycle_nodes = [<span class="string">&#x27;controller_server&#x27;</span>,</span><br><span class="line">        	<span class="string">&#x27;smoother_server&#x27;</span>,</span><br><span class="line">        	<span class="string">&#x27;planner_server&#x27;</span>,</span><br><span class="line">        	<span class="string">&#x27;behavior_server&#x27;</span>,</span><br><span class="line">        	<span class="string">&#x27;bt_navigator&#x27;</span>,</span><br><span class="line">        	<span class="string">&#x27;waypoint_follower&#x27;</span>,</span><br><span class="line">        	<span class="string">&#x27;velocity_smoother&#x27;</span>]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>行为树</category>
      </categories>
      <tags>
        <tag>行为树</tag>
        <tag>状态机</tag>
      </tags>
  </entry>
  <entry>
    <title>BehaviorTreeCPP使用</title>
    <url>/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/BehaviorTreeCPP%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>参考：</p>
<ul>
<li><a href="https://arxiv.org/pdf/1709.00084">Behavior Trees in Robotics and AI</a></li>
<li><a href="https://github.com/miccol/ROS-Behavior-Tree">ROS-Behavior-Tree</a></li>
</ul>
<p>BehaviorTree.CPP is now a more sophisticated version of the library Behavior-Tree（ROS-Behavior-Tree）。</p>
<p>提供创建 BT 的框架的 C++ 库。与其它的 BT 实现由如下优势：</p>
<ul>
<li>支持异步 actions，例如: non-blocking、a first-class citizen</li>
<li>可以构建同时执行多个 actions 的 reactive behaviors</li>
<li>允许使用 XML 在运行时创建 BT</li>
<li>可以静态连接 TreeNodes，或将其转换为运行时加载的插件</li>
<li>包括 logging&#x2F;profiling 基础结构，允许用户可视化、记录、回放和分析状态转换</li>
</ul>
<p>ROS2 navigation2 基于该库实现。</p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a><strong>编译</strong></h1><p>支持 catkin(ros)、colcon(ros2)、conan、cmake 编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若安装了 ZeroMQ 和 SQlite 等依赖项，则可以使用 cmake --build . --parallel</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span>  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br></pre></td></tr></table></figure>

<p>Groot</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install qtbase5-dev libqt5svg5-dev libzmq3-dev libdw-dev</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> --recurse-submodules https://github.com/BehaviorTree/Groot.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> Groot</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake -S . -B build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake --build build</span></span><br></pre></td></tr></table></figure>



<h1 id="创建自定义节点"><a href="#创建自定义节点" class="headerlink" title="创建自定义节点"></a><strong>创建自定义节点</strong></h1><h2 id="继承-TreeNode"><a href="#继承-TreeNode" class="headerlink" title="继承 TreeNode"></a><strong>继承 <code>TreeNode</code></strong></h2><p>要创建自定义节点，默认方式（推荐方法）应继承 <code>TreeNode</code> 类。</p>
<p>实际通常是继承 <code>TreeNode</code> 的以下子类：</p>
<ul>
<li><code>ActionNodeBase</code></li>
<li><code>ConditionNode</code></li>
<li><code>DecoratorNode</code></li>
<li><code>SyncActionNode</code></li>
</ul>
<p>注意：</p>
<ul>
<li>所有 <code>TreeNode</code> 实例都有 <code>name</code>，其名字不要求唯一</li>
<li>必须重载子类虚函数 tick()，且返回值必须为 <code>SUCCESS/FAILURE/RUNNING</code></li>
<li><code>halt()</code> 用于暂停正在执行的 action。同步 action 可无需该方法</li>
<li>若有输入&#x2F;输出，还需定义静态方法 <code>providedPorts</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SaySomething</span> : <span class="keyword">public</span> SyncActionNode&#123;</span><br><span class="line"><span class="keyword">public</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="function"><span class="type">static</span> PortsList <span class="title">providedPorts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="built_in">InputPort</span>&lt;std::string&gt;(<span class="string">&quot;message&quot;</span>) &#125;;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">NodeStatus <span class="title">tick</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        Expected&lt;std::string&gt; msg = <span class="built_in">getInput</span>&lt;std::string&gt;(<span class="string">&quot;message&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (msg) &#123; <span class="comment">// 出错时可以选择抛出异常,也可以选择返回 FAILURE</span></span><br><span class="line">          <span class="keyword">throw</span> BT::<span class="built_in">RuntimeError</span>(<span class="string">&quot;missing required input [message]: &quot;</span>, msg.<span class="built_in">error</span>() );            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> NodeStatus::SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p><strong>建议在 <code>tick()</code> 函数中调用 <code>getInput()</code> 方法，而不是在类的构造函数中</strong>。</p>
<h2 id="使用依赖注入"><a href="#使用依赖注入" class="headerlink" title="使用依赖注入"></a><strong>使用依赖注入</strong></h2><p>除了继承 <code>TreeNode</code> 之外，也可以使用依赖注入方式(<strong>dependency injection</strong>)创建 <code>TreeNode</code> 并指定函数指针。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BT::NodeStatus <span class="title">myFunction</span><span class="params">(BT::TreeNode&amp; self)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GripperInterface</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">GripperInterface</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">NodeStatus <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;GripperInterface::open&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> NodeStatus::SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">NodeStatus <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;GripperInterface::close&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> NodeStatus::SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">factory.<span class="built_in">registerSimpleCondition</span>(<span class="string">&quot;CheckBattery&quot;</span>,</span><br><span class="line">                                std::<span class="built_in">bind</span>(CheckBattery));</span><br><span class="line"></span><br><span class="line">GripperInterface gripper; <span class="comment">// 构造 GripperInterface 类对象</span></span><br><span class="line">factory.<span class="built_in">registerSimpleAction</span>(<span class="string">&quot;OpenGripper&quot;</span>, </span><br><span class="line">                             std::<span class="built_in">bind</span>(&amp;GripperInterface::open, &amp;gripper));</span><br><span class="line">factory.<span class="built_in">registerSimpleAction</span>(<span class="string">&quot;CloseGripper&quot;</span>, </span><br><span class="line">                             std::<span class="built_in">bind</span>(&amp;GripperInterface::close, &amp;gripper));</span><br></pre></td></tr></table></figure>



<h3 id="使用依赖注入将-类成员函数-注册为异步行为"><a href="#使用依赖注入将-类成员函数-注册为异步行为" class="headerlink" title="使用依赖注入将 类成员函数 注册为异步行为"></a>使用依赖注入将 类成员函数 注册为异步行为</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;behaviortree_cpp_v3/bt_factory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> BT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRobot</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyRobot</span>(<span class="type">const</span> std::string&amp; name) : <span class="built_in">name_</span>(name) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">NodeStatus <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello from &quot;</span> &lt;&lt; name_ &lt;&lt; <span class="string">&quot;!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> NodeStatus::SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">NodeStatus <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; name_ &lt;&lt; <span class="string">&quot; is moving...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> NodeStatus::RUNNING;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">NodeStatus <span class="title">stopMove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; name_ &lt;&lt; <span class="string">&quot; has stopped moving.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> NodeStatus::SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string name_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MoveAction 为异步节点。该节点 tick() 方法中调用 MyRobot::move() 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MoveAction</span> : <span class="keyword">public</span> AsyncActionNode &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MoveAction</span>(<span class="type">const</span> std::string&amp; name, <span class="type">const</span> NodeConfiguration&amp; config, MyRobot&amp; robot)</span><br><span class="line">        : <span class="built_in">AsyncActionNode</span>(name, config), <span class="built_in">robot_</span>(robot), <span class="built_in">stop_requested_</span>(<span class="literal">false</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> PortsList <span class="title">providedPorts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">NodeStatus <span class="title">tick</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stop_requested_) &#123;</span><br><span class="line">            <span class="keyword">return</span> robot_.<span class="built_in">stopMove</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> robot_.<span class="built_in">move</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">halt</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        stop_requested_ = <span class="literal">true</span>;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;MoveAction halted.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    MyRobot&amp; robot_;</span><br><span class="line">    <span class="type">bool</span> stop_requested_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BehaviorTreeFactory factory;</span><br><span class="line">    <span class="function">MyRobot <span class="title">robot</span><span class="params">(<span class="string">&quot;Robo1&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用依赖注入。将 MyRobot 类对象传递到 MoveAction 中</span></span><br><span class="line">    factory.<span class="built_in">registerBuilder</span>&lt;MoveAction&gt;(<span class="string">&quot;MoveAction&quot;</span>, </span><br><span class="line">        [&amp;robot](<span class="type">const</span> std::string&amp; name, <span class="type">const</span> NodeConfiguration&amp; config) &#123;</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">make_unique</span>&lt;MoveAction&gt;(name, config, robot);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类成员函数注册为节点，注意：只能为 SyncActionNode 类型</span></span><br><span class="line">    factory.<span class="built_in">registerSimpleAction</span>(<span class="string">&quot;SayHello&quot;</span>, std::<span class="built_in">bind</span>(&amp;MyRobot::sayHello, &amp;robot));</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* xml_text = <span class="string">R&quot;(</span></span><br><span class="line"><span class="string">     &lt;root main_tree_to_execute=&quot;MainTree&quot;&gt;</span></span><br><span class="line"><span class="string">         &lt;BehaviorTree ID=&quot;MainTree&quot;&gt;</span></span><br><span class="line"><span class="string">             &lt;Sequence&gt;</span></span><br><span class="line"><span class="string">                 &lt;SayHello/&gt;</span></span><br><span class="line"><span class="string">                 &lt;MoveAction/&gt;</span></span><br><span class="line"><span class="string">             &lt;/Sequence&gt;</span></span><br><span class="line"><span class="string">         &lt;/BehaviorTree&gt;</span></span><br><span class="line"><span class="string">     &lt;/root&gt;</span></span><br><span class="line"><span class="string">    )&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> tree = factory.<span class="built_in">createTreeFromText</span>(xml_text);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行行为树</span></span><br><span class="line">    <span class="keyword">while</span> (tree.<span class="built_in">tickRoot</span>() == NodeStatus::RUNNING) &#123;</span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dataflow-Ports及Blackboard"><a href="#Dataflow-Ports及Blackboard" class="headerlink" title="Dataflow,Ports及Blackboard"></a><strong>Dataflow,Ports及Blackboard</strong></h1><ul>
<li><strong>blackboard</strong>：是一种 key&#x2F;value 存储结构，用于在所有节点间共享数据</li>
<li><strong>Ports</strong>：是节点之间用来交换信息的一种机制</li>
<li>Ports 使用 blackboard 的相同 key 连接</li>
<li>一个节点的端口数量、名称和类型必须在编译时知道(c++);端口之间的连接是在部署时完成的(XML)</li>
<li><strong>value 可以是任何 C++ type</strong>(使用类似 std::any 的类型确认机制)</li>
</ul>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/BehaviorTreeCPP%E4%BD%BF%E7%94%A8/image-20240905214528697.png" class="" title="image-20240905214528697">

<ul>
<li><p>Input Port 可以为</p>
</li>
<li><ul>
<li>静态类型(如字符串)</li>
<li>一个 pointer, 指向 blackboard 上的一个条目, 由一个 key 标识</li>
<li>对于输入端口，可通过 <strong>getInput(key)</strong> 读取输入值</li>
<li>输入类型 <strong>InputPort</strong></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--静态字符串--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SaySomething</span> <span class="attr">name</span>=<span class="string">&quot;fist&quot;</span>   <span class="attr">message</span>=<span class="string">&quot;hello world&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--pointer,使用该 key 在 blackboard 中查找数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SaySomething</span> <span class="attr">name</span>=<span class="string">&quot;second&quot;</span> <span class="attr">message</span>=<span class="string">&quot;&#123;greetings&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>Output ports</p>
</li>
<li><ul>
<li>输出类型为 <strong>OutputPort</strong>  </li>
<li>对于输出端口，可通过 <strong>setOutput</strong> 设置输出值</li>
<li>此外，调试时，可以使用内置的动作 <a href="https://www.behaviortree.dev/docs/guides/scripting/">Script</a> 将静态值写入条目</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Script</span> <span class="attr">code</span>=<span class="string">&quot; the_answer:=&#x27;The answer is 42&#x27; &quot;</span> /&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">/**</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"> * 自定义类型 struct Position2D &#123; double x; double y; &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"> * 此例中，使用 string 类型来设置 OtherGoal(其类型为 struct Position2D),</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"> * 需定义定义模板特化函数 BT::convertFromString<span class="tag">&lt;<span class="name">Position2D</span>&gt;</span>(StringView) 实现从</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"> * 字符串初始化 struct Position2D 类型对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"> */</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">Script</span>        <span class="attr">code</span>=<span class="string">&quot; OtherGoal:=&#x27;-1;3&#x27; &quot;</span> /&gt;</span></span></span></span><br></pre></td></tr></table></figure>



<p><strong>Script 是 BT.CPP 3.X 版本中 SetBlackboard 的替代。SetBlackboard 已弃用</strong></p>
<h2 id="blackboard"><a href="#blackboard" class="headerlink" title="blackboard"></a><strong>blackboard</strong></h2><p><strong>Blackboard 是一个全局共享的数据存储空间</strong>。Blackboard 通常用于存储任务执行过程中的状态信息、目标、条件等数据, 供 Behavior Tree 节点进行读取和修改。</p>
<p><strong>在 Behavior Tree 中, Blackboard 可以用来实现任务之间的通信和共享数据</strong>。例如, 一个行为节点可以将某个条件的结果写入 Blackboard, 然后另一个行为节点可以读取这个条件的结果进行判断。</p>
<p>Blackboard 通常是一个<strong>键值对的数据结构</strong>, 可以存储各种类型的数据, 如布尔值、整数、浮点数、字符串等等。Behavior Tree 节点可以通过读取和修改 Blackboard 中的数据来实现任务的执行和决策。</p>
<p><strong>Blackboard 提供数据集中式设计。</strong></p>
<p>集中式设计会定义一个数据结构专门用于行为树的输入, 在行为树决策之前, 将需要的数据先从各模块中收集到该数据结构中, 然后传递给行为树。这种方式减少了输入和行为树之间的接口数量(只与预定义的数据结构通信), 但存在数据冗余的缺点。不过, 集中式的数据输入使得行为树的表现更像一个黑盒了。</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/BehaviorTreeCPP%E4%BD%BF%E7%94%A8/image-20240905214637993.png" class="" title="image-20240905214637993">

<p>该 Blackboard 对于行为树而言是只读的, 行为树不允许修改和添加任何信息到这块黑板上面。</p>
<p>但 BT 在使用过程中, 有时候确实需要在节点&#x2F;行为树之间传递数据, 例如 sequence 节点, 其子节点之间通常会涉及到节点通信问题。此时会定义另一个 blackboard, 负责行为树&#x2F;节点间的通信</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/BehaviorTreeCPP%E4%BD%BF%E7%94%A8/image-20240905214700719.png" class="" title="image-20240905214700719">

<p>这块 blackboard 是又可以读又可以写的, 为了防止黑板混乱的问题, 必须在使用时规定一些限制, 可以称之为黑板数据的“作用域”：</p>
<ul>
<li>全局域（G）：此数据可以给其他行为树访问</li>
<li>行为树域（T）：此数据可以给行为树内的任意节点访问</li>
<li>指定节点域（N）：此数据可以给指定的行为树内的某节点（可以是多个）访问</li>
</ul>
<p>Blackboard 的使用可以让 Behavior Tree 更加灵活和智能化, 使得任务的执行和决策能够根据实时的情境和条件进行动态调整。</p>
<h2 id="Ports"><a href="#Ports" class="headerlink" title="Ports"></a><strong>Ports</strong></h2><p>BT::InputPort</p>
<p>BT::BidirectionalPort</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> PortsList <span class="title">providedPorts</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; </span><br><span class="line">        BT::BidirectionalPort&lt;std::vector&lt;<span class="type">int</span>&gt;&gt;(<span class="string">&quot;vector&quot;</span>),</span><br><span class="line">        BT::<span class="built_in">InputPort</span>&lt;<span class="type">int</span>&gt;(<span class="string">&quot;value&quot;</span>) </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="remapping"><a href="#remapping" class="headerlink" title="remapping"></a><strong>remapping</strong></h3><p>为了避免在非常大的树中发生名称冲突, 任何树和子树都使用 Blackboard 的不同实例。出于这个原因, 需要显式地将树的端口连接到它的子树的端口。</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/BehaviorTreeCPP%E4%BD%BF%E7%94%A8/image-20240905214734312.png" class="" title="image-20240905214734312">

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">BTCPP_format</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">BehaviorTree</span> <span class="attr">ID</span>=<span class="string">&quot;MainTree&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Script</span> <span class="attr">script</span>=<span class="string">&quot; move_goal=&#x27;1;2;3&#x27; &quot;</span> /&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">SubTree</span> <span class="attr">ID</span>=<span class="string">&quot;MoveRobot&quot;</span> <span class="attr">target</span>=<span class="string">&quot;&#123;move_goal&#125;&quot;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-handlebars">                                    <span class="attr">result</span>=<span class="string">&quot;&#123;move_result&#125;&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">SaySomething</span> <span class="attr">message</span>=<span class="string">&quot;&#123;move_result&#125;&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">Sequence</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">BehaviorTree</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">BehaviorTree</span> <span class="attr">ID</span>=<span class="string">&quot;MoveRobot&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">Fallback</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">Sequence</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">MoveBase</span>  <span class="attr">goal</span>=<span class="string">&quot;&#123;target&#125;&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">Script</span> <span class="attr">script</span>=<span class="string">&quot; result:=&#x27;goal reached&#x27; &quot;</span> /&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">Sequence</span>&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">ForceFailure</span>&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">Script</span> <span class="attr">script</span>=<span class="string">&quot; result:=&#x27;error&#x27; &quot;</span> /&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">ForceFailure</span>&gt;</span></span></span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">Fallback</span>&gt;</span></span></span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">BehaviorTree</span>&gt;</span></span></span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars"></span></span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure>



<h3 id="通过引用访问Ports"><a href="#通过引用访问Ports" class="headerlink" title="通过引用访问Ports"></a><strong>通过引用访问Ports</strong></h3><p>参考：<a href="https://www.behaviortree.dev/docs/tutorial-advanced/tutorial_13_blackboard_reference">Zero-copy access to the blackboard | BehaviorTree.CPP</a></p>
<h4 id="Zero-Copy访问blackboard"><a href="#Zero-Copy访问blackboard" class="headerlink" title="Zero-Copy访问blackboard"></a><strong>Zero-Copy访问blackboard</strong></h4><p>Blackboard 使用 “值语义”，如 getInput 和 setOuput 获取或设置 Blackboard 中的值。</p>
<p>在某些情况下，可能需要使用 “引用语义”，即直接访问存储在 Blackboard 中的对象。当对象是:</p>
<ul>
<li>复杂数据结构</li>
<li>复制成本高</li>
<li>不可复制</li>
</ul>
<p>例如，建议使用引用语义的节点是 <strong>LoopNode</strong> 装饰器，它可以 in-place 修改对象向量。</p>
<p><strong>Method1：共享指针</strong></p>
<p>为了简单起见，以复制成本较高的对象，如 Pointcloud 为例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">root</span> <span class="attr">BTCPP_format</span>=<span class="string">&quot;4&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BehaviorTree</span> <span class="attr">ID</span>=<span class="string">&quot;SegmentCup&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Sequence</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- AcquirePointCloud 写入点云数据,而 SegmentObject 则读取点云数据 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">AcquirePointCloud</span>  <span class="attr">cloud</span>=<span class="string">&quot;&#123;pointcloud&#125;&quot;</span>/&gt;</span> </span><br><span class="line">           <span class="tag">&lt;<span class="name">SegmentObject</span>  <span class="attr">obj_name</span>=<span class="string">&quot;cup&quot;</span> <span class="attr">cloud</span>=<span class="string">&quot;&#123;pointcloud&#125;&quot;</span> <span class="attr">obj_pose</span>=<span class="string">&quot;&#123;pose&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">Sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">BehaviorTree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此例中，建议的 Ports 类型为（使用 std::shared_ptr）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">PortsList <span class="title">AcquirePointCloud::providedPorts</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; OutputPort&lt;std::shared_ptr&lt;Pointcloud&gt;&gt;(<span class="string">&quot;cloud&quot;</span>) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PortsList <span class="title">SegmentObject::providedPorts</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="built_in">InputPort</span>&lt;std::string&gt;(<span class="string">&quot;obj_name&quot;</span>),</span><br><span class="line">             InputPort&lt;std::shared_ptr&lt;Pointcloud&gt;&gt;(<span class="string">&quot;cloud&quot;</span>),</span><br><span class="line">             <span class="built_in">OutputPort</span>&lt;Pose3D&gt;(<span class="string">&quot;obj_pose&quot;</span>) &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Method2: 线程安全的castPtr</strong></p>
<p>4.5.1 及之后版本推荐的方式。</p>
<p><strong>当使用 shared_ptr 方法时，最值得注意的问题是它不是线程安全的</strong>。</p>
<p>如果自定义异步 Node 有自己的线程，那么实际对象可能同时被其他线程访问。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">PortsList <span class="title">AcquirePointCloud::providedPorts</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="built_in">OutputPort</span>&lt;Pointcloud&gt;(<span class="string">&quot;cloud&quot;</span>) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PortsList <span class="title">SegmentObject::providedPorts</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="built_in">InputPort</span>&lt;std::string&gt;(<span class="string">&quot;obj_name&quot;</span>),</span><br><span class="line">             <span class="built_in">InputPort</span>&lt;Pointcloud&gt;(<span class="string">&quot;cloud&quot;</span>),</span><br><span class="line">             <span class="built_in">OutputPort</span>&lt;Pose3D&gt;(<span class="string">&quot;obj_pose&quot;</span>) &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过指针&#x2F;引用访问Pointcloud的实例:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inside the scope below, as long as &quot;any_locked&quot; exists, a mutex protecting </span></span><br><span class="line"><span class="comment">// the instance of &quot;cloud&quot; will remain locked</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">auto</span> any_locked = <span class="built_in">getLockedPortContent</span>(<span class="string">&quot;cloud&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(any_locked-&gt;<span class="built_in">empty</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// the entry in the blackboard hasn&#x27;t been initialized yet.</span></span><br><span class="line">    <span class="comment">// You can initialize it doing:</span></span><br><span class="line">    any_locked.<span class="built_in">assign</span>(my_initial_pointcloud);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(Pointcloud* cloud_ptr = any_locked-&gt;<span class="built_in">castPtr</span>&lt;Pointcloud&gt;())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Succesful cast to Pointcloud* (original type).</span></span><br><span class="line">    <span class="comment">// Modify the pointcloud instance, using cloud_ptr</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="全局-blackboard"><a href="#全局-blackboard" class="headerlink" title="全局 blackboard"></a><strong>全局 blackboard</strong></h3><p>在 BehaviorTree.CPP 4.6.0 版本引入。BT.CPP 使用 “scoped blackboards” 以隔离每个子树。</p>
<p>尽管如此，在某些情况下，有一个真正的 global blackboard 是可取的，它可以从每个子树直接访问，而不需要重新映射。</p>
<p>其用途：</p>
<ul>
<li>不能共享的单例对象和全局对象</li>
<li>机器人的全局状态</li>
<li>在行为树之外写入&#x2F;读取的数据，即在执行 tick 的主循环中</li>
</ul>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/BehaviorTreeCPP%E4%BD%BF%E7%94%A8/image-20240905214932130.png" class="" title="image-20240905214932130">

<p>每个子树有自己的 blackboard。Blackboard 的父子关系与行为树的父子关系相同。</p>
<p>私有 blackboard 的生命周期受其相关联的子树影响。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建全局 blackboard</span></span><br><span class="line"><span class="keyword">auto</span> global_bb = BT::Blackboard::<span class="built_in">create</span>();</span><br><span class="line"><span class="comment">// 创建子 blackboard</span></span><br><span class="line"><span class="keyword">auto</span> maintree_bb = BT::Blackboard::<span class="built_in">create</span>(global_bb);</span><br><span class="line"><span class="keyword">auto</span> tree = factory.<span class="built_in">createTree</span>(<span class="string">&quot;MainTree&quot;</span>, maintree_bb);</span><br></pre></td></tr></table></figure>

<p>上述代码实现</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/BehaviorTreeCPP%E4%BD%BF%E7%94%A8/image-20240905214952385.png" class="" title="image-20240905214952385">

<p>访问 top-level blackboard 数据</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- BT.CPP 4.6.0 新增方式. 使用 @ 表示从顶层 blackboard 查找 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PrintNumber</span> <span class="attr">val</span>=<span class="string">&quot;&#123;@value&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">global_bb-&gt;<span class="built_in">set</span>(<span class="string">&quot;value&quot;</span>, i);</span><br><span class="line"><span class="keyword">auto</span> value_sqr = global_bb-&gt;<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(<span class="string">&quot;value_sqr&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="ports-vs-blackboard"><a href="#ports-vs-blackboard" class="headerlink" title="ports vs blackboard"></a><strong>ports vs blackboard</strong></h2><p>BT.CPP 提出了 <strong>Input&#x2F;Output Ports</strong>，以替代 Blackboards。</p>
<p>更具体地说，Ports 是一种接口，它为 blackboard 添加了一层间接和额外的语义。</p>
<p>要理解为什么推荐使用 Ports 而不鼓励直接使用 Blackboard，应该首先了解 BehaviorTree.CPP 的一些核心原则。</p>
<h3 id="BT-CPP-目标"><a href="#BT-CPP-目标" class="headerlink" title="BT.CPP 目标"></a><strong>BT.CPP 目标</strong></h3><p><strong>Model Driven Development</strong></p>
<p>节点之间的数据流描述必须是模型的一部分。此外，希望能清楚地表达 blackboard 条目是被写入（输出）、读取（输入）还是两者都有。</p>
<p>例如：</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/BehaviorTreeCPP%E4%BD%BF%E7%94%A8/image-20240905215043094.png" class="" title="image-20240905215043094">

<p>在其他实现中，知道这两个节点是否相互通信和依赖的唯一方法是:</p>
<ul>
<li>inspecting the code：这是我们想要避免的</li>
<li>reading the documentation：但是文档不能保证是准确的和最新的</li>
</ul>
<p><code>即：需要查看代码或者文档</code></p>
<p>相反，若 Input&#x2F;Output ports 是模型的一部分，则节点的意图及其与其他端口的关系变得更加明确:</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/BehaviorTreeCPP%E4%BD%BF%E7%94%A8/image-20240905215055523.png" class="" title="image-20240905215055523">

<p><strong>节点组合及子树范围</strong></p>
<p>理想情况下，我们希望提供一个平台，允许行为设计师构建由不同供应商&#x2F;用户实现的树(即“组合节点”)。</p>
<p>但是，当直接使用 Blackboard 时，名称冲突将成为一个问题。</p>
<p>例如，节点 GraspObject 和 MoveBase 可能是由不同的人开发的，它们都是从 blackboard 取 target。不幸的是，它们有不同的含义，类型也不同：前者期望一个 3D 位姿，而后者是一个 2D 位姿。</p>
<p>Ports 提供了一个间接层次，也称为 remapping。意味着，无论在定义 Port 时使用哪个名称，都可以将其 remapping 到 XML 中的不同 blackboard 条目，而无需修改源代码。</p>
<h3 id="总结-不要直接使用-Blackboard"><a href="#总结-不要直接使用-Blackboard" class="headerlink" title="总结:不要直接使用 Blackboard"></a><strong>总结:不要直接使用 Blackboard</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example code in your tick()</span></span><br><span class="line"><span class="built_in">getInput</span>(<span class="string">&quot;goal&quot;</span>, goal);</span><br><span class="line"><span class="built_in">setOutput</span>(<span class="string">&quot;result&quot;</span>, result);</span><br><span class="line"><span class="comment">// 避免使用以下方式</span></span><br><span class="line"><span class="built_in">config</span>().blackboard-&gt;<span class="built_in">get</span>(<span class="string">&quot;goal&quot;</span>, goal);</span><br><span class="line"><span class="built_in">config</span>().blackboard-&gt;<span class="built_in">set</span>(<span class="string">&quot;result&quot;</span>, result);</span><br></pre></td></tr></table></figure>



<h1 id="XML-schema"><a href="#XML-schema" class="headerlink" title="XML schema"></a><strong>XML schema</strong></h1><p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">root</span> <span class="attr">BTCPP_format</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">BehaviorTree</span> <span class="attr">ID</span>=<span class="string">&quot;MainTree&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Sequence</span> <span class="attr">name</span>=<span class="string">&quot;root_sequence&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">SaySomething</span>   <span class="attr">name</span>=<span class="string">&quot;action_hello&quot;</span> <span class="attr">message</span>=<span class="string">&quot;Hello&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">OpenGripper</span>    <span class="attr">name</span>=<span class="string">&quot;open_gripper&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ApproachObject</span> <span class="attr">name</span>=<span class="string">&quot;approach_object&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">CloseGripper</span>   <span class="attr">name</span>=<span class="string">&quot;close_gripper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Sequence</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">BehaviorTree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>第一个 tag 为 root，包含一个或多个  tag</p>
</li>
<li><p>tag 包含 ID 属性</p>
</li>
<li><p>root应包含 BTCPP_format 属性</p>
</li>
<li><p>每个 TreeNode 由单个 tag 表示。特别是:</p>
</li>
<li><ul>
<li>tag 的名称是用于在 factory 中注册 TreeNode 的 ID</li>
<li>属性 name 是实例的名称，是可选的</li>
<li>端口通过属性配置。在前面的示例中，SaySomething 操作需要输入端口 message</li>
</ul>
</li>
</ul>
<h2 id="端口映射及blackboard指针"><a href="#端口映射及blackboard指针" class="headerlink" title="端口映射及blackboard指针"></a><strong>端口映射及blackboard指针</strong></h2><p>输入&#x2F;输出 ports 可以通过 blackboard 实体的名字进行映射。</p>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">BTCPP_format</span>=<span class="string">&quot;4&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BehaviorTree</span> <span class="attr">ID</span>=<span class="string">&quot;MainTree&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Sequence</span> <span class="attr">name</span>=<span class="string">&quot;root_sequence&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">SaySomething</span> <span class="attr">message</span>=<span class="string">&quot;Hello&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">SaySomething</span> <span class="attr">message</span>=<span class="string">&quot;&#123;my_message&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">Sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">BehaviorTree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Sequence 的第一个子节点输出 Hello</li>
<li>第二个子节点读取和修改 blackboard 实体中名为 my_message 的数据的值</li>
</ul>
<h2 id="紧凑表示及显式表示"><a href="#紧凑表示及显式表示" class="headerlink" title="紧凑表示及显式表示"></a><strong>紧凑表示及显式表示</strong></h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 以下两种语法都支持. 前者为紧凑形式, 后者为显式表示 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">SaySomething</span>               <span class="attr">name</span>=<span class="string">&quot;action_hello&quot;</span> <span class="attr">message</span>=<span class="string">&quot;Hello World&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">Action</span> <span class="attr">ID</span>=<span class="string">&quot;SaySomething&quot;</span>   <span class="attr">name</span>=<span class="string">&quot;action_hello&quot;</span> <span class="attr">message</span>=<span class="string">&quot;Hello World&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>紧凑语法更方便、更容易编写，但它提供的关于 TreeNode 模型的信息太少。像 Groot 这样的工具要么需要显式语法，要么需要附加信息。可以使用  标签添加此信息。</p>
<p>为了使前面的 BT 树的精简版本与 Groot 兼容，必须对 XML 进行如下修改:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">BTCPP_format</span>=<span class="string">&quot;4&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BehaviorTree</span> <span class="attr">ID</span>=<span class="string">&quot;MainTree&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Sequence</span> <span class="attr">name</span>=<span class="string">&quot;root_sequence&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">SaySomething</span>   <span class="attr">name</span>=<span class="string">&quot;action_hello&quot;</span> <span class="attr">message</span>=<span class="string">&quot;Hello&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">OpenGripper</span>    <span class="attr">name</span>=<span class="string">&quot;open_gripper&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ApproachObject</span> <span class="attr">name</span>=<span class="string">&quot;approach_object&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">CloseGripper</span>   <span class="attr">name</span>=<span class="string">&quot;close_gripper&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">Sequence</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">BehaviorTree</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- the BT executor don&#x27;t require this, but Groot does --&gt;</span>     </span><br><span class="line">   <span class="tag">&lt;<span class="name">TreeNodeModel</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Action</span> <span class="attr">ID</span>=<span class="string">&quot;SaySomething&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input_port</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">type</span>=<span class="string">&quot;std::string&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">Action</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Action</span> <span class="attr">ID</span>=<span class="string">&quot;OpenGripper&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Action</span> <span class="attr">ID</span>=<span class="string">&quot;ApproachObject&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Action</span> <span class="attr">ID</span>=<span class="string">&quot;CloseGripper&quot;</span>/&gt;</span>      </span><br><span class="line">   <span class="tag">&lt;/<span class="name">TreeNodeModel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="subtrees"><a href="#subtrees" class="headerlink" title="subtrees"></a><strong>subtrees</strong></h2><p>树中支持引用子树。使用 SubTree 标签。</p>
<h2 id="包含文件"><a href="#包含文件" class="headerlink" title="包含文件"></a><strong>包含文件</strong></h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">path</span>=<span class="string">&quot;relative_or_absolute_path_to_file&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ros 环境下,可使用 ros_pkg 指定要查找的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">ros_pkg</span>=<span class="string">&quot;name_package&quot;</span>  <span class="attr">path</span>=<span class="string">&quot;path_relative_to_pkg/grasp.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="Script"><a href="#Script" class="headerlink" title="Script"></a><strong>Script</strong></h1><p>Behavior Tree 4.X 引入。</p>
<h2 id="赋值操作符-strings-数值"><a href="#赋值操作符-strings-数值" class="headerlink" title="赋值操作符&#x2F;strings&#x2F;数值"></a><strong>赋值操作符&#x2F;strings&#x2F;数值</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">param_A := <span class="number">42</span> <span class="comment">// 将 blackboard 中 param_A 赋值为 42</span></span><br><span class="line">param_B = <span class="number">3.14</span></span><br><span class="line"> <span class="comment">// 同上,将 param_B 赋值为 3.14</span></span><br><span class="line">message = <span class="string">&#x27;hello world&#x27;</span> <span class="comment">// 将 message 赋值为 hello world</span></span><br><span class="line">A:= <span class="number">42</span>; B:=<span class="number">24</span> <span class="comment">// 在一条script语句赋值多个entry</span></span><br></pre></td></tr></table></figure>



<p>操作符 :&#x3D; 和 &#x3D; 之间的区别在于，如果 blackboard 中不存在一个新条目，前者可以在 blackboard 上创建一个新条目，而后者则会在 blackboard 上不包含该条目时抛出异常。</p>
<h2 id="算术运算符和括号"><a href="#算术运算符和括号" class="headerlink" title="算术运算符和括号"></a><strong>算术运算符和括号</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最终 param_B 为 10，param_C 为 31</span></span><br><span class="line">param_A := <span class="number">7</span></span><br><span class="line">param_B := <span class="number">5</span></span><br><span class="line">param_B *= <span class="number">2</span></span><br><span class="line">param_C := (param_A * <span class="number">3</span>) + param_B</span><br></pre></td></tr></table></figure>

<p>支持加减乘除运算符。且加法运算符是唯一可以处理 string(用于连接两个字符串)的运算符</p>
<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a><strong>位运算符</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最终 val_A 为 0x0F，val_B 为 0xFF</span></span><br><span class="line">value:= <span class="number">0x7F</span></span><br><span class="line">val_A:= value &amp; <span class="number">0x0F</span></span><br><span class="line">val_B:= value | <span class="number">0xF0</span></span><br></pre></td></tr></table></figure>

<p>支持 &amp;(与)、|(或)、~(非)、^(异或)。</p>
<h2 id="逻辑和比较运算符"><a href="#逻辑和比较运算符" class="headerlink" title="逻辑和比较运算符"></a><strong>逻辑和比较运算符</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">val_A := <span class="literal">true</span></span><br><span class="line">val_B := <span class="number">5</span> &gt; <span class="number">3</span></span><br><span class="line">val_C := (val_A == val_B)</span><br><span class="line">val_D := (val_A &amp;&amp; val_B) || !val_C</span><br></pre></td></tr></table></figure>

<p>支持：true&#x2F;false、&amp;&amp;、||、!、&#x3D;&#x3D;、!&#x3D;、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;</p>
<h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a><strong>三目运算符</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">val_B = (val_A &gt; <span class="number">1</span>) ? <span class="number">42</span> : <span class="number">24</span></span><br></pre></td></tr></table></figure>



<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BehaviorTree</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Script</span> <span class="attr">code</span>=<span class="string">&quot; msg:=&#x27;hello world&#x27; &quot;</span> /&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">Script</span> <span class="attr">code</span>=<span class="string">&quot; A:=THE_ANSWER; B:=3.14; color:=RED &quot;</span> /&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">Precondition</span> <span class="attr">if</span>=<span class="string">&quot;A&gt;B &amp;&amp; color!=BLUE&quot;</span> <span class="attr">else</span>=<span class="string">&quot;FAILURE&quot;</span>&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">Sequence</span>&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">                  <span class="tag">&lt;<span class="name">SaySomething</span> <span class="attr">message</span>=<span class="string">&quot;&#123;A&#125;&quot;</span>/&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">                  <span class="tag">&lt;<span class="name">SaySomething</span> <span class="attr">message</span>=<span class="string">&quot;&#123;B&#125;&quot;</span>/&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">                  <span class="tag">&lt;<span class="name">SaySomething</span> <span class="attr">message</span>=<span class="string">&quot;&#123;msg&#125;&quot;</span>/&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">                  <span class="tag">&lt;<span class="name">SaySomething</span> <span class="attr">message</span>=<span class="string">&quot;&#123;color&#125;&quot;</span>/&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">Sequence</span>&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">Precondition</span>&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">Sequence</span>&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">BehaviorTree</span>&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span></span></span></span></span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// Simple tree: a sequence of two asynchronous actions,</span></span><br><span class="line">  <span class="comment">// but the second will be halted because of the timeout.</span></span><br><span class="line"></span><br><span class="line">  BehaviorTreeFactory factory;</span><br><span class="line">  factory.<span class="built_in">registerNodeType</span>&lt;SaySomething&gt;(<span class="string">&quot;SaySomething&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">enum</span> <span class="title class_">Color</span> &#123; RED=<span class="number">1</span>, BLUE=<span class="number">2</span>, GREEN=<span class="number">3</span> &#125;;</span><br><span class="line">  <span class="comment">// We can add these enums to the scripting language</span></span><br><span class="line">  factory.<span class="built_in">registerScriptingEnums</span>&lt;Color&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Or we can do it manually</span></span><br><span class="line">  factory.<span class="built_in">registerScriptingEnum</span>(<span class="string">&quot;THE_ANSWER&quot;</span>, <span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> tree = factory.<span class="built_in">createTreeFromText</span>(xml_text);</span><br><span class="line">  tree.<span class="built_in">tickWhileRunning</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Pre-and-Post-conditions"><a href="#Pre-and-Post-conditions" class="headerlink" title="Pre and Post conditions"></a><strong>Pre and Post conditions</strong></h1><p>BT.CPP 4.x 引入。可以在Node的实际 tick() 之前或之后运行的脚本。</p>
<p>脚本的目标不是编写复杂的代码，而只是提高树的可读性，并在非常简单的用例中减少对自定义c++节点的需求。</p>
<p>如果脚本太长，可能需要重新考虑使用它们的决定。</p>
<h2 id="Pre-conditions"><a href="#Pre-conditions" class="headerlink" title="Pre conditions"></a><strong>Pre conditions</strong></h2><ul>
<li><strong>_skipIf</strong>: 若条件成立，则跳过该节点</li>
<li><strong>_failureIf</strong>: 若条件成立，则跳过并返回 FAILURE</li>
<li><strong>_successIf</strong>: 若条件成立，则跳过并返回 SUCCESS</li>
<li><strong>_while</strong>: 与 _skipIf 类似，但当条件变为 false 时，可能中断 RUNNING 节点</li>
</ul>
<p>例如：</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/BehaviorTreeCPP%E4%BD%BF%E7%94%A8/image-20240905215602833.png" class="" title="image-20240905215602833">

<p>即：若门非关闭状态，则跳过 OpenDoor。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">OpenDoor</span> <span class="attr">_skipIf</span>=<span class="string">&quot;!door_closed&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Post-conditions"><a href="#Post-conditions" class="headerlink" title="Post conditions"></a><strong>Post conditions</strong></h2><ul>
<li><strong>_onSuccess</strong>: 若节点返回 SUCCESS，则执行该脚本</li>
<li><strong>_onFailure</strong>: 若节点返回 FAILURE，则执行该脚本</li>
<li><strong>_post</strong>: 节点返回 SUCCESS&#x2F;FAILURE，均执行该脚本</li>
<li><strong>_onHalted</strong>: 若 RUNNING 被 halted，则执行该脚本</li>
</ul>
<p>例如：</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/BehaviorTreeCPP%E4%BD%BF%E7%94%A8/image-20240905215625719.png" class="" title="image-20240905215625719">



<h2 id="设计模式：错误码"><a href="#设计模式：错误码" class="headerlink" title="设计模式：错误码"></a><strong>设计模式：错误码</strong></h2><p>与状态机相比，行为树可能存在的问题之一是，在那些应该根据动作的结果执行不同策略的模式中。</p>
<p>由于 BT 仅限于成功和失败，这可能是不直观的。</p>
<p>一种解决方案是将结果&#x2F;错误代码存储在 blackboard 中，但这在 3.X 版本中很麻烦。</p>
<p>Pre conditions 可以帮助实现更具可读性的代码，就像下面这样:</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/BehaviorTreeCPP%E4%BD%BF%E7%94%A8/image-20240905215637835.png" class="" title="image-20240905215637835">

<p>MoveBase 增加了 return 端口，Sequence 中后面的节点根据 error_code 执行相应动作。</p>
<h2 id="设计模式：状态和声明树"><a href="#设计模式：状态和声明树" class="headerlink" title="设计模式：状态和声明树"></a><strong>设计模式：状态和声明树</strong></h2><p>即使行为树的承诺是将我们从状态的暴政中解放出来，但事实是，有时没有状态很难对我们的应用程序进行推理。</p>
<p>使用状态可以使我们的树更简单。例如，只有当机器人(或子系统)处于特定状态时，才能取树的某个分支。</p>
<p>例如：</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/BehaviorTreeCPP%E4%BD%BF%E7%94%A8/image-20240905215651319.png" class="" title="image-20240905215651319">

<p>该节点只字状态为 DO_LANDING 时才会执行，且一旦 altitude 的值 ≤ 0.1 时，状态切换为 LANDED。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h1><ul>
<li>注册自定义 TreeNode 到 BehaviorTreeFactory  </li>
<li>加载 XML</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;behaviortree_cpp/bt_factory.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// file that contains the custom nodes definitions</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dummy_nodes.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> DummyNodes;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  BehaviorTreeFactory factory;</span><br><span class="line">  <span class="comment">// 创建节点的推荐方式是使用继承</span></span><br><span class="line">  factory.<span class="built_in">registerNodeType</span>&lt;ApproachObject&gt;(<span class="string">&quot;ApproachObject&quot;</span>); </span><br><span class="line">  <span class="comment">// 使用依赖注入方式注册 SimpleActionNode</span></span><br><span class="line">  factory.<span class="built_in">registerSimpleCondition</span>(<span class="string">&quot;CheckBattery&quot;</span>, [&amp;](TreeNode&amp;) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">CheckBattery</span>(); &#125;</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  GripperInterface gripper; <span class="comment">// 也可通过类构造函数创建自定义节点</span></span><br><span class="line">  factory.<span class="built_in">registerSimpleAction</span>(<span class="string">&quot;OpenGripper&quot;</span>, [&amp;](TreeNode&amp;)&#123; <span class="keyword">return</span> gripper.<span class="built_in">open</span>(); &#125; );</span><br><span class="line">  factory.<span class="built_in">registerSimpleAction</span>(<span class="string">&quot;CloseGripper&quot;</span>, [&amp;](TreeNode&amp;)&#123; <span class="keyword">return</span> gripper.<span class="built_in">close</span>(); &#125; );</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 注意: 若 tree 超出范围时(被析构),所有节点都会被删除</span></span><br><span class="line">   <span class="keyword">auto</span> tree = factory.<span class="built_in">createTreeFromFile</span>(<span class="string">&quot;./my_tree.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行 BT 树</span></span><br><span class="line"></span><br><span class="line">  tree.<span class="built_in">tickWhileRunning</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Expected output:</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">  [ Battery: OK ]</span></span><br><span class="line"><span class="comment">  GripperInterface::open</span></span><br><span class="line"><span class="comment">  ApproachObject: approach_object</span></span><br><span class="line"><span class="comment">  GripperInterface::close</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h1 id="与-ROS2-集成"><a href="#与-ROS2-集成" class="headerlink" title="与 ROS2 集成"></a>与 ROS2 集成</h1><p>提供了一组现成的封装 BehaviorTree.ROS2，可用于快速实现与 ROS2 交互的 treenode。</p>
<p>在系统架构方面，应该记住:</p>
<ul>
<li>应该有一个集中的 ROS 节点 Coordinator，负责执行行为。这将进一步被称为 Task Planner，它将与 BT.CPP 一起实现</li>
<li>系统的所有其他元素都应该是面向服务(service-oriented)的组件，并且应该将任何业务逻辑和决策委托给 Task Planner</li>
</ul>
<h2 id="异步BT-Action使用-rclcpp-action"><a href="#异步BT-Action使用-rclcpp-action" class="headerlink" title="异步BT::Action使用 rclcpp_action"></a><strong>异步BT::Action使用 <code>rclcpp_action</code></strong></h2><p>与 ROS 交互的推荐方式是使用 <code>rclcpp_action</code>。</p>
<p>他们完美匹配，因为:</p>
<ul>
<li>它们的 API 是异步的，也就是说用户不需要担心创建一个单独的线程</li>
<li>它们可以被中止，这是实现 <code>TreeNode::halt()</code> 和构建响应性行为所需要的功能</li>
</ul>
<p>使用 <code>rclcpp_action</code> 实现 <code>Asyncchronous BT::Action</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参考 https://docs.ros.org/en/humble/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.html#writing-an-action-client</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FibonacciActionServer</span> : <span class="keyword">public</span> rclcpp::Node</span><br></pre></td></tr></table></figure>

<p>或使用 <code>RosActionNode</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://github.com/BehaviorTree/BehaviorTree.ROS</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FibonacciAction</span>: <span class="keyword">public</span> RosActionNode&lt;Fibonacci&gt;</span><br><span class="line"></span><br><span class="line">RosNodeParams params; </span><br><span class="line">params.nh = node;</span><br><span class="line">params.default_port_value = <span class="string">&quot;fibonacci&quot;</span>;</span><br><span class="line">factory.<span class="built_in">registerNodeType</span>&lt;FibonacciAction&gt;(<span class="string">&quot;Fibonacci&quot;</span>, params);</span><br></pre></td></tr></table></figure>





<h2 id="异步BT-Action使用-rclcpp-Client"><a href="#异步BT-Action使用-rclcpp-Client" class="headerlink" title="异步BT::Action使用 rclcpp::Client"></a><strong>异步BT::Action使用 <code>rclcpp::Client</code></strong></h2><h1 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h1><h2 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BehaviorTree</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ReactiveFallback</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">IsPaused</span> <span class="attr">name</span>=<span class="string">&quot;check_pause&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">SequenceStar</span> <span class="attr">name</span>=<span class="string">&quot;sequenceStar&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">MyAsyncAction</span> <span class="attr">name</span>=<span class="string">&quot;action_A&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">MyAsyncAction</span> <span class="attr">name</span>=<span class="string">&quot;action_B&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">SequenceStar</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">ReactiveSequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">BehaviorTree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>IsPaused</code> 在暂停时返回 <code>SUCCESS</code>，否则返回 <code>FAILURE</code></li>
</ul>
<h2 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h2><img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/BehaviorTreeCPP%E4%BD%BF%E7%94%A8/image-20240917095051939.png" class="" title="image-20240917095051939">

<p>来源：<a href="https://roboticseabass.com/2021/05/08/introduction-to-behavior-trees/">https://roboticseabass.com/2021/05/08/introduction-to-behavior-trees/</a></p>
<ul>
<li><p><code>GoToX</code> 行为节点，表示前往指定目标点，在执行过程中返回 <code>RUNNING</code> 状态</p>
</li>
<li><p><code>AtA</code> 判断是否到达目标点 A；若当前在 A 点，则返回 <code>SUCCESS</code>，其父节点 <code>Fallback</code> 直接返回 <code>SUCCESS</code>，不再执行 <code>GoToA</code>；若当前不在 A 点，则返回 <code>FAILURE</code>，则执行 <code>GoToA</code></p>
</li>
<li><p>到达指定目标点后，并行执行 <code>FoundApple</code> 和 <code>FoundOrange</code>（假设设置 <code>Parallel</code> 的 <code>THRESHOLD_SUCCESS</code> 为 1），任意一个成功即返回成功，即无论找到苹果还是橘子都正常结束并行节点，并返回 <code>SUCCESS</code></p>
</li>
</ul>
<p><a href="https://blog.csdn.net/weixin_45710350/article/details/109718775">https://blog.csdn.net/weixin_45710350/article/details/109718775</a></p>
]]></content>
      <categories>
        <category>行为树</category>
      </categories>
      <tags>
        <tag>行为树</tag>
        <tag>状态机</tag>
      </tags>
  </entry>
  <entry>
    <title>Substitution</title>
    <url>/2024/09/07/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/Substitution/</url>
    <content><![CDATA[<p>有时，特别是在实现集成和单元测试时，需要有⼀种机制，允许⽤“测试”版本(mock)快速替换特定的 Node 或整个 Node 类。</p>
<p>从版本4.1开始，引⼊了⼀种名为 <code>substitution rules</code>的新机制，使这个过程更容易。它由 <code>BehaviorTreeFactory</code> 类中的其他⽅法组成，这些⽅法应该在节点注册之后和实际树实例化之前调⽤。</p>
<p>例如，给定 XML</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SaySomething</span> <span class="attr">name</span>=<span class="string">&quot;talk&quot;</span> <span class="attr">message</span>=<span class="string">&quot;hello world&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p>可能想⽤另⼀个称为 <code>TestMessage</code> 的节点替代这个节点。相应的替换是⽤命令完成的:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">factory.<span class="built_in">addSubstitutionRule</span>(<span class="string">&quot;talk&quot;</span>, <span class="string">&quot;TestMessage&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>第⼀个参数包含将与 <code>TreeNode::fullPath</code> 匹配的通配符字符串。</p>
]]></content>
      <categories>
        <category>行为树</category>
      </categories>
      <tags>
        <tag>行为树</tag>
        <tag>状态机</tag>
      </tags>
  </entry>
  <entry>
    <title>reactive</title>
    <url>/2024/09/07/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/reactive/</url>
    <content><![CDATA[<p>大多数自动化系统都要求 reactive 和 modular(模块化)。reactive：快速有效的对变化做出反应的能力，是一种异步编程范式。</p>
<p><strong>FSM 内部对 reactive 和 modularity 进行了平衡</strong>。这种权衡可通过早期编程语言中使用的 Goto statement 来理解。Goto statement 是 one-way control transfer(单向控制转移)的一个实例，程序执行过程中，遇到 goto 语句时，会跳转到指定位置并继续执行。现代编程语言倾向于通过诸如 函数调用 等方法实现 two-way control transfer(双向控制转移)，通过函数调用，跳转去执行指定代码，执行完成之后，函数返回，跳转回函数调用的地方继续执行。</p>
<p>FSM 实际上就是一种 one-way control transfer。这就是 reactive 和 modularity 之间权衡的地方。对于要求 reactive 的系统，需要在各组件之间存在许多转换，意味着许多 one-way control transfer，这样会破坏程序的 modularity。例如：一个组件被删除，则所有与该组件之间的 transition 都需要修改。</p>
<h1 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a><strong>并发与并行</strong></h1><p>并发：一个 CPU 同时处理多个任务。宏观上是同时处理多个任务，微观上是 CPU 在多个任务之间快速交替执行。</p>
<p>并行：多个 CPU 同时处理多个任务。一个 CPU 执行某个任务时，另一个 CPU 可以执行另一个任务，两者互不干扰，同时进行。</p>
<p>并发在单核&#x2F;多核处理中都存在。但并行只在多核处理器中存在。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**BT.CPP 并发(concurrently)执行所有节点**。即：</span><br><span class="line"></span><br><span class="line">- 行为树的执行引擎是**单线程**的</span><br><span class="line">- 所有 **tick()** 顺序执行</span><br><span class="line">- 若任一 **tick()** 阻塞，则整个执行流程都会被阻塞</span><br></pre></td></tr></table></figure>



<p><strong>通过并发和异步执行来实现响应性行为</strong>(reactive **behaviors)**。</p>
<p>换句话说，需要很长时间执行的 Action 应该尽快返回 RUNNING 状态。</p>
<p>这告诉树执行器操作已经开始，需要更多的时间来返回状态 SUCCESS&#x2F;FAILURE。需要再次 tick 该节点，以了解状态是否发生了变化(轮询)。</p>
<p>异步节点可以将此长时间执行委托给另一个进程(使用进程间通信)或另一个线程。</p>
<h1 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a><strong>同步与异步</strong></h1><p>当树执行返回 RUNNING 的异步操作时，该状态通常向后传播(propagated backward)，并且整个树被认为处于 RUNNING 状态。</p>
<p>在下面的例子中，ActionE 是异步且正在 RUNNING；当节点处于 RUNNING 状态时，通常其父节点也会返回 RUNNING。</p>
<img src="/2024/09/07/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/reactive/image-20240907190458206.png" class="" title="image-20240907190458206">



<h1 id="StatefulActionNode"><a href="#StatefulActionNode" class="headerlink" title="StatefulActionNode"></a><strong>StatefulActionNode</strong></h1><p>该节点是异步行为的最佳实现。该节点继承自 ActionNodeBase，运行方式类似状态机。若节点处于 IDLE 状态，则调用 onStart()；若处于 RUNNING 状态，则调用 onRunning()；若被 halt() 则调用 onHalted()</p>
<img src="/2024/09/07/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/reactive/image-20240907190442091.png" class="" title="image-20240907190442091">



<p>StatefulActionNode 的派生类必须重载以下虚函数：</p>
<ul>
<li>NodeStatus onStart(): 当节点处于 IDLE 状态时调用</li>
<li>NodeStatus onRunning(): 当节点处于 RUNNING 状态时调用</li>
<li>void onHalted(): 当节点被树中其它节点中断时调用</li>
</ul>
<h1 id="Sequence与ReactiveSequence"><a href="#Sequence与ReactiveSequence" class="headerlink" title="Sequence与ReactiveSequence"></a><strong>Sequence与ReactiveSequence</strong></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* xml_text_sequence = <span class="string">R&quot;(</span></span><br><span class="line"><span class="string"> &lt;root BTCPP_format=&quot;4&quot; &gt;</span></span><br><span class="line"><span class="string">     &lt;BehaviorTree ID=&quot;MainTree&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;Sequence name=&quot;root&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;BatteryOK/&gt;</span></span><br><span class="line"><span class="string">            &lt;SaySomething   message=&quot;mission started...&quot; /&gt;</span></span><br><span class="line"><span class="string">            &lt;MoveBase       goal=&quot;1;2;3&quot;/&gt;</span></span><br><span class="line"><span class="string">            &lt;SaySomething   message=&quot;mission completed!&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/Sequence&gt;</span></span><br><span class="line"><span class="string">     &lt;/BehaviorTree&gt;</span></span><br><span class="line"><span class="string"> &lt;/root&gt;</span></span><br><span class="line"><span class="string"> )&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* xml_text_reactive = <span class="string">R&quot;(</span></span><br><span class="line"><span class="string"> &lt;root BTCPP_format=&quot;4&quot; &gt;</span></span><br><span class="line"><span class="string">     &lt;BehaviorTree ID=&quot;MainTree&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;ReactiveSequence name=&quot;root&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;BatteryOK/&gt;</span></span><br><span class="line"><span class="string">            &lt;Sequence&gt;</span></span><br><span class="line"><span class="string">                &lt;SaySomething   message=&quot;mission started...&quot; /&gt;</span></span><br><span class="line"><span class="string">                &lt;MoveBase       goal=&quot;1;2;3&quot;/&gt;</span></span><br><span class="line"><span class="string">                &lt;SaySomething   message=&quot;mission completed!&quot; /&gt;</span></span><br><span class="line"><span class="string">            &lt;/Sequence&gt;</span></span><br><span class="line"><span class="string">        &lt;/ReactiveSequence&gt;</span></span><br><span class="line"><span class="string">     &lt;/BehaviorTree&gt;</span></span><br><span class="line"><span class="string"> &lt;/root&gt;</span></span><br><span class="line"><span class="string"> )&quot;</span>;</span><br></pre></td></tr></table></figure>



<p>此例中，对于 ActiveSequence，当 MoveBase 返回 RUNNING 时，序列会被重新启动，BatteryOK 会被再次执行。</p>
<h1 id="事件驱动树"><a href="#事件驱动树" class="headerlink" title="事件驱动树"></a><strong>事件驱动树</strong></h1><p>使用 <code>tree.sleep()</code> 替代 <code>std::this_thread::sleep_for()</code>。<code>Tree::sleep()</code> 可被 <code>TreeNode::emitStateChanged()</code> 中断。</p>
]]></content>
      <categories>
        <category>行为树</category>
      </categories>
      <tags>
        <tag>行为树</tag>
        <tag>状态机</tag>
      </tags>
  </entry>
  <entry>
    <title>logger</title>
    <url>/2024/09/07/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/logger/</url>
    <content><![CDATA[<p>BT.cpp 提供了⼀种在运⾏时将 logger 添加到树的⽅法，通常是在树创建之后和开始 ticking 之前。 logger 是⼀个类，每次 TreeNode 改变状态时都会调⽤⼀个回调函数; 它是所谓观察者模式的⾮侵⼊式实现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">callback</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    BT::Duration timestamp, <span class="comment">// When the transition happened</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">const</span> TreeNode&amp; node, <span class="comment">// the node that changed its status</span></span></span></span><br><span class="line"><span class="params"><span class="function">    NodeStatus prev_status, <span class="comment">// the previous status</span></span></span></span><br><span class="line"><span class="params"><span class="function">    NodeStatus status)</span></span>; <span class="comment">// the new status</span></span><br></pre></td></tr></table></figure>

<p><code>TreeObserver</code> 是⼀个简单的⽇志实现，它为树的每个节点收集以下统计信息:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">NodeStatistics</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Last valid result, either SUCCESS or FAILURE</span></span><br><span class="line">    NodeStatus last_result;</span><br><span class="line">    <span class="comment">// Last status. Can be any status, including IDLE or SKIPPED</span></span><br><span class="line">    NodeStatus current_status;</span><br><span class="line">    <span class="comment">// count status transitions, excluding transition to IDLE</span></span><br><span class="line">    <span class="type">unsigned</span> transitions_count;</span><br><span class="line">    <span class="comment">// count number of transitions to SUCCESS</span></span><br><span class="line">    <span class="type">unsigned</span> success_count;</span><br><span class="line">    <span class="comment">// count number of transitions to FAILURE</span></span><br><span class="line">    <span class="type">unsigned</span> failure_count;</span><br><span class="line">    <span class="comment">// count number of transitions to SKIPPED</span></span><br><span class="line">    <span class="type">unsigned</span> skip_count;</span><br><span class="line">    <span class="comment">// timestamp of the last transition</span></span><br><span class="line">    Duration last_timestamp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>由于观察者允许收集特定节点的统计信息，需要⼀种唯⼀标识该节点的⽅法。</p>
<p>可以使⽤两种机制:</p>
<ul>
<li><code>TreeNode::UID()</code>，它是⼀个唯⼀的数字，对应于树的深度优先遍历。</li>
<li><code>TreeNode::fullPath()</code>，旨在成为特定节点的唯⼀但⼈类可读的标识符。</li>
</ul>
<h1 id="StdCoutLogger"><a href="#StdCoutLogger" class="headerlink" title="StdCoutLogger"></a><strong>StdCoutLogger</strong></h1><p>在终端打印行为树中的节点执行状态变化。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">StdCoutLogger <span class="title">logger_cout</span><span class="params">(tree)</span></span>;</span><br></pre></td></tr></table></figure>



<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该 logger 在终端输出状态转变</span></span><br><span class="line"><span class="function">StdCoutLogger <span class="title">logger_cout</span><span class="params">(tree)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该 logger 保存状态转变到指定文件</span></span><br><span class="line"><span class="function">FileLogger <span class="title">logger_file</span><span class="params">(tree, <span class="string">&quot;bt_trace.fbl&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该 logger 保存每个节点的执行时间</span></span><br><span class="line"><span class="function">MinitraceLogger <span class="title">logger_minitrace</span><span class="params">(tree, <span class="string">&quot;bt_trace.json&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ZMQ_FOUND</span></span><br><span class="line">    <span class="comment">// 使用 ZeroMQ 发布状态转变。Groot 使用该数据</span></span><br><span class="line">    <span class="function">PublisherZMQ <span class="title">publisher_zmq</span><span class="params">(tree)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>行为树</category>
      </categories>
      <tags>
        <tag>行为树</tag>
        <tag>状态机</tag>
      </tags>
  </entry>
  <entry>
    <title>节点</title>
    <url>/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<p>BehaviorTree.CPP 四个主要 node 类型：</p>
<ul>
<li><p><code>BT::ActionNode</code></p>
</li>
<li><p><code>BT::ConditionNode</code></p>
</li>
<li><p><code>BT::ControlNode</code></p>
</li>
<li><p><code>BT::DecoratorNode</code></p>
</li>
</ul>
<p>均继承 <code>BT::TreeNode</code></p>
<h1 id="ActionNodeBase"><a href="#ActionNodeBase" class="headerlink" title="ActionNodeBase"></a><code>ActionNodeBase</code></h1><p>最通用的 action node 基类，子类需实现 <code>executeTick()</code>、<code>tick()</code>、<code>halt()</code> 等函数。</p>
<h1 id="序列节点"><a href="#序列节点" class="headerlink" title="序列节点"></a>序列节点</h1><ul>
<li>一个子节点返回成功后，则继续 ticks 下一个子节点</li>
<li>若最后一个子节点返回成功，则所有子节点执行完成，序列节点返回成功</li>
</ul>
<p>当前有三类序列节点：</p>
<table>
<thead>
<tr>
<th>Type of ControlNode</th>
<th>Child returns FAILURE</th>
<th>Child returns RUNNING</th>
</tr>
</thead>
<tbody><tr>
<td><code>Sequence</code></td>
<td>Restart</td>
<td>Tick again</td>
</tr>
<tr>
<td><code>ReactiveSequence</code></td>
<td>Restart</td>
<td>Restart</td>
</tr>
<tr>
<td><code>SequenceWithMemory</code></td>
<td>Tick again</td>
<td>Tick again</td>
</tr>
</tbody></table>
<p><strong>Restart</strong>：整个序列从列表的第一个子项重新开始</p>
<p><strong>Tick again</strong>：下次 <code>tick</code> 序列时，会再次 <code>tick</code> 同一个子节点。已经返回 <code>SUCCESS</code> 的前一个子节点不再被 <code>tick</code>。</p>
<h2 id="SequenceNode"><a href="#SequenceNode" class="headerlink" title="SequenceNode"></a><code>SequenceNode</code></h2><p>所有字节点都返回成功，则序列节点成功，若任一字节点失败，则序列失败。失败时，Restart。</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/%E8%8A%82%E7%82%B9/image-20240907182855276.png" class="" title="image-20240907182855276">

<ul>
<li><code>IsEnemyVisible</code>：是否发现敌人</li>
<li><code>isRifleLoaded</code>：步枪是否上膛</li>
<li><code>AimAtEnemy</code>：瞄准敌人</li>
<li><code>Shoot</code>：射击</li>
</ul>
<p>执行流程</p>
<ul>
<li>若未发现敌人，则 <code>IsEnemyVisible</code> 返回 failure，Sequence 重新开始</li>
<li><code>IsEnemyVisible</code> 返回 SUCCESS，表示发现敌人，下次 tick 执行下一个子节点</li>
<li>发现敌人后，<code>isRifleLoaded</code> 检查步枪是否上膛，若未上膛，则返回 failure，Sequence 从头开始</li>
<li>若 <code>isRifleLoaded</code> 返回 SUCCESS，表示已上膛，下次 tick 执行下一个子节点</li>
<li>若 <code>AimAtEnemy</code> 返回 failure，表示瞄准失败，Sequence 重新开始</li>
<li>若 <code>AimAtEnemy</code> 返回 SUCCESS，表示已瞄准，下次 tick 执行下一个子节点</li>
<li>开枪射击，若击中，返回 SUCCESS，则 Sequence 返回成功</li>
</ul>
<h2 id="ReactiveSequence"><a href="#ReactiveSequence" class="headerlink" title="ReactiveSequence"></a><code>ReactiveSequence</code></h2><p>该节点<strong>对于连续检查条件特别有用</strong>；但用户在使用异步子项时也应该小心，以确保它们不会比预期更频繁地被 tick。</p>
<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/%E8%8A%82%E7%82%B9/wps1.jpg" class="" title="wps1"> 

<ul>
<li><code>ApproachEnemy</code>：接近敌人。是一个异步行为(asynchronous)，该节点执行过程中始终返回 <code>RUNNING</code>，直到最终完成</li>
<li>若 <code>IsEnemyVisible</code> 返回 FAUILED，则 <code>ApproachEnemy</code> 被暂停</li>
<li><code>ApproachEnemy</code> 在完成前始终返回 RUNNING，因此该序列会一直 Restart。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">status = RUNNING;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> index=<span class="number">0</span>; index &lt; number_of_children; index++)</span><br><span class="line">&#123;</span><br><span class="line">    child_status = child[index]-&gt;<span class="built_in">tick</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( child_status == RUNNING ) &#123;</span><br><span class="line">        <span class="keyword">return</span> RUNNING;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( child_status == FAILURE ) &#123;</span><br><span class="line">        <span class="built_in">HaltAllChildren</span>();</span><br><span class="line">        <span class="keyword">return</span> FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// all the children returned success. Return SUCCESS too.</span></span><br><span class="line"><span class="built_in">HaltAllChildren</span>();</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://www.cnblogs.com/gary-guo/p/14700313.html">https://www.cnblogs.com/gary-guo/p/14700313.html</a></p>
<h1 id="BT-SyncActionNode-BT-AsyncActionNode"><a href="#BT-SyncActionNode-BT-AsyncActionNode" class="headerlink" title="BT::SyncActionNode &amp; BT::AsyncActionNode"></a><code>BT::SyncActionNode</code> &amp; <code>BT::AsyncActionNode</code></h1><p>均继承 <code>BT::ActionNodeBase</code> 节点。</p>
<p> <code>SyncActionNode</code> 同步节点，不会返回 <code>RUNNING</code>，无需实现 <code>halt()</code></p>
<p><code>BT::AsyncActionNode</code> 创建线程来执行操作（使用 <code>std::async</code>）。使用注意：</p>
<ul>
<li>在 <code>tick()</code> 方法中，必须定期检查 <code>isHaltRequested()</code> 的结果</li>
<li>在 <code>halt()</code> 方法中，可进行清理，但需主动调用基类方法 <code>AsyncActionNode::halt()</code></li>
<li>除少数特例外，暂停的 <code>AsyncAction</code> 必须返回 <code>NodeStatus::IDLE</code></li>
</ul>
<p>注意：当线程完成时，即 <code>tick()</code> 返回其状态时，将调用 <code>TreeNode::emitStateChanged()</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">NodeStatus BT::AsyncActionNode::<span class="built_in">executeTick</span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">using</span> lock_type = std::unique_lock&lt;std::mutex&gt;;</span><br><span class="line">  <span class="comment">//send signal to other thread.</span></span><br><span class="line">  <span class="comment">// The other thread is in charge for changing the status</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">status</span>() == NodeStatus::IDLE)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">setStatus</span>(NodeStatus::RUNNING);</span><br><span class="line">    halt_requested_ = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 使用  std::async 实现异步操作</span></span><br><span class="line">    thread_handle_ = std::<span class="built_in">async</span>(std::launch::async, [<span class="keyword">this</span>]() &#123;</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">auto</span> status = <span class="built_in">tick</span>();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isHaltRequested</span>()) <span class="comment">// 检查 isHaltRequested() 的结果</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">setStatus</span>(status);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">catch</span> (std::exception&amp;)</span><br><span class="line">      &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;\nUncaught exception from the method tick(): [&quot;</span></span><br><span class="line">                  &lt;&lt; <span class="built_in">registrationName</span>() &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; <span class="built_in">name</span>() &lt;&lt; <span class="string">&quot;]\n&quot;</span></span><br><span class="line">                  &lt;&lt; std::endl;</span><br><span class="line">        <span class="comment">// Set the exception pointer and the status atomically.</span></span><br><span class="line">        lock_type <span class="built_in">l</span>(mutex_);</span><br><span class="line">        exptr_ = std::<span class="built_in">current_exception</span>();</span><br><span class="line">        <span class="built_in">setStatus</span>(BT::NodeStatus::IDLE); <span class="comment">// 切换为 IDLE</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">emitStateChanged</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">lock_type <span class="title">l</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (exptr_)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// The official interface of std::exception_ptr does not define any move</span></span><br><span class="line">    <span class="comment">// semantics. Thus, we copy and reset exptr_ manually.</span></span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> exptr_copy = exptr_;</span><br><span class="line">    exptr_ = <span class="literal">nullptr</span>;</span><br><span class="line">    std::<span class="built_in">rethrow_exception</span>(exptr_copy);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">status</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<img src="/2024/09/05/%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA/BT/BehaviorTree.CPP/%E8%8A%82%E7%82%B9/image-20240907183423591.png" class="" title="image-20240907183423591">



<h1 id="LoopNode"><a href="#LoopNode" class="headerlink" title="LoopNode"></a><strong><code>LoopNode</code></strong></h1><p>该节点继承自 <code>DecoratorNode</code> 节点。从 <code>std::deque</code> 中 <code>pop_front</code> 获取队列首元素，将该元素拷贝到 value port，并执行子节点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* xml_tree = <span class="string">R&quot;(</span></span><br><span class="line"><span class="string"> &lt;root BTCPP_format=&quot;4&quot; &gt;</span></span><br><span class="line"><span class="string">     &lt;BehaviorTree ID=&quot;TreeA&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;Sequence&gt;</span></span><br><span class="line"><span class="string">            &lt;LoopDouble queue=&quot;1;2;3&quot;  value=&quot;&#123;number&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;PrintNumber value=&quot;&#123;number&#125;&quot; /&gt;</span></span><br><span class="line"><span class="string">            &lt;/LoopDouble&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;GenerateWaypoints waypoints=&quot;&#123;waypoints&#125;&quot; /&gt;</span></span><br><span class="line"><span class="string">            &lt;LoopPose queue=&quot;&#123;waypoints&#125;&quot;  value=&quot;&#123;wp&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;UseWaypoint waypoint=&quot;&#123;wp&#125;&quot; /&gt;</span></span><br><span class="line"><span class="string">            &lt;/LoopPose&gt;</span></span><br><span class="line"><span class="string">        &lt;/Sequence&gt;</span></span><br><span class="line"><span class="string">     &lt;/BehaviorTree&gt;</span></span><br><span class="line"><span class="string"> &lt;/root&gt;</span></span><br><span class="line"><span class="string"> )&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>GenerateWaypoints</code> 生成 <code>std::queue</code>，并拷贝到输出 port waypoints 中。<code>LoopPose</code> 依次从 waypoints port 中读取生成的元素，并拷贝到 value 中。</p>
<h1 id="Fallback-vs-Parallel"><a href="#Fallback-vs-Parallel" class="headerlink" title="Fallback vs Parallel"></a><strong><code>Fallback</code> vs <code>Parallel</code></strong></h1><ul>
<li><code>ReactiveFallback</code> 类似于 <code>ParallelNode</code>。依次 tick 所有的子节点：<ul>
<li>如果一个子节点返回 <code>RUNNING</code>，则继续到下一个子节点</li>
<li>如果一个子节点返回 <code>FAILURE</code>，则继续处理下一个子节点</li>
<li>如果子节点返回 <code>SUCCESS</code>，则停止并返回 <code>SUCCESS</code></li>
<li>如果所有子节点都失败，则该节点返回 <code>FAILURE</code></li>
</ul>
</li>
</ul>
<p>重要提示：要正常工作，该节点不应有多个异步子节点。</p>
<ul>
<li><code>Parallel</code> 的子节点并行执行，看起来与 <code>ReactiveSequence</code> 相似，但此控制节点是唯一可以同时运行多个子节点的节点<ul>
<li>当达到 <code>THRESHOLD_SUCCESS</code> 或 <code>THRESHOLD_FAILURE</code> 数时（均使用端口配置），节点完成</li>
<li>如果达到任何阈值，而其他子节点仍在运行，则它们将被停止</li>
<li>阈值 -1 表示所有子节点</li>
</ul>
</li>
</ul>
<h1 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h1><h2 id="TimeoutNode"><a href="#TimeoutNode" class="headerlink" title="TimeoutNode"></a><strong>TimeoutNode</strong></h2><p>如果正在运行的子节点的运行时间超过给定时间，<code>TimeoutNode</code> 将 <code>halt()</code> 暂停该子节点。超时以毫秒为单位，并使用端口 <code>msec</code> 传递</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Timeout</span> <span class="attr">msec</span>=<span class="string">&quot;5000&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">KeepYourBreath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Timeout</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="RepeatNode"><a href="#RepeatNode" class="headerlink" title="RepeatNode"></a>RepeatNode</h2><p>重复执行子节点。若子节点返回 <code>SUCCESS</code>，则重复执行 <code>num_cycles</code> 次；若子节点返回 <code>FAILURE</code>，则终止重复过程，并返回 <code>FAILURE</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Repeat</span> <span class="attr">num_cycles</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ClapYourHandsOnce</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Repeat</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 循环抓取 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Repeat</span> <span class="attr">num_cycles</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Sequence</span> <span class="attr">name</span>=<span class="string">&quot;root_sequence&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GripperAction</span>   <span class="attr">name</span>=<span class="string">&quot;open_gripper&quot;</span> <span class="attr">command</span>=<span class="string">&quot;open&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GripperAction</span>   <span class="attr">name</span>=<span class="string">&quot;close_gripper&quot;</span> <span class="attr">command</span>=<span class="string">&quot;close&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Repeat</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="DelayNode"><a href="#DelayNode" class="headerlink" title="DelayNode"></a>DelayNode</h2><p>该节点将引入延迟，然后 tick 子节点，返回子节点完成后的状态。延迟以毫秒为单位，并使用端口 <code>delay_msec</code> 传递。 在延迟期间，节点将状态更改为 <code>RUNNING</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Delay</span> <span class="attr">delay_msec</span>=<span class="string">&quot;5000&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">KeepYourBreath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Delay</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="ConditionNode"><a href="#ConditionNode" class="headerlink" title="ConditionNode"></a>ConditionNode</h1><h2 id="SimpleConditionNode"><a href="#SimpleConditionNode" class="headerlink" title="SimpleConditionNode"></a>SimpleConditionNode</h2><p>简化 <code>ConditionNode</code> 的使用，用户只需提供回调函数即可。</p>
]]></content>
      <categories>
        <category>行为树</category>
      </categories>
      <tags>
        <tag>行为树</tag>
        <tag>状态机</tag>
      </tags>
  </entry>
  <entry>
    <title>OMPL</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/OMPL/OMPL/</url>
    <content><![CDATA[<p>OMPL：Open Motion Planning Library，是一个包含许多常用的<strong>基于采样</strong>的运动规划算法（以基于采样的算法，如RRT、PRM为主）的 C++ 库。也是 Moveit!(工具集) 默认采用的运动规划算法库。</p>
<p>OMPL.app 是 OMPL 的前端，它是一个包含 <a href="https://github.com/flexible-collision-library/fcl">FCL</a> 和 <a href="http://gamma.cs.unc.edu/SSV">PQP</a> 碰撞检测器和基于 PyQt&#x2F;PySide 的简单 GUI 用户界面的轻量级包。</p>
<p>特性：基于采样，概率完备，非最优&#x2F;渐进最优。</p>
<h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a><strong>核心概念</strong></h1><p>运动规划问题核心概念</p>
<ul>
<li><strong>状态空间</strong>：即 构型空间，内部的点表征着规划系统的特点状态。对于一个自有运动的刚体，其状态空间由三个平移状态和三个旋转状态构成；而对于具有 n 个转动关节的机械臂，状态空间可被表征为一个 n 维的圆环面</li>
<li><strong>控制空间</strong>：表征控制量空间的参数化。控制空间适用于动力学系统，对于集合层面的规划，无需考虑控制量问题</li>
<li><strong>采样器</strong>：用于从状态空间内产生不同的状态。对于基于控制的系统，使用独立的控制量采样机对控制空间进行采样</li>
<li><strong>状态有效性检测器</strong>：用于区分状态空间的有小部分和无效部分的算法。如：使用状态有效性检测器进行避障检测，以及速度和加速度超限检测等</li>
<li><strong>局部规划器</strong>：在集合层面进行规划时，局部规划用于进行状态点之间的插补</li>
</ul>
<p>OMPL 中的规划算法都是在非常抽象的<strong>状态空间</strong>中工作。OMPL 中已实现了多种常用状态空间，例如：</p>
<ul>
<li>SE(2)：平面平移及旋转</li>
<li>SE(3)：空间平移及旋转</li>
<li>R^n：<a href="http://ompl.kavrakilab.org/classompl_1_1base_1_1RealVectorStateSpace.html"><strong>ompl::base::RealVectorStateSpace</strong></a></li>
<li>SO(2)：平面旋转</li>
<li>SO(3)：空间旋转</li>
<li>Time</li>
<li>Discrete：离散状态</li>
<li>Dubins：Dubins car’s 状态空间</li>
<li>ReedsShepp：Reeds-Shepp car’s 状态空间</li>
<li>OpenDE：Open Dynamics Engine</li>
<li>Constrained state spaces：约束状态空间</li>
</ul>
<p>OMPL 中实现的控制空间包括：</p>
<ul>
<li>R^n：<a href="http://ompl.kavrakilab.org/classompl_1_1control_1_1RealVectorControlSpace.html"><strong>ompl::control::RealVectorControlSpace</strong></a></li>
<li>Discrete：<a href="http://ompl.kavrakilab.org/classompl_1_1control_1_1DiscreteControlSpace.html"><strong>ompl::control::DiscreteControlSpace</strong></a></li>
<li>OpenDE：<a href="http://ompl.kavrakilab.org/classompl_1_1control_1_1OpenDEControlSpace.html"><strong>ompl::control::OpenDEControlSpace</strong></a></li>
</ul>
<h1 id="OMPL-算法"><a href="#OMPL-算法" class="headerlink" title="OMPL 算法"></a><strong>OMPL 算法</strong></h1><p><strong>基于采样运动规划</strong>：基本思想是使用<strong>图结构</strong>近似搜索空间的连续性，然后对搜索空间进行采样并选择样本点作为近似图的顶点，近似图内各顶点之间的连线表示有效路径。</p>
<p>OMPL 包含许多基于采样的算法的实现：</p>
<ul>
<li>RPM</li>
<li>RRT</li>
<li>EST</li>
<li>SBL</li>
<li>KPIECE</li>
<li>SyCLOP</li>
</ul>
<p>OMPL 规划算法分为两类：</p>
<ul>
<li><strong>几何规划(Geometric planners)</strong></li>
<li><strong>控制规划(Control-based planners)</strong></li>
</ul>
<h2 id="几何规划"><a href="#几何规划" class="headerlink" title="几何规划"></a><strong>几何规划</strong></h2><p><strong>只考虑系统的几何和运动学约束</strong>。</p>
<ul>
<li><p><strong>多任务规划</strong>(Multi-query planners)：为整个任务空间建立 roadmap</p>
</li>
<li><ul>
<li><p>PRM(Probabilistic Roadmap Method)</p>
</li>
<li><p>LazyPRM</p>
</li>
<li><p>PRM*</p>
</li>
<li><p>LazyPRM</p>
</li>
<li><ul>
<li>SPARS(SPArse Roadmap Spanner algorithm)</li>
<li>SPARS2</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>单任务规划</strong>(Single-query planners)：通过可行的运动节点生成一棵树。他们的不同之处在于使用不同的启发式来生长树</p>
</li>
<li><ul>
<li><p>RRT(Rapidly-exploring Random Trees)</p>
</li>
<li><ul>
<li>RRT Connect(RRTConnect)</li>
<li>RRT*</li>
<li>Lower Bound Tree RRT(LBTRRT)</li>
<li>Sparse Stable RRT</li>
<li>T-RRT(Transition-based RRT)</li>
<li>Vector Field RRT</li>
<li>pRRT(Parallel RRT)</li>
<li>LazyRRT(Lazy RRT)</li>
</ul>
</li>
<li><p>EST(Expansive Space Trees)</p>
</li>
<li><p>KPIECE(Kinematic Planning by Interior-Exterior Cell Exploration)</p>
</li>
<li><p>PDST(Path-Directed Subdivision Trees)</p>
</li>
<li><p>FMT*(Fast Marching Tree algorithm)</p>
</li>
<li><p>BFMT*(Bidirectional Fast Marching Tree)</p>
</li>
</ul>
</li>
<li><p><strong>优化 planners</strong>(Optimizing planners)</p>
</li>
<li><ul>
<li>PRM*</li>
<li>LazyPRM*</li>
<li>RRT*</li>
<li>RRT#</li>
<li>RRTX</li>
<li>Informed RRT*</li>
<li>Batch Informed Trees(BIT*)</li>
<li>Sparse Stable RRT</li>
<li>T-RRT</li>
<li>SPARS</li>
<li>SPARS2</li>
<li>FMT*</li>
<li>CForest</li>
<li>APS(AnytimePathShortening)</li>
</ul>
</li>
</ul>
<h2 id="控制规划"><a href="#控制规划" class="headerlink" title="控制规划"></a><strong>控制规划</strong></h2><p>这类 planners 依靠状态传播(state propagation)而不是简单的插值(interpolation)来产生运动。</p>
<ul>
<li><p><strong>RRT</strong>(Rapidly-exploring Random Trees)</p>
</li>
<li><p><strong>SST</strong>(Sparse Stable RRT)</p>
</li>
<li><p><strong>EST</strong>(Expansive Space Trees)</p>
</li>
<li><p><strong>KPIECE</strong>(Kinodynamic Planning by Interior-Exterior Cell Exploration)</p>
</li>
<li><p><strong>PDST</strong>(Path-Directed Subdivision Trees)</p>
</li>
<li><p>Syclop</p>
</li>
<li><ul>
<li>Syclop using RRT as low-level planner</li>
<li>Syclop using EST as the low-level planner</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>OMPL</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>CHOMP</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/Planners/CHOMP/</url>
    <content><![CDATA[<p>Covariant Hamiltonian optimization for motion planning(即：<strong>协变哈密顿量优化</strong>)，基于<strong>梯度</strong>的轨迹优化方法，它使得许多日常的运动规划问题变得既简单又可训练。当大多数高维 motion planners 将轨迹生成划分为不同的 planning 和 optimization 阶段时，该算法在 optimization 阶段利用了协变梯度法和函数梯度法，设计了完全基于轨迹优化的运动规划算法。给定一个不可行的初始轨迹，CHOMP 通过对周围环境的反应，快速地将轨迹从碰撞中拉出，同时优化关节速度、加速度等动力学量。它迅速收敛到一个光滑的无碰撞的轨迹，可以有效地执行机器人。</p>
<h1 id="使用-CHOMP"><a href="#使用-CHOMP" class="headerlink" title="使用 CHOMP"></a><strong>使用 CHOMP</strong></h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a><strong>配置</strong></h2><p>首先需要使用 MoveIt Setup Assistant 创建机器人配置包 _moveit_config </p>
<p>注意：如果使用 ros-planning&#x2F;panda_moveit_config 进行演示，那么这些步骤已经完成了，可以跳过这一部分。</p>
<p>① 将 chomp_planning_pipeline.launch.xml 下载到 MoveIt 配置包的 launch 目录</p>
<p>② 下载 chomp_planning.yaml 文件，放入 _moveit_config&#x2F;config 目录中</p>
<p>③ 将 chomp_planning.yaml 中的 animate_endeffector_segment: “panda_rightfinger” 更改为机器人的适当 link</p>
<h2 id="运行-demo"><a href="#运行-demo" class="headerlink" title="运行 demo"></a><strong>运行 demo</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch panda_moveit_config demo.launch pipeline:=chomp</span></span><br></pre></td></tr></table></figure>

<p>​              </p>
<h2 id="Running-CHOMP-with-Obstacles-in-the-Scene"><a href="#Running-CHOMP-with-Obstacles-in-the-Scene" class="headerlink" title="Running CHOMP with Obstacles in the Scene"></a><strong>Running CHOMP with Obstacles in the Scene</strong></h2><p>要在有障碍的环境中运行CHOMP，以运行Python脚本示例：<a href="https://github.com/ros-planning/moveit_tutorials/tree/melodic-devel/doc/collision_environments/scripts/collision_scene_example.py">collision_scene_example.py</a></p>
<p>该脚本创建一个有四个障碍物的杂乱场景，或者一个只有一个障碍物的简单场景（取决于脚本的参数）。也可以改变障碍物的位置&#x2F;大小来改变场景。</p>
<p>要在有障碍的场景运行 CHOMP planner，打开两个 shell。在第一个 shell 启动 RViz，等待一切完成加载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch panda_moveit_config demo.launch pipeline:=chomp</span>   </span><br></pre></td></tr></table></figure>

<p>​           </p>
<p>在第二个 shell 中启动脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun moveit_tutorials collision_scene_example.py cluttered <span class="comment"># 或者 rosrun moveit_tutorials collision_scene_example.py sparse</span></span> </span><br></pre></td></tr></table></figure>

<p>​     </p>
<p>接下来，在 RViz 中，在MotionPlanning 面板的 Context 标签中选择 CHOMP。通过 imarker 移动末端执行器来设置所需的开始和目标状态，然后点击 MotionPlanning 面板中 Planning 标签下的 Plan 按钮来开始计划。Planner 将尝试在给定的开始和结束位置之间找到一个可行的解决方案。</p>
 <img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/Planners/CHOMP/image-20240917210733996.png" class="" title="image-20240917210733996">



<h1 id="调整-CHOMP-参数"><a href="#调整-CHOMP-参数" class="headerlink" title="调整 CHOMP 参数"></a><strong>调整 CHOMP 参数</strong></h1><p>CHOMP 有一些与之相关的优化参数。这些可以针对正在使用的特定环境&#x2F;机器人进行修改，这些参数通常在 chomp_planning.yaml 文件中。在工作的机器人的配置文件夹中。如果机器人不存在此文件，可以创建它并设置所需的参数值。例如：</p>
<ul>
<li><strong>planning_time_limit</strong>：最大规划时间</li>
<li><strong>max_iterations</strong>：最大迭代次数</li>
<li><strong>max_iterations_after_collision_free</strong>：找到无碰撞路径后要执行的最大迭代次数</li>
<li><strong>smoothness_cost_weight</strong>：该参数在 CHOMP 实际优化的最终成本中控制其权重</li>
<li><strong>obstacle_cost_weight</strong>：该参数控制了对 CHOMP 优化的最终成本所给予的障碍的权重。例如：0.0 有一些可以忽略的障碍，1.0 则是一个硬约束</li>
<li><strong>learning_rate</strong>：优化器用来在降低总成本的同时找到本地&#x2F;全局最小值的学习率</li>
<li><strong>smoothness_cost_velocity、smoothness_cost_acceleration、smoothness_cost_jerk</strong>：与velocity、acceleration 和 jerk 相关的变量</li>
<li><strong>ridge_factor</strong>：目标函数中 total quadratic cost matrix 对角线上的噪声。增加小的噪声[如0.001]可以使 CHOMP 避开障碍物，但代价是轨迹的平顺性</li>
<li><strong>use_pseudo_inverse</strong>：是否启用伪逆计算</li>
<li><strong>pseudo_inverse_ridge_factor</strong>：如果启用伪逆，则设置ridge因子</li>
<li><strong>joint_update_limit</strong>：设置关节的更新限制</li>
<li><strong>collision_clearance</strong>：为避开障碍物而需要保持的最小距离</li>
<li><strong>collision_threshold</strong>：为了避免碰撞，需要维护的碰撞阈值</li>
<li><strong>use_stochastic_descent</strong>：如果想在优化成本的同时使用随机下降，将其设置为 true&#x2F;false。在随机下降中，使用的是轨迹上的一个随机点，而不是所有的轨迹点。这样更快，并保证收敛，但在最坏的情况下可能需要更多的迭代</li>
<li><strong>enable_failure_recovery</strong>：若设置为 true，CHOMP 调整某些参数，希望在使用 chomp_planning.yaml 中指定的默认参数不存在解时找到解决方案</li>
<li><strong>max_recovery_attempts</strong>：这是第一次尝试使用默认参数后，使用不同参数集运行 CHOMP 的最大次数</li>
<li><strong>trajectory_initialization_method</strong>：为 CHOMP 提供轨迹初始化的类型，可以是 quintic-spline、linear、cubic 或 fillTrajectory。前三个选项是用于初始化起始和目标状态之间的轨迹的插值方法。fillTrajectory 提供了一个选项，可以从现有的运动规划器[如OMPL]计算出的路径初始化轨迹</li>
</ul>
<p>为 CHOMP 选择参数需要一些直觉，这是由规划环境提供的。例如，CHOMP 的默认参数在没有障碍的环境中工作得很好。然而，在有许多障碍的环境中，默认参数可能会导致 CHOMP 陷入局部最小值。通过调整参数，可以提高 CHOMP 生成的 plan 的质量。</p>
<p>一些未使用&#x2F;注释的参数是:</p>
<ul>
<li>hmc_stochasticity</li>
<li>hmc_annealing_factor</li>
<li>hmc_discretization</li>
<li>use_hamiltonian_montecarlo</li>
<li>animate_endeffector</li>
<li>animate_endeffector_segment</li>
<li>animate_path</li>
<li>random_jump_amount</li>
<li>add_randomness</li>
</ul>
<h1 id="CHOMP-与-OMPL-轨迹的区别"><a href="#CHOMP-与-OMPL-轨迹的区别" class="headerlink" title="CHOMP 与 OMPL 轨迹的区别"></a><strong>CHOMP 与 OMPL 轨迹的区别</strong></h1><p>Optimizing planners 优化成本函数，这有时可能会导致令人惊讶的结果: 通过一个薄薄的障碍可能比通过一个长而曲折的轨迹来避免所有碰撞的成本更低。在本节中，将对从 CHOMP 获得的路径进行区分，并将其与从 OMPL 获得的路径进行对比。</p>
<p>OMPL 是一个开放源码库，用于<strong>基于采样&#x2F;随机化</strong>的 motion planning 算法。基于抽样的算法在概率上是完整的：如果一个解决方案存在，那么它最终会被找到，但是解决方案的不存在是不能被报告的。这些算法是有效的，通常能快速找到解决方案。<strong>OMPL 不包含任何与碰撞检查或可视化相关的代码</strong>，因为 OMPL 的设计者不希望将其绑定到任何特定的碰撞检查器或可视化前端。这个库被设计成可以很容易地集成到提供附加组件的系统中。MoveIt 直接与 OMPL 集成，并使用 OMPL 中的 motion planner 作为默认的 planner 集。OMPL 中的 planner 是抽象的：也就是说，OMPL 没有机器人的概念。相反，MoveIt 配置 OMPL 并为 OMPL 提供后端以处理机器人技术中的问题。</p>
<p>CHOMP：虽然大多数高维 motion planners 将轨迹生成划分为不同的 <strong>planning 和 optimization 阶段</strong>，但 CHOMP 将<strong>协变梯度和函数梯度</strong>方法用于 optimization 阶段，设计一个完全基于轨迹优化的 motion planning 算法。给定一个不可行的初始轨迹，CHOMP 通过对周围环境的反应，快速地将轨迹从碰撞中拉出，同时优化关节速度、加速度等动力学量。它迅速收敛到一个光滑的无碰撞的轨迹，可以有效地执行机器人。协变更新规则确保 CHOMP 快速收敛到局部最优轨迹。</p>
<p>对于含有障碍物的场景，CHOMP 通常会在代价函数中加入一些噪声[<strong>ridge_factor</strong>]来计算机器人的动力学量[如加速度、速度]，从而生成不喜欢平滑轨迹的路径。CHOMP 在大多数情况下可以避开障碍物，但如果由于对轨迹的初始猜测错误而陷入局部极小值，则会失败。OMPL 可以用来为 CHOMP 生成无碰撞的 seed 轨迹来缓解这个问题。</p>
<h1 id="CHOMP-作为-OMPL-的-post-processor"><a href="#CHOMP-作为-OMPL-的-post-processor" class="headerlink" title="CHOMP 作为 OMPL 的 post-processor"></a><strong>CHOMP 作为 OMPL 的 post-processor</strong></h1><p>此节证明了 CHOMP 也可以作为其他规划算法得到的规划的后处理优化技术。这背后的直觉是，一些随机规划算法产生了 CHOMP 的初始猜测。CHOMP 然后根据这个初步猜测，进一步优化轨迹。要做到这一点，请遵循以下步骤:</p>
<p>① 创建 ompl-chomp_planning_pipeline.launch 文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- load OMPL planning pipeline, but add the CHOMP planning adapter. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_moveit_config)/launch/ompl_planning_pipeline.launch.xml&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;planning_adapters&quot;</span> <span class="attr">value</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">       default_planner_request_adapters/AddTimeParameterization</span></span></span><br><span class="line"><span class="string"><span class="tag">       default_planner_request_adapters/FixWorkspaceBounds</span></span></span><br><span class="line"><span class="string"><span class="tag">       default_planner_request_adapters/FixStartStateBounds</span></span></span><br><span class="line"><span class="string"><span class="tag">       default_planner_request_adapters/FixStartStateCollision</span></span></span><br><span class="line"><span class="string"><span class="tag">       default_planner_request_adapters/FixStartStatePathConstraints</span></span></span><br><span class="line"><span class="string"><span class="tag">       chomp/OptimizerAdapter&quot;</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- load chomp config --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_moveit_config)/config/chomp_planning.yaml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- override trajectory_initialization_method --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;trajectory_initialization_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;fillTrajectory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​           </p>
<p>② 该 launch 文件定义了新的 planning pipeline：ompl-CHOMP，它派生于 ompl pipeline，但是添加了 CHOMP pose-processor 作为规划适配器。此外，为了使用 ompl 生成的轨迹，将重写trajectory_initialization_method。</p>
<p>③ 启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch panda_moveit_config demo.launch pipeline:=ompl-chomp</span></span><br></pre></td></tr></table></figure>

<p>​              </p>
<p>将启动 RViz，在 context 选项卡下的运动规划面板中选择 OMPL。通过移动末端执行器来设置所需的起始和目标状态，方法与上面对 CHOMP 所做的相同。最后单击 Plan 按钮开始规划。规划器现在将首先运行 OMPL，然后在 OMPL 的输出上运行 CHOMP 以生成一个优化的路径。</p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>MotionPlanning</category>
        <category>Planners</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>OMPL</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/Planners/OMPL/</url>
    <content><![CDATA[<p>Open Motion Planning Library 是一个强大的集合，包含了最先进的基于采样的运动规划算法，是 MoveIt 中的默认规划器。</p>
<h1 id="OMPL-设置"><a href="#OMPL-设置" class="headerlink" title="OMPL 设置"></a><strong>OMPL 设置</strong></h1><p>对应 ompl_planning.yaml 文件。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">planner_configs:</span><br><span class="line">  SBLkConfigDefault:</span><br><span class="line">    type: geometric::SBL</span><br><span class="line">    range: 0.0  # Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span><br><span class="line">  ESTkConfigDefault:</span><br><span class="line">    type: geometric::EST</span><br><span class="line">    range: 0.0  # Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0 setup()</span><br><span class="line">    goal_bias: 0.05  # When close to goal select goal, with this probability. default: 0.05</span><br><span class="line">  LBKPIECEkConfigDefault:</span><br><span class="line">    type: geometric::LBKPIECE</span><br><span class="line">    range: 0.0  # Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span><br><span class="line">    border_fraction: 0.9  # Fraction of time focused on boarder default: 0.9</span><br><span class="line">    min_valid_path_fraction: 0.5  # Accept partially valid moves above fraction. default: 0.5</span><br><span class="line">  BKPIECEkConfigDefault:</span><br><span class="line">    type: geometric::BKPIECE</span><br><span class="line">    range: 0.0  # Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span><br><span class="line">    border_fraction: 0.9  # Fraction of time focused on boarder default: 0.9</span><br><span class="line">    failed_expansion_score_factor: 0.5  # When extending motion fails, scale score by factor. default: 0.5</span><br><span class="line">    min_valid_path_fraction: 0.5  # Accept partially valid moves above fraction. default: 0.5</span><br><span class="line">  KPIECEkConfigDefault:</span><br><span class="line">    type: geometric::KPIECE</span><br><span class="line">    range: 0.0  # Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span><br><span class="line">    goal_bias: 0.05  # When close to goal select goal, with this probability. default: 0.05</span><br><span class="line">    border_fraction: 0.9  # Fraction of time focused on boarder default: 0.9 (0.0,1.]</span><br><span class="line">    failed_expansion_score_factor: 0.5  # When extending motion fails, scale score by factor. default: 0.5</span><br><span class="line">    min_valid_path_fraction: 0.5  # Accept partially valid moves above fraction. default: 0.5</span><br><span class="line">  RRTkConfigDefault:</span><br><span class="line">    type: geometric::RRT</span><br><span class="line">    range: 0.0  # Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span><br><span class="line">    goal_bias: 0.05  # When close to goal select goal, with this probability? default: 0.05</span><br><span class="line">  RRTConnectkConfigDefault:</span><br><span class="line">    type: geometric::RRTConnect</span><br><span class="line">    range: 0.0  # Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span><br><span class="line">  RRTstarkConfigDefault:</span><br><span class="line">    type: geometric::RRTstar</span><br><span class="line">    range: 0.0  # Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span><br><span class="line">    goal_bias: 0.05  # When close to goal select goal, with this probability? default: 0.05</span><br><span class="line">    delay_collision_checking: 1  # Stop collision checking as soon as C-free parent found. default 1</span><br><span class="line">  TRRTkConfigDefault:</span><br><span class="line">    type: geometric::TRRT</span><br><span class="line">    range: 0.0  # Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span><br><span class="line">    goal_bias: 0.05  # When close to goal select goal, with this probability? default: 0.05</span><br><span class="line">    max_states_failed: 10  # when to start increasing temp. default: 10</span><br><span class="line">    temp_change_factor: 2.0  # how much to increase or decrease temp. default: 2.0</span><br><span class="line">    min_temperature: 10e-10  # lower limit of temp change. default: 10e-10</span><br><span class="line">    init_temperature: 10e-6  # initial temperature. default: 10e-6</span><br><span class="line">    frountier_threshold: 0.0  # dist new state to nearest neighbor to disqualify as frontier. default: 0.0 set in setup()</span><br><span class="line">    frountierNodeRatio: 0.1  # 1/10, or 1 nonfrontier for every 10 frontier. default: 0.1</span><br><span class="line">    k_constant: 0.0  # value used to normalize expresssion. default: 0.0 set in setup()</span><br><span class="line">  PRMkConfigDefault:</span><br><span class="line">    type: geometric::PRM</span><br><span class="line">    max_nearest_neighbors: 10  # use k nearest neighbors. default: 10</span><br><span class="line">  PRMstarkConfigDefault:</span><br><span class="line">    type: geometric::PRMstar</span><br><span class="line">  FMTkConfigDefault:</span><br><span class="line">    type: geometric::FMT</span><br><span class="line">    num_samples: 1000  # number of states that the planner should sample. default: 1000</span><br><span class="line">    radius_multiplier: 1.1  # multiplier used for the nearest neighbors search radius. default: 1.1</span><br><span class="line">    nearest_k: 1  # use Knearest strategy. default: 1</span><br><span class="line">    cache_cc: 1  # use collision checking cache. default: 1</span><br><span class="line">    heuristics: 0  # activate cost to go heuristics. default: 0</span><br><span class="line">    extended_fmt: 1  # activate the extended FMT*: adding new samples if planner does not finish successfully. default: 1</span><br><span class="line">  BFMTkConfigDefault:</span><br><span class="line">    type: geometric::BFMT</span><br><span class="line">    num_samples: 1000  # number of states that the planner should sample. default: 1000</span><br><span class="line">    radius_multiplier: 1.0  # multiplier used for the nearest neighbors search radius. default: 1.0</span><br><span class="line">    nearest_k: 1  # use the Knearest strategy. default: 1</span><br><span class="line">    balanced: 0  # exploration strategy: balanced true expands one tree every iteration. False will select the tree with lowest maximum cost to go. default: 1</span><br><span class="line">    optimality: 1  # termination strategy: optimality true finishes when the best possible path is found. Otherwise, the algorithm will finish when the first feasible path is found. default: 1</span><br><span class="line">    heuristics: 1  # activates cost to go heuristics. default: 1</span><br><span class="line">    cache_cc: 1  # use the collision checking cache. default: 1</span><br><span class="line">    extended_fmt: 1  # Activates the extended FMT*: adding new samples if planner does not finish successfully. default: 1</span><br><span class="line">  PDSTkConfigDefault:</span><br><span class="line">    type: geometric::PDST</span><br><span class="line">  STRIDEkConfigDefault:</span><br><span class="line">    type: geometric::STRIDE</span><br><span class="line">    range: 0.0  # Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span><br><span class="line">    goal_bias: 0.05  # When close to goal select goal, with this probability. default: 0.05</span><br><span class="line">    use_projected_distance: 0  # whether nearest neighbors are computed based on distances in a projection of the state rather distances in the state space itself. default: 0</span><br><span class="line">    degree: 16  # desired degree of a node in the Geometric Near-neightbor Access Tree (GNAT). default: 16</span><br><span class="line">    max_degree: 18  # max degree of a node in the GNAT. default: 12</span><br><span class="line">    min_degree: 12  # min degree of a node in the GNAT. default: 12</span><br><span class="line">    max_pts_per_leaf: 6  # max points per leaf in the GNAT. default: 6</span><br><span class="line">    estimated_dimension: 0.0  # estimated dimension of the free space. default: 0.0</span><br><span class="line">    min_valid_path_fraction: 0.2  # Accept partially valid moves above fraction. default: 0.2</span><br><span class="line">  BiTRRTkConfigDefault:</span><br><span class="line">    type: geometric::BiTRRT</span><br><span class="line">    range: 0.0  # Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span><br><span class="line">    temp_change_factor: 0.1  # how much to increase or decrease temp. default: 0.1</span><br><span class="line">    init_temperature: 100  # initial temperature. default: 100</span><br><span class="line">    frountier_threshold: 0.0  # dist new state to nearest neighbor to disqualify as frontier. default: 0.0 set in setup()</span><br><span class="line">    frountier_node_ratio: 0.1  # 1/10, or 1 nonfrontier for every 10 frontier. default: 0.1</span><br><span class="line">    cost_threshold: 1e300  # the cost threshold. Any motion cost that is not better will not be expanded. default: inf</span><br><span class="line">  LBTRRTkConfigDefault:</span><br><span class="line">    type: geometric::LBTRRT</span><br><span class="line">    range: 0.0  # Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span><br><span class="line">    goal_bias: 0.05  # When close to goal select goal, with this probability. default: 0.05</span><br><span class="line">    epsilon: 0.4  # optimality approximation factor. default: 0.4</span><br><span class="line">  BiESTkConfigDefault:</span><br><span class="line">    type: geometric::BiEST</span><br><span class="line">    range: 0.0  # Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span><br><span class="line">  ProjESTkConfigDefault:</span><br><span class="line">    type: geometric::ProjEST</span><br><span class="line">    range: 0.0  # Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span><br><span class="line">    goal_bias: 0.05  # When close to goal select goal, with this probability. default: 0.05</span><br><span class="line">  LazyPRMkConfigDefault:</span><br><span class="line">    type: geometric::LazyPRM</span><br><span class="line">    range: 0.0  # Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span><br><span class="line">  LazyPRMstarkConfigDefault:</span><br><span class="line">    type: geometric::LazyPRMstar</span><br><span class="line">  SPARSkConfigDefault:</span><br><span class="line">    type: geometric::SPARS</span><br><span class="line">    stretch_factor: 3.0  # roadmap spanner stretch factor. multiplicative upper bound on path quality. It does not make sense to make this parameter more than 3. default: 3.0</span><br><span class="line">    sparse_delta_fraction: 0.25  # delta fraction for connection distance. This value represents the visibility range of sparse samples. default: 0.25</span><br><span class="line">    dense_delta_fraction: 0.001  # delta fraction for interface detection. default: 0.001</span><br><span class="line">    max_failures: 1000  # maximum consecutive failure limit. default: 1000</span><br><span class="line">  SPARStwokConfigDefault:</span><br><span class="line">    type: geometric::SPARStwo</span><br><span class="line">    stretch_factor: 3.0  # roadmap spanner stretch factor. multiplicative upper bound on path quality. It does not make sense to make this parameter more than 3. default: 3.0</span><br><span class="line">    sparse_delta_fraction: 0.25  # delta fraction for connection distance. This value represents the visibility range of sparse samples. default: 0.25</span><br><span class="line">    dense_delta_fraction: 0.001  # delta fraction for interface detection. default: 0.001</span><br><span class="line">    max_failures: 5000  # maximum consecutive failure limit. default: 5000</span><br><span class="line">  TrajOptDefault:</span><br><span class="line">    type: geometric::TrajOpt</span><br><span class="line"></span><br><span class="line">panda_arm:</span><br><span class="line">  planner_configs:</span><br><span class="line">    - SBLkConfigDefault</span><br><span class="line">    - ESTkConfigDefault</span><br><span class="line">    - LBKPIECEkConfigDefault</span><br><span class="line">    - BKPIECEkConfigDefault</span><br><span class="line">    - KPIECEkConfigDefault</span><br><span class="line">    - RRTkConfigDefault</span><br><span class="line">    - RRTConnectkConfigDefault</span><br><span class="line">    - RRTstarkConfigDefault</span><br><span class="line">    - TRRTkConfigDefault</span><br><span class="line">    - PRMkConfigDefault</span><br><span class="line">    - PRMstarkConfigDefault</span><br><span class="line">    - FMTkConfigDefault</span><br><span class="line">    - BFMTkConfigDefault</span><br><span class="line">    - PDSTkConfigDefault</span><br><span class="line">    - STRIDEkConfigDefault</span><br><span class="line">    - BiTRRTkConfigDefault</span><br><span class="line">    - LBTRRTkConfigDefault</span><br><span class="line">    - BiESTkConfigDefault</span><br><span class="line">    - ProjESTkConfigDefault</span><br><span class="line">    - LazyPRMkConfigDefault</span><br><span class="line">    - LazyPRMstarkConfigDefault</span><br><span class="line">    - SPARSkConfigDefault</span><br><span class="line">    - SPARStwokConfigDefault</span><br><span class="line">    - TrajOptDefault</span><br><span class="line">panda_arm_hand:</span><br><span class="line">  planner_configs:</span><br><span class="line">    - SBLkConfigDefault</span><br><span class="line">    - ESTkConfigDefault</span><br><span class="line">    - LBKPIECEkConfigDefault</span><br><span class="line">    - BKPIECEkConfigDefault</span><br><span class="line">    - KPIECEkConfigDefault</span><br><span class="line">    - RRTkConfigDefault</span><br><span class="line">    - RRTConnectkConfigDefault</span><br><span class="line">    - RRTstarkConfigDefault</span><br><span class="line">    - TRRTkConfigDefault</span><br><span class="line">    - PRMkConfigDefault</span><br><span class="line">    - PRMstarkConfigDefault</span><br><span class="line">    - FMTkConfigDefault</span><br><span class="line">    - BFMTkConfigDefault</span><br><span class="line">    - PDSTkConfigDefault</span><br><span class="line">    - STRIDEkConfigDefault</span><br><span class="line">    - BiTRRTkConfigDefault</span><br><span class="line">    - LBTRRTkConfigDefault</span><br><span class="line">    - BiESTkConfigDefault</span><br><span class="line">    - ProjESTkConfigDefault</span><br><span class="line">    - LazyPRMkConfigDefault</span><br><span class="line">    - LazyPRMstarkConfigDefault</span><br><span class="line">    - SPARSkConfigDefault</span><br><span class="line">    - SPARStwokConfigDefault</span><br><span class="line">    - TrajOptDefault</span><br><span class="line">hand:</span><br><span class="line">  planner_configs:</span><br><span class="line">    - SBLkConfigDefault</span><br><span class="line">    - ESTkConfigDefault</span><br><span class="line">    - LBKPIECEkConfigDefault</span><br><span class="line">    - BKPIECEkConfigDefault</span><br><span class="line">    - KPIECEkConfigDefault</span><br><span class="line">    - RRTkConfigDefault</span><br><span class="line">    - RRTConnectkConfigDefault</span><br><span class="line">    - RRTstarkConfigDefault</span><br><span class="line">    - TRRTkConfigDefault</span><br><span class="line">    - PRMkConfigDefault</span><br><span class="line">    - PRMstarkConfigDefault</span><br><span class="line">    - FMTkConfigDefault</span><br><span class="line">    - BFMTkConfigDefault</span><br><span class="line">    - PDSTkConfigDefault</span><br><span class="line">    - STRIDEkConfigDefault</span><br><span class="line">    - BiTRRTkConfigDefault</span><br><span class="line">    - LBTRRTkConfigDefault</span><br><span class="line">    - BiESTkConfigDefault</span><br><span class="line">    - ProjESTkConfigDefault</span><br><span class="line">    - LazyPRMkConfigDefault</span><br><span class="line">    - LazyPRMstarkConfigDefault</span><br><span class="line">    - SPARSkConfigDefault</span><br><span class="line">    - SPARStwokConfigDefault</span><br><span class="line">    - TrajOptDefault</span><br></pre></td></tr></table></figure>



<h2 id="Longest-Valid-Segment-Fraction"><a href="#Longest-Valid-Segment-Fraction" class="headerlink" title="Longest Valid Segment Fraction"></a><strong>Longest Valid Segment Fraction</strong></h2><p>最长有效分段分数。<strong>longest_valid_segment_fraction</strong> 参数定义用于碰撞检测的机器人运动离散化程度，极大地影响了基于 ompl 的解决方案的性能和可靠性。本文中，motion 可以被认为是图中两个节点之间的边，其中节点是沿轨迹的路点。OMPL 中的默认运动碰撞检查器只是将边缘离散为许多子状态以进行碰撞检查。<strong>目前在 OMPL&#x2F;MoveIt 中没有可用的连续碰撞检查</strong>。</p>
<p>具体来说，<strong>longest_valid_segment_fraction</strong> 是机器人状态空间的一部分，假设机器人当前未处于碰撞中，假设机器人可以在保持无碰撞的情况下移动。例如，如果 <em>longest_valid_segment_fraction &#x3D; 0.01</em>，假设两个节点之间的边小于状态空间的 1&#x2F;100，那么不需要明确地检查沿这条边的任何子状态，只需要检查它连接的两个节点。</p>
<p>除了 ompl_planning.yaml 中的 longest_valid_segment_fraction 参数之外，还有 <strong>maximum_waypoint_distance</strong>，可在 dynamic reconfigure 文件中找到。maximum_waypoint_distance 为碰撞检查定义了相同的机器人运动离散化，但它是在绝对 level 上实现的，而不是使用状态空间的 fractions。例如，如果 maximum_waypoint_distance &#x3D; 0.1，那么如果一条状态空间距离小于 0.1 的边，那么不会显式地检查沿该边的任何子状态，而只需要检测两点。</p>
<p>如果同时设置了 longest_valid_segment_fraction 和 maximum_waypoint_distance，则选择产生最保守离散化的变量（在给定边缘上生成最多碰撞检查状态的变量）。</p>
<p>将 longest_valid_segment_fraction（或 maximum_waypoint_distance）设置得太低，碰撞检查&#x2F;运动规划会很慢。设置得太高，会错过小&#x2F;窄物体。此外，高碰撞检查分辨率会导致路径平滑器输出难以理解的运动，因为它们能够“捕捉”无效路径，然后尝试通过对其进行采样来修复它们，但并不完美。</p>
<p><a href="https://github.com/ros-planning/moveit/pull/337">此处记录了此参数对两个 MoveIt 教程示例的影响的快速分析</a>。</p>
<h2 id="Projection-Evaluator"><a href="#Projection-Evaluator" class="headerlink" title="Projection Evaluator"></a><strong>Projection Evaluator</strong></h2><p><strong>projection_evaluator</strong> 参数可以包含一个关节或 links 列表，以近似地覆盖配置空间。Planner 使用此设置，如:</p>
<ul>
<li>KPIECE</li>
<li>BKPIECE</li>
<li>LBKPIECE</li>
<li>PDST</li>
</ul>
<h2 id="Enforce-Planning-in-Joint-Space"><a href="#Enforce-Planning-in-Joint-Space" class="headerlink" title="Enforce Planning in Joint Space"></a><strong>Enforce Planning in Joint Space</strong></h2><p>根据 planning problem 的不同，MoveIt 在<strong>关节空间</strong>和<strong>笛卡尔空间</strong>之间进行选择，以表征规划问题。设置 group 参数 <strong>enforce_joint_model_state_space</strong> 将强制所有规划使用 joint space。</p>
<p><strong>默认情况下，带有方向路径约束的规划请求是在笛卡尔空间中采样的，因此调用 IK 作为生成采样器</strong>。</p>
<p>通过强制执行 joint space，规划过程将使用拒绝抽样来找到有效的请求。</p>
<h1 id="Smoothing-Paths"><a href="#Smoothing-Paths" class="headerlink" title="Smoothing Paths"></a><strong>Smoothing Paths</strong></h1><p>OMPL 中的许多 planners(包括默认的 planner)更倾向于寻找解决方案路径的速度而不是路径质量。在后处理阶段对可行路径进行平滑和缩短，以获得更接近最优路径。然而，由于 OMPL 中的算法是概率性的，因此不能保证每次都能找到全局最优解或相同的解。其他库，如基于搜索的规划库(Search Based Planning Library, SBPL)提供了确定性结果，即给定相同的环境、起点和目标，将始终得到相同的路径。SBPL 是基于 A* 的，因此将根据所选的搜索分辨率获得最佳结果。然而，SBPL 也有缺点，例如难以以适当的分辨率定义状态空间格(例如，如何定义关节角度或末端执行器姿态的良好离散化)和调整特殊的启发式。</p>
<p>在 OMPL 中有几个 planners 可以提供理论上的最优性保证，但通常只是渐近的:它们收敛到最优解，但收敛速度可能很慢。这些规划器使用的优化目标通常是路径长度的最小化，但也可以使用其他优化目标。</p>
<h2 id="OMPL-Optimization-Objectives"><a href="#OMPL-Optimization-Objectives" class="headerlink" title="OMPL Optimization Objectives"></a><strong>OMPL Optimization Objectives</strong></h2><p>OMPL 规划库中的几个 planners 能够针对指定的优化目标进行优化。目前可用于 MoveIt 的渐近最优 planner 是：</p>
<ul>
<li><p>RRT*</p>
</li>
<li><p>PRM*</p>
</li>
<li><p>LazyPRM*</p>
</li>
<li><p>BFMT</p>
</li>
<li><p>FMT</p>
</li>
<li><p>Lower Bound Tree RRT(LBTRRT)</p>
</li>
<li><p>SPARS</p>
</li>
<li><p>SPARS2</p>
</li>
<li><p>Transition-based RRT(T-RRT)</p>
</li>
</ul>
<p>OMPL 还提供了一种称为 <strong>AnytimePathShortening</strong> 的 meta-optimization 算法，该算法重复并行运行多个规划器，并与路径捷径和路径杂交(这两种技术用于局部优化解决方案路径)交织在一起。虽然没有被证明是最优的，但在实践中通常是获得渐近最优解路径的有效策略。</p>
<p>以及 OMPL 中的其他优化规划器，但尚未在 MoveIt 中公开：</p>
<ul>
<li>RRT#</li>
<li>RRTX</li>
<li>Informed RRT*</li>
<li>Batch Informed Trees(BIT*)</li>
<li>Sparse Stable RRT</li>
<li>FMT*</li>
<li>CForest</li>
</ul>
<p>以下优化目标是可用的:</p>
<ul>
<li>PathLengthOptimizationObjective (Default，路径长度)</li>
<li>MechanicalWorkOptimizationObjective</li>
<li>MaximizeMinClearanceObjective (最大化最小间隙)</li>
<li>StateCostIntegralObjective (状态代价积分)</li>
<li>MinimaxObjective</li>
</ul>
<p>这些优化目标的配置可以通过 ompl_planning.yaml 中的 <strong>optimization_objective</strong> 完成。该参数的值被设置为所选优化目标的名称。例如，要配置 RRTstar 以使用 maximizemclearanceobjective, ompl_planning.yaml 中的 planner entry:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">RRTstarkConfigDefault:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::RRTstar</span></span><br><span class="line">    <span class="attr">optimization_objective:</span> <span class="string">MaximizeMinClearanceObjective</span></span><br><span class="line">    <span class="attr">range:</span> <span class="number">0.0</span></span><br><span class="line">    <span class="attr">goal_bias:</span> <span class="number">0.05</span></span><br><span class="line">    <span class="attr">delay_collision_checking:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>有关 OMPL 最优规划者的更多信息，请参阅: <a href="http://ompl.kavrakilab.org/optimalPlanning.html">OMPL-最优规划文档</a>。</p>
<h2 id="OMPL-优化器停止条件"><a href="#OMPL-优化器停止条件" class="headerlink" title="OMPL 优化器停止条件"></a><strong>OMPL 优化器停止条件</strong></h2><p>当超过给定的时间限制时，OMPL 中的规划器会终止求解。但是，可以通过 <strong>termination_condition</strong> 参数(ompl_planning.yaml)为每个规划程序配置指定额外的规划程序终止条件。可能的值为：</p>
<ul>
<li>**Iteration [num]**：迭代 num 次后终止</li>
<li>**CostConvergence [solutionsWindow，epsilon]**：在代价（由优化目标指定）收敛之后终止。参数 solutionsWindow 指定的最小解决方案数，用于确认 planner 是否收敛。参数 ε 是要考虑收敛的阈值。应该是接近 0 的正数。如果在找到新的更好的解决方案后累积移动平均值没有以 ε 的相对分数变化，则已经达到收敛。OMPL 版本 ≥ 1.5.0</li>
<li><strong>ExactSolution</strong>：找到确切的解决方案或发生超时后立即终止。这修改了 anytime&#x2F;optimizing 规划器的逻辑，在发现第一个可行解决方案时终止</li>
</ul>
<p>在所有情况下，planner 将在满足用户指定的终止条件或达到 timeout 指定的时间限制时终止，两者中以先发生者为准。</p>
<p>例如，要指定 RRTstar 应该在收敛时终止，可以使用以下设置:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">RRTstarkConfigDefault:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::RRTstar</span></span><br><span class="line">    <span class="attr">termination_condition:</span> <span class="string">CostConvergence[10,.1]</span></span><br><span class="line">    <span class="attr">range:</span> <span class="number">0.0</span></span><br><span class="line">    <span class="attr">goal_bias:</span> <span class="number">0.05</span></span><br><span class="line">    <span class="attr">delay_collision_checking:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>注意，没有指定优化目标(optimization_objective)，因此将使用默认的 <strong>PathLengthOptimizationObjective</strong>。</p>
<h2 id="Post-Processing-Smoothing"><a href="#Post-Processing-Smoothing" class="headerlink" title="Post-Processing Smoothing"></a><strong>Post-Processing Smoothing</strong></h2><p>请注意，平滑对于减少间接路由的程度是有限度的。还要注意，这里只讨论基于几何（运动学）的平滑。速度&#x2F;加速度&#x2F;急动平滑在其他地方处理，参考：Time Parameterization。</p>
<p><strong>可以通过增加 planning time 来调整 MoveIt 在平滑上花费的时间</strong>。在找到初始规划之后但在 <strong>allowed_planning_time</strong> 用完之前的任何剩余时间都将用于平滑。MoveIt 还进行路径混合(path hybridization)，将 N 个不同规划运行的最佳部分拼接在一起。因此，<strong>num_planning_attempts</strong> 也会影响质量。</p>
<p>虽然目前未在 MoveIt 的顶层公开，但可以通过在 model_based_planning_context.cpp 中将简化持续时间(simplification duration)设置为 0（无限制）来实现更多平滑。这将启用 OMPL 的 simpleMax() 函数。</p>
<p>除了内部 OMPL 平滑器之外，最近还努力使用 STOMP&#x2F;CHOMP 进行后处理。请参考：<a href="https://moveit.ros.org/moveit!/ros/2018/10/25/gsoc-motion-planning-support.html">gsoc-motion-planning-support</a>。</p>
<h1 id="Persistent-Roadmaps"><a href="#Persistent-Roadmaps" class="headerlink" title="Persistent Roadmaps"></a><strong>Persistent Roadmaps</strong></h1><p>默认情况下，对于每个运动规划请求，规划算法均从头开始。但是，对于构建环境路线图的某些规划器，如果规划场景或多或少是静态的，则可以从先前的运动计划请求中重用路线图。请考虑以下计划配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">PersistentLazyPRMstar:</span> <span class="comment"># use this with a representative environment to create a roadmap</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::LazyPRMstar</span></span><br><span class="line">    <span class="attr">multi_query_planning_enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">store_planner_data:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">load_planner_data:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">planner_data_path:</span> <span class="string">/tmp/roadmap.graph</span></span><br><span class="line"><span class="attr">PersistentLazyPRM:</span> <span class="comment"># use this to load a previously created roadmap</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::LazyPRM</span></span><br><span class="line">    <span class="attr">multi_query_planning_enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">store_planner_data:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">load_planner_data:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">planner_data_path:</span> <span class="string">/tmp/roadmap.graph</span></span><br><span class="line"><span class="attr">SemiPersistentLazyPRMstar:</span> <span class="comment"># reuses roadmap during lifetime of node but doesn&#x27;t save/load roadmap to/from disk</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::LazyPRMstar</span></span><br><span class="line">    <span class="attr">multi_query_planning_enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">store_planner_data:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">load_planner_data:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">SemiPersistentLazyPRM:</span> <span class="comment"># reuses roadmap during lifetime of node but doesn&#x27;t save/load roadmap to/from disk</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::LazyPRM</span></span><br><span class="line">    <span class="attr">multi_query_planning_enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">store_planner_data:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">load_planner_data:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>第一个规划程序配置 <strong>PersistentLazyPRMstar</strong>，将使用 LazyPRM* 来随着每个运动计划请求，在采样的机器人配置之间不断发展渐近最优路径的路线图。销毁规划器实例后，它将把路线图保存到磁盘中。 <strong>PersistentLazyPRM</strong> 配置与之类似，不同之处在于它将从磁盘加载路线图，但销毁后不会将其保存。<strong>SemiPersistent</strong> 规划器配置不会加载&#x2F;保存路线图，但是会随着每个运动规划请求的进行而不断扩展路线图（而不是在规划之前清除路线图的默认行为）。**支持持续性规划功能的四个计划器是：PRM，PRM*，LazyPRM 和 LazyPRM***。它们之间的关键区别在于，当在路线图中搜索有效路径时，惰性变体将根据需要，重新验证节点和边的有效性。非惰性变体将不会检查路线图对于当前环境是否仍然有效。换句话说，对于静态环境，请使用非惰性变体；对于变化很小的环境，请使用惰性变体；如果环境可能发生重大变化，请使用非持久性计划器。</p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>MotionPlanning</category>
        <category>Planners</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>Pilz Industrial</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/Planners/Pilz/</url>
    <content><![CDATA[<p>pilz_industrial_motion_planner 提供了一个轨迹生成器，以使用MoveIt PlanerManager 插件的接口，规划标准的机器人运动，如 PTP, LIN, CIRC。</p>
<p><strong>1、User Interface MoveGroup</strong></p>
<p>这个包实现了 MoveIt 的 planning_interface::PlannerManager 接口。通过加载相应的 planning pipeline(pilz_industrial_motion_planner_planning_pipeline.launch.xml)，轨迹生成功能可以通过用户界面访问(c++、python或rviz) move_group 提供的节点,例如 &#x2F;plan_kinematics_path 服务和 move_group action。参考 Move Group c++ Interface。</p>
<p><strong>2、Joint limits</strong></p>
<p>对于所有命令，planner 使用来自参数服务器的最大速度和加速度。使用 MoveIt setup assistant，文件 joint_limits.yaml 会使用适当的默认值自动生成并在启动期间加载。</p>
<p>参数服务器上的限制会覆盖来自 URDF 机器人描述的限制。请注意，虽然在 URDF 和参数服务器中都可以设置位置限制和速度限制，但<strong>只能通过参数服务器设置加速度限制</strong>。作为对常用 has_acceleration 和 max_acceleration 参数的扩展，添加了设置 has_deceleration 和 max_deceleration(&lt;0.0) 的功能。</p>
<p>限制合并的<strong>前提是来自参数服务器的限制必须更严格或至少等于 URDF 中设置的参数</strong>。</p>
<p>目前，计算的轨迹将通过使用所有限制的最严格组合作为所有关节的共同限制来遵守限制。</p>
<p><strong>3、Cartesian limits</strong></p>
<p>对于笛卡尔轨迹生成(LIN&#x2F;CIRC)，该 planner 需要三维笛卡尔空间中最大速度的信息。即平移&#x2F;旋转速度&#x2F;加速&#x2F;减速需要在参数服务器上进行如下设置:</p>
<p>​                cartesian_limits:  max_trans_vel: 1  max_trans_acc: 2.25  max_trans_dec: -5  max_rot_vel: 1.57              </p>
<p>对于平动梯形和旋转梯形，planner 假定相同的加速度比。因此，旋转加速度计算为 max_trans_acc &#x2F; max_trans_vel * max_rot_vel(相应的减速)。</p>
<p><strong>4、Planning Interface</strong></p>
<p>这个包使用 moveit_msgs::MotionPlanRequest 和 moveit_msgs::MotionPlanResponse 作为运动规划的输入和输出。</p>
<p><strong>5、PTP motion command</strong></p>
<p>该规划器生成具有梯形关节速度分布的完全同步的点对点轨迹。假设所有关节具有相同的最大关节速度&#x2F;加速度&#x2F;减速极限。如果没有，则采用最严格的限制。以达到目标时间最长的轴为导向轴(<strong>lead axis</strong>)。其他轴都是减速的，以便它们与导向轴共享相同的加速&#x2F;匀速&#x2F;减速阶段</p>
<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/Planners/Pilz/image-20240917211529434.png" class="" title="image-20240917211529434">

<p>1）输入参数</p>
<p>moveit_msgs::MotionPlanRequest</p>
<ul>
<li><p>planner_id：PTP</p>
</li>
<li><p>group_name：规划组名称</p>
</li>
<li><p>max_velocity_scaling_factor：</p>
</li>
<li><p>max_acceleration_scaling_factor：</p>
</li>
<li><p>start_state&#x2F;joint_state&#x2F;(name,position and velocity)：</p>
</li>
<li><p>goal_constraints：</p>
</li>
<li><p>关节空间目标点</p>
</li>
<li><ul>
<li>goal_constraints&#x2F;joint_constraints&#x2F;joint_name: goal joint name</li>
<li>goal_constraints&#x2F;joint_constraints&#x2F;position: goal joint position</li>
</ul>
</li>
<li><p>笛卡尔空间目标点</p>
</li>
<li><ul>
<li>goal_constraints&#x2F;position_constraints&#x2F;header&#x2F;frame_id: 该数据关联的坐标系</li>
<li>goal_constraints&#x2F;position_constraints&#x2F;link_name: target link name</li>
<li>goal_constraints&#x2F;position_constraints&#x2F;constraint_region: bounding volume of the target point</li>
<li>goal_constraints&#x2F;position_constraints&#x2F;target_point_offset: offset (in the link frame) for the target point on the target link (optional)</li>
</ul>
</li>
</ul>
<p><strong>6、LIN motion command</strong></p>
<p>该 planner 生成目标和开始位姿之间的线性笛卡尔轨迹。规划器使用笛卡尔限制在笛卡尔空间中生成梯形速度剖面。平移运动是起始位置向量与目标位置向量之间的线性插值。旋转运动是四元数 slerp 之间的开始和目标方向。</p>
<p>平动和旋转运动在时间上是同步的。这个计划器只接受零速度的开始状态。规划结果是一个关节轨迹。如果运动计划因违反关节空间限制而失败，用户需要调整笛卡尔速度&#x2F;加速度比例因子。</p>
<p><strong>7、CIRC motion command</strong></p>
<p><strong>8、示例</strong></p>
<p>​                sudo apt install ros-melodic-prbt-moveit-config roslaunch prbt_moveit_config demo.launch              </p>
<p><strong>9、使用 Planner</strong></p>
<p>pilz_industrial_motion_planner::CommandPlanner 是作为 MoveIt motion planning pipeline 提供的，因此，可以与使用 MoveIt 的所有其他 manipulators 一起使用。加载插件需要在 move_group 节点启动之前，将 &#x2F;move_group&#x2F;planning_plugin 参数设置为 pilz_industrial_motion_planner::CommandPlanner。</p>
<p>要使用 command planner，必须定义 cartesian limits。该限制应该在名称空间 _planning 下。其中 是指 URDF 加载的参数。例如，如果 URDF 被加载到 &#x2F;robot_description 中，cartesian limits 必须定义在 &#x2F;robot_description_planning。</p>
<p>参考：prbt_moveit_config 包</p>
<p><strong>1）Sequence of multiple segments</strong></p>
<p>要连接多个轨迹并一次规划轨迹，可以使用序列功能。这减少了规划开销，并允许遵循预先描述的路径，而无需在中间点停下来。</p>
<p>请注意:如果某个序列中的命令规划失败，则该顺序中的命令将全部不执行。</p>
<p>请注意:序列命令<strong>允许包含多个组的命令</strong>(例如“机械手”，“抓手”)</p>
<p><strong>2）User interface sequence capability</strong></p>
<p>接受 moveit_msgs::<strong>MotionSequenceRequest</strong> 作为输入。该请求包含上面描述的后续目标列表和一个额外的 blend_radius 参数。如果给定的blend_radius(meter)大于零，则对应的轨迹与下面的目标合并在一起，使机器人不停留在当前目标。</p>
<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/Planners/Pilz/image-20240917211548571.png" class="" title="image-20240917211548571">

<p>参考：<a href="https://github.com/ros-planning/moveit/blob/master/moveit_planners/pilz_industrial_motion_planner/doc/MotionBlendAlgorithmDescription.pdf">MotionBlendAlgorithmDescription.pdf</a></p>
<p>MotionSequenceRequest 的限制</p>
<ul>
<li>只有第一个魔表有 start state。后续轨迹以前一个目标点为起点</li>
<li>两个随后的 blend_radius 球体不能重叠。Blend_radius(i) + Blend_radius(i+1) 必须小于目标之间的距离</li>
</ul>
<p>用户可以通过 action server <strong>&#x2F;sequence_move_group</strong> 执行moveit_msgs::MotionSequenceRequest</p>
<p>在单个点上，MoveGroupSequenceAction 与标准 MoveGroup 能力不同:如果机器人已经在目标位置，路径仍然被执行。底层的 PlannerManager 可以检查单个 moveit_msgs::MotionPlanRequest 的约束是否已经满足，但 MoveGroupSequenceAction 功能没有实现这样的检查，以允许在圆形或类似的路径上移动。</p>
<p>参考：<a href="https://github.com/PilzDE/pilz_industrial_motion/blob/melodic-devel/pilz_robot_programming/examples/demo_program.py">pilz_robot_programming</a></p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>MotionPlanning</category>
        <category>Planners</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>SBPL</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/Planners/SBPL/</url>
    <content><![CDATA[<p>基于搜索的规划库</p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>MotionPlanning</category>
        <category>Planners</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>STOMP</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/Planners/STOMP/</url>
    <content><![CDATA[<p><strong>Stochastic Trajectory Optimization for Motion Planning</strong>，是一种<strong>概率优化</strong>框架(Kalakrishnan et al. 2011)。STOMP 在合理的时间内产生平滑且性能良好的无碰撞路径。该方法依赖于生成噪声轨迹来探索初始（可能不可行）轨迹周围的空间，然后将其组合以产生成本更低的更新轨迹。在每次迭代中优化基于障碍和平滑成本组合的成本函数。使用的特定优化算法不需要梯度信息，因此可能无法获得 derivatives 的一般成本（例如，对应于约束和电机扭矩的成本）可以包含在成本函数中。 STOMP 的一些优势包括：它可以包含额外的目标函数，例如扭矩限制、能量和工具约束。STOMP  可以处理不需要可微分的成本函数。它使用距离场和球面近似来快速计算距离查询和碰撞成本。</p>
<p>使用要求</p>
<ul>
<li>必须安装最新版本的 MoveIt。在 ROS Melodic 上，需要从源代码构建 MoveIt。需要从源代码构建，因为 STOMP 还不是正式发布的一部分。因此，它不包含在二进制包中</li>
<li>要将 STOMP 与机器人一起使用，必须已经为机器人准备了一个MoveIt 配置包。例如，Panda 机器人，为 panda_moveit_config 包。这通常是使用 MoveIt setup assisant 构建的</li>
<li>还必须从源代码中构建 ros-industrial&#x2F;industrial_moveit 包。这需要从源代码构建，因为 industrial_moveit 还没有作为 debian 发布。只需要从 industrial_moveit 构建 stomp_core 包，因为使用 moveIt 的 STOMP 功能不需要其他包</li>
</ul>
<p><strong>1、使用 STMOP</strong></p>
<p>注意：如果正在使用此 panda_moveit_config，则可以跳过这些步骤，直接执行步骤 ③</p>
<p>① 下载 stomp_planning_pipeline.launch.xml 到 MoveIt config 包的 launch 目录。最新版的 MoveIt Setup Assistant 会默认生成该文件。该文件内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Stomp Plugin for MoveIt --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;planning_plugin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;stomp_moveit/StompPlannerManager&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- The request adapters (plugins) ORDER MATTERS --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;planning_adapters&quot;</span> <span class="attr">value</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">       default_planner_request_adapters/AddTimeParameterization</span></span></span><br><span class="line"><span class="string"><span class="tag">       default_planner_request_adapters/FixWorkspaceBounds</span></span></span><br><span class="line"><span class="string"><span class="tag">       default_planner_request_adapters/FixStartStateBounds</span></span></span><br><span class="line"><span class="string"><span class="tag">       default_planner_request_adapters/FixStartStateCollision</span></span></span><br><span class="line"><span class="string"><span class="tag">       default_planner_request_adapters/FixStartStatePathConstraints&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;start_state_max_bounds_error&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;planning_plugin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg planning_plugin)&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;request_adapters&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg planning_adapters)&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;start_state_max_bounds_error&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg start_state_max_bounds_error)&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find panda_moveit_config)/config/stomp_planning.yaml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>② 下载 stomp_planning.yaml 文件到 MoveIt config 包的 config 目录。该文件包含 STOMP 所需的参数。这些参数特定于 SRDF 文件中定义的每个“planning group”。因此，如果有三个规划组，那么配置文件将为每个规划组定义一组特定的参数</p>
<p>③ 修改 move_group.launch 文件，将 pipeline 参数改为 stomp：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- move_group settings --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;allow_trajectory_execution&quot;</span> <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;fake_execution&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;max_safe_path_cost&quot;</span> <span class="attr">default</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;jiggle_fraction&quot;</span> <span class="attr">default</span>=<span class="string">&quot;0.05&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;publish_monitored_planning_scene&quot;</span> <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Planning Functionality --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">ns</span>=<span class="string">&quot;move_group&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find myworkcell_moveit_config)/launch/planning_pipeline.launch.xml&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;pipeline&quot;</span> <span class="attr">value</span>=<span class="string">&quot;stomp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>运行 demo：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch panda_moveit_config demo.launch</span>     </span><br></pre></td></tr></table></figure>

<p>​         </p>
<p>运行带障碍物场景 demo：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch panda_moveit_config demo_stomp.launch rosrun moveit_tutorials collision_scene_example.py cluttered</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun moveit_tutorials collision_scene_example.py sparse</span>              </span><br></pre></td></tr></table></figure>



<p><strong>2、调整 STOMP 参数</strong></p>
<p>STOMP 有一些与之相关的参数。这些可以针对正在使用的特定环境&#x2F;机器人进行修改，这些参数通常在 stomp_planning.yaml 文件中。在工作的机器人的配置文件夹中。如果机器人不存在此文件，可以创建它并设置所需的参数值。例如：</p>
<p><strong>1）Optimization 参数</strong></p>
<ul>
<li>num_timesteps：</li>
<li>num_iterations：</li>
<li>num_iterations_after_valid：</li>
<li>num_rollouts：</li>
<li>max_rollouts：</li>
<li>initialization method：</li>
<li>control_cost_weight：</li>
</ul>
<p><strong>2）Noise Generator 参数</strong></p>
<ul>
<li>class：可设置为：NormalDistributionSampling(默认值) 或 <a href="https://github.com/ros-industrial/industrial_moveit/blob/kinetic-devel/stomp_plugins/example_pages.dox">GoalGuidedMultivariateGaussian</a></li>
<li>stddev：关节噪声程度。该阵列中的每个值都是施加到该阵列中该位置的关节上的噪声的振幅。例如，数组中最左边的值将用于设置机器人第一个关节的噪声(在本例中为 panda_joint1)。该数组的维数应等于规划组名称中的关节数。较大的“stddev”值对应于较大的关节运动</li>
</ul>
<p><strong>3）Cost Function 参数</strong></p>
<ul>
<li>class：</li>
<li>collision_penalty：</li>
<li>cost_weight：</li>
<li>kernel_window_percentage：</li>
<li>longest_valid_joint_move：</li>
</ul>
<p><strong>4）Update Filter 参数</strong></p>
<ul>
<li>class：</li>
<li>poly_order：</li>
</ul>
<p><strong>3、STOMP 测试单元</strong></p>
<p>为了运行单元测试，必须从 ros-industrial&#x2F;industrial_moveit 中获得 stomp_core 包。如果这些测试成功运行，这意味着系统上成功构建并运行了 STOMP。运行 STOMP 单元测试:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">catkin_make run_tests_stomp_moveit stomp_moveit_utest</span>   </span><br></pre></td></tr></table></figure>

<p>​           </p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>MotionPlanning</category>
        <category>Planners</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>trajOpt</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/Planners/trajOpt/</url>
    <content><![CDATA[<p><a href="https://ros-planning.github.io/moveit_tutorials/doc/trajopt_planner/trajopt_planner_tutorial.html">TrajOpt planner</a> 仍然是 MoveIt 2019 年夏季实习项目的 alpha 功能，需要进一步加强。</p>
<p>TrajOpt 是一种用于运动规划问题的序列凸优化算法，其中非凸、非仿射等式和非等式约束被放松、近似线性化和凸化以创建目标函数。这项工作是基于[<a href="https://ros-planning.github.io/moveit_tutorials/doc/trajopt_planner/trajopt_planner_tutorial.html#schulman2013">schulman2013</a>] 和<a href="https://github.com/ros-industrial-consortium/trajopt_ros">原始实现</a>完成的。顺序凸规划，简单地说就是使用一个凸模型并重复地最小化它。考虑以下非凸问题:</p>
<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/Planners/trajOpt/image-20240917211853088.png" class="" title="image-20240917211853088">

<p>其中 f(x) 是最小长度路径</p>
<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/Planners/trajOpt/image-20240917211910096.png" class="" title="image-20240917211910096">

<p>基本思想是通过维护一个解的估计和一个凸信任域来迭代，在这个凸信任域上信任解。这两个关键点是:</p>
<ul>
<li>f(x) 和 g(x) 在信赖域上的凸逼近。然后将近似值转换为惩罚函数</li>
<li>h(x) 在可信区域上的仿射逼近。然后通过考虑 h(x) 的绝对值，将近似 h(x) 转换为罚函数</li>
</ul>
<p>TrajOpt 算法流程：</p>
<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/Planners/trajOpt/image-20240917211931527.png" class="" title="image-20240917211931527">

<p>将关节空间或笛卡尔空间中的避障、关节限制、目标姿态等约束条件转化为惩罚函数，得到最终目标函数。最内环是用序列二次规划作为信赖域方法。它在盒子信赖域内计算二阶泰勒近似。</p>
<p>TrajOpt 的一个重要部分是如何制定避障约束。在离散情况下，约束基本是有符号距离(机器人与自身或与障碍物之间的链接)与安全值之间的差值，在连续情况下，有符号距离是两个路径点与障碍物之间的凸包。</p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>MotionPlanning</category>
        <category>Planners</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>OPW Kinematics Solver</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/%E8%BF%90%E5%8A%A8%E5%AD%A6%E6%B1%82%E8%A7%A3%E5%99%A8/OPW%20Kinematics%20Solver/</url>
    <content><![CDATA[<p>工业机械手 <strong>OPW</strong> 运动学求解器。</p>
<p>摘自 <a href="https://github.com/Jmeyer1292/opw_kinematics">opw_kinematics</a>：一个简单的解析逆运动学库，<strong>用于具有平行底座和球形手腕的工业机器人</strong>。基于 Mathias Brandstötter、Arthur Angerer 和 Michael Hofbaur 的论文(An Analytical Solution of the Inverse Kinematics Problem of Industrial Serial Manipulators with an Ortho-parallel Basis and a Spherical)。</p>
<p>该软件包旨在为具有平行底座和球形手腕的工业机器人提供一种更简单的替代方案，而不是基于 IK-Fast 的解决方案。这种配置在工业机器人中非常常见。</p>
<p>1、安装使用</p>
<p><a href="https://github.com/JeroenDM/moveit_opw_kinematics_plugin">opw_kinematics_plugin</a> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install ros-noetic-moveit-opw-kinematics-plugin</span></span><br></pre></td></tr></table></figure>

<p>​            </p>
<p>替换 kinematics.yaml 中的 kinematics_solver</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kinematics_solver: kdl_kinematics_plugin/KDLKinematicsPlugin</span><br><span class="line">替换为</span><br><span class="line">kinematics_solver: moveit_opw_kinematics_plugin/MoveItOPWKinematicsPlugin</span><br></pre></td></tr></table></figure>

<p>​        </p>
<p>并设置参数来描述机械手的几何形状。参数可从机器人手册中查询。以下是KUKA KR 6 R700所需的参数示例</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">manipulator:</span></span><br><span class="line">  <span class="attr">kinematics_solver:</span> <span class="string">moveit_opw_kinematics_plugin/MoveItOPWKinematicsPlugin</span></span><br><span class="line">  <span class="attr">opw_kinematics_geometric_parameters:</span></span><br><span class="line">    <span class="attr">a1:</span>  <span class="number">0.025</span></span><br><span class="line">    <span class="attr">a2:</span> <span class="number">-0.035</span></span><br><span class="line">    <span class="attr">b:</span>   <span class="number">0.000</span></span><br><span class="line">    <span class="attr">c1:</span>  <span class="number">0.400</span></span><br><span class="line">    <span class="attr">c2:</span>  <span class="number">0.315</span></span><br><span class="line">    <span class="attr">c3:</span>  <span class="number">0.365</span></span><br><span class="line">    <span class="attr">c4:</span>  <span class="number">0.080</span></span><br><span class="line">  <span class="attr">opw_kinematics_joint_offsets:</span> [<span class="number">0.0</span>, <span class="number">-1.57079632679</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">  <span class="attr">opw_kinematics_joint_sign_corrections:</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

<p>​           </p>
<p>参数的含义可以通过草图来最好地理解。如果与 URDF 不匹配，插件将在启动时报错:</p>
 <img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/%E8%BF%90%E5%8A%A8%E5%AD%A6%E6%B1%82%E8%A7%A3%E5%99%A8/OPW%20Kinematics%20Solver/image-20240917213358269.png" class="" title="image-20240917213358269">

<p>我们计划收集 OPW 参数集，作为 ros-industrial robot 支持包的一部分。发那科已经开始这样做了。以 <a href="https://github.com/ros-industrial/fanuc/blob/3ea2842baca3184cc621071b785cbf0c588a4046/fanuc_m10ia_support/config/opw_parameters_m10ia.yaml">M-10iA</a> 为例，kinematics.yaml 可精简为</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">manipulator:</span></span><br><span class="line">  <span class="attr">kinematics_solver:</span> <span class="string">moveit_opw_kinematics_plugin/MoveItOPWKinematicsPlugin</span></span><br></pre></td></tr></table></figure>



<p>然后在 launch&#x2F;planning_context.launch 中添加一条 rosparam load，使该文件中的参数被加载到参数服务器:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Load default settings for kinematics; these settings are overridden by settings in a node&#x27;s namespace --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">ns</span>=<span class="string">&quot;$(arg robot_description)_kinematics&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find opw_tutorial)/config/kinematics.yaml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">ns</span>=<span class="string">&quot;manipulator&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find fanuc_lrmate200ib_support)/config/opw_parameters_lrmate200ib.yaml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需先下载 fanuc_lrmate200ib_support 包。</p>
<p>注意：ns 参数需与 planning group 匹配。</p>
<p>MoveIt Setup Assistant 可以自动插入这一行，无需手动编辑planning_context.launch 文件。</p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>MotionPlanning</category>
        <category>运动学求解器</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>IKFast Kinematics Solver</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/%E8%BF%90%E5%8A%A8%E5%AD%A6%E6%B1%82%E8%A7%A3%E5%99%A8/IKFast%20Kinematics%20Solver/</url>
    <content><![CDATA[<p>机器人运动学编译器 IKFast 是 Rosen Diankov 的 OpenRAVE 运动规划软件中提供的一个强大的逆运动学求解器。与大多数逆运动学求解器不同，<strong>IKFast 可以解析任何复杂运动学链的运动学方程</strong>，并生成特定语言的文件(如c++)供以后使用。最终的结果是非常稳定的解决方案。</p>
<p>MoveIt IKFast 是使用 OpenRAVE 生成的 cpp 文件为 MoveIt 生成 IKFast 运动学插件的工具。本教程将引导设置机器人以利用 IKFast 的强大功能。MoveIt IKFast 插件生成器工具不适用于 &gt;7 DOF 的手臂。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><strong>方法一</strong></p>
<p>安装依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install cmake g++ git ipython minizip python-dev python-h5py python-numpy python-scipy qt4-dev-tools</span><br><span class="line"></span><br><span class="line">sudo apt-get install libassimp-dev libavcodec-dev libavformat-dev libavformat-dev libboost-all-dev libboost-date-time-dev libbullet-dev libfaac-dev libglew-dev libgsm1-dev liblapack-dev liblog4cxx-dev libmpfr-dev libode-dev libogg-dev libpcrecpp0v5 libpcre3-dev libqhull-dev libqt4-dev libsoqt-dev-common libsoqt4-dev libswscale-dev libswscale-dev libvorbis-dev libx264-dev libxml2-dev libxvidcore-dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 OpenSceneGraph-3.4 ,以使能 OpenRave viewer</span></span><br><span class="line">sudo apt-get install libcairo2-dev libjasper-dev libpoppler-glib-dev libsdl2-dev libtiff5-dev libxrandr-dev</span><br><span class="line">git clone https://github.com/openscenegraph/OpenSceneGraph.git --branch OpenSceneGraph-3.4</span><br><span class="line">cd OpenSceneGraph</span><br><span class="line">mkdir build; cd build</span><br><span class="line">cmake .. -DDESIRED_QT_VERSION=4</span><br><span class="line">make -j$(nproc)</span><br><span class="line">sudo make install</span><br><span class="line">sudo make install_ld_conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pip install --upgrade --user sympy==0.7.1</span></span><br><span class="line">pip install --upgrade --user sympy -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">sudo apt remove python-mpmath</span><br></pre></td></tr></table></figure>

<p>安装 MoveIt IKFast</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指令安装</span></span><br><span class="line">sudo apt-get install ros-melodic-moveit-kinematics</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">源码安装</span></span><br><span class="line">git clone https://github.com/ros-planning/moveit.git</span><br></pre></td></tr></table></figure>

<p>安装 openRAVE</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 OpenRAVE. 验证失败。使用源码安装</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">sudo</span> apt-get install ros-melodic-openrave</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">export</span> PYTHONPATH=<span class="variable">$PYTHONPATH</span>:`openrave-config --python-dir`</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">源码安装 OpenRAVE</span></span><br><span class="line">git clone --branch latest_stable https://github.com/rdiankov/openrave.git</span><br><span class="line">cd openrave &amp;&amp; mkdir build &amp;&amp; cd build</span><br><span class="line">cmake -DODE_USE_MULTITHREAD=ON -DOSG_DIR=/usr/local/lib64/ ..</span><br><span class="line">make -j$(nproc)</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>上述方法编译时失败，改用如下方法二</p>
<p><strong>方法二</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/crigroup/openrave-installation</span><br><span class="line">cd openrave-installation</span><br><span class="line">./install-dependencies.sh</span><br><span class="line">./install-osg.sh</span><br><span class="line">./install-fcl.sh</span><br><span class="line"></span><br><span class="line">./install-openrave.sh</span><br></pre></td></tr></table></figure>



<h1 id="创建-Collada-文件"><a href="#创建-Collada-文件" class="headerlink" title="创建 Collada 文件"></a><strong>创建 Collada 文件</strong></h1><p>参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MYROBOT_NAME - name of robot as in your URDF</span><br><span class="line">PLANNING_GROUP - planning group 名, 在SRDF和kinematics.yam中引用</span><br><span class="line">MOVEIT_IK_PLUGIN_PKG - name of the new package you just created</span><br><span class="line">IKFAST_OUTPUT_PATH - 生成的 IKFast output.cpp 文件的位置</span><br></pre></td></tr></table></figure>

<p>为了使该示例的复制&#x2F;粘贴更加友好，设置一个 MYROBOT_NAME 环境变量为机器人的名字:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export MYROBOT_NAME=&quot;panda_arm&quot;</span><br></pre></td></tr></table></figure>



<p>首先，需要机器人描述文件，它是 Collada 或 OpenRAVE 机器人格式的。如果机器人不是这种格式，建议创建一个 ROS URDF 文件。</p>
<p>如果是 xacro 格式，则先转换为 urdf 格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun xacro xacro --inorder -o <span class="string">&quot;<span class="variable">$MYROBOT_NAME</span>&quot;</span>.urdf <span class="string">&quot;<span class="variable">$MYROBOT_NAME</span>&quot;</span>.urdf.xacro</span></span><br></pre></td></tr></table></figure>



<p>将 URDF 转为 Collada(.dae) 文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun collada_urdf urdf_to_collada <span class="string">&quot;<span class="variable">$MYROBOT_NAME</span>&quot;</span>.urdf <span class="string">&quot;<span class="variable">$MYROBOT_NAME</span>&quot;</span>.dae</span></span><br></pre></td></tr></table></figure>



<p>在将 URDF 文件转换为 Collada 文件时，经常会出现浮点问题，因此创建了一个脚本，将 .dae 文件中的所有数字四舍五入到小数点后 x 位。最好一开始就跳过这一步，看看 IKFast 是否可以用默认值生成一个解决方案，但如果生成器花费的时间超过了，比如说，一个小时，试试下面的方法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export IKFAST_PRECISION=&quot;5&quot;</span><br><span class="line">cp &quot;$MYROBOT_NAME&quot;.dae &quot;$MYROBOT_NAME&quot;.backup.dae  # create a backup of your full precision dae.</span><br><span class="line">rosrun moveit_kinematics round_collada_numbers.py &quot;$MYROBOT_NAME&quot;.dae &quot;$MYROBOT_NAME&quot;.dae &quot;$IKFAST_PRECISION&quot;</span><br></pre></td></tr></table></figure>

<p>根据经验，推荐小数点后 5 位，但如果 OpenRAVE IKFast 生成器需要很长时间才能找到解决方案，可以降低小数点后的位数。</p>
<p>查看生成的 dae 文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是一个 7DOF 的手臂，需要填写一个 -freeindex 参数</span></span><br><span class="line">openrave-robot.py &quot;$MYROBOT_NAME&quot;.dae --info links</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 dae 文件</span></span><br><span class="line">openrave &quot;$MYROBOT_NAME&quot;.dae</span><br></pre></td></tr></table></figure>

<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/%E8%BF%90%E5%8A%A8%E5%AD%A6%E6%B1%82%E8%A7%A3%E5%99%A8/IKFast%20Kinematics%20Solver/image-20240917212908429.png" class="" title="image-20240917212908429">



<p>例如：gen3</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rosrun xacro xacro --inorder -o gen3.urdf gen3.xacro</span><br><span class="line">rosrun collada_urdf urdf_to_collada gen3.urdf gen3.dae</span><br><span class="line">rosrun moveit_kinematics round_collada_numbers.py gen3.dae gen3.dae 5</span><br><span class="line">openrave gen3.dae</span><br></pre></td></tr></table></figure>

<img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/%E8%BF%90%E5%8A%A8%E5%AD%A6%E6%B1%82%E8%A7%A3%E5%99%A8/IKFast%20Kinematics%20Solver/image-20240917212932924.png" class="" title="image-20240917212932924">

<h1 id="创建-IKFast-Soulution-CPP-文件"><a href="#创建-IKFast-Soulution-CPP-文件" class="headerlink" title="创建 IKFast Soulution CPP 文件"></a><strong>创建 IKFast Soulution CPP 文件</strong></h1><h2 id="选择-IK-类型"><a href="#选择-IK-类型" class="headerlink" title="选择 IK 类型"></a><strong>选择 IK 类型</strong></h2><p>需要选择想要的 IK。最常见的 IK 类型是 transform6d。</p>
<p><a href="http://openrave.org/docs/latest_stable/openravepy/ikfast/#ik-types">IK types</a>：</p>
<ul>
<li><strong>Transform6D</strong>：end effector reaches desired 6D transformation</li>
<li><strong>Rotation3D</strong>：end effector reaches desired 3D rotation</li>
<li><strong>Translation3D</strong>：end effector origin reaches desired 3D translation</li>
<li><strong>Direction3D</strong>：末端执行器坐标系的方向达到预期方向 direction</li>
<li><strong>Ray4D</strong>：ray on end effector coordinate system reaches desired global ray</li>
<li><strong>Lookat3D</strong>：末端执行器坐标系统的方向指向期望的三维位置</li>
<li><strong>TranslationDirection5D</strong>：end effector origin and direction reaches desired 3D translation and direction. Can be thought of as Ray IK where the origin of the ray must coincide.</li>
<li><strong>TranslationXY2D</strong>：end effector origin reaches desired XY translation position, Z is ignored. The coordinate system with relative to the base link.</li>
<li><strong>TranslationLocalGlobal6D</strong>：local point on end effector origin reaches desired 3D global point. Because both local point and global point can be specified, there are 6 values</li>
<li><strong>TranslationXAxisAngle4D,TranslationYAxisAngle4D, TranslationZAxisAngle4D</strong>： end effector origin reaches desired 3D translation, manipulator direction makes a specific angle with x&#x2F;y&#x2F;z-axis (defined in the manipulator base link’s coordinate system)</li>
<li><strong>ranslationXAxisAngleZNorm4D，TranslationYAxisAngleXNorm4D，TranslationZAxisAngleYNorm4D</strong>：end effector origin reaches desired 3D translation, manipulator direction needs to be orthogonal to z, x, or y axis and be rotated at a certain angle starting from the x, y, or z axis (defined in the manipulator base link’s coordinate system)</li>
</ul>
<h2 id="选择-planning-group"><a href="#选择-planning-group" class="headerlink" title="选择 planning group"></a><strong>选择 planning group</strong></h2><p>如果希望为机器人生成 IKFast 解决方案，机器人有多个手臂或 planning  group ，需生成其中一个。例如，可能有两个 planning group:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;planning_group_name&gt; = &quot;left_arm&quot; &lt;planning_group_name&gt; = &quot;right_arm&quot;    </span><br></pre></td></tr></table></figure>

<p>​          </p>
<p>设置环境变量，方便使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PLANNING_GROUP=&quot;panda_arm&quot;   </span><br></pre></td></tr></table></figure>

<p>​           </p>
<h2 id="定义-Links-数目"><a href="#定义-Links-数目" class="headerlink" title="定义 Links 数目"></a><strong>定义 Links 数目</strong></h2><p>还需要 base_link 和 end_link 的 link index，在这两者之间计算IK。可以通过查看的模型中的 links 列表来计算链接的数量:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openrave-robot.py <span class="string">&quot;<span class="variable">$MYROBOT_NAME</span>&quot;</span>.dae --info links</span>  </span><br></pre></td></tr></table></figure>

<p>​            </p>
<p>根据 ROS 规范的要求，一个典型的 6-DOF 机械手应该有 6 个 arm links + 一个虚拟的 base_link。如果模型中没有额外的 link，则得到: baselink&#x3D;0 和 eelink&#x3D;6。通常，会提供一个额外的 tool_link 来定位 grasp&#x2F;tool 坐标系，给出 eelink&#x3D;7。</p>
<p>下例中的机械手也有另一个 dummy mounting_link，给出 baselink&#x3D;1 和 eelink&#x3D;8</p>
<table>
<thead>
<tr>
<th>name</th>
<th>index</th>
<th>parents</th>
</tr>
</thead>
<tbody><tr>
<td>panda_link0</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>panda_link1</td>
<td>1</td>
<td>panda_link0</td>
</tr>
<tr>
<td>panda_link2</td>
<td>2</td>
<td>panda_link1</td>
</tr>
<tr>
<td>panda_link3</td>
<td>3</td>
<td>panda_link2</td>
</tr>
<tr>
<td>panda_link4</td>
<td>4</td>
<td>panda_link3</td>
</tr>
<tr>
<td>panda_link5</td>
<td>5</td>
<td>panda_link4</td>
</tr>
<tr>
<td>panda_link6</td>
<td>6</td>
<td>panda_link5</td>
</tr>
<tr>
<td>panda_link7</td>
<td>7</td>
<td>panda_link6</td>
</tr>
<tr>
<td>panda_link8</td>
<td>8</td>
<td>panda_link7</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export BASE_LINK=&quot;0&quot; export EEF_LINK=&quot;8&quot;  </span><br></pre></td></tr></table></figure>

<p>如果是 7-DOF 的手臂，需要指定一个自由关节。为 7-DOF 机器人选择正确的自由关节可以对运动学插件的性能产生重大影响。建议对自由关节进行不同选择的试验</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export FREE_INDEX=&quot;1&quot;     </span><br></pre></td></tr></table></figure>

<p>​         </p>
<p><strong>4）生成 IK Solver</strong></p>
<p>为了生成 6-DOF 机械手底座和工具框架之间的 IK 解决方案，使用以下命令格式。建议将输出命名为 ikfast61_”$PLANNING_GROUP”.cpp:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export IKFAST_OUTPUT_PATH=`pwd`/ikfast61_&quot;$PLANNING_GROUP&quot;.cpp   </span><br></pre></td></tr></table></figure>

<p>​           </p>
<p>对 6-DOF 机械臂：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python `openrave-config --python-dir`/openravepy/_openravepy_/ikfast.py --robot=<span class="string">&quot;<span class="variable">$MYROBOT_NAME</span>&quot;</span>.dae --iktype=transform6d --baselink=<span class="string">&quot;<span class="variable">$BASE_LINK</span>&quot;</span> --eelink=<span class="string">&quot;<span class="variable">$EEF_LINK</span>&quot;</span> --savefile=<span class="string">&quot;<span class="variable">$IKFAST_OUTPUT_PATH</span>&quot;</span></span> </span><br></pre></td></tr></table></figure>

<p>​             </p>
<p>对 7-DOF 机械臂，需要指定一个自由 link(–freeindex)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python `openrave-config --python-dir`/openravepy/_openravepy_/ikfast.py --robot=<span class="string">&quot;<span class="variable">$MYROBOT_NAME</span>&quot;</span>.dae --iktype=transform6d --baselink=<span class="string">&quot;<span class="variable">$BASE_LINK</span>&quot;</span> --eelink=<span class="string">&quot;<span class="variable">$EEF_LINK</span>&quot;</span> --freeindex=<span class="string">&quot;<span class="variable">$FREE_INDEX</span>&quot;</span> --savefile=<span class="string">&quot;<span class="variable">$IKFAST_OUTPUT_PATH</span>&quot;</span></span>  </span><br></pre></td></tr></table></figure>

<p>​            </p>
<p>这个过程的速度和成功将取决于机器人的复杂性。一个典型的 6-DOF 机械手，在底部或手腕处有 3 个相交轴，只需要几分钟就可以生成 IK。</p>
<p>已知问题: freeindex 参数有一个错误，它不能正确处理树索引。假设 -baselink&#x3D;2 -eelink&#x3D;16, links index 从 3 到 9 与当前 planning group 链无关。在这种情况下 -freeindex 将期望索引2作为link 2，但是索引 3 作为link 10，索引 9 作为 link 16。</p>
<h1 id="创建插件"><a href="#创建插件" class="headerlink" title="创建插件"></a><strong>创建插件</strong></h1><p>建议插件包命名格式：”$MYROBOT_NAME”<em>ikfast</em>“$PLANNING_GROUP”_plugin:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export MOVEIT_IK_PLUGIN_PKG=&quot;$MYROBOT_NAME&quot;_ikfast_&quot;$PLANNING_GROUP&quot;_plugin cd ~/catkin_ws/src catkin_create_pkg &quot;$MOVEIT_IK_PLUGIN_PKG&quot; catkin build  </span><br></pre></td></tr></table></figure>

<p>​            </p>
<p>创建插件源码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rosrun moveit_kinematics create_ikfast_moveit_plugin.py &quot;$MYROBOT_NAME&quot; &quot;$PLANNING_GROUP&quot; &quot;$MOVEIT_IK_PLUGIN_PKG&quot; &quot;$IKFAST_OUTPUT_PATH&quot;       </span><br></pre></td></tr></table></figure>

<p>​       </p>
<p>或者，不使用 ROS：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python /path/to/create_ikfast_moveit_plugin.py &quot;$MYROBOT_NAME&quot; &quot;$PLANNING_GROUP&quot; &quot;$MOVEIT_IK_PLUGIN_PKG&quot; &quot;$IKFAST_OUTPUT_PATH&quot; </span><br></pre></td></tr></table></figure>

<p>​             </p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h1><p>IKFast 插件的功能应该与默认的 KDL IK 求解器相同，但性能会大大提高。MoveIt 配置文件由 moveit_ikfast 脚本自动编辑，但是可以使用机器人运动学中的 kinematics_solver 参数在 KDL 和 IKFast 求解器之间切换。yaml文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosed &quot;$MYROBOT_NAME&quot;_moveit_config kinematics.yaml     </span><br></pre></td></tr></table></figure>

<p>​         </p>
<p>编辑以下部分：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;planning_group&gt;:</span></span><br><span class="line">  <span class="attr">kinematics_solver:</span> <span class="string">&lt;myrobot_name&gt;_&lt;planning_group&gt;_kinematics/IKFastKinematicsPlugin</span></span><br><span class="line"><span class="string">-INSTEAD</span> <span class="string">OF-</span></span><br><span class="line">  <span class="attr">kinematics_solver:</span> <span class="string">kdl_kinematics_plugin/KDLKinematicsPlugin</span></span><br></pre></td></tr></table></figure>

<p>​    </p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>MotionPlanning</category>
        <category>运动学求解器</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>TRAC-IK Kinematics Solver</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/%E8%BF%90%E5%8A%A8%E5%AD%A6%E6%B1%82%E8%A7%A3%E5%99%A8/TRAC-IK%20Kinematics%20Solver/</url>
    <content><![CDATA[<p>TRAC-IK 是由 TRACLabs 开发的一款逆运动学求解器，它通过线程将两种 IK 实现结合在一起，以实现比常用的开源 IK 求解器更可靠的解决方案。从官方文档：(TRACK-ik)为 KDL 中流行的雅可比矩阵逆方法提供了一种可选的逆运动学求解器。具体地说，KDL 的收敛算法是基于牛顿方法的，这种方法在存在关节限制的情况下不能很好地工作——这在许多机器人平台中很常见。trac-IK 同时运行两种 IK 实现：</p>
<ul>
<li>一个是对 KDL 基于牛顿的 convergence 的简单扩展，该算法通过随机跳跃检测并缓解由于关节限制而导致的局部最小值</li>
<li>第二种是 SQP(Sequential Quadratic Programming,即:顺序二次规划)非线性优化方法。使用能够更好地处理关节限制的准牛顿(quasi-Newton)方法</li>
</ul>
<p>默认情况下，当这些算法中的任何一个收敛到一个解时，IK 搜索会立即返回。为了获得 “最佳” IK 解，还提供了距离和可操作性的次要约束条件。</p>
<p>trac_ik_kinematics_plugin 包提供了一个 KinematicsBase MoveIt 接口，可以替换默认的 KDL 求解器。目前不支持模拟关节。</p>
<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt-get install ros-melodic-trac-ik-kinematics-plugin</span> </span><br></pre></td></tr></table></figure>

<p>​             </p>
<p>使用</p>
<ul>
<li>安装 trac_ik_kinematics_plugin 和 trac_ik_lib 包</li>
<li>修改 MoveIt! kinematics.yaml 文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kinematics_solver: kdl_kinematics_plugin/KDLKinematicsPlugin</span><br><span class="line">替换为</span><br><span class="line">kinematics_solver: trac_ik_kinematics_plugin/TRAC_IKKinematicsPlugin</span><br></pre></td></tr></table></figure>

<p>​           </p>
<ul>
<li><p>设置参数</p>
</li>
<li><ul>
<li><p>kinematics_solver_timeout 及 position_only_ik</p>
</li>
<li><p>solve_type 可以是：</p>
</li>
<li><ul>
<li>Speed，默认值</li>
<li>Distance</li>
<li>Manipulation1</li>
<li>Manipulation2</li>
</ul>
</li>
<li><p>kinematics_solver_attempts：不需要，与 KDL 不同，Trac-IK 解析器失败时会自动重启</p>
</li>
<li><p>kinematic_solver_search_resolution</p>
</li>
</ul>
</li>
<li><p>注意：用于确定有效解决方案的笛卡尔误差距离是 1e-5，因为这是硬编码到 MoveIt 的 KDL 插件中的。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>MotionPlanning</category>
        <category>运动学求解器</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>kinematics配置</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/%E8%BF%90%E5%8A%A8%E5%AD%A6%E6%B1%82%E8%A7%A3%E5%99%A8/kinematics/</url>
    <content><![CDATA[<p><strong>MoveIt! 使用插件结构，尤其是允许用户编写自己的逆运动学算法。Forward kinematics（正向运动学） and finding jacobians（查找雅可比矩阵） 被整合到自己的 RobotState 类。默认逆运动学插件配置使用 KDL numerical jacobian-based solver。由 MoveIt! Setup Assistant 自动配置。</strong></p>
<p>用户可以选择执行自己的运动学求解器，例如 PR2 有自己的运动学求解器。要实现这样的求解的一种流行的方法是使用 ikfast 包产生需要与特定工作的机器人的 C++ 代码。</p>
<p>在规划场景中，冲突检测通过 CollisionWorld 对象来配置，由 FCL 包（主要的CC库）来执行。</p>
<p>Allowed Collision Matrix (ACM)（免检冲突矩阵），在运动规划里，冲突检测会耗费甚至达到 90% 的计算资源。ACM 编码需要检测的对象间的对应关系（机器人的或世界的）。如果在 ACM 关联两对象的值为1，那就不需要检测，这情况就比如两个对象相隔很远，永远不会发生碰撞。</p>
<h1 id="kinematics-配置"><a href="#kinematics-配置" class="headerlink" title="kinematics 配置"></a>kinematics 配置</h1><p>kinematics 配置参数位于 kinematics.yaml 文件中。例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">panda_arm:</span></span><br><span class="line">  <span class="attr">kinematics_solver:</span> <span class="string">kdl_kinematics_plugin/KDLKinematicsPlugin</span></span><br><span class="line">  <span class="attr">kinematics_solver_search_resolution:</span> <span class="number">0.005</span></span><br><span class="line">  <span class="attr">kinematics_solver_timeout:</span> <span class="number">0.05</span></span><br><span class="line">  <span class="attr">kinematics_solver_attempts:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>



<h2 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h2><ul>
<li><strong>kinematics_solver</strong>：运动学求解器插件名。必须与 plugin description 文件中的名字一致</li>
<li><strong>kinematics_solver_search_resolution</strong>：指定求解器可能用于在冗余空间中搜索逆运动学的分辨率</li>
<li><strong>kinematics_solver_timeout</strong>：逆运动学求解器可能执行的每个内部迭代的默认超时(以秒为单位)。典型的迭代(例如，数值求解器)将包括从种子状态随机重新启动，然后是求解周期(适用于此超时)。解算器可以尝试多次重启。默认的重启次数由 kinematics_solver_attempts 参数定义</li>
<li><strong>kinematics_solver_attempts</strong>：重试次数。最好将超时设置得较低，并在单个解决方案周期中快速失败</li>
</ul>
<h2 id="KDL-Kinematics-插件"><a href="#KDL-Kinematics-插件" class="headerlink" title="KDL Kinematics 插件"></a>KDL Kinematics 插件</h2><p>KDL kinematics 插件封装了 Orocos KDL 包提供的数值逆运动学求解器。</p>
<ul>
<li>默认的运动学插件</li>
<li>遵守 URDF 中指定的关节限制(如果 URDF 中指定了 safety 限制，则将使用 safety 限制)</li>
<li>KDL 运动学插件目前只适用于串行链(serial chains)</li>
</ul>
<h2 id="LMA-Kinematic-插件"><a href="#LMA-Kinematic-插件" class="headerlink" title="LMA Kinematic 插件"></a>LMA Kinematic 插件</h2><p>LMA (Levenberg-Marquardt)运动学插件也是封装了 Orocos KDL 包提供的数值逆运动学求解器。</p>
<ul>
<li>遵守 URDF 中指定的关节限制(如果 URDF 中指定了 safety 限制，则将使用 safety 限制)</li>
<li>该插件目前只适用于串行链(serial chains)</li>
</ul>
<p>使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kinematics_solver: lma_kinematics_plugin/LMAKinematicsPlugin  </span><br></pre></td></tr></table></figure>



<h2 id="Cached-IK-插件"><a href="#Cached-IK-插件" class="headerlink" title="Cached IK 插件"></a><a href="https://github.com/ros-planning/moveit/blob/master/moveit_kinematics/cached_ik_kinematics_plugin/README.md">Cached IK 插件</a></h2><p>Cched IK 运动学插件创建 IK 解决方案的持久缓存。这个缓存然后被用来加速任何其他 IK 求解器。对 IK 求解器的调用将在缓存中使用类似的状态作为 IK 求解器的种子(seed)。如果不能返回一个解，则使用用户指定的 seed 状态再次调用 IK 求解器。若新的 IK 解决方案与缓存中的状态有很大不同，将被添加到缓存中。定期将缓存保存到磁盘。</p>
<p>要使用缓存 IK 运动学插件，需要修改文件 kinematics.yaml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">manipulator:</span></span><br><span class="line">  <span class="attr">kinematics_solver:</span> <span class="string">kdl_kinematics_plugin/KDLKinematicsPlugin</span></span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">manipulator:</span></span><br><span class="line">  <span class="attr">kinematics_solver:</span> <span class="string">cached_ik_kinematics_plugin/CachedKDLKinematicsPlugin</span></span><br><span class="line">  <span class="comment"># optional parameters for caching:</span></span><br><span class="line">  <span class="attr">max_cache_size:</span> <span class="number">10000</span></span><br><span class="line">  <span class="attr">min_pose_distance:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">min_joint_config_distance:</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>



<p>kinematics_solver 的可能值包括：</p>
<ul>
<li><p><strong>cached_ik_kinematics_plugin&#x2F;CachedKDLKinematicsPlugin</strong>: 封装默认的 KDL IK 求解器</p>
</li>
<li><p><strong>cached_ik_kinematics_plugin&#x2F;CachedSrvKinematicsPlugin</strong>: 使用 ros service 调用与扩展 IK 求解器通信.</p>
</li>
<li><p><strong>cached_ik_kinematics_plugin&#x2F;CachedTRACKinematicsPlugin</strong>: 封装 <a href="https://bitbucket.org/traclabs/trac_ik">TRAC IK solver</a>。编译时必须能检测到 KDL IK 运动学插件</p>
</li>
<li><p><strong>cached_ik_kinematics_plugin&#x2F;CachedUR5KinematicsPlugin</strong>: 封装用于 UR5 机械臂的 <strong>analytic IK solver</strong>.</p>
</li>
</ul>
<h2 id="Position-Only-IK"><a href="#Position-Only-IK" class="headerlink" title="Position Only IK"></a><strong>Position Only IK</strong></h2><p>该求解器可以很容易地启用(只有当使用 KDL 运动学插件)通过添加以下行到 kinematics.yaml 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">position_only_ik: True  </span><br></pre></td></tr></table></figure>



<h1 id="逆运动学求解算法对比"><a href="#逆运动学求解算法对比" class="headerlink" title="逆运动学求解算法对比"></a>逆运动学求解算法对比</h1><img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/MotionPlanning/%E8%BF%90%E5%8A%A8%E5%AD%A6%E6%B1%82%E8%A7%A3%E5%99%A8/kinematics/image-20240917213610685.png" class="" title="image-20240917213610685">

]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>MotionPlanning</category>
        <category>运动学求解器</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>planning scene API</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/PlanningScene/planning%20scene%20API/</url>
    <content><![CDATA[<p>本教程中，将研究使用 planning scene 差异来执行两个操作:</p>
<ul>
<li>向 world 中添加和删除对象</li>
<li>将物体附加到机器人上&#x2F;从机器人上分离</li>
</ul>
<p><strong>1、运行测试</strong></p>
<p>运行代码</p>
<p>​                roslaunch panda_moveit_config demo.launch roslaunch moveit_tutorials planning_scene_ros_api_tutorial.launch              </p>
<p>此时，在 RViz 中会看到：</p>
<ul>
<li>物体出现在 planning scene 中</li>
<li>物体附加到机器人上</li>
<li>物体从机器人上分离</li>
<li>从 planning scene 中删除物体</li>
</ul>
<p><strong>2、源码分析</strong></p>
<p>代码位于 <a href="https://github.com/ros-planning/moveit_tutorials/tree/melodic-devel/doc/planning_scene_ros_api">planning_scene_ros_api</a></p>
<p><strong>1）可视化</strong></p>
<p>MoveItVisualTools 包提供了许多在 RViz 中可视化物体、机器人和轨迹的功能，还提供了调试工具，例如 step-by-step introspection 脚本等。</p>
<p>​                moveit_visual_tools::MoveItVisualTools visual_tools(“panda_link0”); visual_tools.deleteAllMarkers();              </p>
<p><strong>2）ROS API</strong></p>
<p>Planning scene publisher 的 ROS API 是通过使用 diffs 主题接口实现的。Planning scene diff 是当前 planning scene(由move_group节点维护)与用户所需的新 planning scene 之间的差异。</p>
<p><strong>3）Advertise the required topic</strong></p>
<p>创建一个发布者并等待订阅者，请注意，这个主题可能需要在 launch 文件中重新映射。</p>
<p>​                &#x2F;&#x2F; 创建 Publisher ros::Publisher planning_scene_diff_publisher &#x3D; node_handle.advertise&lt;moveit_msgs::PlanningScene&gt;(“planning_scene”, 1); ros::WallDuration sleep_t(0.5); while (planning_scene_diff_publisher.getNumSubscribers() &lt; 1) {  sleep_t.sleep(); } visual_tools.prompt(“Press ‘next’ in the RvizVisualToolsGui window to start the demo”);              </p>
<p><strong>4）Define the attached object message</strong></p>
<p>将使用此消息向 world 中添加或删除物体，并将物体附加到机器人。</p>
<p>​                moveit_msgs::AttachedCollisionObject attached_object; attached_object.link_name &#x3D; “panda_leftfinger”; &#x2F;* The header must contain a valid TF frame*&#x2F; attached_object.object.header.frame_id &#x3D; “panda_leftfinger”; &#x2F;* The id of the object <em>&#x2F; attached_object.object.id &#x3D; “box”; &#x2F;</em> A default pose <em>&#x2F; geometry_msgs::Pose pose; pose.orientation.w &#x3D; 1.0; &#x2F;</em> Define a box to be attached *&#x2F; shape_msgs::SolidPrimitive primitive; primitive.type &#x3D; primitive.BOX; primitive.dimensions.resize(3); primitive.dimensions[0] &#x3D; 0.1; primitive.dimensions[1] &#x3D; 0.1; primitive.dimensions[2] &#x3D; 0.1; attached_object.object.primitives.push_back(primitive); attached_object.object.primitive_poses.push_back(pose);              </p>
<p>注意，将物体附加到机器人上需要将相应的操作指定为 ADD 操作</p>
<p>​                attached_object.object.operation &#x3D; attached_object.object.ADD;              </p>
<p>由于将对象连接到机械手以模拟拾取对象，所以希望碰撞检查器忽略添加的物体与机械手之间的碰撞</p>
<p>​                attached_object.touch_links &#x3D; std::vector<a href="std::string">std::string</a>{ “panda_hand”, “panda_leftfinger”, “panda_rightfinger” };              </p>
<p><strong>5）Add an object into the environment</strong></p>
<p>通过将物体添加到 planning scene 的 world 部分的碰撞物体集中，将物体添加到环境中。注意，这里只使用了 attached_object 消息的 “object” 字段。</p>
<p>​                ROS_INFO(“Adding the object into the world at the location of the hand.”); moveit_msgs::PlanningScene planning_scene; &#x2F;&#x2F; 注意：只需使用 attached_object.object planning_scene.world.collision_objects.push_back(attached_object.object); planning_scene.is_diff &#x3D; true; planning_scene_diff_publisher.publish(planning_scene); visual_tools.prompt(“Press ‘next’ in the RvizVisualToolsGui window to continue the demo”);              </p>
<p><strong>6）Interlude: Synchronous vs Asynchronous updates</strong></p>
<p>有两种单独的机制可以使用 diffs 与 move_group 节点交互:</p>
<ul>
<li>通过 rosservice 调用发送一个 diff 并阻塞直到 diff 被应用(同步更新)</li>
<li>通过主题发送一个 diff，不阻塞等待(异步更新)</li>
</ul>
<p>虽然本教程的大部分内容使用后一种机制，但用以下服务客户端替换 planning_scene_diff_publisher 是完全合理的:</p>
<p>​                ros::ServiceClient planning_scene_diff_client &#x3D;    node_handle.serviceClient&lt;moveit_msgs::ApplyPlanningScene&gt;(“apply_planning_scene”); planning_scene_diff_client.waitForExistence(); moveit_msgs::ApplyPlanningScene srv; srv.request.scene &#x3D; planning_scene; planning_scene_diff_client.call(srv);              </p>
<p>注意，直到确定 diff 已经被应用，这个过程才会继续。</p>
<p><strong>7）Attach an object to the robot</strong></p>
<p>当机器人从环境中抓起一个物体时，需要将该物体“附加”到机器人上，以便处理机器人模型的任何组件都知道该附加物体，例如用于碰撞检查。</p>
<p>附加一个物体需要两个操作：</p>
<ul>
<li>从环境中删除原始物体</li>
<li>将该物体附加到机器人</li>
</ul>
<p>​                &#x2F;* First, define the REMOVE object message*&#x2F; moveit_msgs::CollisionObject remove_object; remove_object.id &#x3D; “box”; remove_object.header.frame_id &#x3D; “panda_link0”; remove_object.operation &#x3D; remove_object.REMOVE; &#x2F;* Carry out the REMOVE + ATTACH operation *&#x2F; ROS_INFO(“Attaching the object to the hand and removing it from the world.”); planning_scene.world.collision_objects.clear(); planning_scene.world.collision_objects.push_back(remove_object); planning_scene.robot_state.attached_collision_objects.push_back(attached_object); planning_scene_diff_publisher.publish(planning_scene); visual_tools.prompt(“Press ‘next’ in the RvizVisualToolsGui window to continue the demo”);              </p>
<p><strong>8）Detach an object from the robot</strong></p>
<p>分离物体同样需要两步操作：</p>
<ul>
<li>从机器人上分离物体</li>
<li>将物体重新引入环境中</li>
</ul>
<p>​                &#x2F;* First, define the DETACH object message*&#x2F; moveit_msgs::AttachedCollisionObject detach_object; detach_object.object.id &#x3D; “box”; detach_object.link_name &#x3D; “panda_link8”; detach_object.object.operation &#x3D; attached_object.object.REMOVE; &#x2F;* Carry out the DETACH + ADD operation *&#x2F; ROS_INFO(“Detaching the object from the robot and returning it to the world.”); planning_scene.robot_state.attached_collision_objects.clear(); planning_scene.robot_state.attached_collision_objects.push_back(detach_object); planning_scene.robot_state.is_diff &#x3D; true; planning_scene.world.collision_objects.clear(); planning_scene.world.collision_objects.push_back(attached_object.object); planning_scene.is_diff &#x3D; true; planning_scene_diff_publisher.publish(planning_scene); visual_tools.prompt(“Press ‘next’ in the RvizVisualToolsGui window to continue the demo”);              </p>
<p><strong>9）从 collision world 删除物体</strong></p>
<p>​                ROS_INFO(“Removing the object from the world.”); planning_scene.robot_state.attached_collision_objects.clear(); planning_scene.world.collision_objects.clear(); planning_scene.world.collision_objects.push_back(remove_object); planning_scene_diff_publisher.publish(planning_scene);              </p>
<p><strong>3、使用</strong></p>
<p>调试 Planning Scene Monitor</p>
<p>​                rosrun moveit_ros_planning moveit_print_planning_scene_info              </p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>源码分析</category>
        <category>PlanningScene</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>planning scene monitor</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/PlanningScene/planning%20scene%20monitor/</url>
    <content><![CDATA[<p><strong>1、PlanningSceneMonitor</strong> </p>
<p><a href="http://docs.ros.org/noetic/api/moveit_ros_planning/html/classplanning__scene__monitor_1_1PlanningSceneMonitor.html">PlanningSceneMonitor</a> 是维护最新规划场景的推荐接口。RobotState、CurrentStateMonitor、PlanningScene、PlanningSceneMonitor 和 PlanningSceneInterface 之间的关系一开始可能会令人困惑。</p>
<p><strong>1）RobotState</strong></p>
<p>RobotState 是一个机器人的快照。它包含 RobotModel 和一组关节值。</p>
<p><strong>2）CurrentStateMonitor</strong></p>
<p>可将 CurrentStateMonitor(CSM) 视为 RoboState 的 ROS 封装。它订阅 <strong>joint_states</strong> 主题消息，该主题提供关节状态值，并用这些关节值更新其内部的 RobotState。</p>
<p><strong>3）PlanningScene</strong></p>
<p>PlanningScene 是一个 world 的快照，它包括 RobotState 和任意数量的碰撞对象。规划场景可用于<strong>碰撞检查</strong>以及<strong>获取有关环境的信息</strong>。</p>
<p><strong>4）PlanningSceneMonitor</strong></p>
<p>PlanningSceneMonitor 用 ROS 接口封装了一个 PlanningScene，以保持 PlanningScene 是最新的。要访问 PlanningSceneMonitor 的底层 PlanningScene，请使用提供的 <strong>LockedPlanningSceneRW</strong> 和 <strong>LockedPlanningSceneRO</strong> 类。</p>
<p>PlanningSceneMonitor 有以下对象，它们有自己的 ROS 接口来保持规划场景的子组件是最新的:</p>
<ul>
<li>一个 CurrentStateMonitor，用于通过robot_state_subscriber_ 和 tf_buffer_ 跟踪对 RobotState 的更新，以及一个 planning scene subscriber，用于侦听来自其他发布者的规划场景差异</li>
<li>一个 OccupancyGridMapMonitor，用于通过 ROS topic 和 services 跟踪对 OccuancyMap 的更新</li>
</ul>
<p>PlanningSceneMonitor 有以下 subscribers：</p>
<ul>
<li>**collision_object_subscriber_**：监听 <a href="http://docs.ros.org/noetic/api/moveit_msgs/html/msg/CollisionObject.html">CollisionObject</a> 消息主题(默认为 &#x2F;collision_object 主题)，添加&#x2F;删除&#x2F;修改 planning scene 中的 collision objects</li>
<li>**planning_scene_world_subscriber_**：监听 <a href="http://docs.ros.org/noetic/api/moveit_msgs/html/msg/PlanningSceneWorld.html">PlanningSceneWorld</a> 消息主题(默认为 &#x2F;planning_scene_world 主题)，包含 collision object 信息及 octomap 信息。对于保持规划场景监视器的同步很有用</li>
<li>**attached_collision_object_subscriber_**：监听 <a href="http://docs.ros.org/noetic/api/moveit_msgs/html/msg/AttachedCollisionObject.html">AttachedCollisionObject</a> 消息主题(默认为 &#x2F;attached_collision_object 主题)</li>
</ul>
<p>PlanningSceneMonitor 提供以下 services：</p>
<ul>
<li>get_scene_service_：获取完整的 planning scene state。(默认 services 名为 get_planning_scene)</li>
</ul>
<p>PlanningSceneMonitor 初始化：</p>
<ul>
<li><strong>startSceneMonitor</strong>：启动 planning_scene_subscriber_</li>
<li><strong>startWorldGeometryMonitor</strong>：启动 collision_object_subscriber_、planning_scene_world_subscriber_及OccupancyMapMonitor</li>
<li><strong>startStateMonitor</strong>：启动 CurrentStateMonitor及attached_collision_object_subscriber_</li>
<li><strong>startPublishingPlanningScene</strong>：启动另一个线程，发布整个规划场景</li>
<li><strong>providePlanningSceneService</strong>：启动 get_scene_service_</li>
</ul>
<p><strong>5）PlanningSceneInterface</strong></p>
<p>是一个有用的类，用于通过 c++ API 向 MoveGroup 的 PlanningSceneMonitor 发布更新，而无需创建自己的订户和服务客户端。如果没有 MoveGroup 或 MoveItCpp，它可能无法工作。</p>
<p><strong>2、源码分析</strong></p>
<p>分为：</p>
<ul>
<li>scene monitor</li>
<li>world geometry monitor</li>
<li>state monitor</li>
</ul>
<p>更新类型 SceneUpdateType ：</p>
<ul>
<li><strong>UPDATE_NONE</strong>: 0</li>
<li><strong>UPDATE_STATE</strong>: 1,更新检测的状态</li>
<li><strong>UPDATE_TRANSFORMS</strong>: 2</li>
<li><strong>UPDATE_GEOMETRY</strong>: 4, 更新场景的几何图形。包括接收新的octomaps、碰撞对象、附加对象、场景几何等</li>
<li><strong>UPDATE_SCENE</strong>: 更新整个场景：</li>
</ul>
<p>默认主题：</p>
<ul>
<li><strong>DEFAULT_JOINT_STATES_TOPIC</strong>：默认为 &#x2F;joint_state</li>
<li><strong>DEFAULT_ATTACHED_COLLISION_OBJECT_TOPIC</strong>：默认为 &#x2F;attached_collision_object</li>
<li><strong>DEFAULT_COLLISION_OBJECT_TOPIC</strong>：&#x2F;collision_object</li>
<li><strong>DEFAULT_PLANNING_SCENE_WORLD_TOPIC</strong>： &#x2F;planning_scene_world</li>
<li><strong>DEFAULT_PLANNING_SCENE_TOPIC</strong>：&#x2F;planning_scene</li>
<li><strong>DEFAULT_PLANNING_SCENE_SERVICE</strong>：&#x2F;get_planning_scene</li>
<li><strong>MONITORED_PLANNING_SCENE_TOPIC</strong>： monitored_planning_scene</li>
</ul>
<p>move_group 节点中实例化 planning_scene_monitor::<strong>PlanningSceneMonitor</strong> 类对象 <strong>planning_scene_monitor</strong>。然后启动以下 monitor：</p>
<ul>
<li><strong>scene monitor</strong>：planning_scene_monitor-&gt;<strong>startSceneMonitor</strong>()，订阅 scene_topic(默认为 <em>&#x2F;planning_scene</em>) 主题数据</li>
<li><strong>world geometry monitor</strong>：planning_scene_monitor-&gt;<strong>startWorldGeometryMonitor</strong>()，订阅 collision_objects_topic(默认为 <em>&#x2F;collision_object</em>) 及 planning_scene_world_topic(默认为 <em>&#x2F;planning_scene_world</em>) 主题数据，此外，还负责处理 octomap 数据</li>
<li><strong>state monitor</strong>：planning_scene_monitor-&gt;<strong>startStateMonitor</strong>()，通过 current_state_monitor_ 订阅 joint_states_topic(默认为 <em>&#x2F;joint_states</em>)，同时订阅 attached_objects_topic(默认为 <em>&#x2F;attached_collision_object</em>) 主题数据</li>
</ul>
<p>​    <img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/PlanningScene/planning%20scene%20monitor/image-20240917204653825.png" class="" title="image-20240917204653825"></p>
<p>其中，rviz 在加载 MotionPlanning 后会发布 &#x2F;planning_scene 和 &#x2F;attached_collision_object，可在 MotionPlanning -&gt; Scene Object 中配置 scene objects。</p>
<p>双臂规划中，启动两个 move_group(假设分别为 &#x2F;front_arm&#x2F;move_group 和 &#x2F;rear_arm&#x2F;move_group)，会发现这两个节点默认订阅 &#x2F;front_arm&#x2F;joint_states 和 &#x2F;rear_arm&#x2F;joint_states 主题数据，而这两个主题分别只发布了各自机械臂关节的状态信息，导致 moveit 在规划时，只会考虑另一条机械臂在  URDF 文件中的默认位姿，而不会考虑实时状态。此时需将 move_group 订阅的 joint_states 映射到 &#x2F;joint_states</p>
  <img src="/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/PlanningScene/planning%20scene%20monitor/image-20240917204642203.png" class="" title="image-20240917204642203">
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>源码分析</category>
        <category>PlanningScene</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
  <entry>
    <title>planning scene</title>
    <url>/2024/09/17/%E6%9C%BA%E6%A2%B0%E8%87%82/MoveIt/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/PlanningScene/planning%20scene/</url>
    <content><![CDATA[<p><strong>1、Planning scene</strong></p>
<p>Planning scene 用来表示机器人所处的环境，同时存储了机器人本身的状态。</p>
<p>PlanningScene 类提供了用于碰撞(collision)检查和约束(constraint)检查的主接口。</p>
<p>可使用 RobotModel 或 URDF 和 SRDF 来配置 PlanningScene。但这并不是实例化 <a href="http://docs.ros.org/en/melodic/api/moveit_tutorials/html/doc/planning_scene/planning_scene_tutorial.html">PlanningScene</a> 的推荐方式。推荐使用 <strong>PlanningSceneMonitor</strong> 来创建和维护当前 planning scene，它使用机器人关节和其它传感器的数据。</p>
<p>本例中，使用 PlanningScene，但该方法仅用于演示。</p>
<p>​                robot_model_loader::RobotModelLoader robot_model_loader(“robot_description”); robot_model::RobotModelPtr kinematic_model &#x3D; robot_model_loader.getModel(); planning_scene::PlanningScene planning_scene(kinematic_model);              </p>
<p>利用参数服务器上的 robot_description 参数来定义一个 planning_scene。</p>
<p><strong>2、Collision Checking</strong></p>
<p><strong>1）self-collision checking</strong></p>
<p>要做的第一件事是检查机器人在当前状态下是否处于自碰撞状态，即机器人当前的配置是否会导致机器人的各个部件相互碰撞。为此，将构造一个 <strong>CollisionRequest</strong> 对象和一个 <strong>CollisionResult</strong> 对象，并将它们传递给碰撞检查函数。注意，结果中包含了机器人是否处于自碰撞状态的结果。自碰撞检查使用一个 unpadded 的机器人，即直接使用 URDF 中提供的碰撞网格，没有额外的填充。</p>
<p>​                collision_detection::CollisionRequest collision_request; collision_detection::CollisionResult collision_result; planning_scene.checkSelfCollision(collision_request, collision_result); ROS_INFO_STREAM(“Test 1: Current state is “ &lt;&lt; (collision_result.collision ? “in” : “not in”) &lt;&lt; “ self collision”);              </p>
<p><strong>2）改变状态</strong></p>
<p>改变机器人的当前状态。Planning scene 在内部维护当前状态。可以得到它的一个引用，然后改变它，然后重新检查碰撞。需要特别注意的是，在发出新的碰撞检查请求之前，需要清除 collision_result。</p>
<p>​                robot_state::RobotState&amp; current_state &#x3D; planning_scene.getCurrentStateNonConst(); current_state.setToRandomPositions(); collision_result.clear(); planning_scene.checkSelfCollision(collision_request, collision_result); ROS_INFO_STREAM(“Test 2: Current state is “ &lt;&lt; (collision_result.collision ? “in” : “not in”) &lt;&lt; “ self collision”);              </p>
<p>从何获得当前状态？</p>
<p><strong>3）Checking for a group</strong></p>
<p>现在，对 hand 进行碰撞检查，即：将检查 hand 与机器人身体的其他部位是否有碰撞。可以通过将组名 “hand” 添加到碰撞请求中来特别地进行请求。</p>
<p>​                collision_request.group_name &#x3D; “hand”; current_state.setToRandomPositions(); collision_result.clear(); planning_scene.checkSelfCollision(collision_request, collision_result); ROS_INFO_STREAM(“Test 3: Current state is “ &lt;&lt; (collision_result.collision ? “in” : “not in”) &lt;&lt; “ self collision”);              </p>
<p><strong>4）Getting Contact Information</strong></p>
<p>首先，手动设置机械臂到一个位置，假设在该位置确知会发生自碰撞。请注意，以 Panda 为例，这种状态现在实际上超出了 Panda 的 joint 限制，也可以直接检查。</p>
<p>​                std::vector<double> joint_values &#x3D; { 0.0, 0.0, 0.0, -2.9, 0.0, 1.4, 0.0 }; const robot_model::JointModelGroup* joint_model_group &#x3D; current_state.getJointModelGroup(“panda_arm”); current_state.setJointGroupPositions(joint_model_group, joint_values); ROS_INFO_STREAM(“Test 4: Current state is “                &lt;&lt; (current_state.satisfiesBounds(joint_model_group) ? “valid” : “not valid”));              </p>
<p>现在，可以得到可能发生在给定位置的任何碰撞的联系信息。可以通过在碰撞请求中填充适当的字段并指定要返回的最大联系数量来请求联系信息。</p>
<p>​                collision_request.contacts &#x3D; true; collision_request.max_contacts &#x3D; 1000; … collision_result.clear(); planning_scene.checkSelfCollision(collision_request, collision_result); ROS_INFO_STREAM(“Test 5: Current state is “ &lt;&lt; (collision_result.collision ? “in” : “not in”) &lt;&lt; “ self collision”); collision_detection::CollisionResult::ContactMap::const_iterator it; for (it &#x3D; collision_result.contacts.begin(); it !&#x3D; collision_result.contacts.end(); ++it) {  ROS_INFO(“Contact between: %s and %s”, it-&gt;first.first.c_str(), it-&gt;first.second.c_str()); }              </p>
<p><strong>5）Modifying the Allowed Collision Matrix</strong></p>
<p>AllowedCollisionMatrix(ACM) 提供了一种机制来告诉 collision world 忽略某些对象之间的碰撞：包括 robot 的部件和 world 中的对象。可以告诉 collision 检查器忽略上面报告的 links 之间的所有碰撞，也就是说，即使这些 links 实际上是在碰撞中，collision 检查器也会忽略这些碰撞，返回 not in collision。</p>
<p>还请注意，在本例中还介绍了如何复制允许的 collision matrix 和当前状态，并将它们传递给 collision checking 函数。</p>
<p>​                collision_detection::AllowedCollisionMatrix acm &#x3D; planning_scene.getAllowedCollisionMatrix(); robot_state::RobotState copied_state &#x3D; planning_scene.getCurrentState(); collision_detection::CollisionResult::ContactMap::const_iterator it2; for (it2 &#x3D; collision_result.contacts.begin(); it2 !&#x3D; collision_result.contacts.end(); ++it2) {  acm.setEntry(it2-&gt;first.first, it2-&gt;first.second, true); } collision_result.clear(); planning_scene.checkSelfCollision(collision_request, collision_result, copied_state, acm); ROS_INFO_STREAM(“Test 6: Current state is “ &lt;&lt; (collision_result.collision ? “in” : “not in”) &lt;&lt; “ self collision”);              </p>
<p><strong>6）Full Collision Checking</strong></p>
<p>当检查自冲突时，可以使用checkCollision函数，它将检查自冲突和与环境的冲突[当前是空的]。这是一组冲突检查功能，将最常用的planner。注意，与环境的碰撞检查将使用padded版本的robot。填充物有助于使robot远离环境中的障碍物。</p>
<p>虽然已经检查了自碰撞，但可以使用 checkCollision 函数来代替，它将检查自碰撞和与环境的碰撞(目前为空)。这是一组在规划程序中最常使用冲突检查函数。请注意，<strong>与环境的碰撞检查将使用 padded 版的机器人</strong>。填充有助于使机器人远离环境中的障碍物</p>
<p>​                collision_result.clear(); planning_scene.checkCollision(collision_request, collision_result, copied_state, acm); ROS_INFO_STREAM(“Test 7: Current state is “ &lt;&lt; (collision_result.collision ? “in” : “not in”) &lt;&lt; “ self collision”);              </p>
<p><strong>3、Constraint Checking</strong></p>
<p>PlanningScene 类还包括易于使用的检查约束的函数调用。约束可以是两种类型:</p>
<ul>
<li>从 KinematicConstraint 集中选择的约束:即JointConstraint, PositionConstraint, OrientationConstraint和VisibilityConstraint</li>
<li>通过回调指定的用户定义约束</li>
</ul>
<p>先看一个带有简单的 KinematicConstraint 的例子。</p>
<p><strong>1）Checking Kinematic Constraints</strong></p>
<p>首先在 Panda robot 的 panda_arm 组的末端执行器上定义一个简单的位置和方向约束。注意使用方便的函数来填充约束(这些函数可以在 utils.h 文件中找到，该文件来自 moveit_core 中的 kinematic_constraints 目录)。</p>
<p>​                std::string end_effector_name &#x3D; joint_model_group-&gt;getLinkModelNames().back(); geometry_msgs::PoseStamped desired_pose; desired_pose.pose.orientation.w &#x3D; 1.0; desired_pose.pose.position.x &#x3D; 0.3; desired_pose.pose.position.y &#x3D; -0.185; desired_pose.pose.position.z &#x3D; 0.5; desired_pose.header.frame_id &#x3D; “panda_link0”; moveit_msgs::Constraints goal_constraint &#x3D;    kinematic_constraints::constructGoalConstraints(end_effector_name, desired_pose);              </p>
<p>然后可以使用 PlanningScene 类中的 <strong>isStateConstrained</strong> 函数检查这个约束的状态</p>
<p>​                copied_state.setToRandomPositions(); copied_state.update(); bool constrained &#x3D; planning_scene.isStateConstrained(copied_state, goal_constraint); ROS_INFO_STREAM(“Test 8: Random state is “ &lt;&lt; (constrained ? “constrained” : “not constrained”));              </p>
<p>有一种更有效的检查约束的方法(当需要反复检查相同的约束时，例如在 planner 中)。首先构造一个 KinematicConstraintSet 来对 ROS Constraints 消息进行预处理，并对其进行快速处理。</p>
<p>​                kinematic_constraints::KinematicConstraintSet kinematic_constraint_set(kinematic_model); kinematic_constraint_set.add(goal_constraint, planning_scene.getTransforms()); bool constrained_2 &#x3D; planning_scene.isStateConstrained(copied_state, kinematic_constraint_set); ROS_INFO_STREAM(“Test 9: Random state is “ &lt;&lt; (constrained_2 ? “constrained” : “not constrained”));              </p>
<p>使用 KinematicConstraintSet 类有一个直接的方法来做到这一点</p>
<p>​                kinematic_constraints::ConstraintEvaluationResult constraint_eval_result &#x3D;    kinematic_constraint_set.decide(copied_state); ROS_INFO_STREAM(“Test 10: Random state is “ &lt;&lt; (constraint_eval_result.satisfied ? “constrained” : “not constrained”));              </p>
<p><strong>3）User-defined constraints</strong></p>
<p>用户定义的约束也可以指定到 PlanningScene 类。这是通过使用 setStateFeasibilityPredicate 函数指定一个回调来完成的。</p>
<p>下面是一个简单的用户定义回调示例，检查 Panda 机器人的 “panda_joint1” 是正还是负:</p>
<p>​                bool stateFeasibilityTestExample(const robot_state::RobotState&amp; kinematic_state, bool verbose) {  const double* joint_values &#x3D; kinematic_state.getJointPositions(“panda_joint1”);  return (joint_values[0] &gt; 0.0); }              </p>
<p>然后，无论何时调用 <strong>isStateFeasible</strong>，这个用户定义的回调都会被调用</p>
<p>​                planning_scene.setStateFeasibilityPredicate(stateFeasibilityTestExample); bool state_feasible &#x3D; planning_scene.isStateFeasible(copied_state); ROS_INFO_STREAM(“Test 11: Random state is “ &lt;&lt; (state_feasible ? “feasible” : “not feasible”));              </p>
<p>无论何时调用 isStateValid，都会执行三个检查：</p>
<ul>
<li>冲突检查</li>
<li>约束检查</li>
<li>使用用户定义的回调进行可行性检查</li>
</ul>
<p>​                bool state_valid &#x3D; planning_scene.isStateValid(copied_state, kinematic_constraint_set, “panda_arm”); ROS_INFO_STREAM(“Test 12: Random state is “ &lt;&lt; (state_valid ? “valid” : “not valid”));              </p>
<p>请注意，所有的 planners 均可通过 MoveIt 和 OMPL 使用用户定义的回调执行碰撞检查、约束检查和可行性检查。</p>
<p><strong>4、运行</strong></p>
<p>​                roslaunch moveit_tutorials planning_scene_tutorial.launch              </p>
]]></content>
      <categories>
        <category>机械臂</category>
        <category>MoveIt</category>
        <category>源码分析</category>
        <category>PlanningScene</category>
      </categories>
      <tags>
        <tag>机械臂</tag>
        <tag>MoveIt</tag>
      </tags>
  </entry>
</search>
